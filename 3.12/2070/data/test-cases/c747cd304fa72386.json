{"uid":"c747cd304fa72386","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1725347314631,"stop":1725347316989,"duration":2358},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fcea8f1a480>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fcea9bf2450>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7fcea9d37470>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fcea8f1a480>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fcea9bf2450>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7fcea9d37470>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1725347314631,"stop":1725347314631,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725347314632,"stop":1725347316989,"duration":2357},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1e06d1bb64d20b1c","name":"stdout","source":"1e06d1bb64d20b1c.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1424-965"},{"name":"thread","value":"2679-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":122,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":122},"items":[{"uid":"5ec0bac7f860aa7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2069//#testresult/5ec0bac7f860aa7e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725322484407,"stop":1725322486179,"duration":1772}},{"uid":"dae5f4816c42db73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2068//#testresult/dae5f4816c42db73","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725316504351,"stop":1725316505909,"duration":1558}},{"uid":"a7dadea63d237518","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2066//#testresult/a7dadea63d237518","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725313282982,"stop":1725313284842,"duration":1860}},{"uid":"beaaf7a74e26d218","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2064//#testresult/beaaf7a74e26d218","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725311106321,"stop":1725311107864,"duration":1543}},{"uid":"cda88fc8ea832267","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2060//#testresult/cda88fc8ea832267","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725308375589,"stop":1725308376587,"duration":998}},{"uid":"c76423a810e47dfe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2059//#testresult/c76423a810e47dfe","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725308198138,"stop":1725308198749,"duration":611}},{"uid":"8119e390cecce673","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2054//#testresult/8119e390cecce673","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725236037684,"stop":1725236038431,"duration":747}},{"uid":"f04d9a8d62364883","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2053//#testresult/f04d9a8d62364883","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725149663894,"stop":1725149664682,"duration":788}},{"uid":"633038bb7d4a6c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2052//#testresult/633038bb7d4a6c3","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725063346989,"stop":1725063347684,"duration":695}},{"uid":"42342981f11f6af8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2051//#testresult/42342981f11f6af8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724976810738,"stop":1724976811459,"duration":721}},{"uid":"11a963c67229330e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2049//#testresult/11a963c67229330e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724890523284,"stop":1724890524485,"duration":1201}},{"uid":"4fd3d1518b70dae9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2048//#testresult/4fd3d1518b70dae9","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724804021072,"stop":1724804021757,"duration":685}},{"uid":"8f7b62c71e4677d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/8f7b62c71e4677d8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724717639365,"stop":1724717640526,"duration":1161}},{"uid":"845aa39981d12542","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/845aa39981d12542","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724631288972,"stop":1724631290034,"duration":1062}},{"uid":"5c8bf069b9820487","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/5c8bf069b9820487","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724544704684,"stop":1724544705515,"duration":831}},{"uid":"c52eeb30732c06de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2037//#testresult/c52eeb30732c06de","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724458412219,"stop":1724458412985,"duration":766}},{"uid":"557a8cbcca10ac8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2036//#testresult/557a8cbcca10ac8b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724372001870,"stop":1724372002831,"duration":961}},{"uid":"cabaff41414d9719","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2034//#testresult/cabaff41414d9719","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724285595179,"stop":1724285596269,"duration":1090}},{"uid":"96f778c67972556d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2033//#testresult/96f778c67972556d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724199196722,"stop":1724199197380,"duration":658}},{"uid":"9e288a8896b46159","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2032//#testresult/9e288a8896b46159","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724112719892,"stop":1724112720976,"duration":1084}}]},"tags":[]},"source":"c747cd304fa72386.json","parameterValues":["GlasgowCityCouncil"]}