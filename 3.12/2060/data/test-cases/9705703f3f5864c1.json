{"uid":"9705703f3f5864c1","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1725309171105,"stop":1725309198850,"duration":27745},"status":"failed","statusMessage":"ValueError: time data 'September' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f376122a980>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3761f19610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'September', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'September' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'September' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f376122a980>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3761f19610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'September', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'September' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1725309171105,"stop":1725309171106,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725309171106,"stop":1725309198850,"duration":27744},"status":"failed","statusMessage":"time data 'September' does not match format '%d %B'","statusTrace":"ValueError: time data 'September' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f6b3b489c70c2482","name":"stdout","source":"f6b3b489c70c2482.txt","type":"text/plain","size":118}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az698-412"},{"name":"thread","value":"2676-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":37,"broken":0,"skipped":0,"passed":81,"unknown":0,"total":118},"items":[{"uid":"f8e6a9bffe81609e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2059//#testresult/f8e6a9bffe81609e","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725308693898,"stop":1725308715514,"duration":21616}},{"uid":"cfe80870a09618a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2054//#testresult/cfe80870a09618a3","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725237192677,"stop":1725237198281,"duration":5604}},{"uid":"73cb77d86375aba0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2053//#testresult/73cb77d86375aba0","status":"passed","time":{"start":1725150727720,"stop":1725150765565,"duration":37845}},{"uid":"d3d4bd967321336c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2052//#testresult/d3d4bd967321336c","status":"passed","time":{"start":1725064156896,"stop":1725064365741,"duration":208845}},{"uid":"e15199380c89543b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2051//#testresult/e15199380c89543b","status":"passed","time":{"start":1724977794268,"stop":1724977822915,"duration":28647}},{"uid":"6882836402b2d1ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2049//#testresult/6882836402b2d1ab","status":"passed","time":{"start":1724891122297,"stop":1724891155851,"duration":33554}},{"uid":"e2df10bf9fbedef0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2048//#testresult/e2df10bf9fbedef0","status":"passed","time":{"start":1724804701834,"stop":1724804728982,"duration":27148}},{"uid":"9e475d2c0f3eb785","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/9e475d2c0f3eb785","status":"passed","time":{"start":1724718266103,"stop":1724718304407,"duration":38304}},{"uid":"c72495952d2a2c1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/c72495952d2a2c1c","status":"failed","statusDetails":"ValueError: time data 'August' does not match format '%d %B'","time":{"start":1724631907776,"stop":1724631947653,"duration":39877}},{"uid":"92bf9adfd1416211","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/92bf9adfd1416211","status":"passed","time":{"start":1724545492076,"stop":1724545517202,"duration":25126}},{"uid":"4195b1f5c3ac2306","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2037//#testresult/4195b1f5c3ac2306","status":"passed","time":{"start":1724459149090,"stop":1724459171153,"duration":22063}},{"uid":"2e2a1434c96024c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2036//#testresult/2e2a1434c96024c2","status":"passed","time":{"start":1724372676184,"stop":1724372689177,"duration":12993}},{"uid":"84285c2ff9d95ead","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2034//#testresult/84285c2ff9d95ead","status":"passed","time":{"start":1724286249061,"stop":1724286277360,"duration":28299}},{"uid":"e52e737790c823f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2033//#testresult/e52e737790c823f6","status":"passed","time":{"start":1724199844392,"stop":1724199869353,"duration":24961}},{"uid":"87fdeba6e070c2b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2032//#testresult/87fdeba6e070c2b2","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55892fc556aa <unknown>\n#1 0x55892f926600 <unknown>\n#2 0x55892f975bcb <unknown>\n#3 0x55892f975eb1 <unknown>\n#4 0x55892f9b9b24 <unknown>\n#5 0x55892f9988cd <unknown>\n#6 0x55892f9b704a <unknown>\n#7 0x55892f998643 <unknown>\n#8 0x55892f968d31 <unknown>\n#9 0x55892f96979e <unknown>\n#10 0x55892fc1d23b <unknown>\n#11 0x55892fc211d2 <unknown>\n#12 0x55892fc0a5f5 <unknown>\n#13 0x55892fc21d62 <unknown>\n#14 0x55892fbef23f <unknown>\n#15 0x55892fc44e48 <unknown>\n#16 0x55892fc45020 <unknown>\n#17 0x55892fc5447c <unknown>\n#18 0x7f71983d9a94 <unknown>\n#19 0x7f7198466a34 __clone","time":{"start":1724113567903,"stop":1724113778340,"duration":210437}},{"uid":"145c1b44349f6989","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2031//#testresult/145c1b44349f6989","status":"failed","statusDetails":"ValueError: time data 'August' does not match format '%d %B'","time":{"start":1724027036252,"stop":1724027071755,"duration":35503}},{"uid":"dc08bfde036fbb1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2030//#testresult/dc08bfde036fbb1e","status":"passed","time":{"start":1723940670314,"stop":1723940708186,"duration":37872}},{"uid":"43c02abc2c45fdeb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2029//#testresult/43c02abc2c45fdeb","status":"passed","time":{"start":1723854266484,"stop":1723854315254,"duration":48770}},{"uid":"a9a10929f854087a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/a9a10929f854087a","status":"passed","time":{"start":1723767925503,"stop":1723767937093,"duration":11590}},{"uid":"4dfca0fecaec1eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/4dfca0fecaec1eb","status":"passed","time":{"start":1723681054857,"stop":1723681070504,"duration":15647}}]},"tags":[]},"source":"9705703f3f5864c1.json","parameterValues":["WestBerkshireCouncil"]}