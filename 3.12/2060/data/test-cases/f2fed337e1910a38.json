{"uid":"f2fed337e1910a38","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1725309151661,"stop":1725309171028,"duration":19367},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.113)\nStacktrace:\n#0 0x561317baa8da <unknown>\n#1 0x561317878c91 <unknown>\n#2 0x5613178c2618 <unknown>\n#3 0x5613178c0a8d <unknown>\n#4 0x5613178ed492 <unknown>\n#5 0x5613178bce89 <unknown>\n#6 0x5613178ed65e <unknown>\n#7 0x56131790b9c6 <unknown>\n#8 0x5613178ed233 <unknown>\n#9 0x5613178bb093 <unknown>\n#10 0x5613178bc09e <unknown>\n#11 0x561317b71b3b <unknown>\n#12 0x561317b75af1 <unknown>\n#13 0x561317b5d705 <unknown>\n#14 0x561317b76662 <unknown>\n#15 0x561317b428df <unknown>\n#16 0x561317b996d8 <unknown>\n#17 0x561317b998a2 <unknown>\n#18 0x561317ba96cc <unknown>\n#19 0x7ff695da1a94 <unknown>\n#20 0x7ff695e2ea34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f376122a980>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3761f19610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:67: in parse_data\n    dropdown_search.send_keys(Keys.RETURN)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3760372ab0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x561317ba96cc \\\\u003Cunknown>\\\\n#19 0x7ff695da1a94 \\\\u003Cunknown>\\\\n#20 0x7ff695e2ea34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.113)\nE       Stacktrace:\nE       #0 0x561317baa8da <unknown>\nE       #1 0x561317878c91 <unknown>\nE       #2 0x5613178c2618 <unknown>\nE       #3 0x5613178c0a8d <unknown>\nE       #4 0x5613178ed492 <unknown>\nE       #5 0x5613178bce89 <unknown>\nE       #6 0x5613178ed65e <unknown>\nE       #7 0x56131790b9c6 <unknown>\nE       #8 0x5613178ed233 <unknown>\nE       #9 0x5613178bb093 <unknown>\nE       #10 0x5613178bc09e <unknown>\nE       #11 0x561317b71b3b <unknown>\nE       #12 0x561317b75af1 <unknown>\nE       #13 0x561317b5d705 <unknown>\nE       #14 0x561317b76662 <unknown>\nE       #15 0x561317b428df <unknown>\nE       #16 0x561317b996d8 <unknown>\nE       #17 0x561317b998a2 <unknown>\nE       #18 0x561317ba96cc <unknown>\nE       #19 0x7ff695da1a94 <unknown>\nE       #20 0x7ff695e2ea34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.113)\nStacktrace:\n#0 0x561317baa8da <unknown>\n#1 0x561317878c91 <unknown>\n#2 0x5613178c2618 <unknown>\n#3 0x5613178c0a8d <unknown>\n#4 0x5613178ed492 <unknown>\n#5 0x5613178bce89 <unknown>\n#6 0x5613178ed65e <unknown>\n#7 0x56131790b9c6 <unknown>\n#8 0x5613178ed233 <unknown>\n#9 0x5613178bb093 <unknown>\n#10 0x5613178bc09e <unknown>\n#11 0x561317b71b3b <unknown>\n#12 0x561317b75af1 <unknown>\n#13 0x561317b5d705 <unknown>\n#14 0x561317b76662 <unknown>\n#15 0x561317b428df <unknown>\n#16 0x561317b996d8 <unknown>\n#17 0x561317b998a2 <unknown>\n#18 0x561317ba96cc <unknown>\n#19 0x7ff695da1a94 <unknown>\n#20 0x7ff695e2ea34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f376122a980>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3761f19610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:67: in parse_data\n    dropdown_search.send_keys(Keys.RETURN)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3760372ab0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x561317ba96cc \\\\u003Cunknown>\\\\n#19 0x7ff695da1a94 \\\\u003Cunknown>\\\\n#20 0x7ff695e2ea34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.113)\nE       Stacktrace:\nE       #0 0x561317baa8da <unknown>\nE       #1 0x561317878c91 <unknown>\nE       #2 0x5613178c2618 <unknown>\nE       #3 0x5613178c0a8d <unknown>\nE       #4 0x5613178ed492 <unknown>\nE       #5 0x5613178bce89 <unknown>\nE       #6 0x5613178ed65e <unknown>\nE       #7 0x56131790b9c6 <unknown>\nE       #8 0x5613178ed233 <unknown>\nE       #9 0x5613178bb093 <unknown>\nE       #10 0x5613178bc09e <unknown>\nE       #11 0x561317b71b3b <unknown>\nE       #12 0x561317b75af1 <unknown>\nE       #13 0x561317b5d705 <unknown>\nE       #14 0x561317b76662 <unknown>\nE       #15 0x561317b428df <unknown>\nE       #16 0x561317b996d8 <unknown>\nE       #17 0x561317b998a2 <unknown>\nE       #18 0x561317ba96cc <unknown>\nE       #19 0x7ff695da1a94 <unknown>\nE       #20 0x7ff695e2ea34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council","time":{"start":1725309151662,"stop":1725309151662,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725309151662,"stop":1725309171028,"duration":19366},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome=128.0.6613.113)\nStacktrace:\n#0 0x561317baa8da <unknown>\n#1 0x561317878c91 <unknown>\n#2 0x5613178c2618 <unknown>\n#3 0x5613178c0a8d <unknown>\n#4 0x5613178ed492 <unknown>\n#5 0x5613178bce89 <unknown>\n#6 0x5613178ed65e <unknown>\n#7 0x56131790b9c6 <unknown>\n#8 0x5613178ed233 <unknown>\n#9 0x5613178bb093 <unknown>\n#10 0x5613178bc09e <unknown>\n#11 0x561317b71b3b <unknown>\n#12 0x561317b75af1 <unknown>\n#13 0x561317b5d705 <unknown>\n#14 0x561317b76662 <unknown>\n#15 0x561317b428df <unknown>\n#16 0x561317b996d8 <unknown>\n#17 0x561317b998a2 <unknown>\n#18 0x561317ba96cc <unknown>\n#19 0x7ff695da1a94 <unknown>\n#20 0x7ff695e2ea34 __clone\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.113)\nStacktrace:\n#0 0x561317baa8da <unknown>\n#1 0x561317878c91 <unknown>\n#2 0x5613178c2618 <unknown>\n#3 0x5613178c0a8d <unknown>\n#4 0x5613178ed492 <unknown>\n#5 0x5613178bce89 <unknown>\n#6 0x5613178ed65e <unknown>\n#7 0x56131790b9c6 <unknown>\n#8 0x5613178ed233 <unknown>\n#9 0x5613178bb093 <unknown>\n#10 0x5613178bc09e <unknown>\n#11 0x561317b71b3b <unknown>\n#12 0x561317b75af1 <unknown>\n#13 0x561317b5d705 <unknown>\n#14 0x561317b76662 <unknown>\n#15 0x561317b428df <unknown>\n#16 0x561317b996d8 <unknown>\n#17 0x561317b998a2 <unknown>\n#18 0x561317ba96cc <unknown>\n#19 0x7ff695da1a94 <unknown>\n#20 0x7ff695e2ea34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7f0f684183bba0b0","name":"stdout","source":"7f0f684183bba0b0.txt","type":"text/plain","size":743}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az698-412"},{"name":"thread","value":"2676-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":92,"unknown":0,"total":100},"items":[{"uid":"b613aca567a6b275","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2059//#testresult/b613aca567a6b275","status":"passed","time":{"start":1725308671309,"stop":1725308691304,"duration":19995}},{"uid":"2575f8e3b3f23e93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2054//#testresult/2575f8e3b3f23e93","status":"passed","time":{"start":1725237048129,"stop":1725237084404,"duration":36275}},{"uid":"4ffd287a403ecbf1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2053//#testresult/4ffd287a403ecbf1","status":"passed","time":{"start":1725150717009,"stop":1725150746284,"duration":29275}},{"uid":"472822396377357","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2052//#testresult/472822396377357","status":"passed","time":{"start":1725064358404,"stop":1725064404604,"duration":46200}},{"uid":"b73310569ac00756","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2051//#testresult/b73310569ac00756","status":"passed","time":{"start":1724977805096,"stop":1724977850213,"duration":45117}},{"uid":"7a2020088b1a61a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2049//#testresult/7a2020088b1a61a3","status":"passed","time":{"start":1724891114444,"stop":1724891137952,"duration":23508}},{"uid":"8c7c6e32bf03b414","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2048//#testresult/8c7c6e32bf03b414","status":"passed","time":{"start":1724804687329,"stop":1724804722374,"duration":35045}},{"uid":"b2bb8fb84acf4ebe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/b2bb8fb84acf4ebe","status":"passed","time":{"start":1724718259413,"stop":1724718297986,"duration":38573}},{"uid":"8cfc23de90bb878f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/8cfc23de90bb878f","status":"passed","time":{"start":1724631898299,"stop":1724631941645,"duration":43346}},{"uid":"92e9e98fc6954781","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/92e9e98fc6954781","status":"passed","time":{"start":1724545434445,"stop":1724545504443,"duration":69998}},{"uid":"9f0a85f6d8ec2475","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2037//#testresult/9f0a85f6d8ec2475","status":"passed","time":{"start":1724459144304,"stop":1724459165560,"duration":21256}},{"uid":"25edbe6fde361525","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2036//#testresult/25edbe6fde361525","status":"passed","time":{"start":1724372681915,"stop":1724372707997,"duration":26082}},{"uid":"b38d383af80d2fdb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2034//#testresult/b38d383af80d2fdb","status":"passed","time":{"start":1724286221300,"stop":1724286244538,"duration":23238}},{"uid":"e728d4206caeb06f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2033//#testresult/e728d4206caeb06f","status":"passed","time":{"start":1724199815006,"stop":1724199841871,"duration":26865}},{"uid":"ae917087500d460","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2032//#testresult/ae917087500d460","status":"passed","time":{"start":1724113736147,"stop":1724113811421,"duration":75274}},{"uid":"90cae97e2fb5f2e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2031//#testresult/90cae97e2fb5f2e3","status":"passed","time":{"start":1724027030695,"stop":1724027065790,"duration":35095}},{"uid":"a85506219d7ea190","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2030//#testresult/a85506219d7ea190","status":"passed","time":{"start":1723940655289,"stop":1723940701583,"duration":46294}},{"uid":"9ae87f2b2c6cdc5e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2029//#testresult/9ae87f2b2c6cdc5e","status":"passed","time":{"start":1723854309390,"stop":1723854342951,"duration":33561}},{"uid":"8734e0c4bdfb2adf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/8734e0c4bdfb2adf","status":"passed","time":{"start":1723767901606,"stop":1723767919148,"duration":17542}},{"uid":"42cc990ff20c9f61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/42cc990ff20c9f61","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x561c28d7c6aa <unknown>\n#1 0x561c28a4d600 <unknown>\n#2 0x561c28a9cbcb <unknown>\n#3 0x561c28a9ceb1 <unknown>\n#4 0x561c28ae0b24 <unknown>\n#5 0x561c28abf8cd <unknown>\n#6 0x561c28ade04a <unknown>\n#7 0x561c28abf643 <unknown>\n#8 0x561c28a8fd31 <unknown>\n#9 0x561c28a9079e <unknown>\n#10 0x561c28d4423b <unknown>\n#11 0x561c28d481d2 <unknown>\n#12 0x561c28d315f5 <unknown>\n#13 0x561c28d48d62 <unknown>\n#14 0x561c28d1623f <unknown>\n#15 0x561c28d6be48 <unknown>\n#16 0x561c28d6c020 <unknown>\n#17 0x561c28d7b47c <unknown>\n#18 0x7fd2b32dda94 <unknown>\n#19 0x7fd2b336aa34 __clone","time":{"start":1723680981771,"stop":1723681050558,"duration":68787}}]},"tags":[]},"source":"f2fed337e1910a38.json","parameterValues":["WalthamForest"]}