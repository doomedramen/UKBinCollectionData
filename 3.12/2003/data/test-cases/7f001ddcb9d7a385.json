{"uid":"7f001ddcb9d7a385","name":"Validate Council Output [BuckinghamshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d3931a358fdfe26e1ace17c1805a29ca","time":{"start":1722556883296,"stop":1722557018069,"duration":134773},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55f2aff3f6ba <unknown>\n#1 0x55f2afc0f730 <unknown>\n#2 0x55f2afc07761 <unknown>\n#3 0x55f2afbf78f9 <unknown>\n#4 0x55f2afbf9684 <unknown>\n#5 0x55f2afbf7bc5 <unknown>\n#6 0x55f2afbf7426 <unknown>\n#7 0x55f2afbf731e <unknown>\n#8 0x55f2afbf564c <unknown>\n#9 0x55f2afbf59ca <unknown>\n#10 0x55f2afc12051 <unknown>\n#11 0x55f2afca0cc5 <unknown>\n#12 0x55f2afc81a52 <unknown>\n#13 0x55f2afca01ca <unknown>\n#14 0x55f2afc817f3 <unknown>\n#15 0x55f2afc51ec9 <unknown>\n#16 0x55f2afc5291e <unknown>\n#17 0x55f2aff059eb <unknown>\n#18 0x55f2aff09972 <unknown>\n#19 0x55f2afef2e15 <unknown>\n#20 0x55f2aff0a502 <unknown>\n#21 0x55f2afed7d2f <unknown>\n#22 0x55f2aff2e578 <unknown>\n#23 0x55f2aff2e750 <unknown>\n#24 0x55f2aff3e48c <unknown>\n#25 0x7f7da8cd9a94 <unknown>\n#26 0x7f7da8d66a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fd03a1256c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuckinghamshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd04c283f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/BuckinghamshireCouncil.py:47: in parse_data\n    driver.get(page)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd0459b3dd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55f2aff3e48c \\\\u003Cunknown>\\\\n#25 0x7f7da8cd9a94 \\\\u003Cunknown>\\\\n#26 0x7f7da8d66a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.72)\nE       Stacktrace:\nE       #0 0x55f2aff3f6ba <unknown>\nE       #1 0x55f2afc0f730 <unknown>\nE       #2 0x55f2afc07761 <unknown>\nE       #3 0x55f2afbf78f9 <unknown>\nE       #4 0x55f2afbf9684 <unknown>\nE       #5 0x55f2afbf7bc5 <unknown>\nE       #6 0x55f2afbf7426 <unknown>\nE       #7 0x55f2afbf731e <unknown>\nE       #8 0x55f2afbf564c <unknown>\nE       #9 0x55f2afbf59ca <unknown>\nE       #10 0x55f2afc12051 <unknown>\nE       #11 0x55f2afca0cc5 <unknown>\nE       #12 0x55f2afc81a52 <unknown>\nE       #13 0x55f2afca01ca <unknown>\nE       #14 0x55f2afc817f3 <unknown>\nE       #15 0x55f2afc51ec9 <unknown>\nE       #16 0x55f2afc5291e <unknown>\nE       #17 0x55f2aff059eb <unknown>\nE       #18 0x55f2aff09972 <unknown>\nE       #19 0x55f2afef2e15 <unknown>\nE       #20 0x55f2aff0a502 <unknown>\nE       #21 0x55f2afed7d2f <unknown>\nE       #22 0x55f2aff2e578 <unknown>\nE       #23 0x55f2aff2e750 <unknown>\nE       #24 0x55f2aff3e48c <unknown>\nE       #25 0x7f7da8cd9a94 <unknown>\nE       #26 0x7f7da8d66a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55f2aff3f6ba <unknown>\n#1 0x55f2afc0f730 <unknown>\n#2 0x55f2afc07761 <unknown>\n#3 0x55f2afbf78f9 <unknown>\n#4 0x55f2afbf9684 <unknown>\n#5 0x55f2afbf7bc5 <unknown>\n#6 0x55f2afbf7426 <unknown>\n#7 0x55f2afbf731e <unknown>\n#8 0x55f2afbf564c <unknown>\n#9 0x55f2afbf59ca <unknown>\n#10 0x55f2afc12051 <unknown>\n#11 0x55f2afca0cc5 <unknown>\n#12 0x55f2afc81a52 <unknown>\n#13 0x55f2afca01ca <unknown>\n#14 0x55f2afc817f3 <unknown>\n#15 0x55f2afc51ec9 <unknown>\n#16 0x55f2afc5291e <unknown>\n#17 0x55f2aff059eb <unknown>\n#18 0x55f2aff09972 <unknown>\n#19 0x55f2afef2e15 <unknown>\n#20 0x55f2aff0a502 <unknown>\n#21 0x55f2afed7d2f <unknown>\n#22 0x55f2aff2e578 <unknown>\n#23 0x55f2aff2e750 <unknown>\n#24 0x55f2aff3e48c <unknown>\n#25 0x7f7da8cd9a94 <unknown>\n#26 0x7f7da8d66a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fd03a1256c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuckinghamshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd04c283f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/BuckinghamshireCouncil.py:47: in parse_data\n    driver.get(page)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd0459b3dd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55f2aff3e48c \\\\u003Cunknown>\\\\n#25 0x7f7da8cd9a94 \\\\u003Cunknown>\\\\n#26 0x7f7da8d66a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.72)\nE       Stacktrace:\nE       #0 0x55f2aff3f6ba <unknown>\nE       #1 0x55f2afc0f730 <unknown>\nE       #2 0x55f2afc07761 <unknown>\nE       #3 0x55f2afbf78f9 <unknown>\nE       #4 0x55f2afbf9684 <unknown>\nE       #5 0x55f2afbf7bc5 <unknown>\nE       #6 0x55f2afbf7426 <unknown>\nE       #7 0x55f2afbf731e <unknown>\nE       #8 0x55f2afbf564c <unknown>\nE       #9 0x55f2afbf59ca <unknown>\nE       #10 0x55f2afc12051 <unknown>\nE       #11 0x55f2afca0cc5 <unknown>\nE       #12 0x55f2afc81a52 <unknown>\nE       #13 0x55f2afca01ca <unknown>\nE       #14 0x55f2afc817f3 <unknown>\nE       #15 0x55f2afc51ec9 <unknown>\nE       #16 0x55f2afc5291e <unknown>\nE       #17 0x55f2aff059eb <unknown>\nE       #18 0x55f2aff09972 <unknown>\nE       #19 0x55f2afef2e15 <unknown>\nE       #20 0x55f2aff0a502 <unknown>\nE       #21 0x55f2afed7d2f <unknown>\nE       #22 0x55f2aff2e578 <unknown>\nE       #23 0x55f2aff2e750 <unknown>\nE       #24 0x55f2aff3e48c <unknown>\nE       #25 0x7f7da8cd9a94 <unknown>\nE       #26 0x7f7da8d66a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1722556883297,"stop":1722556883298,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722556883298,"stop":1722557018069,"duration":134771},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55f2aff3f6ba <unknown>\n#1 0x55f2afc0f730 <unknown>\n#2 0x55f2afc07761 <unknown>\n#3 0x55f2afbf78f9 <unknown>\n#4 0x55f2afbf9684 <unknown>\n#5 0x55f2afbf7bc5 <unknown>\n#6 0x55f2afbf7426 <unknown>\n#7 0x55f2afbf731e <unknown>\n#8 0x55f2afbf564c <unknown>\n#9 0x55f2afbf59ca <unknown>\n#10 0x55f2afc12051 <unknown>\n#11 0x55f2afca0cc5 <unknown>\n#12 0x55f2afc81a52 <unknown>\n#13 0x55f2afca01ca <unknown>\n#14 0x55f2afc817f3 <unknown>\n#15 0x55f2afc51ec9 <unknown>\n#16 0x55f2afc5291e <unknown>\n#17 0x55f2aff059eb <unknown>\n#18 0x55f2aff09972 <unknown>\n#19 0x55f2afef2e15 <unknown>\n#20 0x55f2aff0a502 <unknown>\n#21 0x55f2afed7d2f <unknown>\n#22 0x55f2aff2e578 <unknown>\n#23 0x55f2aff2e750 <unknown>\n#24 0x55f2aff3e48c <unknown>\n#25 0x7f7da8cd9a94 <unknown>\n#26 0x7f7da8d66a34 __clone\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55f2aff3f6ba <unknown>\n#1 0x55f2afc0f730 <unknown>\n#2 0x55f2afc07761 <unknown>\n#3 0x55f2afbf78f9 <unknown>\n#4 0x55f2afbf9684 <unknown>\n#5 0x55f2afbf7bc5 <unknown>\n#6 0x55f2afbf7426 <unknown>\n#7 0x55f2afbf731e <unknown>\n#8 0x55f2afbf564c <unknown>\n#9 0x55f2afbf59ca <unknown>\n#10 0x55f2afc12051 <unknown>\n#11 0x55f2afca0cc5 <unknown>\n#12 0x55f2afc81a52 <unknown>\n#13 0x55f2afca01ca <unknown>\n#14 0x55f2afc817f3 <unknown>\n#15 0x55f2afc51ec9 <unknown>\n#16 0x55f2afc5291e <unknown>\n#17 0x55f2aff059eb <unknown>\n#18 0x55f2aff09972 <unknown>\n#19 0x55f2afef2e15 <unknown>\n#20 0x55f2aff0a502 <unknown>\n#21 0x55f2afed7d2f <unknown>\n#22 0x55f2aff2e578 <unknown>\n#23 0x55f2aff2e750 <unknown>\n#24 0x55f2aff3e48c <unknown>\n#25 0x7f7da8cd9a94 <unknown>\n#26 0x7f7da8d66a34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"14434f7a2de4b90d","name":"stdout","source":"14434f7a2de4b90d.txt","type":"text/plain","size":960}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az768-119"},{"name":"thread","value":"2785-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BuckinghamshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":81,"unknown":0,"total":86},"items":[{"uid":"21aafb183e0fb102","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/21aafb183e0fb102","status":"passed","time":{"start":1722470480150,"stop":1722470497116,"duration":16966}},{"uid":"f68d72607b2c43c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/f68d72607b2c43c5","status":"passed","time":{"start":1722384077453,"stop":1722384101549,"duration":24096}},{"uid":"d46bba2211f04244","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/d46bba2211f04244","status":"passed","time":{"start":1722297679084,"stop":1722297704347,"duration":25263}},{"uid":"1b076f768fd23ae1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/1b076f768fd23ae1","status":"passed","time":{"start":1722211278262,"stop":1722211296837,"duration":18575}},{"uid":"2c8155a1e63d2e8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/2c8155a1e63d2e8b","status":"passed","time":{"start":1722124871507,"stop":1722124905194,"duration":33687}},{"uid":"f9f6f5e002afca9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/f9f6f5e002afca9a","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1722038472026,"stop":1722038498047,"duration":26021}},{"uid":"179fe662955d59c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/179fe662955d59c9","status":"passed","time":{"start":1721952076521,"stop":1721952096917,"duration":20396}},{"uid":"e8f8562f080d6671","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/e8f8562f080d6671","status":"passed","time":{"start":1721865664838,"stop":1721865690023,"duration":25185}},{"uid":"922da9f174d8d40c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1991//#testresult/922da9f174d8d40c","status":"passed","time":{"start":1721779274504,"stop":1721779293585,"duration":19081}},{"uid":"5a74f7e8e61bd2f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1990//#testresult/5a74f7e8e61bd2f5","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1721692874225,"stop":1721692903020,"duration":28795}},{"uid":"4f6b0ae14f642193","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1989//#testresult/4f6b0ae14f642193","status":"passed","time":{"start":1721606489308,"stop":1721606511989,"duration":22681}},{"uid":"e67c62dbb10803a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1988//#testresult/e67c62dbb10803a3","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1721520086650,"stop":1721520112207,"duration":25557}},{"uid":"42e9b69c538cfebc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1987//#testresult/42e9b69c538cfebc","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1721433679343,"stop":1721433705941,"duration":26598}},{"uid":"cda275e64e6a5fb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1986//#testresult/cda275e64e6a5fb6","status":"passed","time":{"start":1721371789238,"stop":1721371808767,"duration":19529}},{"uid":"af15656176e6513c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1985//#testresult/af15656176e6513c","status":"passed","time":{"start":1721262565983,"stop":1721262583862,"duration":17879}},{"uid":"7ac4637f8f095f7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1984//#testresult/7ac4637f8f095f7e","status":"passed","time":{"start":1721176184221,"stop":1721176201798,"duration":17577}},{"uid":"aa5860d303a2837f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1983//#testresult/aa5860d303a2837f","status":"passed","time":{"start":1721089777473,"stop":1721089795017,"duration":17544}},{"uid":"b7114bf1f6e2a237","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/b7114bf1f6e2a237","status":"passed","time":{"start":1721003471102,"stop":1721003488369,"duration":17267}},{"uid":"a1716a9c89b603e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/a1716a9c89b603e6","status":"passed","time":{"start":1720917190561,"stop":1720917207982,"duration":17421}},{"uid":"2aaa1e0bb71e6e4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/2aaa1e0bb71e6e4c","status":"passed","time":{"start":1720830563383,"stop":1720830582091,"duration":18708}}]},"tags":[]},"source":"7f001ddcb9d7a385.json","parameterValues":["BuckinghamshireCouncil"]}