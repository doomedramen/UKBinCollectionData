{"uid":"259250d170ed2f98","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1721091129660,"stop":1721091160381,"duration":30721},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x555d46f0969a <unknown>\n#1 0x555d46bebf21 <unknown>\n#2 0x555d46c326d8 <unknown>\n#3 0x555d46c30abf <unknown>\n#4 0x555d46c5b872 <unknown>\n#5 0x555d46c2cd89 <unknown>\n#6 0x555d46c5ba3e <unknown>\n#7 0x555d46c7a5c3 <unknown>\n#8 0x555d46c5b613 <unknown>\n#9 0x555d46c2b4f7 <unknown>\n#10 0x555d46c2be4e <unknown>\n#11 0x555d46ecf86b <unknown>\n#12 0x555d46ed3911 <unknown>\n#13 0x555d46ebb35e <unknown>\n#14 0x555d46ed4472 <unknown>\n#15 0x555d46e9fcbf <unknown>\n#16 0x555d46ef9098 <unknown>\n#17 0x555d46ef9270 <unknown>\n#18 0x555d46f087cc <unknown>\n#19 0x7f79d9733ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fa4154b09a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa4161a6d50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:66: in parse_data\n    dropdown_search.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa414185e80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x555d46ef9270 \\\\u003Cunknown>\\\\n#18 0x555d46f087cc \\\\u003Cunknown>\\\\n#19 0x7f79d9733ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x555d46f0969a <unknown>\nE       #1 0x555d46bebf21 <unknown>\nE       #2 0x555d46c326d8 <unknown>\nE       #3 0x555d46c30abf <unknown>\nE       #4 0x555d46c5b872 <unknown>\nE       #5 0x555d46c2cd89 <unknown>\nE       #6 0x555d46c5ba3e <unknown>\nE       #7 0x555d46c7a5c3 <unknown>\nE       #8 0x555d46c5b613 <unknown>\nE       #9 0x555d46c2b4f7 <unknown>\nE       #10 0x555d46c2be4e <unknown>\nE       #11 0x555d46ecf86b <unknown>\nE       #12 0x555d46ed3911 <unknown>\nE       #13 0x555d46ebb35e <unknown>\nE       #14 0x555d46ed4472 <unknown>\nE       #15 0x555d46e9fcbf <unknown>\nE       #16 0x555d46ef9098 <unknown>\nE       #17 0x555d46ef9270 <unknown>\nE       #18 0x555d46f087cc <unknown>\nE       #19 0x7f79d9733ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x555d46f0969a <unknown>\n#1 0x555d46bebf21 <unknown>\n#2 0x555d46c326d8 <unknown>\n#3 0x555d46c30abf <unknown>\n#4 0x555d46c5b872 <unknown>\n#5 0x555d46c2cd89 <unknown>\n#6 0x555d46c5ba3e <unknown>\n#7 0x555d46c7a5c3 <unknown>\n#8 0x555d46c5b613 <unknown>\n#9 0x555d46c2b4f7 <unknown>\n#10 0x555d46c2be4e <unknown>\n#11 0x555d46ecf86b <unknown>\n#12 0x555d46ed3911 <unknown>\n#13 0x555d46ebb35e <unknown>\n#14 0x555d46ed4472 <unknown>\n#15 0x555d46e9fcbf <unknown>\n#16 0x555d46ef9098 <unknown>\n#17 0x555d46ef9270 <unknown>\n#18 0x555d46f087cc <unknown>\n#19 0x7f79d9733ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fa4154b09a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa4161a6d50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:66: in parse_data\n    dropdown_search.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa414185e80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x555d46ef9270 \\\\u003Cunknown>\\\\n#18 0x555d46f087cc \\\\u003Cunknown>\\\\n#19 0x7f79d9733ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x555d46f0969a <unknown>\nE       #1 0x555d46bebf21 <unknown>\nE       #2 0x555d46c326d8 <unknown>\nE       #3 0x555d46c30abf <unknown>\nE       #4 0x555d46c5b872 <unknown>\nE       #5 0x555d46c2cd89 <unknown>\nE       #6 0x555d46c5ba3e <unknown>\nE       #7 0x555d46c7a5c3 <unknown>\nE       #8 0x555d46c5b613 <unknown>\nE       #9 0x555d46c2b4f7 <unknown>\nE       #10 0x555d46c2be4e <unknown>\nE       #11 0x555d46ecf86b <unknown>\nE       #12 0x555d46ed3911 <unknown>\nE       #13 0x555d46ebb35e <unknown>\nE       #14 0x555d46ed4472 <unknown>\nE       #15 0x555d46e9fcbf <unknown>\nE       #16 0x555d46ef9098 <unknown>\nE       #17 0x555d46ef9270 <unknown>\nE       #18 0x555d46f087cc <unknown>\nE       #19 0x7f79d9733ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council","time":{"start":1721091129660,"stop":1721091129660,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1721091129660,"stop":1721091160381,"duration":30721},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x555d46f0969a <unknown>\n#1 0x555d46bebf21 <unknown>\n#2 0x555d46c326d8 <unknown>\n#3 0x555d46c30abf <unknown>\n#4 0x555d46c5b872 <unknown>\n#5 0x555d46c2cd89 <unknown>\n#6 0x555d46c5ba3e <unknown>\n#7 0x555d46c7a5c3 <unknown>\n#8 0x555d46c5b613 <unknown>\n#9 0x555d46c2b4f7 <unknown>\n#10 0x555d46c2be4e <unknown>\n#11 0x555d46ecf86b <unknown>\n#12 0x555d46ed3911 <unknown>\n#13 0x555d46ebb35e <unknown>\n#14 0x555d46ed4472 <unknown>\n#15 0x555d46e9fcbf <unknown>\n#16 0x555d46ef9098 <unknown>\n#17 0x555d46ef9270 <unknown>\n#18 0x555d46f087cc <unknown>\n#19 0x7f79d9733ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x555d46f0969a <unknown>\n#1 0x555d46bebf21 <unknown>\n#2 0x555d46c326d8 <unknown>\n#3 0x555d46c30abf <unknown>\n#4 0x555d46c5b872 <unknown>\n#5 0x555d46c2cd89 <unknown>\n#6 0x555d46c5ba3e <unknown>\n#7 0x555d46c7a5c3 <unknown>\n#8 0x555d46c5b613 <unknown>\n#9 0x555d46c2b4f7 <unknown>\n#10 0x555d46c2be4e <unknown>\n#11 0x555d46ecf86b <unknown>\n#12 0x555d46ed3911 <unknown>\n#13 0x555d46ebb35e <unknown>\n#14 0x555d46ed4472 <unknown>\n#15 0x555d46e9fcbf <unknown>\n#16 0x555d46ef9098 <unknown>\n#17 0x555d46ef9270 <unknown>\n#18 0x555d46f087cc <unknown>\n#19 0x7f79d9733ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9d01593b69f34535","name":"stdout","source":"9d01593b69f34535.txt","type":"text/plain","size":731}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1146-524"},{"name":"thread","value":"2751-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":46,"unknown":0,"total":50},"items":[{"uid":"b5e9a86ff5928733","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/b5e9a86ff5928733","status":"passed","time":{"start":1721004837324,"stop":1721004870399,"duration":33075}},{"uid":"c59a5b46c443adf6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/c59a5b46c443adf6","status":"passed","time":{"start":1720918524353,"stop":1720918545045,"duration":20692}},{"uid":"dcee3dfd0158c1cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/dcee3dfd0158c1cd","status":"passed","time":{"start":1720831878233,"stop":1720831915369,"duration":37136}},{"uid":"c7aee7dae525d17a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1979//#testresult/c7aee7dae525d17a","status":"passed","time":{"start":1720745441983,"stop":1720745486430,"duration":44447}},{"uid":"4d6f44bcb7569aaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1978//#testresult/4d6f44bcb7569aaf","status":"passed","time":{"start":1720659121864,"stop":1720659158880,"duration":37016}},{"uid":"9d1ec168206c2557","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1977//#testresult/9d1ec168206c2557","status":"passed","time":{"start":1720572738897,"stop":1720572775953,"duration":37056}},{"uid":"42cf4bce06c80a09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1976//#testresult/42cf4bce06c80a09","status":"passed","time":{"start":1720485795493,"stop":1720485834867,"duration":39374}},{"uid":"688c272e555a446c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1975//#testresult/688c272e555a446c","status":"passed","time":{"start":1720399628324,"stop":1720399669167,"duration":40843}},{"uid":"2c507951796e200c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1971//#testresult/2c507951796e200c","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1720313348714,"stop":1720313427674,"duration":78960}},{"uid":"b470ca68297667f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/b470ca68297667f0","status":"passed","time":{"start":1720226785933,"stop":1720226829338,"duration":43405}},{"uid":"7fb7717b925b8db7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/7fb7717b925b8db7","status":"passed","time":{"start":1720140165131,"stop":1720140193109,"duration":27978}},{"uid":"e792f218735e40df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/e792f218735e40df","status":"passed","time":{"start":1720053779773,"stop":1720053808842,"duration":29069}},{"uid":"1a974ec4376bb1d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/1a974ec4376bb1d9","status":"passed","time":{"start":1719967395854,"stop":1719967424323,"duration":28469}},{"uid":"60b58e2d95f707ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/60b58e2d95f707ac","status":"passed","time":{"start":1719880991230,"stop":1719881021362,"duration":30132}},{"uid":"98bcf67c7bc7b813","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/98bcf67c7bc7b813","status":"passed","time":{"start":1719795051729,"stop":1719795073967,"duration":22238}},{"uid":"e3c8d4912632be4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/e3c8d4912632be4b","status":"passed","time":{"start":1719708583796,"stop":1719708621065,"duration":37269}},{"uid":"d90050460adc0cc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/d90050460adc0cc6","status":"passed","time":{"start":1719621924332,"stop":1719621964961,"duration":40629}},{"uid":"7212703ad2051ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/7212703ad2051ab","status":"passed","time":{"start":1719535376610,"stop":1719535414729,"duration":38119}},{"uid":"488fb7c0a7fbb346","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/488fb7c0a7fbb346","status":"passed","time":{"start":1719362776198,"stop":1719362807799,"duration":31601}},{"uid":"903d00eb26d63739","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/903d00eb26d63739","status":"passed","time":{"start":1719276289427,"stop":1719276317988,"duration":28561}}]},"tags":[]},"source":"259250d170ed2f98.json","parameterValues":["WalthamForest"]}