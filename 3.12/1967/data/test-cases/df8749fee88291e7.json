{"uid":"df8749fee88291e7","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1719966926510,"stop":1719966982965,"duration":56455},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f47c2135940>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f47d42a7bf0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f47c2135940>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f47d42a7bf0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1719966926510,"stop":1719966926510,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719966926510,"stop":1719966982965,"duration":56455},"status":"failed","statusMessage":"time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f3fbc3271a38be7a","name":"stdout","source":"f3fbc3271a38be7a.txt","type":"text/plain","size":204}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1536-472"},{"name":"thread","value":"2728-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":47,"unknown":0,"total":55},"items":[{"uid":"2d93faa02fb30ef9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/2d93faa02fb30ef9","status":"passed","time":{"start":1719880408991,"stop":1719880480434,"duration":71443}},{"uid":"e28362890a866e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/e28362890a866e7","status":"passed","time":{"start":1719794448541,"stop":1719794541661,"duration":93120}},{"uid":"bf575e0308ecc9e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/bf575e0308ecc9e8","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f0ab9a569a <unknown>\n#1 0x55f0ab6880dc <unknown>\n#2 0x55f0ab6d4931 <unknown>\n#3 0x55f0ab6d4a21 <unknown>\n#4 0x55f0ab719234 <unknown>\n#5 0x55f0ab6f789d <unknown>\n#6 0x55f0ab7165c3 <unknown>\n#7 0x55f0ab6f7613 <unknown>\n#8 0x55f0ab6c74f7 <unknown>\n#9 0x55f0ab6c7e4e <unknown>\n#10 0x55f0ab96b86b <unknown>\n#11 0x55f0ab96f911 <unknown>\n#12 0x55f0ab95735e <unknown>\n#13 0x55f0ab970472 <unknown>\n#14 0x55f0ab93bcbf <unknown>\n#15 0x55f0ab995098 <unknown>\n#16 0x55f0ab995270 <unknown>\n#17 0x55f0ab9a47cc <unknown>\n#18 0x7f9026b2dac3 <unknown>","time":{"start":1719708019105,"stop":1719708114355,"duration":95250}},{"uid":"c468c749f9973b8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/c468c749f9973b8b","status":"passed","time":{"start":1719621302371,"stop":1719621365279,"duration":62908}},{"uid":"1297d710a590dbbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/1297d710a590dbbf","status":"passed","time":{"start":1719534897108,"stop":1719534954867,"duration":57759}},{"uid":"c63ab1b42a63245d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/c63ab1b42a63245d","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1719362150378,"stop":1719362234200,"duration":83822}},{"uid":"68d8fefaf0bcdf00","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/68d8fefaf0bcdf00","status":"passed","time":{"start":1719275698305,"stop":1719275783275,"duration":84970}},{"uid":"f83bd60f9594b9f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/f83bd60f9594b9f5","status":"passed","time":{"start":1719189471940,"stop":1719189507310,"duration":35370}},{"uid":"c197a76d0ee11176","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/c197a76d0ee11176","status":"passed","time":{"start":1719103097560,"stop":1719103114877,"duration":17317}},{"uid":"c48fb7f22d7558f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/c48fb7f22d7558f7","status":"passed","time":{"start":1719016591260,"stop":1719016682501,"duration":91241}},{"uid":"1285e70a087fa39d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/1285e70a087fa39d","status":"passed","time":{"start":1718930212579,"stop":1718930240212,"duration":27633}},{"uid":"ba2376be97342aba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/ba2376be97342aba","status":"passed","time":{"start":1718843730191,"stop":1718843760852,"duration":30661}},{"uid":"d04d5592740c3dc8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/d04d5592740c3dc8","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 19 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1718757413334,"stop":1718757503709,"duration":90375}},{"uid":"607ef0520e70966","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/607ef0520e70966","status":"passed","time":{"start":1718670604875,"stop":1718670617546,"duration":12671}},{"uid":"8d5d3d7dad2699c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1945//#testresult/8d5d3d7dad2699c5","status":"passed","time":{"start":1718584641933,"stop":1718584736413,"duration":94480}},{"uid":"d32e58a39b9fc09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1944//#testresult/d32e58a39b9fc09","status":"passed","time":{"start":1718498199462,"stop":1718498291018,"duration":91556}},{"uid":"e8bf18c7efa8c7fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1943//#testresult/e8bf18c7efa8c7fa","status":"passed","time":{"start":1718411809209,"stop":1718411891615,"duration":82406}},{"uid":"b63b857ebaf0c02c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1942//#testresult/b63b857ebaf0c02c","status":"passed","time":{"start":1718324979413,"stop":1718324989227,"duration":9814}},{"uid":"274015ef7fba8c04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1939//#testresult/274015ef7fba8c04","status":"passed","time":{"start":1718238726492,"stop":1718238998927,"duration":272435}},{"uid":"fb7802b0b79bf36d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1938//#testresult/fb7802b0b79bf36d","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 12 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1718152310225,"stop":1718152550299,"duration":240074}}]},"tags":[]},"source":"df8749fee88291e7.json","parameterValues":["KingstonUponThamesCouncil"]}