{"uid":"8a68a241ea580bc4","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1720744739713,"stop":1720744740706,"duration":993},"status":"failed","statusMessage":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","statusTrace":"fixturefunc = <function scrape_step at 0x7f7d4deb5260>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7d4ebaaf60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:256: in parse_data\n    collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = <requests.sessions.Session object at 0x7f7d4dbcadb0>\nbase_url = 'https://service.croydon.gov.uk'\ncsrf_token = 'c0812e50dd3179af97e82ca27bf07bd72d5d504d', address_id = '96383'\n\n    def get_collection_data(\n        s: requests.session, base_url: str, csrf_token: str, address_id: str\n    ) -> str:\n        \"\"\"\n        Gets the collection data\n            :rtype: str\n            :param s: requests.Session() to use\n            :param base_url: Base URL to use\n            :param csrf_token: CSRF token to use\n            :param address_id: Address id to use\n            :param retries: Retries count\n            :return: Collection data\n        \"\"\"\n        collection_data = \"\"\n        if address_id != \"0\":\n            form_data = {\n                \"form_check\": csrf_token,\n                \"submitted_page_id\": \"PAG0000898EECEC1\",\n                \"submitted_widget_group_id\": \"PWG0002644EECEC1\",\n                \"submitted_widget_group_type\": \"modify\",\n                \"submission_token\": \"63e9126bacd815.12997577\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020408EECEC1]\": address_id,\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0021449EECEC1]\": \"1\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020072EECEC1]\": \"Next\",\n                \"submit_fragment_id\": \"PCF0020072EECEC1\",\n                \"_session_storage\": json.dumps({\"_global\": get_session_storage_global()}),\n                \"_update_page_content_request\": 1,\n                \"form_check_ajax\": csrf_token,\n            }\n            response = s.post(\n                base_url\n                + \"/wasteservices/w/webpage/bin-day-enter-address?webpage_subpage_id=PAG0000898EECEC1\"\n                \"&webpage_token=faab02e1f62a58f7bad4c2ae5b8622e19846b97dde2a76f546c4bb1230cee044\",\n                headers=get_headers(base_url, \"POST\"),\n                data=form_data,\n            )\n            if response.status_code == 200 and len(response.text) > 0:\n                json_response = json.loads(response.text)\n                form_data = {\n                    \"_dummy\": 1,\n                    \"_session_storage\": json.dumps(\n                        {\"_global\": get_session_storage_global()}\n                    ),\n                    \"_update_page_content_request\": 1,\n                    \"form_check_ajax\": csrf_token,\n                }\n                response = s.post(\n                    base_url + json_response[\"redirect_url\"],\n                    headers=get_headers(base_url, \"POST\"),\n                    data=form_data,\n                )\n                if response.status_code == 200 and len(response.text) > 0:\n                    json_response = json.loads(response.text)\n                    collection_data = json_response[\"data\"]\n                else:\n                    raise ValueError(\"Code 4: Failed to get bin data.\")\n            else:\n>               raise ValueError(\n                    \"Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\"\n                )\nE               ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:229: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","statusTrace":"fixturefunc = <function scrape_step at 0x7f7d4deb5260>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7d4ebaaf60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:256: in parse_data\n    collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = <requests.sessions.Session object at 0x7f7d4dbcadb0>\nbase_url = 'https://service.croydon.gov.uk'\ncsrf_token = 'c0812e50dd3179af97e82ca27bf07bd72d5d504d', address_id = '96383'\n\n    def get_collection_data(\n        s: requests.session, base_url: str, csrf_token: str, address_id: str\n    ) -> str:\n        \"\"\"\n        Gets the collection data\n            :rtype: str\n            :param s: requests.Session() to use\n            :param base_url: Base URL to use\n            :param csrf_token: CSRF token to use\n            :param address_id: Address id to use\n            :param retries: Retries count\n            :return: Collection data\n        \"\"\"\n        collection_data = \"\"\n        if address_id != \"0\":\n            form_data = {\n                \"form_check\": csrf_token,\n                \"submitted_page_id\": \"PAG0000898EECEC1\",\n                \"submitted_widget_group_id\": \"PWG0002644EECEC1\",\n                \"submitted_widget_group_type\": \"modify\",\n                \"submission_token\": \"63e9126bacd815.12997577\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020408EECEC1]\": address_id,\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0021449EECEC1]\": \"1\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020072EECEC1]\": \"Next\",\n                \"submit_fragment_id\": \"PCF0020072EECEC1\",\n                \"_session_storage\": json.dumps({\"_global\": get_session_storage_global()}),\n                \"_update_page_content_request\": 1,\n                \"form_check_ajax\": csrf_token,\n            }\n            response = s.post(\n                base_url\n                + \"/wasteservices/w/webpage/bin-day-enter-address?webpage_subpage_id=PAG0000898EECEC1\"\n                \"&webpage_token=faab02e1f62a58f7bad4c2ae5b8622e19846b97dde2a76f546c4bb1230cee044\",\n                headers=get_headers(base_url, \"POST\"),\n                data=form_data,\n            )\n            if response.status_code == 200 and len(response.text) > 0:\n                json_response = json.loads(response.text)\n                form_data = {\n                    \"_dummy\": 1,\n                    \"_session_storage\": json.dumps(\n                        {\"_global\": get_session_storage_global()}\n                    ),\n                    \"_update_page_content_request\": 1,\n                    \"form_check_ajax\": csrf_token,\n                }\n                response = s.post(\n                    base_url + json_response[\"redirect_url\"],\n                    headers=get_headers(base_url, \"POST\"),\n                    data=form_data,\n                )\n                if response.status_code == 200 and len(response.text) > 0:\n                    json_response = json.loads(response.text)\n                    collection_data = json_response[\"data\"]\n                else:\n                    raise ValueError(\"Code 4: Failed to get bin data.\")\n            else:\n>               raise ValueError(\n                    \"Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\"\n                )\nE               ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:229: ValueError","steps":[{"name":"Given the council","time":{"start":1720744739713,"stop":1720744739714,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720744739714,"stop":1720744740706,"duration":992},"status":"failed","statusMessage":"Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","statusTrace":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6f3d0ad7e1790632","name":"stdout","source":"6f3d0ad7e1790632.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1759-122"},{"name":"thread","value":"2711-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":39,"broken":0,"skipped":0,"passed":25,"unknown":0,"total":64},"items":[{"uid":"357cd13ab835537d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1978//#testresult/357cd13ab835537d","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1720658397775,"stop":1720658402006,"duration":4231}},{"uid":"adc0910134095add","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1977//#testresult/adc0910134095add","status":"passed","time":{"start":1720572007028,"stop":1720572012078,"duration":5050}},{"uid":"374dcb382add35aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1976//#testresult/374dcb382add35aa","status":"passed","time":{"start":1720485008834,"stop":1720485014499,"duration":5665}},{"uid":"17b71e9948f5ab64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1975//#testresult/17b71e9948f5ab64","status":"passed","time":{"start":1720398705675,"stop":1720398711392,"duration":5717}},{"uid":"a84e0e0f8c4a5eca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1971//#testresult/a84e0e0f8c4a5eca","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1720312392916,"stop":1720312394465,"duration":1549}},{"uid":"b944cbf67e834929","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/b944cbf67e834929","status":"passed","time":{"start":1720225784857,"stop":1720225789981,"duration":5124}},{"uid":"69f3ed687756296d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/69f3ed687756296d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1720139372329,"stop":1720139373765,"duration":1436}},{"uid":"a5c7d574a2cd6f4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/a5c7d574a2cd6f4b","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1720052992262,"stop":1720052997360,"duration":5098}},{"uid":"b052a5632d136ecf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/b052a5632d136ecf","status":"passed","time":{"start":1719966584462,"stop":1719966589626,"duration":5164}},{"uid":"8eab1c632e7b3d81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/8eab1c632e7b3d81","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719880251471,"stop":1719880253633,"duration":2162}},{"uid":"b4c08ce134e958c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/b4c08ce134e958c7","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719794078716,"stop":1719794080015,"duration":1299}},{"uid":"9482c8d15f79f77c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/9482c8d15f79f77c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719707578671,"stop":1719707580249,"duration":1578}},{"uid":"76f1643f0ea8141b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/76f1643f0ea8141b","status":"passed","time":{"start":1719620938849,"stop":1719620943450,"duration":4601}},{"uid":"f1bffae0e96cf884","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/f1bffae0e96cf884","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719534564953,"stop":1719534566447,"duration":1494}},{"uid":"50722003cbcc9687","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/50722003cbcc9687","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719361772162,"stop":1719361773341,"duration":1179}},{"uid":"8f53ccf6a0dd2e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/8f53ccf6a0dd2e45","status":"passed","time":{"start":1719275350549,"stop":1719275355597,"duration":5048}},{"uid":"d246774b9dbcc539","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/d246774b9dbcc539","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719189120861,"stop":1719189122216,"duration":1355}},{"uid":"9a66b1cd254294cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/9a66b1cd254294cf","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719102766634,"stop":1719102767905,"duration":1271}},{"uid":"cb1fc3e1f3150ae1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/cb1fc3e1f3150ae1","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1719016156365,"stop":1719016157722,"duration":1357}},{"uid":"4ac6907ff3007108","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/4ac6907ff3007108","status":"passed","time":{"start":1718929762940,"stop":1718929768462,"duration":5522}}]},"tags":[]},"source":"8a68a241ea580bc4.json","parameterValues":["CroydonCouncil"]}