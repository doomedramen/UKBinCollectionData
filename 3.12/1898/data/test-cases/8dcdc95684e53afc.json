{"uid":"8dcdc95684e53afc","name":"Validate Council Output [BexleyCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b14d94c00a7a02b15ede5862fe9627b6","time":{"start":1716942519507,"stop":1716942560595,"duration":41088},"status":"failed","statusMessage":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4a1758cb80>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4a186ca660>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:120: in parse_data\n    parsed_date = datetime.strptime(date_text, \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Being collected today', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Being collected today' does not match format '%A %d %B'\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4a1758cb80>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4a186ca660>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:120: in parse_data\n    parsed_date = datetime.strptime(date_text, \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Being collected today', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Being collected today' does not match format '%A %d %B'\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1716942519508,"stop":1716942519509,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1716942519509,"stop":1716942560595,"duration":41086},"status":"failed","statusMessage":"time data 'Being collected today' does not match format '%A %d %B'","statusTrace":"ValueError: time data 'Being collected today' does not match format '%A %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2b979f07b8cb8918","name":"stdout","source":"2b979f07b8cb8918.txt","type":"text/plain","size":126}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-610"},{"name":"thread","value":"2843-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BexleyCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":14,"unknown":0,"total":20},"items":[{"uid":"fdef5158f88320a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1893//#testresult/fdef5158f88320a3","status":"passed","time":{"start":1716856057459,"stop":1716856093769,"duration":36310}},{"uid":"cf1bb785c2a06feb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1883//#testresult/cf1bb785c2a06feb","status":"passed","time":{"start":1716769721422,"stop":1716769738476,"duration":17054}},{"uid":"41c83390e19b0fd0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1881//#testresult/41c83390e19b0fd0","status":"passed","time":{"start":1716753032642,"stop":1716753123674,"duration":91032}},{"uid":"719902e4cb40a2b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1877//#testresult/719902e4cb40a2b","status":"passed","time":{"start":1716743182586,"stop":1716743263548,"duration":80962}},{"uid":"91c24924594f4c47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1871//#testresult/91c24924594f4c47","status":"passed","time":{"start":1716709792493,"stop":1716709838888,"duration":46395}},{"uid":"60e744e6eb6fb0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1866//#testresult/60e744e6eb6fb0b","status":"passed","time":{"start":1716705105438,"stop":1716705138099,"duration":32661}},{"uid":"ba910096b6169edc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1865//#testresult/ba910096b6169edc","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x556dc524ee9a <unknown>\n#1 0x556dc4f3845c <unknown>\n#2 0x556dc4f845b5 <unknown>\n#3 0x556dc4f84671 <unknown>\n#4 0x556dc4fc8f14 <unknown>\n#5 0x556dc4fa74dd <unknown>\n#6 0x556dc4fc62cc <unknown>\n#7 0x556dc4fa7253 <unknown>\n#8 0x556dc4f771c7 <unknown>\n#9 0x556dc4f77b3e <unknown>\n#10 0x556dc52152db <unknown>\n#11 0x556dc5219387 <unknown>\n#12 0x556dc5201e0e <unknown>\n#13 0x556dc5219e52 <unknown>\n#14 0x556dc51e67af <unknown>\n#15 0x556dc523e188 <unknown>\n#16 0x556dc523e35b <unknown>\n#17 0x556dc524dfcc <unknown>\n#18 0x7fd3e9815ac3 <unknown>","time":{"start":1716683434253,"stop":1716683525370,"duration":91117}},{"uid":"38be2d01e203ea57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1863//#testresult/38be2d01e203ea57","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ecb3b4ce9a <unknown>\n#1 0x55ecb383645c <unknown>\n#2 0x55ecb38825b5 <unknown>\n#3 0x55ecb3882671 <unknown>\n#4 0x55ecb38c6f14 <unknown>\n#5 0x55ecb38a54dd <unknown>\n#6 0x55ecb38c42cc <unknown>\n#7 0x55ecb38a5253 <unknown>\n#8 0x55ecb38751c7 <unknown>\n#9 0x55ecb3875b3e <unknown>\n#10 0x55ecb3b132db <unknown>\n#11 0x55ecb3b17387 <unknown>\n#12 0x55ecb3affe0e <unknown>\n#13 0x55ecb3b17e52 <unknown>\n#14 0x55ecb3ae47af <unknown>\n#15 0x55ecb3b3c188 <unknown>\n#16 0x55ecb3b3c35b <unknown>\n#17 0x55ecb3b4bfcc <unknown>\n#18 0x7f781cc52ac3 <unknown>","time":{"start":1716624813706,"stop":1716624909130,"duration":95424}},{"uid":"1ceba82761c4b62d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1862//#testresult/1ceba82761c4b62d","status":"passed","time":{"start":1716596791342,"stop":1716596817252,"duration":25910}},{"uid":"79d3f4e4f471f584","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1856//#testresult/79d3f4e4f471f584","status":"passed","time":{"start":1716510461454,"stop":1716510498488,"duration":37034}},{"uid":"c0427bd889f3ab7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1855//#testresult/c0427bd889f3ab7c","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f99f97ce9a <unknown>\n#1 0x55f99f66645c <unknown>\n#2 0x55f99f6b25b5 <unknown>\n#3 0x55f99f6b2671 <unknown>\n#4 0x55f99f6f6f14 <unknown>\n#5 0x55f99f6d54dd <unknown>\n#6 0x55f99f6f42cc <unknown>\n#7 0x55f99f6d5253 <unknown>\n#8 0x55f99f6a51c7 <unknown>\n#9 0x55f99f6a5b3e <unknown>\n#10 0x55f99f9432db <unknown>\n#11 0x55f99f947387 <unknown>\n#12 0x55f99f92fe0e <unknown>\n#13 0x55f99f947e52 <unknown>\n#14 0x55f99f9147af <unknown>\n#15 0x55f99f96c188 <unknown>\n#16 0x55f99f96c35b <unknown>\n#17 0x55f99f97bfcc <unknown>\n#18 0x7f88daa32ac3 <unknown>","time":{"start":1716424027839,"stop":1716424108124,"duration":80285}},{"uid":"ace6c5fb23cd2cbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1854//#testresult/ace6c5fb23cd2cbf","status":"passed","time":{"start":1716337620804,"stop":1716337636850,"duration":16046}},{"uid":"fe56a0494ea37d5e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1853//#testresult/fe56a0494ea37d5e","status":"failed","statusDetails":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","time":{"start":1716251254850,"stop":1716251293138,"duration":38288}},{"uid":"53d22ca22408a199","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1852//#testresult/53d22ca22408a199","status":"passed","time":{"start":1716164884851,"stop":1716164903765,"duration":18914}},{"uid":"86c8dbf8544b8781","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1851//#testresult/86c8dbf8544b8781","status":"failed","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55fcb436aeca <unknown>\n#1 0x55fcb40542a1 <unknown>\n#2 0x55fcb409a3e8 <unknown>\n#3 0x55fcb40987cf <unknown>\n#4 0x55fcb40c34b2 <unknown>\n#5 0x55fcb4094a79 <unknown>\n#6 0x55fcb40c367e <unknown>\n#7 0x55fcb40e22cc <unknown>\n#8 0x55fcb40c3253 <unknown>\n#9 0x55fcb40931c7 <unknown>\n#10 0x55fcb4093b3e <unknown>\n#11 0x55fcb433130b <unknown>\n#12 0x55fcb43353b7 <unknown>\n#13 0x55fcb431de3e <unknown>\n#14 0x55fcb4335e82 <unknown>\n#15 0x55fcb43027df <unknown>\n#16 0x55fcb435a1b8 <unknown>\n#17 0x55fcb435a38b <unknown>\n#18 0x55fcb4369ffc <unknown>\n#19 0x7f135ee53ac3 <unknown>","time":{"start":1716154875027,"stop":1716154901149,"duration":26122}},{"uid":"90c20a6781132870","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1849//#testresult/90c20a6781132870","status":"passed","time":{"start":1716152333313,"stop":1716152352331,"duration":19018}},{"uid":"476333efdff9ab2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1846//#testresult/476333efdff9ab2d","status":"passed","time":{"start":1716078613511,"stop":1716078634074,"duration":20563}},{"uid":"9994d2201d964bb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1842//#testresult/9994d2201d964bb8","status":"passed","time":{"start":1715992032711,"stop":1715992060186,"duration":27475}},{"uid":"b597315388757486","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1839//#testresult/b597315388757486","status":"passed","time":{"start":1715983164136,"stop":1715983192527,"duration":28391}}]},"tags":[]},"source":"8dcdc95684e53afc.json","parameterValues":["BexleyCouncil"]}