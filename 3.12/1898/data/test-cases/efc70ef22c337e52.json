{"uid":"efc70ef22c337e52","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1716942710000,"stop":1716942764914,"duration":54914},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7ff8afb78040>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ff8c3100710>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:68: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7ff8afb78040>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ff8c3100710>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:68: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1716942710000,"stop":1716942710001,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1716942710001,"stop":1716942764914,"duration":54913},"status":"failed","statusMessage":"time data 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 29 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b72d5a4db719ee5d","name":"stdout","source":"b72d5a4db719ee5d.txt","type":"text/plain","size":204}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-610"},{"name":"thread","value":"2849-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":18,"unknown":0,"total":20},"items":[{"uid":"6f69a9719b352407","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1893//#testresult/6f69a9719b352407","status":"passed","time":{"start":1716856635810,"stop":1716856651383,"duration":15573}},{"uid":"e39a033cdf361349","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1883//#testresult/e39a033cdf361349","status":"passed","time":{"start":1716770218352,"stop":1716770239398,"duration":21046}},{"uid":"9e989f9aa1dc5178","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1881//#testresult/9e989f9aa1dc5178","status":"passed","time":{"start":1716753428459,"stop":1716753576133,"duration":147674}},{"uid":"44c48526ef462fee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1877//#testresult/44c48526ef462fee","status":"passed","time":{"start":1716743741406,"stop":1716743759487,"duration":18081}},{"uid":"465a4b3eaa7c100f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1871//#testresult/465a4b3eaa7c100f","status":"passed","time":{"start":1716710054286,"stop":1716710104283,"duration":49997}},{"uid":"eb4643c738985c36","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1866//#testresult/eb4643c738985c36","status":"passed","time":{"start":1716705396824,"stop":1716705441692,"duration":44868}},{"uid":"f5e165ef668afb99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1865//#testresult/f5e165ef668afb99","status":"passed","time":{"start":1716683652882,"stop":1716683669307,"duration":16425}},{"uid":"406b3a7e409e5464","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1863//#testresult/406b3a7e409e5464","status":"passed","time":{"start":1716625190203,"stop":1716625242409,"duration":52206}},{"uid":"bd7957dfb50c1692","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1862//#testresult/bd7957dfb50c1692","status":"passed","time":{"start":1716597431894,"stop":1716597445026,"duration":13132}},{"uid":"5a8c03832bf226be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1856//#testresult/5a8c03832bf226be","status":"passed","time":{"start":1716511185428,"stop":1716511205720,"duration":20292}},{"uid":"eae9298c462b67af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1855//#testresult/eae9298c462b67af","status":"passed","time":{"start":1716424861784,"stop":1716424887998,"duration":26214}},{"uid":"e75663a3f778c247","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1854//#testresult/e75663a3f778c247","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1716338204943,"stop":1716338348643,"duration":143700}},{"uid":"f476f9890cb7c1b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1853//#testresult/f476f9890cb7c1b","status":"passed","time":{"start":1716251833469,"stop":1716251855451,"duration":21982}},{"uid":"faee8914c80580b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1852//#testresult/faee8914c80580b4","status":"passed","time":{"start":1716165463019,"stop":1716165611736,"duration":148717}},{"uid":"587a05875ff5a296","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1851//#testresult/587a05875ff5a296","status":"passed","time":{"start":1716155123815,"stop":1716155158264,"duration":34449}},{"uid":"13594885f47dc1f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1849//#testresult/13594885f47dc1f6","status":"passed","time":{"start":1716152550235,"stop":1716152600853,"duration":50618}},{"uid":"9303fb29a78e0873","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1846//#testresult/9303fb29a78e0873","status":"passed","time":{"start":1716079219301,"stop":1716079363905,"duration":144604}},{"uid":"96efddf45d277116","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1842//#testresult/96efddf45d277116","status":"passed","time":{"start":1715992611853,"stop":1715992621086,"duration":9233}},{"uid":"5f5193b5b74614d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1839//#testresult/5f5193b5b74614d9","status":"passed","time":{"start":1715983358616,"stop":1715983385502,"duration":26886}}]},"tags":[]},"source":"efc70ef22c337e52.json","parameterValues":["KingstonUponThamesCouncil"]}