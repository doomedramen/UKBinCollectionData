{"uid":"ad907be965115b78","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1727827975763,"stop":1727828007799,"duration":32036},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fbed83a3ba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fbed8ed1610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fbed83a3ba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fbed8ed1610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1727827975763,"stop":1727827975764,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727827975764,"stop":1727828007799,"duration":32035},"status":"failed","statusMessage":"time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fa4a1efdd6ceb20d","name":"stdout","source":"fa4a1efdd6ceb20d.txt","type":"text/plain","size":207}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az700-494"},{"name":"thread","value":"2821-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":25,"broken":0,"skipped":0,"passed":133,"unknown":0,"total":158},"items":[{"uid":"66f44e09160aa3b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/66f44e09160aa3b9","status":"passed","time":{"start":1727741611526,"stop":1727741655415,"duration":43889}},{"uid":"e8267541fdfe10d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/e8267541fdfe10d5","status":"passed","time":{"start":1727655230841,"stop":1727655265051,"duration":34210}},{"uid":"fdfd7e9bdf77ce50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/fdfd7e9bdf77ce50","status":"passed","time":{"start":1727568903771,"stop":1727568973255,"duration":69484}},{"uid":"e0c5cb13a21cd757","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/e0c5cb13a21cd757","status":"passed","time":{"start":1727482422526,"stop":1727482505590,"duration":83064}},{"uid":"94b29c060961d82e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/94b29c060961d82e","status":"passed","time":{"start":1727422338105,"stop":1727422359000,"duration":20895}},{"uid":"1def3628541ca83d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/1def3628541ca83d","status":"passed","time":{"start":1727396147902,"stop":1727396267099,"duration":119197}},{"uid":"f58ddf5779349bfc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/f58ddf5779349bfc","status":"passed","time":{"start":1727309618039,"stop":1727309671829,"duration":53790}},{"uid":"db1fb78c0351f815","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/db1fb78c0351f815","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 25 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1727223311171,"stop":1727223424177,"duration":113006}},{"uid":"8e7c1eaf34b8e3f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/8e7c1eaf34b8e3f6","status":"passed","time":{"start":1727136930679,"stop":1727136972001,"duration":41322}},{"uid":"de6658ac073d8e0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/de6658ac073d8e0a","status":"passed","time":{"start":1727050488947,"stop":1727050590988,"duration":102041}},{"uid":"a91c526bfbc58e0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/a91c526bfbc58e0b","status":"passed","time":{"start":1726964107448,"stop":1726964140764,"duration":33316}},{"uid":"13fe95245b401f68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/13fe95245b401f68","status":"passed","time":{"start":1726877759138,"stop":1726877813972,"duration":54834}},{"uid":"bc3e2880f8cc4f67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/bc3e2880f8cc4f67","status":"passed","time":{"start":1726791353672,"stop":1726791470175,"duration":116503}},{"uid":"85ba4d661f550d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/85ba4d661f550d4","status":"passed","time":{"start":1726704913922,"stop":1726704961832,"duration":47910}},{"uid":"91e211e8c13a22be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/91e211e8c13a22be","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 18 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1726618464552,"stop":1726618491548,"duration":26996}},{"uid":"b9ad7959ea9500df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/b9ad7959ea9500df","status":"passed","time":{"start":1726532086479,"stop":1726532121963,"duration":35484}},{"uid":"d435d105b568135f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/d435d105b568135f","status":"passed","time":{"start":1726445687249,"stop":1726445786296,"duration":99047}},{"uid":"f35a1965a8446998","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/f35a1965a8446998","status":"passed","time":{"start":1726359267380,"stop":1726359303132,"duration":35752}},{"uid":"dad91fcfda255858","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/dad91fcfda255858","status":"passed","time":{"start":1726272863046,"stop":1726272911487,"duration":48441}},{"uid":"59b1918e6c98df8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/59b1918e6c98df8b","status":"passed","time":{"start":1726186484839,"stop":1726186583849,"duration":99010}}]},"tags":[]},"source":"ad907be965115b78.json","parameterValues":["KingstonUponThamesCouncil"]}