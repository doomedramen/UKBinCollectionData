{"uid":"6c030d7f3d8d0117","name":"Validate Council Output [WiltshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aedb86c72e1849b4679ed1a7ee37cf59","time":{"start":1719362778763,"stop":1719362779253,"duration":490},"status":"failed","statusMessage":"SystemError: Error retrieving data! Please try again or raise an issue on GitHub!","statusTrace":"fixturefunc = <function scrape_step at 0x7f43344adda0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4336022510>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <WiltshireCouncil.CouncilClass object at 0x7f43338bf560>, page = ''\nkwargs = {'council_module_str': 'WiltshireCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nthis_month = 6, this_year = 2024, one_month = 7, two_month = 8\nmonths = [6, 7, 8], user_postcode = 'SN83TE', user_uprn = '100120982570'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        # Define some months to get from the calendar\n        this_month = datetime.now().month\n        this_year = datetime.now().year\n        one_month = this_month + 1\n        two_month = this_month + 2\n        months = [this_month, one_month, two_month]\n    \n        # Get and check the postcode and UPRN values\n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Some data for the request\n        cookies = {\n            \"ARRAffinity\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n            \"ARRAffinitySameSite\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n        }\n        headers = {\n            \"Accept\": \"*/*\",\n            \"Accept-Language\": \"en-GB,en;q=0.9\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n            # 'Cookie': 'ARRAffinity=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737; ARRAffinitySameSite=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737',\n            \"Origin\": \"https://ilambassadorformsprod.azurewebsites.net\",\n            \"Pragma\": \"no-cache\",\n            \"Referer\": \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/index\",\n            \"Sec-Fetch-Dest\": \"empty\",\n            \"Sec-Fetch-Mode\": \"cors\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 OPR/98.0.0.0\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"sec-ch-ua\": '\"Chromium\";v=\"112\", \"Not_A Brand\";v=\"24\", \"Opera GX\";v=\"98\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n        }\n    \n        collections = []\n    \n        # For each of the months we defined\n        for cal_month in months:\n            # If we're in Nov/Dec, the calculations won't work since its just adding one, so roll it\n            # to next year correctly\n            if cal_month == 13:\n                cal_month = 1\n                cal_year = this_year + 1\n            elif cal_month == 14:\n                cal_month = 2\n                cal_year = this_year + 1\n            else:\n                cal_year = this_year\n    \n            # Data for the calendar\n            data = {\n                \"Month\": cal_month,\n                \"Year\": cal_year,\n                \"Postcode\": user_postcode,\n                \"Uprn\": user_uprn,\n            }\n    \n            # Send it all as a POST\n            response = requests.post(\n                \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/collectionlist\",\n                cookies=cookies,\n                headers=headers,\n                data=data,\n            )\n    \n            # If we don't get a HTTP200, throw an error\n            if response.status_code != 200:\n>               raise SystemError(\n                    \"Error retrieving data! Please try again or raise an issue on GitHub!\"\n                )\nE               SystemError: Error retrieving data! Please try again or raise an issue on GitHub!\n\nuk_bin_collection/uk_bin_collection/councils/WiltshireCouncil.py:87: SystemError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"SystemError: Error retrieving data! Please try again or raise an issue on GitHub!","statusTrace":"fixturefunc = <function scrape_step at 0x7f43344adda0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4336022510>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <WiltshireCouncil.CouncilClass object at 0x7f43338bf560>, page = ''\nkwargs = {'council_module_str': 'WiltshireCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nthis_month = 6, this_year = 2024, one_month = 7, two_month = 8\nmonths = [6, 7, 8], user_postcode = 'SN83TE', user_uprn = '100120982570'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        # Define some months to get from the calendar\n        this_month = datetime.now().month\n        this_year = datetime.now().year\n        one_month = this_month + 1\n        two_month = this_month + 2\n        months = [this_month, one_month, two_month]\n    \n        # Get and check the postcode and UPRN values\n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Some data for the request\n        cookies = {\n            \"ARRAffinity\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n            \"ARRAffinitySameSite\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n        }\n        headers = {\n            \"Accept\": \"*/*\",\n            \"Accept-Language\": \"en-GB,en;q=0.9\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n            # 'Cookie': 'ARRAffinity=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737; ARRAffinitySameSite=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737',\n            \"Origin\": \"https://ilambassadorformsprod.azurewebsites.net\",\n            \"Pragma\": \"no-cache\",\n            \"Referer\": \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/index\",\n            \"Sec-Fetch-Dest\": \"empty\",\n            \"Sec-Fetch-Mode\": \"cors\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 OPR/98.0.0.0\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"sec-ch-ua\": '\"Chromium\";v=\"112\", \"Not_A Brand\";v=\"24\", \"Opera GX\";v=\"98\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n        }\n    \n        collections = []\n    \n        # For each of the months we defined\n        for cal_month in months:\n            # If we're in Nov/Dec, the calculations won't work since its just adding one, so roll it\n            # to next year correctly\n            if cal_month == 13:\n                cal_month = 1\n                cal_year = this_year + 1\n            elif cal_month == 14:\n                cal_month = 2\n                cal_year = this_year + 1\n            else:\n                cal_year = this_year\n    \n            # Data for the calendar\n            data = {\n                \"Month\": cal_month,\n                \"Year\": cal_year,\n                \"Postcode\": user_postcode,\n                \"Uprn\": user_uprn,\n            }\n    \n            # Send it all as a POST\n            response = requests.post(\n                \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/collectionlist\",\n                cookies=cookies,\n                headers=headers,\n                data=data,\n            )\n    \n            # If we don't get a HTTP200, throw an error\n            if response.status_code != 200:\n>               raise SystemError(\n                    \"Error retrieving data! Please try again or raise an issue on GitHub!\"\n                )\nE               SystemError: Error retrieving data! Please try again or raise an issue on GitHub!\n\nuk_bin_collection/uk_bin_collection/councils/WiltshireCouncil.py:87: SystemError","steps":[{"name":"Given the council","time":{"start":1719362778763,"stop":1719362778764,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719362778764,"stop":1719362779253,"duration":489},"status":"failed","statusMessage":"Error retrieving data! Please try again or raise an issue on GitHub!","statusTrace":"SystemError: Error retrieving data! Please try again or raise an issue on GitHub!\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"57a7d2698dfcfc26","name":"stdout","source":"57a7d2698dfcfc26.txt","type":"text/plain","size":43}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-373"},{"name":"thread","value":"2678-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":47,"unknown":0,"total":48},"items":[{"uid":"8f74801d7c8a013e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/8f74801d7c8a013e","status":"passed","time":{"start":1719276332496,"stop":1719276335001,"duration":2505}},{"uid":"589d5b51a2bb57c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/589d5b51a2bb57c9","status":"passed","time":{"start":1719190132675,"stop":1719190135188,"duration":2513}},{"uid":"27f4fdc744ae28f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/27f4fdc744ae28f8","status":"passed","time":{"start":1719103737722,"stop":1719103740349,"duration":2627}},{"uid":"3df2f5e2c309b3f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/3df2f5e2c309b3f7","status":"passed","time":{"start":1719017190366,"stop":1719017192667,"duration":2301}},{"uid":"9de85eb120cd336c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/9de85eb120cd336c","status":"passed","time":{"start":1718930815228,"stop":1718930818394,"duration":3166}},{"uid":"baca5aa6a40c272b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/baca5aa6a40c272b","status":"passed","time":{"start":1718844336575,"stop":1718844339569,"duration":2994}},{"uid":"a98fea9960d7cda1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/a98fea9960d7cda1","status":"passed","time":{"start":1718758010776,"stop":1718758013380,"duration":2604}},{"uid":"650288e7da38f960","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/650288e7da38f960","status":"passed","time":{"start":1718671540314,"stop":1718671542874,"duration":2560}},{"uid":"4cad7d4dcc8c9ad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1945//#testresult/4cad7d4dcc8c9ad6","status":"passed","time":{"start":1718585250710,"stop":1718585252984,"duration":2274}},{"uid":"d07f496cf1a1992","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1944//#testresult/d07f496cf1a1992","status":"passed","time":{"start":1718498820555,"stop":1718498823411,"duration":2856}},{"uid":"5a95cc5a99a0a6d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1943//#testresult/5a95cc5a99a0a6d8","status":"passed","time":{"start":1718412452282,"stop":1718412455409,"duration":3127}},{"uid":"9ad5dc41312f7ab0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1942//#testresult/9ad5dc41312f7ab0","status":"passed","time":{"start":1718325965871,"stop":1718325969189,"duration":3318}},{"uid":"22f5d8cd6d48c9bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1939//#testresult/22f5d8cd6d48c9bf","status":"passed","time":{"start":1718239646424,"stop":1718239649549,"duration":3125}},{"uid":"c629b347bfe72ee3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1938//#testresult/c629b347bfe72ee3","status":"passed","time":{"start":1718153181130,"stop":1718153183493,"duration":2363}},{"uid":"db5fe73b34fa500c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1937//#testresult/db5fe73b34fa500c","status":"passed","time":{"start":1718066893379,"stop":1718066896510,"duration":3131}},{"uid":"82abf78448f90a21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1936//#testresult/82abf78448f90a21","status":"passed","time":{"start":1717980420328,"stop":1717980422897,"duration":2569}},{"uid":"d802a49e8c6741f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1934//#testresult/d802a49e8c6741f5","status":"passed","time":{"start":1717893965105,"stop":1717893967410,"duration":2305}},{"uid":"8a38fba63fc86e4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1933//#testresult/8a38fba63fc86e4f","status":"passed","time":{"start":1717807745663,"stop":1717807748855,"duration":3192}},{"uid":"d9a3dc8f72e8737a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1932//#testresult/d9a3dc8f72e8737a","status":"passed","time":{"start":1717721115677,"stop":1717721118251,"duration":2574}},{"uid":"c50e8d8e59747ab9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1927//#testresult/c50e8d8e59747ab9","status":"passed","time":{"start":1717634656527,"stop":1717634658798,"duration":2271}}]},"tags":[]},"source":"6c030d7f3d8d0117.json","parameterValues":["WiltshireCouncil"]}