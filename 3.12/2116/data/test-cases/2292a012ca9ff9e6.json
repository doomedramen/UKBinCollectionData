{"uid":"2292a012ca9ff9e6","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1726446835670,"stop":1726446849508,"duration":13838},"status":"failed","statusMessage":"ValueError: time data 'September' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f09ff877100>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0a124ca000>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'September', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'September' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'September' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f09ff877100>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0a124ca000>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'September', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'September' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1726446835670,"stop":1726446835671,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726446835671,"stop":1726446849508,"duration":13837},"status":"failed","statusMessage":"time data 'September' does not match format '%d %B'","statusTrace":"ValueError: time data 'September' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e7bfbfb84f2fe4db","name":"stdout","source":"e7bfbfb84f2fe4db.txt","type":"text/plain","size":118}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az915-524"},{"name":"thread","value":"2745-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":42,"broken":0,"skipped":0,"passed":99,"unknown":0,"total":141},"items":[{"uid":"8dc13dc152ff7d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/8dc13dc152ff7d5","status":"passed","time":{"start":1726359958979,"stop":1726359971345,"duration":12366}},{"uid":"e2036e10b79b9e4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/e2036e10b79b9e4d","status":"passed","time":{"start":1726273771830,"stop":1726273792344,"duration":20514}},{"uid":"607d7f9a9da5168b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/607d7f9a9da5168b","status":"passed","time":{"start":1726187505432,"stop":1726187535574,"duration":30142}},{"uid":"f355b63585ec0684","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/f355b63585ec0684","status":"passed","time":{"start":1726100857632,"stop":1726100865110,"duration":7478}},{"uid":"c2861ddc3a7f712d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/c2861ddc3a7f712d","status":"passed","time":{"start":1726014490593,"stop":1726014499090,"duration":8497}},{"uid":"8596b7e82ba2adde","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/8596b7e82ba2adde","status":"passed","time":{"start":1725956560632,"stop":1725956578058,"duration":17426}},{"uid":"48230778ae851904","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/48230778ae851904","status":"passed","time":{"start":1725927944034,"stop":1725927966963,"duration":22929}},{"uid":"902abb2ece1f4051","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/902abb2ece1f4051","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725841751977,"stop":1725841759782,"duration":7805}},{"uid":"e11e1f300863e5a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/e11e1f300863e5a2","status":"passed","time":{"start":1725755206826,"stop":1725755216276,"duration":9450}},{"uid":"8dc02216067ae0fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2092//#testresult/8dc02216067ae0fc","status":"passed","time":{"start":1725669100448,"stop":1725669111977,"duration":11529}},{"uid":"62167ba193aab619","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2088//#testresult/62167ba193aab619","status":"passed","time":{"start":1725582385513,"stop":1725582401236,"duration":15723}},{"uid":"694bd6c2de962af2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2086//#testresult/694bd6c2de962af2","status":"passed","time":{"start":1725570504829,"stop":1725570519610,"duration":14781}},{"uid":"8ad8de91c05015c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2083//#testresult/8ad8de91c05015c0","status":"passed","time":{"start":1725496068187,"stop":1725496076090,"duration":7903}},{"uid":"4439e3a91d89000d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/4439e3a91d89000d","status":"passed","time":{"start":1725431184716,"stop":1725431198193,"duration":13477}},{"uid":"7d4986fb9e9c49b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/7d4986fb9e9c49b1","status":"passed","time":{"start":1725409984233,"stop":1725410013716,"duration":29483}},{"uid":"23c6530981d238a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2080//#testresult/23c6530981d238a8","status":"passed","time":{"start":1725404936889,"stop":1725404974935,"duration":38046}},{"uid":"ba5616f28858cb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2073//#testresult/ba5616f28858cb7","status":"passed","time":{"start":1725385952161,"stop":1725385964928,"duration":12767}},{"uid":"f50d33e6cd9a4e52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2070//#testresult/f50d33e6cd9a4e52","status":"passed","time":{"start":1725348092976,"stop":1725348118469,"duration":25493}},{"uid":"94afa5a707698171","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2069//#testresult/94afa5a707698171","status":"passed","time":{"start":1725323460673,"stop":1725323479358,"duration":18685}},{"uid":"3ca3d63fd4cf5274","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2068//#testresult/3ca3d63fd4cf5274","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725317254123,"stop":1725317264242,"duration":10119}}]},"tags":[]},"source":"2292a012ca9ff9e6.json","parameterValues":["WestBerkshireCouncil"]}