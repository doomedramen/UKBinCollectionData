{"uid":"2092f5dfc0d2b5ee","name":"Validate Council Output [BradfordMDC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e3f4ac517a489f09b3e68d80e88d1d63","time":{"start":1726186115430,"stop":1726186116875,"duration":1445},"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f0ad571bba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0ae8265c40>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7f0ae3cb1610>, page = ''\nkwargs = {'council_module_str': 'BradfordMDC', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:86: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f0ad571bba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0ae8265c40>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7f0ae3cb1610>, page = ''\nkwargs = {'council_module_str': 'BradfordMDC', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:86: IndexError","steps":[{"name":"Given the council","time":{"start":1726186115430,"stop":1726186115431,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726186115431,"stop":1726186116875,"duration":1444},"status":"failed","statusMessage":"string index out of range","statusTrace":"IndexError: string index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1e8fb26d4fada5aa","name":"stdout","source":"1e8fb26d4fada5aa.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-877"},{"name":"thread","value":"2754-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BradfordMDC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":137,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":137},"items":[{"uid":"5b7349108afa21d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/5b7349108afa21d4","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1726099750049,"stop":1726099829251,"duration":79202}},{"uid":"733492eee44b86f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/733492eee44b86f3","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1726013316514,"stop":1726013317604,"duration":1090}},{"uid":"12fae7b5fac1d4d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/12fae7b5fac1d4d1","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725955419991,"stop":1725955420894,"duration":903}},{"uid":"534fc8fb27d9edad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/534fc8fb27d9edad","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725926921142,"stop":1725926922187,"duration":1045}},{"uid":"62c836601804c275","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/62c836601804c275","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725840649131,"stop":1725840650131,"duration":1000}},{"uid":"7d8b1d66f15a3535","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/7d8b1d66f15a3535","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725754167074,"stop":1725754168103,"duration":1029}},{"uid":"80ca1bd63663e13d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2092//#testresult/80ca1bd63663e13d","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725667727624,"stop":1725667728414,"duration":790}},{"uid":"dd166ea92a631feb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2088//#testresult/dd166ea92a631feb","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725581313901,"stop":1725581314993,"duration":1092}},{"uid":"1409a00db360bb15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2086//#testresult/1409a00db360bb15","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725569182393,"stop":1725569183586,"duration":1193}},{"uid":"3ee0505e977257ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2083//#testresult/3ee0505e977257ae","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725494905178,"stop":1725494906237,"duration":1059}},{"uid":"484ec68a486111cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/484ec68a486111cc","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725430065423,"stop":1725430066383,"duration":960}},{"uid":"f85e7934f38d204e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/f85e7934f38d204e","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725408564415,"stop":1725408565890,"duration":1475}},{"uid":"fb23fe28eea87544","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2080//#testresult/fb23fe28eea87544","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725403687698,"stop":1725403688457,"duration":759}},{"uid":"43b7333c181e9773","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2073//#testresult/43b7333c181e9773","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725384624308,"stop":1725384625044,"duration":736}},{"uid":"10b3de8f32d9cbb1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2070//#testresult/10b3de8f32d9cbb1","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725346841625,"stop":1725346842638,"duration":1013}},{"uid":"9a582dd91d25ceb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2069//#testresult/9a582dd91d25ceb8","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725322070762,"stop":1725322071692,"duration":930}},{"uid":"5203e1b8082575e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2068//#testresult/5203e1b8082575e9","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725316027990,"stop":1725316028918,"duration":928}},{"uid":"d6f567a99597d8a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2066//#testresult/d6f567a99597d8a3","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725312766934,"stop":1725312768199,"duration":1265}},{"uid":"9749e81c6bf9c10d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2064//#testresult/9749e81c6bf9c10d","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725310594574,"stop":1725310595514,"duration":940}},{"uid":"9934cc86882f3d15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2060//#testresult/9934cc86882f3d15","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725307873990,"stop":1725307875283,"duration":1293}}]},"tags":[]},"source":"2092f5dfc0d2b5ee.json","parameterValues":["BradfordMDC"]}