{"uid":"6ecfea097a9c0184","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1726187477216,"stop":1726187496048,"duration":18832},"status":"failed","statusMessage":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0ad571bba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0ae8265c40>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 3rd October', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0ad571bba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0ae8265c40>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 3rd October', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1726187477216,"stop":1726187477216,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726187477217,"stop":1726187496048,"duration":18831},"status":"failed","statusMessage":"time data 'Thursday 3rd October' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"635d19fdcfb9942b","name":"log","source":"635d19fdcfb9942b.txt","type":"text/plain","size":133},{"uid":"29fec587a372843e","name":"stdout","source":"29fec587a372843e.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-877"},{"name":"thread","value":"2754-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":95,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":114},"items":[{"uid":"bfb0879f9b86c7d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/bfb0879f9b86c7d9","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1726100842278,"stop":1726100852544,"duration":10266}},{"uid":"3c94a38df99fbb3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/3c94a38df99fbb3d","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1726014463632,"stop":1726014484562,"duration":20930}},{"uid":"7cc84f49b206d017","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/7cc84f49b206d017","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725956564873,"stop":1725956586748,"duration":21875}},{"uid":"44c90abddd15fa0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/44c90abddd15fa0d","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725927918390,"stop":1725927960884,"duration":42494}},{"uid":"2c9d73392999857e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/2c9d73392999857e","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725841734793,"stop":1725841744855,"duration":10062}},{"uid":"f685bb57b006ee1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/f685bb57b006ee1d","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725755187365,"stop":1725755201487,"duration":14122}},{"uid":"9df3f112c3a589d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2092//#testresult/9df3f112c3a589d0","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725669071283,"stop":1725669095828,"duration":24545}},{"uid":"5b4da0e5a78756d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2088//#testresult/5b4da0e5a78756d6","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725582368023,"stop":1725582372889,"duration":4866}},{"uid":"79a3f5a58128b47f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2086//#testresult/79a3f5a58128b47f","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725570448269,"stop":1725570456262,"duration":7993}},{"uid":"8a12e57b5ea1dc96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2083//#testresult/8a12e57b5ea1dc96","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725496006182,"stop":1725496014243,"duration":8061}},{"uid":"2fabc9e43c1b985","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/2fabc9e43c1b985","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725431122901,"stop":1725431136778,"duration":13877}},{"uid":"f5bf10caace2f80f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/f5bf10caace2f80f","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725409918838,"stop":1725409957471,"duration":38633}},{"uid":"13d40f170c26d369","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2080//#testresult/13d40f170c26d369","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725404926160,"stop":1725404934183,"duration":8023}},{"uid":"3c7542c2833f08b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2073//#testresult/3c7542c2833f08b2","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725385900156,"stop":1725385913310,"duration":13154}},{"uid":"7d53c29f8889e5c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2070//#testresult/7d53c29f8889e5c9","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725348039899,"stop":1725348070812,"duration":30913}},{"uid":"f3e8ff9f58d85da7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2069//#testresult/f3e8ff9f58d85da7","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725323436387,"stop":1725323445379,"duration":8992}},{"uid":"11b4622a4ce5bb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2068//#testresult/11b4622a4ce5bb8","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725317231596,"stop":1725317251240,"duration":19644}},{"uid":"576f5a781c51053a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2066//#testresult/576f5a781c51053a","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725314020599,"stop":1725314043766,"duration":23167}},{"uid":"2df89fb4091a14e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2064//#testresult/2df89fb4091a14e7","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725311828523,"stop":1725311838958,"duration":10435}},{"uid":"958e4b15379ef35a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2060//#testresult/958e4b15379ef35a","status":"failed","statusDetails":"ValueError: time data 'Thursday 3rd October' does not match format '%A %dth %B'","time":{"start":1725309132784,"stop":1725309143875,"duration":11091}}]},"tags":[]},"source":"6ecfea097a9c0184.json","parameterValues":["UttlesfordDistrictCouncil"]}