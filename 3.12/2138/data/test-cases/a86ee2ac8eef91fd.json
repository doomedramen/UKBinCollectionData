{"uid":"a86ee2ac8eef91fd","name":"Validate Council Output [RochfordCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"1bb01030a3b95ea4a5571e55c760632c","time":{"start":1727741965860,"stop":1727741966480,"duration":620},"status":"failed","statusMessage":"ValueError: unconverted data remains:","statusTrace":"fixturefunc = <function scrape_step at 0x7efc9f29bce0>\nrequest = <FixtureRequest for <Function test_scenario_outline[RochfordCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7efca017f7a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/RochfordCouncil.py:36: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 1  November ', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:336: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains:","statusTrace":"fixturefunc = <function scrape_step at 0x7efc9f29bce0>\nrequest = <FixtureRequest for <Function test_scenario_outline[RochfordCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7efca017f7a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/RochfordCouncil.py:36: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 1  November ', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:336: ValueError","steps":[{"name":"Given the council","time":{"start":1727741965860,"stop":1727741965860,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727741965861,"stop":1727741966480,"duration":619},"status":"failed","statusMessage":"unconverted data remains:  ","statusTrace":"ValueError: unconverted data remains:  \n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e48bb4a9ccfb94ab","name":"stdout","source":"e48bb4a9ccfb94ab.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1118-748"},{"name":"thread","value":"2748-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"RochfordCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":149,"unknown":0,"total":156},"items":[{"uid":"c728814785178a09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/c728814785178a09","status":"passed","time":{"start":1727655602950,"stop":1727655604556,"duration":1606}},{"uid":"59ec7d8435175ab1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/59ec7d8435175ab1","status":"passed","time":{"start":1727569191032,"stop":1727569192211,"duration":1179}},{"uid":"700983b72fc4a750","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/700983b72fc4a750","status":"passed","time":{"start":1727482865502,"stop":1727482866545,"duration":1043}},{"uid":"6f052cdcf878e05f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/6f052cdcf878e05f","status":"passed","time":{"start":1727422993137,"stop":1727422994335,"duration":1198}},{"uid":"3871622deba81e48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/3871622deba81e48","status":"passed","time":{"start":1727396463291,"stop":1727396464308,"duration":1017}},{"uid":"d02bc2dd58150552","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/d02bc2dd58150552","status":"passed","time":{"start":1727309957035,"stop":1727309957949,"duration":914}},{"uid":"87c7085de373623f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/87c7085de373623f","status":"passed","time":{"start":1727223605087,"stop":1727223605727,"duration":640}},{"uid":"374d4e5afa11bd0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/374d4e5afa11bd0a","status":"passed","time":{"start":1727137280319,"stop":1727137280966,"duration":647}},{"uid":"2e8c175faa585e5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/2e8c175faa585e5a","status":"passed","time":{"start":1727050925628,"stop":1727050926360,"duration":732}},{"uid":"bebab9d16ec9320f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/bebab9d16ec9320f","status":"passed","time":{"start":1726964759126,"stop":1726964759711,"duration":585}},{"uid":"fb72d0b188bb085c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/fb72d0b188bb085c","status":"passed","time":{"start":1726878140780,"stop":1726878141880,"duration":1100}},{"uid":"a35ef875647a83ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/a35ef875647a83ee","status":"passed","time":{"start":1726791673686,"stop":1726791674225,"duration":539}},{"uid":"48d96e4768647204","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/48d96e4768647204","status":"passed","time":{"start":1726705207498,"stop":1726705208613,"duration":1115}},{"uid":"99e8e67d8ee726a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/99e8e67d8ee726a1","status":"passed","time":{"start":1726618807987,"stop":1726618808984,"duration":997}},{"uid":"4651340b2201a22f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/4651340b2201a22f","status":"passed","time":{"start":1726532481650,"stop":1726532482720,"duration":1070}},{"uid":"19548b5465950d54","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/19548b5465950d54","status":"passed","time":{"start":1726446113682,"stop":1726446114673,"duration":991}},{"uid":"1619c32b96c943e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/1619c32b96c943e9","status":"passed","time":{"start":1726359537664,"stop":1726359538656,"duration":992}},{"uid":"8821fe31a9744c1b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/8821fe31a9744c1b","status":"passed","time":{"start":1726273264319,"stop":1726273265015,"duration":696}},{"uid":"1cd6debf12ca70a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/1cd6debf12ca70a7","status":"passed","time":{"start":1726186818917,"stop":1726186820483,"duration":1566}},{"uid":"4fca066a401a9feb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/4fca066a401a9feb","status":"passed","time":{"start":1726100469670,"stop":1726100470393,"duration":723}}]},"tags":[]},"source":"a86ee2ac8eef91fd.json","parameterValues":["RochfordCouncil"]}