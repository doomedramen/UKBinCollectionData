{"uid":"24afab35627e3c7b","name":"Validate Council Output [WychavonDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"ab4be59a4392f5fb1301e38bba96913a","time":{"start":1727396915997,"stop":1727396924541,"duration":8544},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55779ac6e13a <unknown>\n#1 0x55779a95443d <unknown>\n#2 0x55779a99db48 <unknown>\n#3 0x55779a99bfc1 <unknown>\n#4 0x55779a9c8b22 <unknown>\n#5 0x55779a998478 <unknown>\n#6 0x55779a9c8cee <unknown>\n#7 0x55779a9e7d7d <unknown>\n#8 0x55779a9c88c3 <unknown>\n#9 0x55779a9966b3 <unknown>\n#10 0x55779a99768e <unknown>\n#11 0x55779ac38b3b <unknown>\n#12 0x55779ac3cac1 <unknown>\n#13 0x55779ac25335 <unknown>\n#14 0x55779ac3d642 <unknown>\n#15 0x55779ac0a49f <unknown>\n#16 0x55779ac5d038 <unknown>\n#17 0x55779ac5d203 <unknown>\n#18 0x55779ac6cf8c <unknown>\n#19 0x7fabc31cfa94 <unknown>\n#20 0x7fabc325ca34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f66660bafc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WychavonDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f6678a2c560>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WychavonDistrictCouncil.py:87: in parse_data\n    input_element_postcode.send_keys(user_postcode)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6664f26330>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x55779ac6cf8c \\\\u003Cunknown>\\\\n#19 0x7fabc31cfa94 \\\\u003Cunknown>\\\\n#20 0x7fabc325ca34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x55779ac6e13a <unknown>\nE       #1 0x55779a95443d <unknown>\nE       #2 0x55779a99db48 <unknown>\nE       #3 0x55779a99bfc1 <unknown>\nE       #4 0x55779a9c8b22 <unknown>\nE       #5 0x55779a998478 <unknown>\nE       #6 0x55779a9c8cee <unknown>\nE       #7 0x55779a9e7d7d <unknown>\nE       #8 0x55779a9c88c3 <unknown>\nE       #9 0x55779a9966b3 <unknown>\nE       #10 0x55779a99768e <unknown>\nE       #11 0x55779ac38b3b <unknown>\nE       #12 0x55779ac3cac1 <unknown>\nE       #13 0x55779ac25335 <unknown>\nE       #14 0x55779ac3d642 <unknown>\nE       #15 0x55779ac0a49f <unknown>\nE       #16 0x55779ac5d038 <unknown>\nE       #17 0x55779ac5d203 <unknown>\nE       #18 0x55779ac6cf8c <unknown>\nE       #19 0x7fabc31cfa94 <unknown>\nE       #20 0x7fabc325ca34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55779ac6e13a <unknown>\n#1 0x55779a95443d <unknown>\n#2 0x55779a99db48 <unknown>\n#3 0x55779a99bfc1 <unknown>\n#4 0x55779a9c8b22 <unknown>\n#5 0x55779a998478 <unknown>\n#6 0x55779a9c8cee <unknown>\n#7 0x55779a9e7d7d <unknown>\n#8 0x55779a9c88c3 <unknown>\n#9 0x55779a9966b3 <unknown>\n#10 0x55779a99768e <unknown>\n#11 0x55779ac38b3b <unknown>\n#12 0x55779ac3cac1 <unknown>\n#13 0x55779ac25335 <unknown>\n#14 0x55779ac3d642 <unknown>\n#15 0x55779ac0a49f <unknown>\n#16 0x55779ac5d038 <unknown>\n#17 0x55779ac5d203 <unknown>\n#18 0x55779ac6cf8c <unknown>\n#19 0x7fabc31cfa94 <unknown>\n#20 0x7fabc325ca34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f66660bafc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WychavonDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f6678a2c560>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WychavonDistrictCouncil.py:87: in parse_data\n    input_element_postcode.send_keys(user_postcode)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6664f26330>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x55779ac6cf8c \\\\u003Cunknown>\\\\n#19 0x7fabc31cfa94 \\\\u003Cunknown>\\\\n#20 0x7fabc325ca34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x55779ac6e13a <unknown>\nE       #1 0x55779a95443d <unknown>\nE       #2 0x55779a99db48 <unknown>\nE       #3 0x55779a99bfc1 <unknown>\nE       #4 0x55779a9c8b22 <unknown>\nE       #5 0x55779a998478 <unknown>\nE       #6 0x55779a9c8cee <unknown>\nE       #7 0x55779a9e7d7d <unknown>\nE       #8 0x55779a9c88c3 <unknown>\nE       #9 0x55779a9966b3 <unknown>\nE       #10 0x55779a99768e <unknown>\nE       #11 0x55779ac38b3b <unknown>\nE       #12 0x55779ac3cac1 <unknown>\nE       #13 0x55779ac25335 <unknown>\nE       #14 0x55779ac3d642 <unknown>\nE       #15 0x55779ac0a49f <unknown>\nE       #16 0x55779ac5d038 <unknown>\nE       #17 0x55779ac5d203 <unknown>\nE       #18 0x55779ac6cf8c <unknown>\nE       #19 0x7fabc31cfa94 <unknown>\nE       #20 0x7fabc325ca34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council","time":{"start":1727396915997,"stop":1727396915997,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727396915997,"stop":1727396924541,"duration":8544},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55779ac6e13a <unknown>\n#1 0x55779a95443d <unknown>\n#2 0x55779a99db48 <unknown>\n#3 0x55779a99bfc1 <unknown>\n#4 0x55779a9c8b22 <unknown>\n#5 0x55779a998478 <unknown>\n#6 0x55779a9c8cee <unknown>\n#7 0x55779a9e7d7d <unknown>\n#8 0x55779a9c88c3 <unknown>\n#9 0x55779a9966b3 <unknown>\n#10 0x55779a99768e <unknown>\n#11 0x55779ac38b3b <unknown>\n#12 0x55779ac3cac1 <unknown>\n#13 0x55779ac25335 <unknown>\n#14 0x55779ac3d642 <unknown>\n#15 0x55779ac0a49f <unknown>\n#16 0x55779ac5d038 <unknown>\n#17 0x55779ac5d203 <unknown>\n#18 0x55779ac6cf8c <unknown>\n#19 0x7fabc31cfa94 <unknown>\n#20 0x7fabc325ca34 __clone\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55779ac6e13a <unknown>\n#1 0x55779a95443d <unknown>\n#2 0x55779a99db48 <unknown>\n#3 0x55779a99bfc1 <unknown>\n#4 0x55779a9c8b22 <unknown>\n#5 0x55779a998478 <unknown>\n#6 0x55779a9c8cee <unknown>\n#7 0x55779a9e7d7d <unknown>\n#8 0x55779a9c88c3 <unknown>\n#9 0x55779a9966b3 <unknown>\n#10 0x55779a99768e <unknown>\n#11 0x55779ac38b3b <unknown>\n#12 0x55779ac3cac1 <unknown>\n#13 0x55779ac25335 <unknown>\n#14 0x55779ac3d642 <unknown>\n#15 0x55779ac0a49f <unknown>\n#16 0x55779ac5d038 <unknown>\n#17 0x55779ac5d203 <unknown>\n#18 0x55779ac6cf8c <unknown>\n#19 0x7fabc31cfa94 <unknown>\n#20 0x7fabc325ca34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d546d06c0c29721f","name":"log","source":"d546d06c0c29721f.txt","type":"text/plain","size":745},{"uid":"5b2074b977473fe4","name":"stdout","source":"5b2074b977473fe4.txt","type":"text/plain","size":122}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az698-909"},{"name":"thread","value":"2736-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WychavonDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":121,"unknown":0,"total":125},"items":[{"uid":"5a07915d189dee8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/5a07915d189dee8c","status":"passed","time":{"start":1727310677834,"stop":1727310715844,"duration":38010}},{"uid":"bcad40f09ff02851","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/bcad40f09ff02851","status":"passed","time":{"start":1727224341631,"stop":1727224356185,"duration":14554}},{"uid":"d03d8c9c2f45b84a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/d03d8c9c2f45b84a","status":"passed","time":{"start":1727137711598,"stop":1727137735284,"duration":23686}},{"uid":"7ca2b700100b6db1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/7ca2b700100b6db1","status":"passed","time":{"start":1727051350235,"stop":1727051356696,"duration":6461}},{"uid":"a77c9f35a6c5ace6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/a77c9f35a6c5ace6","status":"passed","time":{"start":1726965196610,"stop":1726965209562,"duration":12952}},{"uid":"8255d795042700e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/8255d795042700e8","status":"passed","time":{"start":1726878580382,"stop":1726878601258,"duration":20876}},{"uid":"8636c964b83a4997","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/8636c964b83a4997","status":"passed","time":{"start":1726792353981,"stop":1726792389649,"duration":35668}},{"uid":"2634d69eb00be701","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/2634d69eb00be701","status":"passed","time":{"start":1726705950250,"stop":1726705982168,"duration":31918}},{"uid":"10f7feaaceaffb92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/10f7feaaceaffb92","status":"passed","time":{"start":1726619538660,"stop":1726619569953,"duration":31293}},{"uid":"c39582cd7f522c4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/c39582cd7f522c4c","status":"passed","time":{"start":1726533158056,"stop":1726533193644,"duration":35588}},{"uid":"ded694c13bb1aded","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/ded694c13bb1aded","status":"passed","time":{"start":1726446859557,"stop":1726446883428,"duration":23871}},{"uid":"4c029cbec597ef32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/4c029cbec597ef32","status":"passed","time":{"start":1726359980609,"stop":1726360003790,"duration":23181}},{"uid":"49551501f9d331fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/49551501f9d331fd","status":"passed","time":{"start":1726273804316,"stop":1726273827070,"duration":22754}},{"uid":"6cb6c20358f598dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/6cb6c20358f598dc","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5563c63eb86a <unknown>\n#1 0x5563c60b9e50 <unknown>\n#2 0x5563c6109644 <unknown>\n#3 0x5563c6109931 <unknown>\n#4 0x5563c614f534 <unknown>\n#5 0x5563c612e4bd <unknown>\n#6 0x5563c614c9c6 <unknown>\n#7 0x5563c612e233 <unknown>\n#8 0x5563c60fc093 <unknown>\n#9 0x5563c60fd09e <unknown>\n#10 0x5563c63b2acb <unknown>\n#11 0x5563c63b6a81 <unknown>\n#12 0x5563c639e695 <unknown>\n#13 0x5563c63b75f2 <unknown>\n#14 0x5563c638386f <unknown>\n#15 0x5563c63da668 <unknown>\n#16 0x5563c63da832 <unknown>\n#17 0x5563c63ea65c <unknown>\n#18 0x7f02bb933a94 <unknown>\n#19 0x7f02bb9c0a34 __clone","time":{"start":1726187545486,"stop":1726187612681,"duration":67195}},{"uid":"98c50a657405b847","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/98c50a657405b847","status":"passed","time":{"start":1726100873760,"stop":1726100899225,"duration":25465}},{"uid":"d1db4c817cfa08d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/d1db4c817cfa08d3","status":"passed","time":{"start":1726014519032,"stop":1726014530323,"duration":11291}},{"uid":"d047a0bb42e0074f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/d047a0bb42e0074f","status":"passed","time":{"start":1725956587669,"stop":1725956611561,"duration":23892}},{"uid":"b8944882c087c2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/b8944882c087c2c","status":"passed","time":{"start":1725927973348,"stop":1725927981857,"duration":8509}},{"uid":"2f0a189a8b9c8ecf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/2f0a189a8b9c8ecf","status":"passed","time":{"start":1725841773699,"stop":1725841788024,"duration":14325}},{"uid":"62342bec7c4fb09a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/62342bec7c4fb09a","status":"passed","time":{"start":1725755239557,"stop":1725755249929,"duration":10372}}]},"tags":[]},"source":"24afab35627e3c7b.json","parameterValues":["WychavonDistrictCouncil"]}