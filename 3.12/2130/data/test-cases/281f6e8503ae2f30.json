{"uid":"281f6e8503ae2f30","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1727396300848,"stop":1727396302584,"duration":1736},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fb3eaa9f4c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fb3f3347b60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7fb3e9c7e270>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fb3eaa9f4c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fb3f3347b60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7fb3e9c7e270>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1727396300848,"stop":1727396300849,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727396300849,"stop":1727396302584,"duration":1735},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"682f79eb89eef62f","name":"stdout","source":"682f79eb89eef62f.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az698-909"},{"name":"thread","value":"2733-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":151,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":151},"items":[{"uid":"cb42bccd7d24f5ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/cb42bccd7d24f5ff","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727309845872,"stop":1727309847556,"duration":1684}},{"uid":"603c2bea773dd2a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/603c2bea773dd2a0","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727223457687,"stop":1727223459299,"duration":1612}},{"uid":"64651596e9777e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/64651596e9777e2","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727137123667,"stop":1727137125151,"duration":1484}},{"uid":"5d588317697fde08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/5d588317697fde08","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727050782230,"stop":1727050784066,"duration":1836}},{"uid":"2b20a2e6d592ad92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/2b20a2e6d592ad92","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726964356133,"stop":1726964357782,"duration":1649}},{"uid":"4dc301289ad6c337","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/4dc301289ad6c337","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726877973628,"stop":1726877975518,"duration":1890}},{"uid":"265cefaada50a575","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/265cefaada50a575","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726791519821,"stop":1726791521454,"duration":1633}},{"uid":"3f4e5558ff3c72af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/3f4e5558ff3c72af","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726705050956,"stop":1726705052920,"duration":1964}},{"uid":"bad70833ab3b36db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/bad70833ab3b36db","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726618669035,"stop":1726618670877,"duration":1842}},{"uid":"7a7ac25bd6fabe38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/7a7ac25bd6fabe38","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726532266377,"stop":1726532268052,"duration":1675}},{"uid":"a2359bc661ad23b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/a2359bc661ad23b0","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726445947600,"stop":1726445949682,"duration":2082}},{"uid":"337c7b40c8e5fe9d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/337c7b40c8e5fe9d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726359406443,"stop":1726359407999,"duration":1556}},{"uid":"8e29e6e807bbf2da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/8e29e6e807bbf2da","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726273063691,"stop":1726273065528,"duration":1837}},{"uid":"76891a10573c6d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/76891a10573c6d8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726186657463,"stop":1726186660084,"duration":2621}},{"uid":"7bcb3d504f99664c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/7bcb3d504f99664c","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726100314429,"stop":1726100315917,"duration":1488}},{"uid":"777fc247fbb94764","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/777fc247fbb94764","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1726013921014,"stop":1726013922694,"duration":1680}},{"uid":"7e9976c5c896609f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/7e9976c5c896609f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725955762523,"stop":1725955764238,"duration":1715}},{"uid":"a2d354a95d9e49f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/a2d354a95d9e49f6","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725927405755,"stop":1725927407382,"duration":1627}},{"uid":"6ea8cc519040b961","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/6ea8cc519040b961","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725841273915,"stop":1725841275599,"duration":1684}},{"uid":"a4102487eb73083","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/a4102487eb73083","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725754697908,"stop":1725754699309,"duration":1401}}]},"tags":[]},"source":"281f6e8503ae2f30.json","parameterValues":["GlasgowCityCouncil"]}