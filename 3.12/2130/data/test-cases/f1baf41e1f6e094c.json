{"uid":"f1baf41e1f6e094c","name":"Validate Council Output [CornwallCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"20fb6c486e377aee58980a6c6932d1ba","time":{"start":1727395975586,"stop":1727395976596,"duration":1010},"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7fbd14302ac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fbd26e5e9c0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:336: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7fbd14302ac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fbd26e5e9c0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:336: ValueError","steps":[{"name":"Given the council","time":{"start":1727395975586,"stop":1727395975587,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727395975587,"stop":1727395976596,"duration":1009},"status":"failed","statusMessage":"unconverted data remains: t","statusTrace":"ValueError: unconverted data remains: t\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d15a2546958f1023","name":"stdout","source":"d15a2546958f1023.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az698-909"},{"name":"thread","value":"2739-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CornwallCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":50,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":70},"items":[{"uid":"afc759fbd4bd5e1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/afc759fbd4bd5e1a","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1727309587262,"stop":1727309588339,"duration":1077}},{"uid":"f89a2c0358f90315","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/f89a2c0358f90315","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1727223162313,"stop":1727223163304,"duration":991}},{"uid":"79c74277cd51ec3c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/79c74277cd51ec3c","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1727136917625,"stop":1727136918433,"duration":808}},{"uid":"d76fd27bdc524bf2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/d76fd27bdc524bf2","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1727050551966,"stop":1727050552734,"duration":768}},{"uid":"83075f1e913fb660","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/83075f1e913fb660","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726964075732,"stop":1726964076676,"duration":944}},{"uid":"5ca7293266012357","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/5ca7293266012357","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726877733707,"stop":1726877734657,"duration":950}},{"uid":"61c4bb4e3d160c12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/61c4bb4e3d160c12","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726791210933,"stop":1726791211524,"duration":591}},{"uid":"181ec7718c7de9ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/181ec7718c7de9ea","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726704887617,"stop":1726704888404,"duration":787}},{"uid":"7f9e6367bcb1d952","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/7f9e6367bcb1d952","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726618424771,"stop":1726618425430,"duration":659}},{"uid":"4839ce8388271466","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/4839ce8388271466","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726532053090,"stop":1726532054061,"duration":971}},{"uid":"1d342b2da8ae6a7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/1d342b2da8ae6a7f","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726445745479,"stop":1726445746803,"duration":1324}},{"uid":"ac794df2a1dce55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/ac794df2a1dce55","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726359245829,"stop":1726359246609,"duration":780}},{"uid":"e33943abe75969f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/e33943abe75969f5","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726272780522,"stop":1726272781397,"duration":875}},{"uid":"a535d59d53a328f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/a535d59d53a328f9","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726186360071,"stop":1726186361359,"duration":1288}},{"uid":"c9f6f77bb1d3f15b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/c9f6f77bb1d3f15b","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726100036907,"stop":1726100037671,"duration":764}},{"uid":"7a7dd06160ca6340","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/7a7dd06160ca6340","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726013563416,"stop":1726013564337,"duration":921}},{"uid":"8c467f3979aa02fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/8c467f3979aa02fe","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725955535294,"stop":1725955535884,"duration":590}},{"uid":"2ad363b973ea3b8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/2ad363b973ea3b8c","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725927169740,"stop":1725927170463,"duration":723}},{"uid":"ae92225ff105615f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/ae92225ff105615f","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725841041824,"stop":1725841042466,"duration":642}},{"uid":"cd072b41c292781d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/cd072b41c292781d","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725754408361,"stop":1725754409282,"duration":921}}]},"tags":[]},"source":"f1baf41e1f6e094c.json","parameterValues":["CornwallCouncil"]}