{"uid":"cf2ddc8f9e699eab","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1723335914853,"stop":1723336056381,"duration":141528},"status":"failed","statusMessage":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4321fa9580>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f43357e5310>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 22nd August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4321fa9580>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f43357e5310>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 22nd August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1723335914853,"stop":1723335914854,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723335914854,"stop":1723336056381,"duration":141527},"status":"failed","statusMessage":"time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4c4e4743daf7a523","name":"log","source":"4c4e4743daf7a523.txt","type":"text/plain","size":133},{"uid":"d9a6ce77bbb60b24","name":"stdout","source":"d9a6ce77bbb60b24.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-158"},{"name":"thread","value":"2739-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":70},"items":[{"uid":"58bd14bbf222038b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/58bd14bbf222038b","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723249594706,"stop":1723249611942,"duration":17236}},{"uid":"1c316175aaf432df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/1c316175aaf432df","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723163170803,"stop":1723163179503,"duration":8700}},{"uid":"aa3725ac8ee027aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/aa3725ac8ee027aa","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723076722780,"stop":1723076735025,"duration":12245}},{"uid":"9954905da74e6673","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2012//#testresult/9954905da74e6673","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722990307221,"stop":1722990310136,"duration":2915}},{"uid":"c438f58a3014334e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2007//#testresult/c438f58a3014334e","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722903929386,"stop":1722903936793,"duration":7407}},{"uid":"8459b39062566be8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2006//#testresult/8459b39062566be8","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722817735883,"stop":1722817747375,"duration":11492}},{"uid":"a577c1f058f2b5e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2005//#testresult/a577c1f058f2b5e3","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722731213108,"stop":1722731227056,"duration":13948}},{"uid":"f12c8b1df01e05d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2004//#testresult/f12c8b1df01e05d7","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722644763252,"stop":1722644835313,"duration":72061}},{"uid":"6ba9a333b8d1edf0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2003//#testresult/6ba9a333b8d1edf0","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722558371359,"stop":1722558381623,"duration":10264}},{"uid":"6754fb9c24fe0007","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/6754fb9c24fe0007","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722471824031,"stop":1722471830221,"duration":6190}},{"uid":"b423c31d91a1a21a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/b423c31d91a1a21a","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722385541646,"stop":1722385562244,"duration":20598}},{"uid":"3f945afc81e111cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/3f945afc81e111cd","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722299007511,"stop":1722299019979,"duration":12468}},{"uid":"308e8b1b8f846cb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/308e8b1b8f846cb4","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722212644383,"stop":1722212657830,"duration":13447}},{"uid":"fcb193d62c587550","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/fcb193d62c587550","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722126200925,"stop":1722126209299,"duration":8374}},{"uid":"64f1ed261e83eafd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/64f1ed261e83eafd","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722039972159,"stop":1722039983102,"duration":10943}},{"uid":"beece79632d9b160","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/beece79632d9b160","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721953492051,"stop":1721953503851,"duration":11800}},{"uid":"f54cc3dbc32084eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/f54cc3dbc32084eb","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721867099768,"stop":1721867118478,"duration":18710}},{"uid":"f693370b29791ac5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1991//#testresult/f693370b29791ac5","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721780666234,"stop":1721780687025,"duration":20791}},{"uid":"cb76d7f23f0f6942","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1990//#testresult/cb76d7f23f0f6942","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721694185803,"stop":1721694190313,"duration":4510}},{"uid":"f0246418292c4782","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1989//#testresult/f0246418292c4782","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721607816051,"stop":1721607840387,"duration":24336}}]},"tags":[]},"source":"cf2ddc8f9e699eab.json","parameterValues":["UttlesfordDistrictCouncil"]}