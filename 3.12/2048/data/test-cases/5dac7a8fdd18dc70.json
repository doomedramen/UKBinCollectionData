{"uid":"5dac7a8fdd18dc70","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1724803902344,"stop":1724803987891,"duration":85547},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4226ca72e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f422818e900>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4226ca72e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f422818e900>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1724803902345,"stop":1724803902345,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724803902345,"stop":1724803987891,"duration":85546},"status":"failed","statusMessage":"time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"257ea1512932819","name":"stdout","source":"257ea1512932819.txt","type":"text/plain","size":207}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1121-872"},{"name":"thread","value":"2847-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":95,"unknown":0,"total":111},"items":[{"uid":"de8b2f61f9e0479a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/de8b2f61f9e0479a","status":"passed","time":{"start":1724717655480,"stop":1724717729897,"duration":74417}},{"uid":"b8bce83be9a1eeca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/b8bce83be9a1eeca","status":"passed","time":{"start":1724631207148,"stop":1724631238032,"duration":30884}},{"uid":"6222a8cdff533c60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/6222a8cdff533c60","status":"passed","time":{"start":1724544883452,"stop":1724544969555,"duration":86103}},{"uid":"2f209570c8ede8da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2037//#testresult/2f209570c8ede8da","status":"passed","time":{"start":1724458303087,"stop":1724458378299,"duration":75212}},{"uid":"edcc10898aed14bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2036//#testresult/edcc10898aed14bc","status":"passed","time":{"start":1724371968068,"stop":1724371989445,"duration":21377}},{"uid":"e0557eedae20344f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2034//#testresult/e0557eedae20344f","status":"passed","time":{"start":1724285524672,"stop":1724285577563,"duration":52891}},{"uid":"59caa13a0380a31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2033//#testresult/59caa13a0380a31","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 21 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1724199168235,"stop":1724199186037,"duration":17802}},{"uid":"45fb412e131a3129","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2032//#testresult/45fb412e131a3129","status":"passed","time":{"start":1724112924688,"stop":1724113000693,"duration":76005}},{"uid":"443ea27f58a226a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2031//#testresult/443ea27f58a226a3","status":"passed","time":{"start":1724026576438,"stop":1724026622762,"duration":46324}},{"uid":"565df1e9af6bd6b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2030//#testresult/565df1e9af6bd6b2","status":"passed","time":{"start":1723939958717,"stop":1723939981347,"duration":22630}},{"uid":"d4fa2bfcd45b4158","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2029//#testresult/d4fa2bfcd45b4158","status":"passed","time":{"start":1723853754390,"stop":1723853816283,"duration":61893}},{"uid":"88c680eea882f77c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/88c680eea882f77c","status":"passed","time":{"start":1723767373559,"stop":1723767426405,"duration":52846}},{"uid":"f8929aeaf0f3949c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/f8929aeaf0f3949c","status":"passed","time":{"start":1723680183970,"stop":1723680283866,"duration":99896}},{"uid":"60571b1e9bfe8b9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2026//#testresult/60571b1e9bfe8b9f","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1723594375855,"stop":1723594396976,"duration":21121}},{"uid":"e9da350746d2bc99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/e9da350746d2bc99","status":"passed","time":{"start":1723508176527,"stop":1723508203848,"duration":27321}},{"uid":"7e55dec81faea186","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/7e55dec81faea186","status":"passed","time":{"start":1723421972468,"stop":1723422018550,"duration":46082}},{"uid":"30642a3163540149","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/30642a3163540149","status":"passed","time":{"start":1723335528451,"stop":1723335616284,"duration":87833}},{"uid":"6a3708b744bbeb7d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/6a3708b744bbeb7d","status":"passed","time":{"start":1723249147380,"stop":1723249193694,"duration":46314}},{"uid":"17e5400166ead6b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/17e5400166ead6b2","status":"passed","time":{"start":1723162499507,"stop":1723162525098,"duration":25591}},{"uid":"813fe6fd0edfb768","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/813fe6fd0edfb768","status":"passed","time":{"start":1723076283665,"stop":1723076331121,"duration":47456}}]},"tags":[]},"source":"5dac7a8fdd18dc70.json","parameterValues":["KingstonUponThamesCouncil"]}