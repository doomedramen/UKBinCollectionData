{"uid":"a6ce2b2260b02dd1","name":"Validate Council Output [WyreCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c9a69097c6690b397ff5b0e462675a6f","time":{"start":1721607880790,"stop":1721607902044,"duration":21254},"status":"failed","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f3eba30f260>\ns = '<!DOCTYPE html>\\n    <!--[if IE 9]>          <html class=\"lt-ie10 no-js\" lang=\"en\"> <![endif]-->\\n    <!--[if gt IE 9... \\n            <a href=\"#\" id=\"open_preferences_center\">Update cookies preferences</a>\\n            </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f3ea65bde40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WyreCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3eba14ea20>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WyreCouncil.py:46: in parse_data\n    json_data = addr_res.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f3eba30f260>\ns = '<!DOCTYPE html>\\n    <!--[if IE 9]>          <html class=\"lt-ie10 no-js\" lang=\"en\"> <![endif]-->\\n    <!--[if gt IE 9... \\n            <a href=\"#\" id=\"open_preferences_center\">Update cookies preferences</a>\\n            </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f3ea65bde40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WyreCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3eba14ea20>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WyreCouncil.py:46: in parse_data\n    json_data = addr_res.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError","steps":[{"name":"Given the council","time":{"start":1721607880790,"stop":1721607880790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1721607880790,"stop":1721607902044,"duration":21254},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"756a3f9384ab8fc9","name":"stdout","source":"756a3f9384ab8fc9.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az714-90"},{"name":"thread","value":"2751-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WyreCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":72,"unknown":0,"total":73},"items":[{"uid":"da5c7cd9b4cfac6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1988//#testresult/da5c7cd9b4cfac6e","status":"passed","time":{"start":1721521477513,"stop":1721521480425,"duration":2912}},{"uid":"fdb642f27bdffeef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1987//#testresult/fdb642f27bdffeef","status":"passed","time":{"start":1721435134778,"stop":1721435138037,"duration":3259}},{"uid":"8851222791de7dbb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1986//#testresult/8851222791de7dbb","status":"passed","time":{"start":1721373257863,"stop":1721373260526,"duration":2663}},{"uid":"7989574754439759","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1985//#testresult/7989574754439759","status":"passed","time":{"start":1721264121235,"stop":1721264124585,"duration":3350}},{"uid":"e4ff9ed5b5faacd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1984//#testresult/e4ff9ed5b5faacd4","status":"passed","time":{"start":1721177515874,"stop":1721177518597,"duration":2723}},{"uid":"2a324d7146d6f04a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1983//#testresult/2a324d7146d6f04a","status":"passed","time":{"start":1721091184577,"stop":1721091186334,"duration":1757}},{"uid":"dc6f7913039e34b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/dc6f7913039e34b6","status":"passed","time":{"start":1721004898522,"stop":1721004900573,"duration":2051}},{"uid":"a22371e0c6a1fde7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/a22371e0c6a1fde7","status":"passed","time":{"start":1720918585281,"stop":1720918587376,"duration":2095}},{"uid":"337dccf443a38cd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/337dccf443a38cd7","status":"passed","time":{"start":1720831912794,"stop":1720831916236,"duration":3442}},{"uid":"8d9d766fcc03cf94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1979//#testresult/8d9d766fcc03cf94","status":"passed","time":{"start":1720745458558,"stop":1720745460559,"duration":2001}},{"uid":"faaa66a201df126e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1978//#testresult/faaa66a201df126e","status":"passed","time":{"start":1720659186791,"stop":1720659188751,"duration":1960}},{"uid":"a7e87dba1f49074f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1977//#testresult/a7e87dba1f49074f","status":"passed","time":{"start":1720572752628,"stop":1720572756018,"duration":3390}},{"uid":"e6c89d7fee16085c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1976//#testresult/e6c89d7fee16085c","status":"passed","time":{"start":1720485870396,"stop":1720485873541,"duration":3145}},{"uid":"df2c636801421be5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1975//#testresult/df2c636801421be5","status":"passed","time":{"start":1720399682314,"stop":1720399683981,"duration":1667}},{"uid":"ab089f2595826148","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1971//#testresult/ab089f2595826148","status":"passed","time":{"start":1720313447681,"stop":1720313450316,"duration":2635}},{"uid":"e1bae2803cfe6830","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/e1bae2803cfe6830","status":"passed","time":{"start":1720226836872,"stop":1720226839281,"duration":2409}},{"uid":"9421029ee8a02379","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/9421029ee8a02379","status":"passed","time":{"start":1720140327019,"stop":1720140330143,"duration":3124}},{"uid":"d14d3cc6e1cd77c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/d14d3cc6e1cd77c4","status":"passed","time":{"start":1720053833962,"stop":1720053837507,"duration":3545}},{"uid":"72777443a0afaa24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/72777443a0afaa24","status":"passed","time":{"start":1719967400919,"stop":1719967402905,"duration":1986}},{"uid":"e39774f516bca22c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/e39774f516bca22c","status":"passed","time":{"start":1719881049854,"stop":1719881051745,"duration":1891}}]},"tags":[]},"source":"a6ce2b2260b02dd1.json","parameterValues":["WyreCouncil"]}