{"uid":"2ea22168012aba01","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1717375549088,"stop":1717375583222,"duration":34134},"status":"failed","statusMessage":"ValueError: time data 'June' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f987fa785e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f988091cbc0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'June', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'June' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'June' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f987fa785e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f988091cbc0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'June', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'June' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1717375549088,"stop":1717375549089,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1717375549089,"stop":1717375583222,"duration":34133},"status":"failed","statusMessage":"time data 'June' does not match format '%d %B'","statusTrace":"ValueError: time data 'June' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"98f90628a8124c34","name":"stdout","source":"98f90628a8124c34.txt","type":"text/plain","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1040-416"},{"name":"thread","value":"2660-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":15,"unknown":0,"total":26},"items":[{"uid":"db26c6252337be78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1911//#testresult/db26c6252337be78","status":"passed","time":{"start":1717317062472,"stop":1717317077813,"duration":15341}},{"uid":"54f2517f74876b36","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1908//#testresult/54f2517f74876b36","status":"passed","time":{"start":1717289158303,"stop":1717289183059,"duration":24756}},{"uid":"ac059ab676af1cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1905//#testresult/ac059ab676af1cd","status":"passed","time":{"start":1717202840887,"stop":1717202861775,"duration":20888}},{"uid":"2f204eaa849eb48c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1904//#testresult/2f204eaa849eb48c","status":"passed","time":{"start":1717116174372,"stop":1717116191187,"duration":16815}},{"uid":"62897efec3d69029","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1903//#testresult/62897efec3d69029","status":"passed","time":{"start":1717029961037,"stop":1717030043460,"duration":82423}},{"uid":"249526fd6d6d862a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1898//#testresult/249526fd6d6d862a","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1716943632208,"stop":1716943669028,"duration":36820}},{"uid":"6e7c89d821fb47af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1893//#testresult/6e7c89d821fb47af","status":"passed","time":{"start":1716856859678,"stop":1716856874684,"duration":15006}},{"uid":"6ce66e386d9963e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1883//#testresult/6ce66e386d9963e5","status":"failed","statusDetails":"ValueError: time data 'May' does not match format '%d %B'","time":{"start":1716770431140,"stop":1716770453851,"duration":22711}},{"uid":"b448ae3c94885dc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1881//#testresult/b448ae3c94885dc4","status":"passed","time":{"start":1716753625550,"stop":1716753633378,"duration":7828}},{"uid":"3af3888014f270b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1877//#testresult/3af3888014f270b","status":"passed","time":{"start":1716743788791,"stop":1716743794665,"duration":5874}},{"uid":"125a9c1f53c60c5f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1871//#testresult/125a9c1f53c60c5f","status":"passed","time":{"start":1716710300381,"stop":1716710307376,"duration":6995}},{"uid":"c74dba1aeb719ce2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1866//#testresult/c74dba1aeb719ce2","status":"passed","time":{"start":1716705783313,"stop":1716705789363,"duration":6050}},{"uid":"b18183f36a9de47f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1865//#testresult/b18183f36a9de47f","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1716684083296,"stop":1716684096132,"duration":12836}},{"uid":"65f538b2b1120674","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1863//#testresult/65f538b2b1120674","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1716625455608,"stop":1716625462433,"duration":6825}},{"uid":"ea5b5f1982e7865","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1862//#testresult/ea5b5f1982e7865","status":"passed","time":{"start":1716597496123,"stop":1716597507671,"duration":11548}},{"uid":"d63fa30cb4522153","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1856//#testresult/d63fa30cb4522153","status":"passed","time":{"start":1716511235157,"stop":1716511245238,"duration":10081}},{"uid":"9a61bc8c96932c7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1855//#testresult/9a61bc8c96932c7b","status":"passed","time":{"start":1716424927225,"stop":1716424939419,"duration":12194}},{"uid":"ee98014807bec79b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1854//#testresult/ee98014807bec79b","status":"passed","time":{"start":1716338386181,"stop":1716338397114,"duration":10933}},{"uid":"637bffed88a7e779","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1853//#testresult/637bffed88a7e779","status":"passed","time":{"start":1716252057581,"stop":1716252073510,"duration":15929}},{"uid":"f91a975262ec7ebc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1852//#testresult/f91a975262ec7ebc","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55563ec0beca <unknown>\n#1 0x55563e8f545c <unknown>\n#2 0x55563e9415b5 <unknown>\n#3 0x55563e941671 <unknown>\n#4 0x55563e985f14 <unknown>\n#5 0x55563e9644dd <unknown>\n#6 0x55563e9832cc <unknown>\n#7 0x55563e964253 <unknown>\n#8 0x55563e9341c7 <unknown>\n#9 0x55563e934b3e <unknown>\n#10 0x55563ebd230b <unknown>\n#11 0x55563ebd63b7 <unknown>\n#12 0x55563ebbee3e <unknown>\n#13 0x55563ebd6e82 <unknown>\n#14 0x55563eba37df <unknown>\n#15 0x55563ebfb1b8 <unknown>\n#16 0x55563ebfb38b <unknown>\n#17 0x55563ec0affc <unknown>\n#18 0x7f5715f2fac3 <unknown>","time":{"start":1716165649828,"stop":1716165674418,"duration":24590}}]},"tags":[]},"source":"2ea22168012aba01.json","parameterValues":["WestBerkshireCouncil"]}