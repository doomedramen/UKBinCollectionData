{"uid":"b057b8c7a207532c","name":"Validate Council Output [MoleValleyDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"47d4fc200fdb123acdd0e48934223e47","time":{"start":1727137213002,"stop":1727137213734,"duration":732},"status":"failed","statusMessage":"ValueError: min() iterable argument is empty","statusTrace":"fixturefunc = <function scrape_step at 0x7f7ea200ba60>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7ea2d77d70>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7f7ea1eb50d0>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 33724643, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() iterable argument is empty\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: min() iterable argument is empty","statusTrace":"fixturefunc = <function scrape_step at 0x7f7ea200ba60>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7ea2d77d70>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7f7ea1eb50d0>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 33724643, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() iterable argument is empty\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","steps":[{"name":"Given the council","time":{"start":1727137213002,"stop":1727137213003,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727137213003,"stop":1727137213734,"duration":731},"status":"failed","statusMessage":"min() iterable argument is empty","statusTrace":"ValueError: min() iterable argument is empty\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a4d390e3ae112a3b","name":"stdout","source":"a4d390e3ae112a3b.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1501-214"},{"name":"thread","value":"2843-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MoleValleyDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":134,"unknown":0,"total":149},"items":[{"uid":"507e74b3829773c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/507e74b3829773c3","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727050883766,"stop":1727050884911,"duration":1145}},{"uid":"7597b8a3b9ec4d64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/7597b8a3b9ec4d64","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1726964399374,"stop":1726964400140,"duration":766}},{"uid":"65a31f66f037c685","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/65a31f66f037c685","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1726878088606,"stop":1726878089723,"duration":1117}},{"uid":"a1fcbd6c70d6bfc2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/a1fcbd6c70d6bfc2","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1726791536976,"stop":1726791537683,"duration":707}},{"uid":"164f6eb439eabe03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/164f6eb439eabe03","status":"passed","time":{"start":1726705156718,"stop":1726705157733,"duration":1015}},{"uid":"7509adc49bfd851c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/7509adc49bfd851c","status":"passed","time":{"start":1726618711339,"stop":1726618712240,"duration":901}},{"uid":"e13c95e838ae5e7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/e13c95e838ae5e7c","status":"passed","time":{"start":1726532344050,"stop":1726532344644,"duration":594}},{"uid":"cc74f1af4ac63f74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/cc74f1af4ac63f74","status":"passed","time":{"start":1726446088354,"stop":1726446089382,"duration":1028}},{"uid":"8eeb06cace811d57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/8eeb06cace811d57","status":"passed","time":{"start":1726359499200,"stop":1726359500087,"duration":887}},{"uid":"ad0d77c8977f05f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/ad0d77c8977f05f7","status":"passed","time":{"start":1726273150752,"stop":1726273151564,"duration":812}},{"uid":"b4f83f189430a2cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/b4f83f189430a2cd","status":"passed","time":{"start":1726186761752,"stop":1726186763048,"duration":1296}},{"uid":"ff28aa18e6db3c69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/ff28aa18e6db3c69","status":"passed","time":{"start":1726100426365,"stop":1726100427024,"duration":659}},{"uid":"289d33a8b676c62c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/289d33a8b676c62c","status":"passed","time":{"start":1726013940084,"stop":1726013940849,"duration":765}},{"uid":"2c893d9d9f56780a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/2c893d9d9f56780a","status":"passed","time":{"start":1725955802919,"stop":1725955803608,"duration":689}},{"uid":"c3de15983e6c059e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/c3de15983e6c059e","status":"passed","time":{"start":1725927505709,"stop":1725927506379,"duration":670}},{"uid":"32730f1e04e32428","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/32730f1e04e32428","status":"passed","time":{"start":1725841288860,"stop":1725841289605,"duration":745}},{"uid":"ad1a4bec2134a582","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/ad1a4bec2134a582","status":"passed","time":{"start":1725754704583,"stop":1725754705227,"duration":644}},{"uid":"935c7990b13218ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2092//#testresult/935c7990b13218ae","status":"passed","time":{"start":1725668248002,"stop":1725668248844,"duration":842}},{"uid":"fbce431230391080","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2088//#testresult/fbce431230391080","status":"passed","time":{"start":1725581832117,"stop":1725581832965,"duration":848}},{"uid":"a40935b787e93977","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2086//#testresult/a40935b787e93977","status":"passed","time":{"start":1725569648691,"stop":1725569649962,"duration":1271}}]},"tags":[]},"source":"b057b8c7a207532c.json","parameterValues":["MoleValleyDistrictCouncil"]}