{"uid":"f181e47c551af3e1","name":"Validate Council Output [SouthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"efde6c2c8e15955ad5fa48845f3c2c06","time":{"start":1726273290012,"stop":1726273381849,"duration":91837},"status":"failed","statusMessage":"KeyError: 'SortedCollections'","statusTrace":"fixturefunc = <function scrape_step at 0x7f763f821f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f76523370e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f763e85a240>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n        json_result = json.loads(response.text)[\"result\"]\n>       months = json_result[\"SortedCollections\"]\nE       KeyError: 'SortedCollections'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:86: KeyError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"KeyError: 'SortedCollections'","statusTrace":"fixturefunc = <function scrape_step at 0x7f763f821f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f76523370e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f763e85a240>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n        json_result = json.loads(response.text)[\"result\"]\n>       months = json_result[\"SortedCollections\"]\nE       KeyError: 'SortedCollections'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:86: KeyError","steps":[{"name":"Given the council","time":{"start":1726273290012,"stop":1726273290013,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726273290013,"stop":1726273381849,"duration":91836},"status":"failed","statusMessage":"'SortedCollections'","statusTrace":"KeyError: 'SortedCollections'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8c299b5b8eb823e2","name":"stdout","source":"8c299b5b8eb823e2.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-992"},{"name":"thread","value":"2750-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthTynesideCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":113,"broken":0,"skipped":0,"passed":25,"unknown":0,"total":138},"items":[{"uid":"98f1d8bb3c9af4cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2113//#testresult/98f1d8bb3c9af4cc","status":"passed","time":{"start":1726186865402,"stop":1726186867891,"duration":2489}},{"uid":"2e49042ee7f1d3d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2112//#testresult/2e49042ee7f1d3d1","status":"passed","time":{"start":1726100491837,"stop":1726100494078,"duration":2241}},{"uid":"4dae252eee6dc740","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2111//#testresult/4dae252eee6dc740","status":"passed","time":{"start":1726014096961,"stop":1726014098921,"duration":1960}},{"uid":"b3664c2d4f76cc0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2109//#testresult/b3664c2d4f76cc0a","status":"passed","time":{"start":1725956220573,"stop":1725956222695,"duration":2122}},{"uid":"e2066a53861b74c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2107//#testresult/e2066a53861b74c3","status":"passed","time":{"start":1725927574196,"stop":1725927586793,"duration":12597}},{"uid":"af12bdee09b0cfd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2095//#testresult/af12bdee09b0cfd2","status":"passed","time":{"start":1725841687527,"stop":1725841689961,"duration":2434}},{"uid":"92ac3c8ab677e5fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2093//#testresult/92ac3c8ab677e5fa","status":"passed","time":{"start":1725755143976,"stop":1725755146801,"duration":2825}},{"uid":"f9b91fbb6b5362d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2092//#testresult/f9b91fbb6b5362d2","status":"passed","time":{"start":1725669049709,"stop":1725669052388,"duration":2679}},{"uid":"6bb865611d33a91d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2088//#testresult/6bb865611d33a91d","status":"passed","time":{"start":1725582044735,"stop":1725582053803,"duration":9068}},{"uid":"57353f15d8643f8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2086//#testresult/57353f15d8643f8d","status":"passed","time":{"start":1725570140543,"stop":1725570143037,"duration":2494}},{"uid":"dda380e66a230e11","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2083//#testresult/dda380e66a230e11","status":"passed","time":{"start":1725495943784,"stop":1725495945686,"duration":1902}},{"uid":"224ac596ff3f5781","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/224ac596ff3f5781","status":"passed","time":{"start":1725430805624,"stop":1725430807889,"duration":2265}},{"uid":"244f399d39d2de48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/244f399d39d2de48","status":"passed","time":{"start":1725409581134,"stop":1725409583497,"duration":2363}},{"uid":"4de889b9bcf4242f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2080//#testresult/4de889b9bcf4242f","status":"passed","time":{"start":1725404598574,"stop":1725404600209,"duration":1635}},{"uid":"562e23751eee1b6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2073//#testresult/562e23751eee1b6b","status":"passed","time":{"start":1725385577935,"stop":1725385579579,"duration":1644}},{"uid":"792c955f118e3083","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2070//#testresult/792c955f118e3083","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1725347732522,"stop":1725347733893,"duration":1371}},{"uid":"ba556be84043e4b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2069//#testresult/ba556be84043e4b3","status":"passed","time":{"start":1725323114631,"stop":1725323119554,"duration":4923}},{"uid":"62199ca32865a92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2068//#testresult/62199ca32865a92","status":"passed","time":{"start":1725316909572,"stop":1725316911353,"duration":1781}},{"uid":"cfa9130c71b1c5d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2066//#testresult/cfa9130c71b1c5d2","status":"passed","time":{"start":1725313697371,"stop":1725313700024,"duration":2653}},{"uid":"272baa56c05f7094","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2064//#testresult/272baa56c05f7094","status":"passed","time":{"start":1725311493411,"stop":1725311494990,"duration":1579}}]},"tags":[]},"source":"f181e47c551af3e1.json","parameterValues":["SouthTynesideCouncil"]}