{"uid":"4a75ac560988c99a","name":"Validate Council Output [WestLindseyDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f5da797a0b2058c505a20cf5bf95112e","time":{"start":1720485851382,"stop":1720485851902,"duration":520},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc5be7918a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestLindseyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc5d1fe2a80>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestLindseyDistrictCouncil.py:34: in parse_data\n    address_data = json.loads(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc5d2539190>\ns = 'The service is unavailabl', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc5be7918a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestLindseyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc5d1fe2a80>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestLindseyDistrictCouncil.py:34: in parse_data\n    address_data = json.loads(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc5d2539190>\ns = 'The service is unavailabl', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council","time":{"start":1720485851382,"stop":1720485851383,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720485851383,"stop":1720485851902,"duration":519},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a5bf263817a75cda","name":"stdout","source":"a5bf263817a75cda.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1427-442"},{"name":"thread","value":"2761-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestLindseyDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":59,"unknown":0,"total":60},"items":[{"uid":"3739305e03816650","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1975//#testresult/3739305e03816650","status":"passed","time":{"start":1720399648578,"stop":1720399649531,"duration":953}},{"uid":"1dd6239b50815ede","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1971//#testresult/1dd6239b50815ede","status":"passed","time":{"start":1720313435001,"stop":1720313436597,"duration":1596}},{"uid":"b3411c5b72171dda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/b3411c5b72171dda","status":"passed","time":{"start":1720226836184,"stop":1720226837282,"duration":1098}},{"uid":"8c9f619b6807d651","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/8c9f619b6807d651","status":"passed","time":{"start":1720140171672,"stop":1720140172662,"duration":990}},{"uid":"b631c6a3e6e8e755","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/b631c6a3e6e8e755","status":"passed","time":{"start":1720053808845,"stop":1720053810427,"duration":1582}},{"uid":"d6c374652d1f661","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/d6c374652d1f661","status":"passed","time":{"start":1719967391004,"stop":1719967391876,"duration":872}},{"uid":"9bc080a188f1a64f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/9bc080a188f1a64f","status":"passed","time":{"start":1719881039530,"stop":1719881040709,"duration":1179}},{"uid":"e73350dd044aa00e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/e73350dd044aa00e","status":"passed","time":{"start":1719795079482,"stop":1719795080579,"duration":1097}},{"uid":"e3230b393e2eb900","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/e3230b393e2eb900","status":"passed","time":{"start":1719708598907,"stop":1719708600473,"duration":1566}},{"uid":"fc43f84146179106","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/fc43f84146179106","status":"passed","time":{"start":1719621931019,"stop":1719621932101,"duration":1082}},{"uid":"dad353b1028dc866","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/dad353b1028dc866","status":"passed","time":{"start":1719535383963,"stop":1719535385350,"duration":1387}},{"uid":"19848d25bcf4cbcb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/19848d25bcf4cbcb","status":"passed","time":{"start":1719362761299,"stop":1719362762256,"duration":957}},{"uid":"82686de43b4289ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/82686de43b4289ed","status":"passed","time":{"start":1719276324793,"stop":1719276325583,"duration":790}},{"uid":"c35538ab84bc06ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/c35538ab84bc06ee","status":"passed","time":{"start":1719190094374,"stop":1719190095378,"duration":1004}},{"uid":"a673106376cd0cba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/a673106376cd0cba","status":"passed","time":{"start":1719103711347,"stop":1719103712512,"duration":1165}},{"uid":"d9f9d4d6c5a1832a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/d9f9d4d6c5a1832a","status":"passed","time":{"start":1719017172061,"stop":1719017172959,"duration":898}},{"uid":"2b3ab7a1bf268dc3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/2b3ab7a1bf268dc3","status":"passed","time":{"start":1718930799246,"stop":1718930800726,"duration":1480}},{"uid":"40ae5bc4c5ea8ea2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/40ae5bc4c5ea8ea2","status":"passed","time":{"start":1718844349189,"stop":1718844350569,"duration":1380}},{"uid":"e1ac909198408e81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/e1ac909198408e81","status":"passed","time":{"start":1718757994506,"stop":1718757995430,"duration":924}},{"uid":"27f2bb5582c4f33d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/27f2bb5582c4f33d","status":"passed","time":{"start":1718671521797,"stop":1718671522783,"duration":986}}]},"tags":[]},"source":"4a75ac560988c99a.json","parameterValues":["WestLindseyDistrictCouncil"]}