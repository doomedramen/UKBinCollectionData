{"uid":"8ebb261a14da8e61","name":"Validate Council Output [BuryCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"93061d049d5e3b3b2886e3c632b0e1f1","time":{"start":1721262583865,"stop":1721262668425,"duration":84560},"status":"failed","statusMessage":"ConnectionAbortedError: Issue encountered getting bin data.","statusTrace":"fixturefunc = <function scrape_step at 0x7f99bb3b1a80>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuryCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f99cecf1a90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BuryCouncil.CouncilClass object at 0x7f99bb394950>, page = ''\nkwargs = {'council_module_str': 'BuryCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ncollections = [], data = {'bins': []}, postcode = 'M26 3XY'\naddr_response = <Response [200]>\naddress_json = [{'addressLine1': '1 Burghley Drive', 'city': 'Radcliffe', 'id': '603448', 'postcode': 'M26 3XY'}, {'addressLine1': '3...de': 'M26 3XY'}, {'addressLine1': '7 Burghley Drive', 'city': 'Radcliffe', 'id': '603453', 'postcode': 'M26 3XY'}, ...]\naddr = {'addressLine1': '3 Burghley Drive', 'city': 'Radcliffe', 'id': '603449', 'postcode': 'M26 3XY'}\nresponse = <Response [504]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        collections = []\n        data = {\"bins\": []}\n    \n        # Get and check postcode and PAON\n        postcode = kwargs.get(\"postcode\")\n        paon = kwargs.get(\"paon\")\n        check_postcode(postcode)\n        check_paon(paon)\n    \n        # Make API call to get property info using postcode\n        addr_response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getProperties?postcode={postcode.replace(\" \", \"\")}'\n        )\n        if addr_response.status_code != 200:\n            raise ConnectionAbortedError(\"Issue encountered getting addresses.\")\n        address_json = json.loads(addr_response.text)[\"response\"]\n    \n        # This makes addr the next item that has the house number. Since these are ordered by house number, a single\n        # number like 3 wouldn't return 33\n        addr = next(item for item in address_json if paon in item[\"addressLine1\"])\n    \n        # Make API call to get bin data using property ID\n        response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getPropertyById?id={addr.get(\"id\")}'\n        )\n        if response.status_code != 200:\n>           raise ConnectionAbortedError(\"Issue encountered getting bin data.\")\nE           ConnectionAbortedError: Issue encountered getting bin data.\n\nuk_bin_collection/uk_bin_collection/councils/BuryCouncil.py:42: ConnectionAbortedError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ConnectionAbortedError: Issue encountered getting bin data.","statusTrace":"fixturefunc = <function scrape_step at 0x7f99bb3b1a80>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuryCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f99cecf1a90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BuryCouncil.CouncilClass object at 0x7f99bb394950>, page = ''\nkwargs = {'council_module_str': 'BuryCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ncollections = [], data = {'bins': []}, postcode = 'M26 3XY'\naddr_response = <Response [200]>\naddress_json = [{'addressLine1': '1 Burghley Drive', 'city': 'Radcliffe', 'id': '603448', 'postcode': 'M26 3XY'}, {'addressLine1': '3...de': 'M26 3XY'}, {'addressLine1': '7 Burghley Drive', 'city': 'Radcliffe', 'id': '603453', 'postcode': 'M26 3XY'}, ...]\naddr = {'addressLine1': '3 Burghley Drive', 'city': 'Radcliffe', 'id': '603449', 'postcode': 'M26 3XY'}\nresponse = <Response [504]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        collections = []\n        data = {\"bins\": []}\n    \n        # Get and check postcode and PAON\n        postcode = kwargs.get(\"postcode\")\n        paon = kwargs.get(\"paon\")\n        check_postcode(postcode)\n        check_paon(paon)\n    \n        # Make API call to get property info using postcode\n        addr_response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getProperties?postcode={postcode.replace(\" \", \"\")}'\n        )\n        if addr_response.status_code != 200:\n            raise ConnectionAbortedError(\"Issue encountered getting addresses.\")\n        address_json = json.loads(addr_response.text)[\"response\"]\n    \n        # This makes addr the next item that has the house number. Since these are ordered by house number, a single\n        # number like 3 wouldn't return 33\n        addr = next(item for item in address_json if paon in item[\"addressLine1\"])\n    \n        # Make API call to get bin data using property ID\n        response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getPropertyById?id={addr.get(\"id\")}'\n        )\n        if response.status_code != 200:\n>           raise ConnectionAbortedError(\"Issue encountered getting bin data.\")\nE           ConnectionAbortedError: Issue encountered getting bin data.\n\nuk_bin_collection/uk_bin_collection/councils/BuryCouncil.py:42: ConnectionAbortedError","steps":[{"name":"Given the council","time":{"start":1721262583865,"stop":1721262583866,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from the council","time":{"start":1721262583866,"stop":1721262668425,"duration":84559},"status":"failed","statusMessage":"Issue encountered getting bin data.","statusTrace":"ConnectionAbortedError: Issue encountered getting bin data.\n","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"3aa49ea7ff341a77","name":"stdout","source":"3aa49ea7ff341a77.txt","type":"text/plain","size":38}],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1272-850"},{"name":"thread","value":"2698-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BuryCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":68,"unknown":0,"total":69},"items":[{"uid":"6471959ea40a79d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1984//#testresult/6471959ea40a79d6","status":"passed","time":{"start":1721176201801,"stop":1721176205408,"duration":3607}},{"uid":"3201ce03b4ed1c05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1983//#testresult/3201ce03b4ed1c05","status":"passed","time":{"start":1721089795019,"stop":1721089797040,"duration":2021}},{"uid":"e7b515a2d0d4d22b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/e7b515a2d0d4d22b","status":"passed","time":{"start":1721003488372,"stop":1721003490554,"duration":2182}},{"uid":"a0b2b13554d03260","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/a0b2b13554d03260","status":"passed","time":{"start":1720917207985,"stop":1720917210609,"duration":2624}},{"uid":"ed29ec225db8786f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/ed29ec225db8786f","status":"passed","time":{"start":1720830582094,"stop":1720830583985,"duration":1891}},{"uid":"b71bc223b223e5ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1979//#testresult/b71bc223b223e5ee","status":"passed","time":{"start":1720744157599,"stop":1720744159275,"duration":1676}},{"uid":"29f4fe26f8d30997","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1978//#testresult/29f4fe26f8d30997","status":"passed","time":{"start":1720657815144,"stop":1720657817252,"duration":2108}},{"uid":"1045213dec023af8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1977//#testresult/1045213dec023af8","status":"passed","time":{"start":1720571409961,"stop":1720571414061,"duration":4100}},{"uid":"98491db9619f298a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1976//#testresult/98491db9619f298a","status":"passed","time":{"start":1720484957827,"stop":1720484960136,"duration":2309}},{"uid":"5425e980a8362e27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1975//#testresult/5425e980a8362e27","status":"passed","time":{"start":1720398653502,"stop":1720398655569,"duration":2067}},{"uid":"5c169ebead9f96d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1971//#testresult/5c169ebead9f96d3","status":"passed","time":{"start":1720312342534,"stop":1720312344996,"duration":2462}},{"uid":"fc5fe12542057307","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/fc5fe12542057307","status":"passed","time":{"start":1720225705864,"stop":1720225707740,"duration":1876}},{"uid":"8b7dabec13e51079","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/8b7dabec13e51079","status":"passed","time":{"start":1720139337077,"stop":1720139338838,"duration":1761}},{"uid":"ebf5389a21319ab6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/ebf5389a21319ab6","status":"passed","time":{"start":1720052943000,"stop":1720052945139,"duration":2139}},{"uid":"a035f795115c7c2a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/a035f795115c7c2a","status":"passed","time":{"start":1719966539504,"stop":1719966541421,"duration":1917}},{"uid":"f48e4497474c965f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/f48e4497474c965f","status":"passed","time":{"start":1719880210292,"stop":1719880213785,"duration":3493}},{"uid":"499c1d23201b737f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/499c1d23201b737f","status":"passed","time":{"start":1719794028847,"stop":1719794030937,"duration":2090}},{"uid":"3be602171d2a0500","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/3be602171d2a0500","status":"passed","time":{"start":1719707529884,"stop":1719707532214,"duration":2330}},{"uid":"e222f5a73ef2f2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/e222f5a73ef2f2c","status":"passed","time":{"start":1719620900898,"stop":1719620903054,"duration":2156}},{"uid":"1014feab1149de0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/1014feab1149de0c","status":"passed","time":{"start":1719534524746,"stop":1719534527638,"duration":2892}}]},"tags":[]},"source":"8ebb261a14da8e61.json","parameterValues":["BuryCouncil"]}