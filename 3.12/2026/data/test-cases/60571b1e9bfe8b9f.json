{"uid":"60571b1e9bfe8b9f","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1723594375855,"stop":1723594396976,"duration":21121},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f201f732340>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2032f6ea20>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f201f732340>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2032f6ea20>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1723594375855,"stop":1723594375856,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723594375856,"stop":1723594396976,"duration":21120},"status":"failed","statusMessage":"time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 14 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"792018ecac5563f5","name":"stdout","source":"792018ecac5563f5.txt","type":"text/plain","size":207}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az525-740"},{"name":"thread","value":"2774-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":83,"unknown":0,"total":97},"items":[{"uid":"e9da350746d2bc99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/e9da350746d2bc99","status":"passed","time":{"start":1723508176527,"stop":1723508203848,"duration":27321}},{"uid":"7e55dec81faea186","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/7e55dec81faea186","status":"passed","time":{"start":1723421972468,"stop":1723422018550,"duration":46082}},{"uid":"30642a3163540149","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/30642a3163540149","status":"passed","time":{"start":1723335528451,"stop":1723335616284,"duration":87833}},{"uid":"6a3708b744bbeb7d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/6a3708b744bbeb7d","status":"passed","time":{"start":1723249147380,"stop":1723249193694,"duration":46314}},{"uid":"17e5400166ead6b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/17e5400166ead6b2","status":"passed","time":{"start":1723162499507,"stop":1723162525098,"duration":25591}},{"uid":"813fe6fd0edfb768","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/813fe6fd0edfb768","status":"passed","time":{"start":1723076283665,"stop":1723076331121,"duration":47456}},{"uid":"5d3381c0b11de60c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2012//#testresult/5d3381c0b11de60c","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 7 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1722989798642,"stop":1722989877711,"duration":79069}},{"uid":"a3761dfc9c8018f1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2007//#testresult/a3761dfc9c8018f1","status":"passed","time":{"start":1722903364547,"stop":1722903389592,"duration":25045}},{"uid":"3c64598a8b76f7e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2006//#testresult/3c64598a8b76f7e1","status":"passed","time":{"start":1722817209507,"stop":1722817312803,"duration":103296}},{"uid":"4b71489733ba2044","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2005//#testresult/4b71489733ba2044","status":"passed","time":{"start":1722730632720,"stop":1722730689344,"duration":56624}},{"uid":"3f9cfcc1dbff30cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2004//#testresult/3f9cfcc1dbff30cf","status":"passed","time":{"start":1722643843373,"stop":1722644080332,"duration":236959}},{"uid":"17996ab0b144e384","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2003//#testresult/17996ab0b144e384","status":"passed","time":{"start":1722557919186,"stop":1722557973387,"duration":54201}},{"uid":"d0643f749cd464d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/d0643f749cd464d6","status":"passed","time":{"start":1722470878115,"stop":1722471124643,"duration":246528}},{"uid":"fa9dd2fbb4dc2f0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/fa9dd2fbb4dc2f0e","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1722384983986,"stop":1722385066210,"duration":82224}},{"uid":"63e294c504166ac3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/63e294c504166ac3","status":"passed","time":{"start":1722298543816,"stop":1722298623405,"duration":79589}},{"uid":"dabeb2c87f25d56e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/dabeb2c87f25d56e","status":"passed","time":{"start":1722211995761,"stop":1722212020106,"duration":24345}},{"uid":"a71a4f7b67eca777","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/a71a4f7b67eca777","status":"passed","time":{"start":1722125602487,"stop":1722125648775,"duration":46288}},{"uid":"e52a6ce7df11f381","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/e52a6ce7df11f381","status":"passed","time":{"start":1722039458513,"stop":1722039539676,"duration":81163}},{"uid":"2ab9e6ff8eec865e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/2ab9e6ff8eec865e","status":"passed","time":{"start":1721952998341,"stop":1721953110217,"duration":111876}},{"uid":"2c85a510bf5bbbe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/2c85a510bf5bbbe6","status":"passed","time":{"start":1721866550688,"stop":1721866667683,"duration":116995}}]},"tags":[]},"source":"60571b1e9bfe8b9f.json","parameterValues":["KingstonUponThamesCouncil"]}