{"uid":"a8458405bb71eb7e","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1723594407435,"stop":1723594408517,"duration":1082},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f9ec6a2e8e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f9ec7f9a870>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f9ec5b46c90>\npage = <Response [404]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head> <script>\r\n\t\t\t\twindow[\"ga-disable-G-1M8G5BKKHG\"] = true;\r\n\t\t\t</script>\n<scrip...f-service and web content management provided by GOSS\">Powered by GOSS</a>\n</div>\n</div>\n</div>\n</footer></body></html>\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f9ec6a2e8e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f9ec7f9a870>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f9ec5b46c90>\npage = <Response [404]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head> <script>\r\n\t\t\t\twindow[\"ga-disable-G-1M8G5BKKHG\"] = true;\r\n\t\t\t</script>\n<scrip...f-service and web content management provided by GOSS\">Powered by GOSS</a>\n</div>\n</div>\n</div>\n</footer></body></html>\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1723594407435,"stop":1723594407436,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723594407436,"stop":1723594408517,"duration":1081},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"276d07c90b0be6c7","name":"stdout","source":"276d07c90b0be6c7.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az525-740"},{"name":"thread","value":"2771-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":96,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":96},"items":[{"uid":"f96371fef4b78e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/f96371fef4b78e8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723508237314,"stop":1723508238074,"duration":760}},{"uid":"8f49876b36def52b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/8f49876b36def52b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723421718653,"stop":1723421719211,"duration":558}},{"uid":"7ad8c30388747afd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/7ad8c30388747afd","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723335367613,"stop":1723335368579,"duration":966}},{"uid":"f7fce632c1c62c97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/f7fce632c1c62c97","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723248916027,"stop":1723248916732,"duration":705}},{"uid":"b042204b076c3e70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/b042204b076c3e70","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723162550552,"stop":1723162551575,"duration":1023}},{"uid":"a73ab8501e5ff0a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/a73ab8501e5ff0a0","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723076082970,"stop":1723076083641,"duration":671}},{"uid":"2cf6fefd68128d8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2012//#testresult/2cf6fefd68128d8d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722989634493,"stop":1722989635390,"duration":897}},{"uid":"71b76b16d8e24768","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2007//#testresult/71b76b16d8e24768","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722902996788,"stop":1722902997140,"duration":352}},{"uid":"c76a8c96b9163cd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2006//#testresult/c76a8c96b9163cd3","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722816941925,"stop":1722816942314,"duration":389}},{"uid":"896b6fc48590df8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2005//#testresult/896b6fc48590df8a","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722730381939,"stop":1722730382506,"duration":567}},{"uid":"5f88a0f3aa267f70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2004//#testresult/5f88a0f3aa267f70","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722644256227,"stop":1722644257086,"duration":859}},{"uid":"e867dcb418e45678","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2003//#testresult/e867dcb418e45678","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722557709989,"stop":1722557710429,"duration":440}},{"uid":"d132ae8dc957caf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/d132ae8dc957caf8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722471263860,"stop":1722471264580,"duration":720}},{"uid":"99df3ae0dd94cd19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/99df3ae0dd94cd19","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722384796877,"stop":1722384797279,"duration":402}},{"uid":"340942fc0bdb3548","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/340942fc0bdb3548","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722298344126,"stop":1722298344499,"duration":373}},{"uid":"f1602db43d35c62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/f1602db43d35c62","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722212073351,"stop":1722212073778,"duration":427}},{"uid":"b1934466c68fefde","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/b1934466c68fefde","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722125659059,"stop":1722125659387,"duration":328}},{"uid":"f72d0064c0e9efa6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/f72d0064c0e9efa6","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722039188968,"stop":1722039189441,"duration":473}},{"uid":"e94484c65f28ef63","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/e94484c65f28ef63","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721952746987,"stop":1721952747385,"duration":398}},{"uid":"85a183c5ee4d59d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/85a183c5ee4d59d4","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721866374481,"stop":1721866374777,"duration":296}}]},"tags":[]},"source":"a8458405bb71eb7e.json","parameterValues":["GlasgowCityCouncil"]}