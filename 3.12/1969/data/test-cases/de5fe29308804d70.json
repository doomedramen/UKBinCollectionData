{"uid":"de5fe29308804d70","name":"Validate Council Output [WychavonDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"ab4be59a4392f5fb1301e38bba96913a","time":{"start":1720140179630,"stop":1720140326951,"duration":147321},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x55f4e91d169a <unknown>\n#1 0x55f4e8eb40dc <unknown>\n#2 0x55f4e8eabc70 <unknown>\n#3 0x55f4e8e9b772 <unknown>\n#4 0x55f4e8e9cdf2 <unknown>\n#5 0x55f4e8e9ba2d <unknown>\n#6 0x55f4e8e9b143 <unknown>\n#7 0x55f4e8e9b035 <unknown>\n#8 0x55f4e8e98f76 <unknown>\n#9 0x55f4e8e9947a <unknown>\n#10 0x55f4e8eb6b27 <unknown>\n#11 0x55f4e8f431f5 <unknown>\n#12 0x55f4e8f23872 <unknown>\n#13 0x55f4e8f425c3 <unknown>\n#14 0x55f4e8f23613 <unknown>\n#15 0x55f4e8ef34f7 <unknown>\n#16 0x55f4e8ef3e4e <unknown>\n#17 0x55f4e919786b <unknown>\n#18 0x55f4e919b911 <unknown>\n#19 0x55f4e918335e <unknown>\n#20 0x55f4e919c472 <unknown>\n#21 0x55f4e9167cbf <unknown>\n#22 0x55f4e91c1098 <unknown>\n#23 0x55f4e91c1270 <unknown>\n#24 0x55f4e91d07cc <unknown>\n#25 0x7fdaebaa8ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fd62f2b60c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WychavonDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd62ffa07a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WychavonDistrictCouncil.py:48: in parse_data\n    driver.get(url)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd62f173320>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x55f4e91c1270 \\\\u003Cunknown>\\\\n#24 0x55f4e91d07cc \\\\u003Cunknown>\\\\n#25 0x7fdaebaa8ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x55f4e91d169a <unknown>\nE       #1 0x55f4e8eb40dc <unknown>\nE       #2 0x55f4e8eabc70 <unknown>\nE       #3 0x55f4e8e9b772 <unknown>\nE       #4 0x55f4e8e9cdf2 <unknown>\nE       #5 0x55f4e8e9ba2d <unknown>\nE       #6 0x55f4e8e9b143 <unknown>\nE       #7 0x55f4e8e9b035 <unknown>\nE       #8 0x55f4e8e98f76 <unknown>\nE       #9 0x55f4e8e9947a <unknown>\nE       #10 0x55f4e8eb6b27 <unknown>\nE       #11 0x55f4e8f431f5 <unknown>\nE       #12 0x55f4e8f23872 <unknown>\nE       #13 0x55f4e8f425c3 <unknown>\nE       #14 0x55f4e8f23613 <unknown>\nE       #15 0x55f4e8ef34f7 <unknown>\nE       #16 0x55f4e8ef3e4e <unknown>\nE       #17 0x55f4e919786b <unknown>\nE       #18 0x55f4e919b911 <unknown>\nE       #19 0x55f4e918335e <unknown>\nE       #20 0x55f4e919c472 <unknown>\nE       #21 0x55f4e9167cbf <unknown>\nE       #22 0x55f4e91c1098 <unknown>\nE       #23 0x55f4e91c1270 <unknown>\nE       #24 0x55f4e91d07cc <unknown>\nE       #25 0x7fdaebaa8ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x55f4e91d169a <unknown>\n#1 0x55f4e8eb40dc <unknown>\n#2 0x55f4e8eabc70 <unknown>\n#3 0x55f4e8e9b772 <unknown>\n#4 0x55f4e8e9cdf2 <unknown>\n#5 0x55f4e8e9ba2d <unknown>\n#6 0x55f4e8e9b143 <unknown>\n#7 0x55f4e8e9b035 <unknown>\n#8 0x55f4e8e98f76 <unknown>\n#9 0x55f4e8e9947a <unknown>\n#10 0x55f4e8eb6b27 <unknown>\n#11 0x55f4e8f431f5 <unknown>\n#12 0x55f4e8f23872 <unknown>\n#13 0x55f4e8f425c3 <unknown>\n#14 0x55f4e8f23613 <unknown>\n#15 0x55f4e8ef34f7 <unknown>\n#16 0x55f4e8ef3e4e <unknown>\n#17 0x55f4e919786b <unknown>\n#18 0x55f4e919b911 <unknown>\n#19 0x55f4e918335e <unknown>\n#20 0x55f4e919c472 <unknown>\n#21 0x55f4e9167cbf <unknown>\n#22 0x55f4e91c1098 <unknown>\n#23 0x55f4e91c1270 <unknown>\n#24 0x55f4e91d07cc <unknown>\n#25 0x7fdaebaa8ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fd62f2b60c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WychavonDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd62ffa07a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WychavonDistrictCouncil.py:48: in parse_data\n    driver.get(url)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd62f173320>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x55f4e91c1270 \\\\u003Cunknown>\\\\n#24 0x55f4e91d07cc \\\\u003Cunknown>\\\\n#25 0x7fdaebaa8ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x55f4e91d169a <unknown>\nE       #1 0x55f4e8eb40dc <unknown>\nE       #2 0x55f4e8eabc70 <unknown>\nE       #3 0x55f4e8e9b772 <unknown>\nE       #4 0x55f4e8e9cdf2 <unknown>\nE       #5 0x55f4e8e9ba2d <unknown>\nE       #6 0x55f4e8e9b143 <unknown>\nE       #7 0x55f4e8e9b035 <unknown>\nE       #8 0x55f4e8e98f76 <unknown>\nE       #9 0x55f4e8e9947a <unknown>\nE       #10 0x55f4e8eb6b27 <unknown>\nE       #11 0x55f4e8f431f5 <unknown>\nE       #12 0x55f4e8f23872 <unknown>\nE       #13 0x55f4e8f425c3 <unknown>\nE       #14 0x55f4e8f23613 <unknown>\nE       #15 0x55f4e8ef34f7 <unknown>\nE       #16 0x55f4e8ef3e4e <unknown>\nE       #17 0x55f4e919786b <unknown>\nE       #18 0x55f4e919b911 <unknown>\nE       #19 0x55f4e918335e <unknown>\nE       #20 0x55f4e919c472 <unknown>\nE       #21 0x55f4e9167cbf <unknown>\nE       #22 0x55f4e91c1098 <unknown>\nE       #23 0x55f4e91c1270 <unknown>\nE       #24 0x55f4e91d07cc <unknown>\nE       #25 0x7fdaebaa8ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1720140179630,"stop":1720140179630,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720140179630,"stop":1720140326951,"duration":147321},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x55f4e91d169a <unknown>\n#1 0x55f4e8eb40dc <unknown>\n#2 0x55f4e8eabc70 <unknown>\n#3 0x55f4e8e9b772 <unknown>\n#4 0x55f4e8e9cdf2 <unknown>\n#5 0x55f4e8e9ba2d <unknown>\n#6 0x55f4e8e9b143 <unknown>\n#7 0x55f4e8e9b035 <unknown>\n#8 0x55f4e8e98f76 <unknown>\n#9 0x55f4e8e9947a <unknown>\n#10 0x55f4e8eb6b27 <unknown>\n#11 0x55f4e8f431f5 <unknown>\n#12 0x55f4e8f23872 <unknown>\n#13 0x55f4e8f425c3 <unknown>\n#14 0x55f4e8f23613 <unknown>\n#15 0x55f4e8ef34f7 <unknown>\n#16 0x55f4e8ef3e4e <unknown>\n#17 0x55f4e919786b <unknown>\n#18 0x55f4e919b911 <unknown>\n#19 0x55f4e918335e <unknown>\n#20 0x55f4e919c472 <unknown>\n#21 0x55f4e9167cbf <unknown>\n#22 0x55f4e91c1098 <unknown>\n#23 0x55f4e91c1270 <unknown>\n#24 0x55f4e91d07cc <unknown>\n#25 0x7fdaebaa8ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x55f4e91d169a <unknown>\n#1 0x55f4e8eb40dc <unknown>\n#2 0x55f4e8eabc70 <unknown>\n#3 0x55f4e8e9b772 <unknown>\n#4 0x55f4e8e9cdf2 <unknown>\n#5 0x55f4e8e9ba2d <unknown>\n#6 0x55f4e8e9b143 <unknown>\n#7 0x55f4e8e9b035 <unknown>\n#8 0x55f4e8e98f76 <unknown>\n#9 0x55f4e8e9947a <unknown>\n#10 0x55f4e8eb6b27 <unknown>\n#11 0x55f4e8f431f5 <unknown>\n#12 0x55f4e8f23872 <unknown>\n#13 0x55f4e8f425c3 <unknown>\n#14 0x55f4e8f23613 <unknown>\n#15 0x55f4e8ef34f7 <unknown>\n#16 0x55f4e8ef3e4e <unknown>\n#17 0x55f4e919786b <unknown>\n#18 0x55f4e919b911 <unknown>\n#19 0x55f4e918335e <unknown>\n#20 0x55f4e919c472 <unknown>\n#21 0x55f4e9167cbf <unknown>\n#22 0x55f4e91c1098 <unknown>\n#23 0x55f4e91c1270 <unknown>\n#24 0x55f4e91d07cc <unknown>\n#25 0x7fdaebaa8ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6f5ae33182e8f6a9","name":"log","source":"6f5ae33182e8f6a9.txt","type":"text/plain","size":928},{"uid":"7b262002941c3d09","name":"stdout","source":"7b262002941c3d09.txt","type":"text/plain","size":50}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1433-175"},{"name":"thread","value":"2820-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WychavonDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"d7cba1d53e1553c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/d7cba1d53e1553c","status":"passed","time":{"start":1720053832647,"stop":1720053846935,"duration":14288}},{"uid":"5ff0b6998a1568a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/5ff0b6998a1568a9","status":"passed","time":{"start":1719967424326,"stop":1719967435927,"duration":11601}},{"uid":"30791375fa1e14e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/30791375fa1e14e","status":"passed","time":{"start":1719881049661,"stop":1719881057380,"duration":7719}},{"uid":"28b997481ef37b7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/28b997481ef37b7a","status":"passed","time":{"start":1719795090437,"stop":1719795101206,"duration":10769}},{"uid":"643a7d35b47f49e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/643a7d35b47f49e7","status":"passed","time":{"start":1719708625416,"stop":1719708643954,"duration":18538}},{"uid":"db9d58f5dd21912b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/db9d58f5dd21912b","status":"passed","time":{"start":1719621929544,"stop":1719621970885,"duration":41341}},{"uid":"f9ac79ca6a8acad0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/f9ac79ca6a8acad0","status":"passed","time":{"start":1719535385353,"stop":1719535421696,"duration":36343}},{"uid":"9c3bd48e890dadf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/9c3bd48e890dadf8","status":"passed","time":{"start":1719362782931,"stop":1719362813906,"duration":30975}},{"uid":"826b497d5fe091c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/826b497d5fe091c8","status":"passed","time":{"start":1719276341984,"stop":1719276347614,"duration":5630}},{"uid":"56a64a6f159037d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/56a64a6f159037d","status":"passed","time":{"start":1719190138271,"stop":1719190145121,"duration":6850}},{"uid":"d9663a18d6bcc921","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/d9663a18d6bcc921","status":"passed","time":{"start":1719103757136,"stop":1719103763226,"duration":6090}},{"uid":"6ca3a66d8893899b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/6ca3a66d8893899b","status":"passed","time":{"start":1719017195646,"stop":1719017239065,"duration":43419}},{"uid":"439d5db06b4fdee7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/439d5db06b4fdee7","status":"passed","time":{"start":1718930821379,"stop":1718930839933,"duration":18554}},{"uid":"2e8bea9b59c6dc9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/2e8bea9b59c6dc9f","status":"passed","time":{"start":1718844342890,"stop":1718844383477,"duration":40587}},{"uid":"8f36261452ae089f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/8f36261452ae089f","status":"passed","time":{"start":1718758015640,"stop":1718758028875,"duration":13235}},{"uid":"f905ae80c0e0773c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/f905ae80c0e0773c","status":"passed","time":{"start":1718671545622,"stop":1718671582938,"duration":37316}},{"uid":"1a32f8b9c0215b58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1945//#testresult/1a32f8b9c0215b58","status":"passed","time":{"start":1718585252988,"stop":1718585270727,"duration":17739}},{"uid":"5cfa7714a2268300","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1944//#testresult/5cfa7714a2268300","status":"passed","time":{"start":1718498805507,"stop":1718498827033,"duration":21526}},{"uid":"1550342be73eb11c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1943//#testresult/1550342be73eb11c","status":"passed","time":{"start":1718412417632,"stop":1718412459284,"duration":41652}},{"uid":"4c52d0c4c2e99b6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1942//#testresult/4c52d0c4c2e99b6e","status":"passed","time":{"start":1718325970385,"stop":1718325985419,"duration":15034}}]},"tags":[]},"source":"de5fe29308804d70.json","parameterValues":["WychavonDistrictCouncil"]}