{"uid":"d5c56fdf0fec563f","name":"Validate Council Output [CornwallCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"20fb6c486e377aee58980a6c6932d1ba","time":{"start":1725235933948,"stop":1725235934704,"duration":756},"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f08c789eac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f08c8581a60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '2 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:336: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f08c789eac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f08c8581a60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '2 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/_strptime.py:336: ValueError","steps":[{"name":"Given the council","time":{"start":1725235933948,"stop":1725235933948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725235933948,"stop":1725235934704,"duration":756},"status":"failed","statusMessage":"unconverted data remains: t","statusTrace":"ValueError: unconverted data remains: t\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ccd1bcee67b04f99","name":"stdout","source":"ccd1bcee67b04f99.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-909"},{"name":"thread","value":"2785-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CornwallCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":34},"items":[{"uid":"489a2cca0dae55b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2053//#testresult/489a2cca0dae55b4","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725149557128,"stop":1725149558132,"duration":1004}},{"uid":"38c7b5f14a821027","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2052//#testresult/38c7b5f14a821027","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725063248726,"stop":1725063249288,"duration":562}},{"uid":"54ef25da1545a9f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2051//#testresult/54ef25da1545a9f7","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724976704737,"stop":1724976705630,"duration":893}},{"uid":"246ac17d19456069","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2049//#testresult/246ac17d19456069","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724890309470,"stop":1724890310895,"duration":1425}},{"uid":"ac4c457d6382f459","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2048//#testresult/ac4c457d6382f459","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724803876482,"stop":1724803877081,"duration":599}},{"uid":"d3fd007776aa839e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/d3fd007776aa839e","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724717487671,"stop":1724717489388,"duration":1717}},{"uid":"8940977a13c0c60c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/8940977a13c0c60c","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724631144764,"stop":1724631145859,"duration":1095}},{"uid":"2a6318518bd7b343","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/2a6318518bd7b343","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724544670681,"stop":1724544671446,"duration":765}},{"uid":"4e29b8d7c958c07e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2037//#testresult/4e29b8d7c958c07e","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724458274410,"stop":1724458275453,"duration":1043}},{"uid":"42d2a0220a1ba6ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2036//#testresult/42d2a0220a1ba6ef","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724371907375,"stop":1724371908738,"duration":1363}},{"uid":"3fab788199e9c0d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2034//#testresult/3fab788199e9c0d3","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724285481683,"stop":1724285482687,"duration":1004}},{"uid":"b2a56637fbe93e2e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2033//#testresult/b2a56637fbe93e2e","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724199084081,"stop":1724199085129,"duration":1048}},{"uid":"889b405e42b174ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2032//#testresult/889b405e42b174ad","status":"passed","time":{"start":1724112695536,"stop":1724112696453,"duration":917}},{"uid":"8ebd495a2621084","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2031//#testresult/8ebd495a2621084","status":"passed","time":{"start":1724026316203,"stop":1724026316967,"duration":764}},{"uid":"24410d3bbfc6b57c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2030//#testresult/24410d3bbfc6b57c","status":"passed","time":{"start":1723939891599,"stop":1723939892273,"duration":674}},{"uid":"7fac2926830cc9a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2029//#testresult/7fac2926830cc9a8","status":"passed","time":{"start":1723853473651,"stop":1723853474363,"duration":712}},{"uid":"28a5da21b55fc6e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/28a5da21b55fc6e4","status":"passed","time":{"start":1723767107000,"stop":1723767107661,"duration":661}},{"uid":"2dbc2fb00645b940","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/2dbc2fb00645b940","status":"passed","time":{"start":1723680162216,"stop":1723680163028,"duration":812}},{"uid":"94f4f40f635b9e98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2026//#testresult/94f4f40f635b9e98","status":"passed","time":{"start":1723594302607,"stop":1723594303901,"duration":1294}},{"uid":"5acc8e4fcf61b56f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/5acc8e4fcf61b56f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723508107659,"stop":1723508108504,"duration":845}}]},"tags":[]},"source":"d5c56fdf0fec563f.json","parameterValues":["CornwallCouncil"]}