{"uid":"1ef5f822785db894","name":"Validate Council Output [StaffordshireMoorlandsDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"43ce41b46876976a27337fcdb402fec8","time":{"start":1724113341611,"stop":1724113556317,"duration":214706},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55cb24d4b6aa <unknown>\n#1 0x55cb24a1c600 <unknown>\n#2 0x55cb24a14631 <unknown>\n#3 0x55cb24a04839 <unknown>\n#4 0x55cb24a065c4 <unknown>\n#5 0x55cb24a04b05 <unknown>\n#6 0x55cb24a0435f <unknown>\n#7 0x55cb24a04252 <unknown>\n#8 0x55cb24a0256c <unknown>\n#9 0x55cb24a028ea <unknown>\n#10 0x55cb24a1ef21 <unknown>\n#11 0x55cb24aadb45 <unknown>\n#12 0x55cb24a8e8a2 <unknown>\n#13 0x55cb24aad04a <unknown>\n#14 0x55cb24a8e643 <unknown>\n#15 0x55cb24a5ed31 <unknown>\n#16 0x55cb24a5f79e <unknown>\n#17 0x55cb24d1323b <unknown>\n#18 0x55cb24d171d2 <unknown>\n#19 0x55cb24d005f5 <unknown>\n#20 0x55cb24d17d62 <unknown>\n#21 0x55cb24ce523f <unknown>\n#22 0x55cb24d3ae48 <unknown>\n#23 0x55cb24d3b020 <unknown>\n#24 0x55cb24d4a47c <unknown>\n#25 0x7f7decb3aa94 <unknown>\n#26 0x7f7decbc7a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fe7a1923ec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[StaffordshireMoorlandsDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe7b42b5880>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/StaffordshireMoorlandsDistrictCouncil.py:30: in parse_data\n    driver.get(\"https://www.staffsmoorlands.gov.uk/findyourbinday\")\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe7a07c4fe0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55cb24d4a47c \\\\u003Cunknown>\\\\n#25 0x7f7decb3aa94 \\\\u003Cunknown>\\\\n#26 0x7f7decbc7a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.99)\nE       Stacktrace:\nE       #0 0x55cb24d4b6aa <unknown>\nE       #1 0x55cb24a1c600 <unknown>\nE       #2 0x55cb24a14631 <unknown>\nE       #3 0x55cb24a04839 <unknown>\nE       #4 0x55cb24a065c4 <unknown>\nE       #5 0x55cb24a04b05 <unknown>\nE       #6 0x55cb24a0435f <unknown>\nE       #7 0x55cb24a04252 <unknown>\nE       #8 0x55cb24a0256c <unknown>\nE       #9 0x55cb24a028ea <unknown>\nE       #10 0x55cb24a1ef21 <unknown>\nE       #11 0x55cb24aadb45 <unknown>\nE       #12 0x55cb24a8e8a2 <unknown>\nE       #13 0x55cb24aad04a <unknown>\nE       #14 0x55cb24a8e643 <unknown>\nE       #15 0x55cb24a5ed31 <unknown>\nE       #16 0x55cb24a5f79e <unknown>\nE       #17 0x55cb24d1323b <unknown>\nE       #18 0x55cb24d171d2 <unknown>\nE       #19 0x55cb24d005f5 <unknown>\nE       #20 0x55cb24d17d62 <unknown>\nE       #21 0x55cb24ce523f <unknown>\nE       #22 0x55cb24d3ae48 <unknown>\nE       #23 0x55cb24d3b020 <unknown>\nE       #24 0x55cb24d4a47c <unknown>\nE       #25 0x7f7decb3aa94 <unknown>\nE       #26 0x7f7decbc7a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55cb24d4b6aa <unknown>\n#1 0x55cb24a1c600 <unknown>\n#2 0x55cb24a14631 <unknown>\n#3 0x55cb24a04839 <unknown>\n#4 0x55cb24a065c4 <unknown>\n#5 0x55cb24a04b05 <unknown>\n#6 0x55cb24a0435f <unknown>\n#7 0x55cb24a04252 <unknown>\n#8 0x55cb24a0256c <unknown>\n#9 0x55cb24a028ea <unknown>\n#10 0x55cb24a1ef21 <unknown>\n#11 0x55cb24aadb45 <unknown>\n#12 0x55cb24a8e8a2 <unknown>\n#13 0x55cb24aad04a <unknown>\n#14 0x55cb24a8e643 <unknown>\n#15 0x55cb24a5ed31 <unknown>\n#16 0x55cb24a5f79e <unknown>\n#17 0x55cb24d1323b <unknown>\n#18 0x55cb24d171d2 <unknown>\n#19 0x55cb24d005f5 <unknown>\n#20 0x55cb24d17d62 <unknown>\n#21 0x55cb24ce523f <unknown>\n#22 0x55cb24d3ae48 <unknown>\n#23 0x55cb24d3b020 <unknown>\n#24 0x55cb24d4a47c <unknown>\n#25 0x7f7decb3aa94 <unknown>\n#26 0x7f7decbc7a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fe7a1923ec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[StaffordshireMoorlandsDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe7b42b5880>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/StaffordshireMoorlandsDistrictCouncil.py:30: in parse_data\n    driver.get(\"https://www.staffsmoorlands.gov.uk/findyourbinday\")\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe7a07c4fe0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55cb24d4a47c \\\\u003Cunknown>\\\\n#25 0x7f7decb3aa94 \\\\u003Cunknown>\\\\n#26 0x7f7decbc7a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.99)\nE       Stacktrace:\nE       #0 0x55cb24d4b6aa <unknown>\nE       #1 0x55cb24a1c600 <unknown>\nE       #2 0x55cb24a14631 <unknown>\nE       #3 0x55cb24a04839 <unknown>\nE       #4 0x55cb24a065c4 <unknown>\nE       #5 0x55cb24a04b05 <unknown>\nE       #6 0x55cb24a0435f <unknown>\nE       #7 0x55cb24a04252 <unknown>\nE       #8 0x55cb24a0256c <unknown>\nE       #9 0x55cb24a028ea <unknown>\nE       #10 0x55cb24a1ef21 <unknown>\nE       #11 0x55cb24aadb45 <unknown>\nE       #12 0x55cb24a8e8a2 <unknown>\nE       #13 0x55cb24aad04a <unknown>\nE       #14 0x55cb24a8e643 <unknown>\nE       #15 0x55cb24a5ed31 <unknown>\nE       #16 0x55cb24a5f79e <unknown>\nE       #17 0x55cb24d1323b <unknown>\nE       #18 0x55cb24d171d2 <unknown>\nE       #19 0x55cb24d005f5 <unknown>\nE       #20 0x55cb24d17d62 <unknown>\nE       #21 0x55cb24ce523f <unknown>\nE       #22 0x55cb24d3ae48 <unknown>\nE       #23 0x55cb24d3b020 <unknown>\nE       #24 0x55cb24d4a47c <unknown>\nE       #25 0x7f7decb3aa94 <unknown>\nE       #26 0x7f7decbc7a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1724113341611,"stop":1724113341611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724113341611,"stop":1724113556317,"duration":214706},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55cb24d4b6aa <unknown>\n#1 0x55cb24a1c600 <unknown>\n#2 0x55cb24a14631 <unknown>\n#3 0x55cb24a04839 <unknown>\n#4 0x55cb24a065c4 <unknown>\n#5 0x55cb24a04b05 <unknown>\n#6 0x55cb24a0435f <unknown>\n#7 0x55cb24a04252 <unknown>\n#8 0x55cb24a0256c <unknown>\n#9 0x55cb24a028ea <unknown>\n#10 0x55cb24a1ef21 <unknown>\n#11 0x55cb24aadb45 <unknown>\n#12 0x55cb24a8e8a2 <unknown>\n#13 0x55cb24aad04a <unknown>\n#14 0x55cb24a8e643 <unknown>\n#15 0x55cb24a5ed31 <unknown>\n#16 0x55cb24a5f79e <unknown>\n#17 0x55cb24d1323b <unknown>\n#18 0x55cb24d171d2 <unknown>\n#19 0x55cb24d005f5 <unknown>\n#20 0x55cb24d17d62 <unknown>\n#21 0x55cb24ce523f <unknown>\n#22 0x55cb24d3ae48 <unknown>\n#23 0x55cb24d3b020 <unknown>\n#24 0x55cb24d4a47c <unknown>\n#25 0x7f7decb3aa94 <unknown>\n#26 0x7f7decbc7a34 __clone\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55cb24d4b6aa <unknown>\n#1 0x55cb24a1c600 <unknown>\n#2 0x55cb24a14631 <unknown>\n#3 0x55cb24a04839 <unknown>\n#4 0x55cb24a065c4 <unknown>\n#5 0x55cb24a04b05 <unknown>\n#6 0x55cb24a0435f <unknown>\n#7 0x55cb24a04252 <unknown>\n#8 0x55cb24a0256c <unknown>\n#9 0x55cb24a028ea <unknown>\n#10 0x55cb24a1ef21 <unknown>\n#11 0x55cb24aadb45 <unknown>\n#12 0x55cb24a8e8a2 <unknown>\n#13 0x55cb24aad04a <unknown>\n#14 0x55cb24a8e643 <unknown>\n#15 0x55cb24a5ed31 <unknown>\n#16 0x55cb24a5f79e <unknown>\n#17 0x55cb24d1323b <unknown>\n#18 0x55cb24d171d2 <unknown>\n#19 0x55cb24d005f5 <unknown>\n#20 0x55cb24d17d62 <unknown>\n#21 0x55cb24ce523f <unknown>\n#22 0x55cb24d3ae48 <unknown>\n#23 0x55cb24d3b020 <unknown>\n#24 0x55cb24d4a47c <unknown>\n#25 0x7f7decb3aa94 <unknown>\n#26 0x7f7decbc7a34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d527fd2d9ad14814","name":"stdout","source":"d527fd2d9ad14814.txt","type":"text/plain","size":64}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az714-701"},{"name":"thread","value":"2831-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StaffordshireMoorlandsDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":100,"unknown":0,"total":103},"items":[{"uid":"8357cba4df1c5e5d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2031//#testresult/8357cba4df1c5e5d","status":"passed","time":{"start":1724026847643,"stop":1724027003321,"duration":155678}},{"uid":"d4da83e86b9b512e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2030//#testresult/d4da83e86b9b512e","status":"passed","time":{"start":1723940460585,"stop":1723940643922,"duration":183337}},{"uid":"c623895ae699b6ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2029//#testresult/c623895ae699b6ba","status":"passed","time":{"start":1723853905001,"stop":1723854065047,"duration":160046}},{"uid":"649779a0c160797c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/649779a0c160797c","status":"passed","time":{"start":1723767668934,"stop":1723767818584,"duration":149650}},{"uid":"22143a80c6389daf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/22143a80c6389daf","status":"passed","time":{"start":1723680821821,"stop":1723680958625,"duration":136804}},{"uid":"d7dbb796d51e895","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2026//#testresult/d7dbb796d51e895","status":"passed","time":{"start":1723594898303,"stop":1723595048017,"duration":149714}},{"uid":"753dff65375cfd2a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/753dff65375cfd2a","status":"passed","time":{"start":1723508781812,"stop":1723508814020,"duration":32208}},{"uid":"f6232dbc8947d1d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/f6232dbc8947d1d6","status":"passed","time":{"start":1723422260070,"stop":1723422414864,"duration":154794}},{"uid":"57a4418cccae1f49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/57a4418cccae1f49","status":"passed","time":{"start":1723335871011,"stop":1723335898455,"duration":27444}},{"uid":"4146065991ec1e7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/4146065991ec1e7f","status":"passed","time":{"start":1723249433920,"stop":1723249583180,"duration":149260}},{"uid":"7d1bc692a2202754","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/7d1bc692a2202754","status":"passed","time":{"start":1723162874180,"stop":1723163001380,"duration":127200}},{"uid":"8f78dbe72ba46b69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/8f78dbe72ba46b69","status":"passed","time":{"start":1723076567436,"stop":1723076709955,"duration":142519}},{"uid":"8364a6a166e19290","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2012//#testresult/8364a6a166e19290","status":"passed","time":{"start":1722990148250,"stop":1722990290056,"duration":141806}},{"uid":"e0d3a4945fa41d25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2007//#testresult/e0d3a4945fa41d25","status":"passed","time":{"start":1722903761539,"stop":1722903909577,"duration":148038}},{"uid":"7cbf14ae362fb3e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2006//#testresult/7cbf14ae362fb3e9","status":"passed","time":{"start":1722817582626,"stop":1722817720488,"duration":137862}},{"uid":"c262e5ce658dc137","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2005//#testresult/c262e5ce658dc137","status":"passed","time":{"start":1722730926446,"stop":1722731196108,"duration":269662}},{"uid":"492931a8b32c774c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2004//#testresult/492931a8b32c774c","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1722644725569,"stop":1722644833017,"duration":107448}},{"uid":"b068a6368e4e37b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2003//#testresult/b068a6368e4e37b8","status":"passed","time":{"start":1722558085542,"stop":1722558346975,"duration":261433}},{"uid":"bf5ebf90a79efdc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/bf5ebf90a79efdc5","status":"passed","time":{"start":1722471658804,"stop":1722471803648,"duration":144844}},{"uid":"8b08160f9f34edbe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/8b08160f9f34edbe","status":"passed","time":{"start":1722385238554,"stop":1722385489848,"duration":251294}}]},"tags":[]},"source":"1ef5f822785db894.json","parameterValues":["StaffordshireMoorlandsDistrictCouncil"]}