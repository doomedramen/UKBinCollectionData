{"uid":"d5883b634c7bf04e","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1725495199421,"stop":1725495203088,"duration":3667},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc125aab9c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc132f4ef30>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fc1254d0cb0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fc12674df40>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'a79f2ba867ca4487ad771bc54a8e9a3d5ef1bd01', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc125aab9c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc132f4ef30>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fc1254d0cb0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fc12674df40>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'a79f2ba867ca4487ad771bc54a8e9a3d5ef1bd01', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1725495199422,"stop":1725495199422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725495199422,"stop":1725495203088,"duration":3666},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a25ec70fc2d077fd","name":"stdout","source":"a25ec70fc2d077fd.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-597"},{"name":"thread","value":"2744-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":70,"broken":0,"skipped":0,"passed":58,"unknown":0,"total":128},"items":[{"uid":"606b29a2dd4c3e75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/606b29a2dd4c3e75","status":"passed","time":{"start":1725430448408,"stop":1725430451746,"duration":3338}},{"uid":"e1c518f358f5a05a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2082//#testresult/e1c518f358f5a05a","status":"passed","time":{"start":1725408861426,"stop":1725408865472,"duration":4046}},{"uid":"5c908f2e051437c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2080//#testresult/5c908f2e051437c7","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725403933925,"stop":1725403934984,"duration":1059}},{"uid":"75890eb34f26f7c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2073//#testresult/75890eb34f26f7c5","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725384905782,"stop":1725384906902,"duration":1120}},{"uid":"3f7341e01a7a1b58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2070//#testresult/3f7341e01a7a1b58","status":"passed","time":{"start":1725347116682,"stop":1725347120498,"duration":3816}},{"uid":"eda051acf3f4f89b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2069//#testresult/eda051acf3f4f89b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725322365179,"stop":1725322366067,"duration":888}},{"uid":"c73e676a66ce76ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2068//#testresult/c73e676a66ce76ae","status":"passed","time":{"start":1725316276722,"stop":1725316280495,"duration":3773}},{"uid":"48db0d286758c7c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2066//#testresult/48db0d286758c7c3","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725313037261,"stop":1725313038696,"duration":1435}},{"uid":"60a8113d0b209647","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2064//#testresult/60a8113d0b209647","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725310868622,"stop":1725310869936,"duration":1314}},{"uid":"63c575edde94c5c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2060//#testresult/63c575edde94c5c9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725308123836,"stop":1725308125569,"duration":1733}},{"uid":"206ddc3181b477fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2059//#testresult/206ddc3181b477fb","status":"passed","time":{"start":1725307950870,"stop":1725307954183,"duration":3313}},{"uid":"8cd8771625dc437d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2054//#testresult/8cd8771625dc437d","status":"passed","time":{"start":1725235936187,"stop":1725235939970,"duration":3783}},{"uid":"b71e4cf317daa8f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2053//#testresult/b71e4cf317daa8f6","status":"passed","time":{"start":1725149560148,"stop":1725149564053,"duration":3905}},{"uid":"ae1230d870de0630","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2052//#testresult/ae1230d870de0630","status":"passed","time":{"start":1725063250418,"stop":1725063253981,"duration":3563}},{"uid":"60fe4cc24295019a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2051//#testresult/60fe4cc24295019a","status":"passed","time":{"start":1724976707226,"stop":1724976711800,"duration":4574}},{"uid":"9baa9ee4835ac30a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2049//#testresult/9baa9ee4835ac30a","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1724890317170,"stop":1724890321378,"duration":4208}},{"uid":"639fb47a764a987c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2048//#testresult/639fb47a764a987c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724803882199,"stop":1724803883049,"duration":850}},{"uid":"6bce6052314115c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/6bce6052314115c9","status":"passed","time":{"start":1724717495935,"stop":1724717500799,"duration":4864}},{"uid":"69a137333798a84d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/69a137333798a84d","status":"passed","time":{"start":1724631148119,"stop":1724631153122,"duration":5003}},{"uid":"a60ce1bbd0b5e610","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/a60ce1bbd0b5e610","status":"passed","time":{"start":1724544673683,"stop":1724544680054,"duration":6371}}]},"tags":[]},"source":"d5883b634c7bf04e.json","parameterValues":["CroydonCouncil"]}