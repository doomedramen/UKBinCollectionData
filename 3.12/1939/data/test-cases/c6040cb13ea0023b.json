{"uid":"c6040cb13ea0023b","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1718238625466,"stop":1718238645276,"duration":19810},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fad4a08fba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fad4b068fe0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fad49e4e1b0>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fad4a031d60>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'c6e296b7f66be32ee7b4d9b90c5cfb591da95479', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fad4a08fba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fad4b068fe0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fad49e4e1b0>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fad4a031d60>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'c6e296b7f66be32ee7b4d9b90c5cfb591da95479', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1718238625467,"stop":1718238625467,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1718238625467,"stop":1718238645276,"duration":19809},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f4c591945e5dce96","name":"stdout","source":"f4c591945e5dce96.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1980-842"},{"name":"thread","value":"2773-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":15,"unknown":0,"total":36},"items":[{"uid":"cd273680b7a50ecf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1938//#testresult/cd273680b7a50ecf","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1718152183168,"stop":1718152184590,"duration":1422}},{"uid":"c44163dda4a211b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1937//#testresult/c44163dda4a211b0","status":"passed","time":{"start":1718065782201,"stop":1718065787194,"duration":4993}},{"uid":"5b485949e5b4f424","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1936//#testresult/5b485949e5b4f424","status":"passed","time":{"start":1717979449254,"stop":1717979456863,"duration":7609}},{"uid":"ed6a21bc6bb85d6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1934//#testresult/ed6a21bc6bb85d6b","status":"passed","time":{"start":1717893186278,"stop":1717893191509,"duration":5231}},{"uid":"7be581de0c5080d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1933//#testresult/7be581de0c5080d3","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1717806664294,"stop":1717806666291,"duration":1997}},{"uid":"45e6f54c6c592a62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1932//#testresult/45e6f54c6c592a62","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1717720245159,"stop":1717720248803,"duration":3644}},{"uid":"976317e59e510104","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1927//#testresult/976317e59e510104","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1717633769871,"stop":1717633775049,"duration":5178}},{"uid":"9ab432a376eb596f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1924//#testresult/9ab432a376eb596f","status":"passed","time":{"start":1717547338815,"stop":1717547344370,"duration":5555}},{"uid":"f02439cecae2fd5e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1923//#testresult/f02439cecae2fd5e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1717460940488,"stop":1717460941920,"duration":1432}},{"uid":"4b734a50aed1d2c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1921//#testresult/4b734a50aed1d2c8","status":"passed","time":{"start":1717374612313,"stop":1717374628914,"duration":16601}},{"uid":"50486a428138ca5d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1919//#testresult/50486a428138ca5d","status":"passed","time":{"start":1717331846816,"stop":1717331852378,"duration":5562}},{"uid":"95907175733ee569","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1911//#testresult/95907175733ee569","status":"passed","time":{"start":1717316324291,"stop":1717316329850,"duration":5559}},{"uid":"4fa1f98bbe43d5a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1908//#testresult/4fa1f98bbe43d5a9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1717288301691,"stop":1717288303248,"duration":1557}},{"uid":"68dc4ff981635260","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1905//#testresult/68dc4ff981635260","status":"passed","time":{"start":1717201884962,"stop":1717201891134,"duration":6172}},{"uid":"310c509ae737b8bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1904//#testresult/310c509ae737b8bb","status":"passed","time":{"start":1717115297393,"stop":1717115303066,"duration":5673}},{"uid":"2d360a9623fd92d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1903//#testresult/2d360a9623fd92d1","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1717029012485,"stop":1717029014400,"duration":1915}},{"uid":"351f14f37a3dfdd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1898//#testresult/351f14f37a3dfdd8","status":"passed","time":{"start":1716942653564,"stop":1716942662143,"duration":8579}},{"uid":"f722f672814a91f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1893//#testresult/f722f672814a91f9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1716856570523,"stop":1716856571612,"duration":1089}},{"uid":"adb703b8ef2425d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1883//#testresult/adb703b8ef2425d4","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1716770164318,"stop":1716770165516,"duration":1198}},{"uid":"11a4926425b5ce05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1881//#testresult/11a4926425b5ce05","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1716753164968,"stop":1716753166732,"duration":1764}}]},"tags":[]},"source":"c6040cb13ea0023b.json","parameterValues":["CroydonCouncil"]}