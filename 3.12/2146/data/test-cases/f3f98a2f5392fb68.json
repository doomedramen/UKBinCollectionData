{"uid":"f3f98a2f5392fb68","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1727914441256,"stop":1727914445154,"duration":3898},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc78ca27060>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc79f389610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fc78c4284d0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fc78db81490>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '2a4b7a3c04f4e12d9c72b8f37e72a45cae790bb4', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc78ca27060>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc79f389610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fc78c4284d0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fc78db81490>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '2a4b7a3c04f4e12d9c72b8f37e72a45cae790bb4', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1727914441257,"stop":1727914441257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727914441257,"stop":1727914445154,"duration":3897},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"78e83e927f8cdd48","name":"stdout","source":"78e83e927f8cdd48.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az700-494"},{"name":"thread","value":"2830-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":84,"broken":0,"skipped":0,"passed":75,"unknown":0,"total":159},"items":[{"uid":"27fac90b1f73fb85","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/27fac90b1f73fb85","status":"passed","time":{"start":1727827956114,"stop":1727827960029,"duration":3915}},{"uid":"1452e4c790494fb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/1452e4c790494fb2","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1727741575161,"stop":1727741576352,"duration":1191}},{"uid":"aec4593ac2e6fb04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/aec4593ac2e6fb04","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1727655180088,"stop":1727655181509,"duration":1421}},{"uid":"8ab1fd327096dcad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/8ab1fd327096dcad","status":"passed","time":{"start":1727568758928,"stop":1727568770610,"duration":11682}},{"uid":"471f161a65d474d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/471f161a65d474d0","status":"passed","time":{"start":1727482368123,"stop":1727482375421,"duration":7298}},{"uid":"1b8dd5b0a05e6748","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/1b8dd5b0a05e6748","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1727422314207,"stop":1727422315930,"duration":1723}},{"uid":"669a94fb5f9b0a2e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/669a94fb5f9b0a2e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1727395978601,"stop":1727395979942,"duration":1341}},{"uid":"aebb9bd58541d6ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/aebb9bd58541d6ce","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1727309591412,"stop":1727309593081,"duration":1669}},{"uid":"be15f39434ded21a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/be15f39434ded21a","status":"passed","time":{"start":1727223165086,"stop":1727223168906,"duration":3820}},{"uid":"258c2af3df8094da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/258c2af3df8094da","status":"passed","time":{"start":1727136919894,"stop":1727136923327,"duration":3433}},{"uid":"7b2cbe9505aa202a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/7b2cbe9505aa202a","status":"passed","time":{"start":1727050554005,"stop":1727050557433,"duration":3428}},{"uid":"ddcdca38cc6818c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/ddcdca38cc6818c7","status":"passed","time":{"start":1726964078562,"stop":1726964084280,"duration":5718}},{"uid":"3475ed1783668123","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/3475ed1783668123","status":"passed","time":{"start":1726877737086,"stop":1726877741444,"duration":4358}},{"uid":"7b9eaea79eb201e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/7b9eaea79eb201e6","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1726791213890,"stop":1726791214994,"duration":1104}},{"uid":"bc1206dcaa01e268","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/bc1206dcaa01e268","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1726704889505,"stop":1726704890814,"duration":1309}},{"uid":"240cff61772567dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2121//#testresult/240cff61772567dc","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1726618430468,"stop":1726618431365,"duration":897}},{"uid":"f39cd45f43a9122f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2120//#testresult/f39cd45f43a9122f","status":"passed","time":{"start":1726532055895,"stop":1726532060327,"duration":4432}},{"uid":"7636d82c6ef7391f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2116//#testresult/7636d82c6ef7391f","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1726445748119,"stop":1726445749442,"duration":1323}},{"uid":"c448b60fb64992b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2115//#testresult/c448b60fb64992b2","status":"passed","time":{"start":1726359248575,"stop":1726359252372,"duration":3797}},{"uid":"5a9989753b519e42","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2114//#testresult/5a9989753b519e42","status":"passed","time":{"start":1726272783087,"stop":1726272786886,"duration":3799}}]},"tags":[]},"source":"f3f98a2f5392fb68.json","parameterValues":["CroydonCouncil"]}