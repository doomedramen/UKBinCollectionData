{"uid":"5ce140e8cc9ee8d2","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1720399629168,"stop":1720399674894,"duration":45726},"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f01b207a520>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f01b2e5f200>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f01b207a520>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f01b2e5f200>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1720399629168,"stop":1720399629168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720399629169,"stop":1720399674894,"duration":45725},"status":"failed","statusMessage":"time data 'July' does not match format '%d %B'","statusTrace":"ValueError: time data 'July' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"48e1d2c9e0a0c6a0","name":"stdout","source":"48e1d2c9e0a0c6a0.txt","type":"text/plain","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1210-393"},{"name":"thread","value":"2694-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":60},"items":[{"uid":"44c681bf35b741d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1971//#testresult/44c681bf35b741d0","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1720313356285,"stop":1720313434936,"duration":78651}},{"uid":"80f78c1e64b81b80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/80f78c1e64b81b80","status":"passed","time":{"start":1720226804318,"stop":1720226836182,"duration":31864}},{"uid":"fa65435a35e63c1f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/fa65435a35e63c1f","status":"passed","time":{"start":1720140158698,"stop":1720140171669,"duration":12971}},{"uid":"d5a958c73a3b607","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/d5a958c73a3b607","status":"passed","time":{"start":1720053823885,"stop":1720053840098,"duration":16213}},{"uid":"6b52140122591944","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/6b52140122591944","status":"passed","time":{"start":1719967387545,"stop":1719967401373,"duration":13828}},{"uid":"85a4f198972a4dc2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/85a4f198972a4dc2","status":"passed","time":{"start":1719881007665,"stop":1719881039527,"duration":31862}},{"uid":"1c54a2406a81299f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/1c54a2406a81299f","status":"failed","statusDetails":"ValueError: time data 'July' does not match format '%d %B'","time":{"start":1719795080146,"stop":1719795087601,"duration":7455}},{"uid":"3b24044181a88036","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/3b24044181a88036","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1719708596201,"stop":1719708636084,"duration":39883}},{"uid":"d5b0dd5c49f0796f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/d5b0dd5c49f0796f","status":"passed","time":{"start":1719621788306,"stop":1719621931016,"duration":142710}},{"uid":"4cacd1f7253cc85f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/4cacd1f7253cc85f","status":"passed","time":{"start":1719535372639,"stop":1719535383960,"duration":11321}},{"uid":"263b88b642d23741","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/263b88b642d23741","status":"passed","time":{"start":1719362762298,"stop":1719362790540,"duration":28242}},{"uid":"f95e91510fcdeb55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/f95e91510fcdeb55","status":"passed","time":{"start":1719276301433,"stop":1719276324790,"duration":23357}},{"uid":"bc4ff38c3b42e762","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/bc4ff38c3b42e762","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1719190122179,"stop":1719190134583,"duration":12404}},{"uid":"be2546fbc13346c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/be2546fbc13346c0","status":"passed","time":{"start":1719103741722,"stop":1719103757133,"duration":15411}},{"uid":"5fbb4d68a245669a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/5fbb4d68a245669a","status":"passed","time":{"start":1719017173504,"stop":1719017214988,"duration":41484}},{"uid":"38a3f8e2f8701d4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/38a3f8e2f8701d4c","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1718930798061,"stop":1718930825706,"duration":27645}},{"uid":"8a3317ea3be4a178","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/8a3317ea3be4a178","status":"passed","time":{"start":1718844301389,"stop":1718844349186,"duration":47797}},{"uid":"d9538da7570223ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/d9538da7570223ec","status":"passed","time":{"start":1718757992270,"stop":1718758014648,"duration":22378}},{"uid":"d5b714b29d447833","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/d5b714b29d447833","status":"passed","time":{"start":1718671557193,"stop":1718671588680,"duration":31487}},{"uid":"c8448847998dd972","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1945//#testresult/c8448847998dd972","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1718585213615,"stop":1718585256265,"duration":42650}}]},"tags":[]},"source":"5ce140e8cc9ee8d2.json","parameterValues":["WestBerkshireCouncil"]}