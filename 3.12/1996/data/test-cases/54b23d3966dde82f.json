{"uid":"54b23d3966dde82f","name":"Validate Council Output [BradfordMDC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e3f4ac517a489f09b3e68d80e88d1d63","time":{"start":1722211690838,"stop":1722211692174,"duration":1336},"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fd6ca32a7a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd6dc196de0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7fd6ca1f6ff0>, page = ''\nkwargs = {'council_module_str': 'BradfordMDC', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:86: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fd6ca32a7a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd6dc196de0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7fd6ca1f6ff0>, page = ''\nkwargs = {'council_module_str': 'BradfordMDC', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:86: IndexError","steps":[{"name":"Given the council","time":{"start":1722211690838,"stop":1722211690839,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722211690839,"stop":1722211692174,"duration":1335},"status":"failed","statusMessage":"string index out of range","statusTrace":"IndexError: string index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1e51e5807546925a","name":"stdout","source":"1e51e5807546925a.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1198-484"},{"name":"thread","value":"2857-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BradfordMDC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":80,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":80},"items":[{"uid":"cce0bda7957d2fa6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/cce0bda7957d2fa6","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1722125531067,"stop":1722125532033,"duration":966}},{"uid":"6930777b660ed708","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/6930777b660ed708","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1722039155620,"stop":1722039156877,"duration":1257}},{"uid":"3ca47ca58c0e47b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/3ca47ca58c0e47b","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721952692886,"stop":1721952693733,"duration":847}},{"uid":"7059262bbd624055","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/7059262bbd624055","status":"failed","statusDetails":"UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value","time":{"start":1721866349955,"stop":1721866351407,"duration":1452}},{"uid":"90d069e09d894f25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1991//#testresult/90d069e09d894f25","status":"failed","statusDetails":"UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value","time":{"start":1721779705381,"stop":1721779707305,"duration":1924}},{"uid":"765c422942108ff8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1990//#testresult/765c422942108ff8","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721693489108,"stop":1721693490146,"duration":1038}},{"uid":"b45dcc3be84e635e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1989//#testresult/b45dcc3be84e635e","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721607095278,"stop":1721607096323,"duration":1045}},{"uid":"39afdc097c07ca61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1988//#testresult/39afdc097c07ca61","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721520449056,"stop":1721520450217,"duration":1161}},{"uid":"a9645297c71bab46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1987//#testresult/a9645297c71bab46","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721434346240,"stop":1721434347125,"duration":885}},{"uid":"d9c8203689199103","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1986//#testresult/d9c8203689199103","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721372453147,"stop":1721372454599,"duration":1452}},{"uid":"e06992c7c7401a2a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1985//#testresult/e06992c7c7401a2a","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721262906335,"stop":1721262907634,"duration":1299}},{"uid":"7e7095856b6b692d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1984//#testresult/7e7095856b6b692d","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721176542848,"stop":1721176543813,"duration":965}},{"uid":"9f723c383500d3d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1983//#testresult/9f723c383500d3d4","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721090385202,"stop":1721090386208,"duration":1006}},{"uid":"b469929425e1f0f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/b469929425e1f0f6","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1721003880511,"stop":1721003881580,"duration":1069}},{"uid":"e0107ada4fa8e3bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/e0107ada4fa8e3bc","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1720917787997,"stop":1720917789424,"duration":1427}},{"uid":"e7aba78589a9f81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/e7aba78589a9f81","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1720831169314,"stop":1720831170376,"duration":1062}},{"uid":"c84f90369223c5b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1979//#testresult/c84f90369223c5b5","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1720744493797,"stop":1720744494886,"duration":1089}},{"uid":"50e1aca61e6ae91c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1978//#testresult/50e1aca61e6ae91c","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1720658395361,"stop":1720658396433,"duration":1072}},{"uid":"2dfb229240591362","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1977//#testresult/2dfb229240591362","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1720572007361,"stop":1720572008520,"duration":1159}},{"uid":"34f378bcdf181b55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1976//#testresult/34f378bcdf181b55","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1720485032615,"stop":1720485033613,"duration":998}}]},"tags":[]},"source":"54b23d3966dde82f.json","parameterValues":["BradfordMDC"]}