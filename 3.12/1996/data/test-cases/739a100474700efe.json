{"uid":"739a100474700efe","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1722212663354,"stop":1722212692963,"duration":29609},"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0f9aab9f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0f9b791400>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0f9aab9f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0f9b791400>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1722212663354,"stop":1722212663354,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722212663354,"stop":1722212692963,"duration":29609},"status":"failed","statusMessage":"time data 'July' does not match format '%d %B'","statusTrace":"ValueError: time data 'July' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e6d3b313ac26ff52","name":"stdout","source":"e6d3b313ac26ff52.txt","type":"text/plain","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1198-484"},{"name":"thread","value":"2863-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":25,"broken":0,"skipped":0,"passed":56,"unknown":0,"total":81},"items":[{"uid":"83000a1ddd0f5810","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/83000a1ddd0f5810","status":"passed","time":{"start":1722126242421,"stop":1722126254863,"duration":12442}},{"uid":"dd4bb06201dd1ec2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/dd4bb06201dd1ec2","status":"passed","time":{"start":1722039993373,"stop":1722040042225,"duration":48852}},{"uid":"7d80b44d55b86c22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/7d80b44d55b86c22","status":"passed","time":{"start":1721953541349,"stop":1721953554703,"duration":13354}},{"uid":"ff9746c73e5fdbd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/ff9746c73e5fdbd2","status":"passed","time":{"start":1721867118731,"stop":1721867144854,"duration":26123}},{"uid":"afa59d987697f5d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1991//#testresult/afa59d987697f5d4","status":"passed","time":{"start":1721780683329,"stop":1721780711428,"duration":28099}},{"uid":"c39f230b141dfb74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1990//#testresult/c39f230b141dfb74","status":"passed","time":{"start":1721694225848,"stop":1721694244065,"duration":18217}},{"uid":"988874cf401072d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1989//#testresult/988874cf401072d1","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ea95e9069a <unknown>\n#1 0x55ea95b730dc <unknown>\n#2 0x55ea95bbf931 <unknown>\n#3 0x55ea95bbfa21 <unknown>\n#4 0x55ea95c04234 <unknown>\n#5 0x55ea95be289d <unknown>\n#6 0x55ea95c015c3 <unknown>\n#7 0x55ea95be2613 <unknown>\n#8 0x55ea95bb24f7 <unknown>\n#9 0x55ea95bb2e4e <unknown>\n#10 0x55ea95e5686b <unknown>\n#11 0x55ea95e5a911 <unknown>\n#12 0x55ea95e4235e <unknown>\n#13 0x55ea95e5b472 <unknown>\n#14 0x55ea95e26cbf <unknown>\n#15 0x55ea95e80098 <unknown>\n#16 0x55ea95e80270 <unknown>\n#17 0x55ea95e8f7cc <unknown>\n#18 0x7f6a3e265ac3 <unknown>","time":{"start":1721607815722,"stop":1721607837681,"duration":21959}},{"uid":"5aae8decaeb5e9bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1988//#testresult/5aae8decaeb5e9bf","status":"passed","time":{"start":1721521416075,"stop":1721521463104,"duration":47029}},{"uid":"ca25248037106fb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1987//#testresult/ca25248037106fb7","status":"passed","time":{"start":1721435086225,"stop":1721435133853,"duration":47628}},{"uid":"6f4cd96660a705ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1986//#testresult/6f4cd96660a705ae","status":"passed","time":{"start":1721373210235,"stop":1721373244826,"duration":34591}},{"uid":"e1a0d52dfc534e2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1985//#testresult/e1a0d52dfc534e2d","status":"passed","time":{"start":1721264077160,"stop":1721264107900,"duration":30740}},{"uid":"456f2e738d9810f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1984//#testresult/456f2e738d9810f3","status":"passed","time":{"start":1721177466248,"stop":1721177511215,"duration":44967}},{"uid":"b0f7199aedea0d80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1983//#testresult/b0f7199aedea0d80","status":"passed","time":{"start":1721091147723,"stop":1721091167692,"duration":19969}},{"uid":"a4a08e685b369b1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/a4a08e685b369b1e","status":"failed","statusDetails":"ValueError: time data 'July' does not match format '%d %B'","time":{"start":1721004858973,"stop":1721004877419,"duration":18446}},{"uid":"a928138b60a7641e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/a928138b60a7641e","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ba2830869a <unknown>\n#1 0x55ba27feb0dc <unknown>\n#2 0x55ba28037931 <unknown>\n#3 0x55ba28037a21 <unknown>\n#4 0x55ba2807c234 <unknown>\n#5 0x55ba2805a89d <unknown>\n#6 0x55ba280795c3 <unknown>\n#7 0x55ba2805a613 <unknown>\n#8 0x55ba2802a4f7 <unknown>\n#9 0x55ba2802ae4e <unknown>\n#10 0x55ba282ce86b <unknown>\n#11 0x55ba282d2911 <unknown>\n#12 0x55ba282ba35e <unknown>\n#13 0x55ba282d3472 <unknown>\n#14 0x55ba2829ecbf <unknown>\n#15 0x55ba282f8098 <unknown>\n#16 0x55ba282f8270 <unknown>\n#17 0x55ba283077cc <unknown>\n#18 0x7f2bcf366ac3 <unknown>","time":{"start":1720918549420,"stop":1720918569836,"duration":20416}},{"uid":"5bd72f885512f238","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/5bd72f885512f238","status":"passed","time":{"start":1720831876773,"stop":1720831898940,"duration":22167}},{"uid":"edf4b94b6b02bd49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1979//#testresult/edf4b94b6b02bd49","status":"passed","time":{"start":1720745427603,"stop":1720745448178,"duration":20575}},{"uid":"ae3726bd9dcec3ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1978//#testresult/ae3726bd9dcec3ae","status":"passed","time":{"start":1720659141862,"stop":1720659165676,"duration":23814}},{"uid":"793a94c749f6ccb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1977//#testresult/793a94c749f6ccb7","status":"passed","time":{"start":1720572729952,"stop":1720572747128,"duration":17176}},{"uid":"5a190bca7599c359","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1976//#testresult/5a190bca7599c359","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x561788bbd69a <unknown>\n#1 0x5617888a00dc <unknown>\n#2 0x5617888ec931 <unknown>\n#3 0x5617888eca21 <unknown>\n#4 0x561788931234 <unknown>\n#5 0x56178890f89d <unknown>\n#6 0x56178892e5c3 <unknown>\n#7 0x56178890f613 <unknown>\n#8 0x5617888df4f7 <unknown>\n#9 0x5617888dfe4e <unknown>\n#10 0x561788b8386b <unknown>\n#11 0x561788b87911 <unknown>\n#12 0x561788b6f35e <unknown>\n#13 0x561788b88472 <unknown>\n#14 0x561788b53cbf <unknown>\n#15 0x561788bad098 <unknown>\n#16 0x561788bad270 <unknown>\n#17 0x561788bbc7cc <unknown>\n#18 0x7f6d0cb74ac3 <unknown>","time":{"start":1720485819526,"stop":1720485851333,"duration":31807}}]},"tags":[]},"source":"739a100474700efe.json","parameterValues":["WestBerkshireCouncil"]}