{"uid":"9baa9ee4835ac30a","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1724890317170,"stop":1724890321378,"duration":4208},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fd09ebfeca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd0b00a21e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fd0b175b4a0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fd09e63e900>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'e901092de8daeae6f2a767e73388c38364dbeb82', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fd09ebfeca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd0b00a21e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fd0b175b4a0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fd09e63e900>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'e901092de8daeae6f2a767e73388c38364dbeb82', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1724890317170,"stop":1724890317170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724890317170,"stop":1724890321378,"duration":4208},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"388fa74eb227ee33","name":"stdout","source":"388fa74eb227ee33.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-639"},{"name":"thread","value":"2738-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":63,"broken":0,"skipped":0,"passed":49,"unknown":0,"total":112},"items":[{"uid":"639fb47a764a987c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2048//#testresult/639fb47a764a987c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724803882199,"stop":1724803883049,"duration":850}},{"uid":"6bce6052314115c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2043//#testresult/6bce6052314115c9","status":"passed","time":{"start":1724717495935,"stop":1724717500799,"duration":4864}},{"uid":"69a137333798a84d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2039//#testresult/69a137333798a84d","status":"passed","time":{"start":1724631148119,"stop":1724631153122,"duration":5003}},{"uid":"a60ce1bbd0b5e610","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2038//#testresult/a60ce1bbd0b5e610","status":"passed","time":{"start":1724544673683,"stop":1724544680054,"duration":6371}},{"uid":"c457a36915d9773b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2037//#testresult/c457a36915d9773b","status":"passed","time":{"start":1724458277491,"stop":1724458281628,"duration":4137}},{"uid":"57a4c7388553ede6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2036//#testresult/57a4c7388553ede6","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724371910467,"stop":1724371911746,"duration":1279}},{"uid":"8e7a5bca304ba243","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2034//#testresult/8e7a5bca304ba243","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724285487619,"stop":1724285488953,"duration":1334}},{"uid":"98347b6e4928eca7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2033//#testresult/98347b6e4928eca7","status":"passed","time":{"start":1724199086559,"stop":1724199090707,"duration":4148}},{"uid":"aed3e6b4abed8ed6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2032//#testresult/aed3e6b4abed8ed6","status":"passed","time":{"start":1724112698034,"stop":1724112702692,"duration":4658}},{"uid":"2fd8b6ba515af355","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2031//#testresult/2fd8b6ba515af355","status":"passed","time":{"start":1724026318214,"stop":1724026323227,"duration":5013}},{"uid":"1d8dfe96e14e3e51","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2030//#testresult/1d8dfe96e14e3e51","status":"passed","time":{"start":1723939894087,"stop":1723939899532,"duration":5445}},{"uid":"2b9fb14c80a51fc8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2029//#testresult/2b9fb14c80a51fc8","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1723853475430,"stop":1723853476382,"duration":952}},{"uid":"ae5da3584ecf28b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/ae5da3584ecf28b2","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1723767108658,"stop":1723767109760,"duration":1102}},{"uid":"f4c4d004ec5f8702","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/f4c4d004ec5f8702","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1723680170684,"stop":1723680171851,"duration":1167}},{"uid":"3139fea8cc5a39c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2026//#testresult/3139fea8cc5a39c","status":"passed","time":{"start":1723594306050,"stop":1723594310815,"duration":4765}},{"uid":"ad9be238e3dcca9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/ad9be238e3dcca9e","status":"passed","time":{"start":1723508109813,"stop":1723508113457,"duration":3644}},{"uid":"aa1bad9a9756417f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/aa1bad9a9756417f","status":"passed","time":{"start":1723421661979,"stop":1723421666260,"duration":4281}},{"uid":"b172bf5a20d5ad9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/b172bf5a20d5ad9f","status":"passed","time":{"start":1723335352042,"stop":1723335355644,"duration":3602}},{"uid":"eb2c3eabde2a0388","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/eb2c3eabde2a0388","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1723248866045,"stop":1723248867037,"duration":992}},{"uid":"459966c73a4dfb94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/459966c73a4dfb94","status":"passed","time":{"start":1723162434182,"stop":1723162438338,"duration":4156}}]},"tags":[]},"source":"9baa9ee4835ac30a.json","parameterValues":["CroydonCouncil"]}