{"uid":"6538901980fa8b9a","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1719795056248,"stop":1719795076300,"duration":20052},"status":"failed","statusMessage":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f895ee7e7a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f8970db12e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 1st August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f895ee7e7a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f8970db12e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 1st August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1719795056248,"stop":1719795056249,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719795056249,"stop":1719795076300,"duration":20051},"status":"failed","statusMessage":"time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"33202de9c1ae1842","name":"log","source":"33202de9c1ae1842.txt","type":"text/plain","size":132},{"uid":"2f93edd03bae0b6c","name":"stdout","source":"2f93edd03bae0b6c.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az523-327"},{"name":"thread","value":"2674-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":29},"items":[{"uid":"eafab3ab6fad579b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/eafab3ab6fad579b","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719708570149,"stop":1719708594766,"duration":24617}},{"uid":"f1681b24afd0816c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/f1681b24afd0816c","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719621639106,"stop":1719621780785,"duration":141679}},{"uid":"372085b15f60f162","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/372085b15f60f162","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719535219177,"stop":1719535365459,"duration":146282}},{"uid":"f8b126a7f13139bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/f8b126a7f13139bc","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719362615755,"stop":1719362752821,"duration":137066}},{"uid":"fdc114b98bf102b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/fdc114b98bf102b8","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719276266986,"stop":1719276270885,"duration":3899}},{"uid":"6733b5e995acbf59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/6733b5e995acbf59","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719190045108,"stop":1719190056119,"duration":11011}},{"uid":"60ea053ba982ef3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/60ea053ba982ef3d","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719103694724,"stop":1719103701367,"duration":6643}},{"uid":"212234447cfeaa8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/212234447cfeaa8a","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719017026469,"stop":1719017163279,"duration":136810}},{"uid":"5344f768204ee645","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/5344f768204ee645","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1718930780195,"stop":1718930798495,"duration":18300}},{"uid":"5a8234895eeb24b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/5a8234895eeb24b1","status":"passed","time":{"start":1718844186563,"stop":1718844330021,"duration":143458}},{"uid":"e27b7866eb3d1475","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/e27b7866eb3d1475","status":"passed","time":{"start":1718757962744,"stop":1718757988097,"duration":25353}},{"uid":"ceda3309216e5454","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/ceda3309216e5454","status":"passed","time":{"start":1718671498057,"stop":1718671510406,"duration":12349}},{"uid":"449f2b668e2494e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1945//#testresult/449f2b668e2494e1","status":"passed","time":{"start":1718585050548,"stop":1718585070175,"duration":19627}},{"uid":"12e92a2f5b0c81c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1944//#testresult/12e92a2f5b0c81c3","status":"passed","time":{"start":1718498754095,"stop":1718498774635,"duration":20540}},{"uid":"9d154ea4b08225be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1943//#testresult/9d154ea4b08225be","status":"passed","time":{"start":1718412250530,"stop":1718412386605,"duration":136075}},{"uid":"ab25ce30f3887e81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1942//#testresult/ab25ce30f3887e81","status":"passed","time":{"start":1718325899543,"stop":1718325914302,"duration":14759}},{"uid":"f2a9323484b19198","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1939//#testresult/f2a9323484b19198","status":"passed","time":{"start":1718239546726,"stop":1718239570104,"duration":23378}},{"uid":"c7ecffca8db51c98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1938//#testresult/c7ecffca8db51c98","status":"passed","time":{"start":1718153107295,"stop":1718153148749,"duration":41454}},{"uid":"278b945ff3c79a75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1937//#testresult/278b945ff3c79a75","status":"passed","time":{"start":1718066730715,"stop":1718066868109,"duration":137394}},{"uid":"82725838dd3bb6d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1936//#testresult/82725838dd3bb6d2","status":"passed","time":{"start":1717980224957,"stop":1717980366175,"duration":141218}}]},"tags":[]},"source":"6538901980fa8b9a.json","parameterValues":["UttlesfordDistrictCouncil"]}