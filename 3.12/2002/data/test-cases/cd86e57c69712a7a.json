{"uid":"cd86e57c69712a7a","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1722471093463,"stop":1722471096933,"duration":3470},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2625725d00>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2638f4a570>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f2624be6de0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7f2624b57bf0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '9905d62043657b7105dc5ca06e07858f76474067', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2625725d00>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2638f4a570>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f2624be6de0>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7f2624b57bf0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '9905d62043657b7105dc5ca06e07858f76474067', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1722471093464,"stop":1722471093464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722471093465,"stop":1722471096933,"duration":3468},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"32b102c2b36706a2","name":"stdout","source":"32b102c2b36706a2.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1208-145"},{"name":"thread","value":"2838-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":0,"skipped":0,"passed":33,"unknown":0,"total":84},"items":[{"uid":"1c65fd225b19633d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/1c65fd225b19633d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722384774262,"stop":1722384775926,"duration":1664}},{"uid":"ef5619cea8855cca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/ef5619cea8855cca","status":"passed","time":{"start":1722298293110,"stop":1722298296577,"duration":3467}},{"uid":"a95a6110548b09fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/a95a6110548b09fe","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722211937798,"stop":1722211939351,"duration":1553}},{"uid":"cd8c551c61cf8fca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/cd8c551c61cf8fca","status":"passed","time":{"start":1722125474826,"stop":1722125478322,"duration":3496}},{"uid":"224a8edf3e244405","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1994//#testresult/224a8edf3e244405","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722039152805,"stop":1722039154355,"duration":1550}},{"uid":"4f206f7cd3ae5012","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1993//#testresult/4f206f7cd3ae5012","status":"passed","time":{"start":1721952691339,"stop":1721952694850,"duration":3511}},{"uid":"1a80aad5eeb8cf5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1992//#testresult/1a80aad5eeb8cf5b","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1721866349139,"stop":1721866352503,"duration":3364}},{"uid":"716c424bed85abb0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1991//#testresult/716c424bed85abb0","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721779956205,"stop":1721779957905,"duration":1700}},{"uid":"9d313aa9ec2ba078","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1990//#testresult/9d313aa9ec2ba078","status":"passed","time":{"start":1721693488264,"stop":1721693493144,"duration":4880}},{"uid":"a7fc8153c4ca626d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1989//#testresult/a7fc8153c4ca626d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721607093352,"stop":1721607094991,"duration":1639}},{"uid":"4f973406031a51cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1988//#testresult/4f973406031a51cb","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721520695485,"stop":1721520697266,"duration":1781}},{"uid":"701d3c8594bbbf6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1987//#testresult/701d3c8594bbbf6f","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721434343607,"stop":1721434344553,"duration":946}},{"uid":"519900dbefeca844","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1986//#testresult/519900dbefeca844","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721372454354,"stop":1721372455895,"duration":1541}},{"uid":"68dad3ccecfe954c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1985//#testresult/68dad3ccecfe954c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721263153004,"stop":1721263154821,"duration":1817}},{"uid":"ed19557ed58d6afe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1984//#testresult/ed19557ed58d6afe","status":"passed","time":{"start":1721176786777,"stop":1721176791059,"duration":4282}},{"uid":"9e4a40bf84f9b7c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1983//#testresult/9e4a40bf84f9b7c8","status":"passed","time":{"start":1721090384962,"stop":1721090389688,"duration":4726}},{"uid":"435411ba31cf0e60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1982//#testresult/435411ba31cf0e60","status":"passed","time":{"start":1721004123892,"stop":1721004128686,"duration":4794}},{"uid":"5655574aba71a8fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1981//#testresult/5655574aba71a8fe","status":"passed","time":{"start":1720917790113,"stop":1720917795137,"duration":5024}},{"uid":"ad7877fe71375e37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1980//#testresult/ad7877fe71375e37","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1720831167905,"stop":1720831168853,"duration":948}},{"uid":"8a68a241ea580bc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1979//#testresult/8a68a241ea580bc4","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1720744739713,"stop":1720744740706,"duration":993}}]},"tags":[]},"source":"cd86e57c69712a7a.json","parameterValues":["CroydonCouncil"]}