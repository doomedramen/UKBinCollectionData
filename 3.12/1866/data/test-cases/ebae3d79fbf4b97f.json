{"uid":"ebae3d79fbf4b97f","name":"Validate Council Output [YorkCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"95d2ddaa8617a8ae0ab01b561e2fb1b9","time":{"start":1716705668558,"stop":1716705768962,"duration":100404},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f85e91404a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[YorkCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f85e7d5f950>, 'council': 'YorkCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/YorkCouncil.py:26: in parse_data\n    json_response = json.loads(response.content)[\"services\"]\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f85fcabbe60>\ns = '<!DOCTYPE html>\\n<!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en-US\"> <![endif]-->\\n<!--[if IE 7]>    <html ...istener(\"DOMContentLoaded\",d)})();</script>\\n</div><!-- /.error-footer -->\\n\\n\\n    </div>\\n</div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f85e91404a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[YorkCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f85e7d5f950>, 'council': 'YorkCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/YorkCouncil.py:26: in parse_data\n    json_response = json.loads(response.content)[\"services\"]\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f85fcabbe60>\ns = '<!DOCTYPE html>\\n<!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en-US\"> <![endif]-->\\n<!--[if IE 7]>    <html ...istener(\"DOMContentLoaded\",d)})();</script>\\n</div><!-- /.error-footer -->\\n\\n\\n    </div>\\n</div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: YorkCouncil","time":{"start":1716705668558,"stop":1716705668559,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from YorkCouncil","time":{"start":1716705668559,"stop":1716705768962,"duration":100403},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1984-136"},{"name":"thread","value":"2871-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"YorkCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":12,"unknown":0,"total":13},"items":[{"uid":"bf4d7cb858d5da80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1865//#testresult/bf4d7cb858d5da80","status":"passed","time":{"start":1716684095000,"stop":1716684095477,"duration":477}},{"uid":"308d10d2de16e946","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1863//#testresult/308d10d2de16e946","status":"passed","time":{"start":1716625476728,"stop":1716625477528,"duration":800}},{"uid":"5dcf5a0fed6fac17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1862//#testresult/5dcf5a0fed6fac17","status":"passed","time":{"start":1716597532905,"stop":1716597534040,"duration":1135}},{"uid":"5fc2bb04923585c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1856//#testresult/5fc2bb04923585c4","status":"passed","time":{"start":1716511246505,"stop":1716511246993,"duration":488}},{"uid":"aaf53031e614059c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1855//#testresult/aaf53031e614059c","status":"passed","time":{"start":1716424946122,"stop":1716424947142,"duration":1020}},{"uid":"ff7b21b3cd59ed1f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1854//#testresult/ff7b21b3cd59ed1f","status":"passed","time":{"start":1716338408088,"stop":1716338408574,"duration":486}},{"uid":"309976ec31be5ff8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1853//#testresult/309976ec31be5ff8","status":"passed","time":{"start":1716252070901,"stop":1716252071734,"duration":833}},{"uid":"add33a60ffcb1876","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1852//#testresult/add33a60ffcb1876","status":"passed","time":{"start":1716165668551,"stop":1716165669061,"duration":510}},{"uid":"fb2fd0ea44fb5b67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1851//#testresult/fb2fd0ea44fb5b67","status":"passed","time":{"start":1716155438151,"stop":1716155440326,"duration":2175}},{"uid":"f4938f21d7b6b4d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1846//#testresult/f4938f21d7b6b4d3","status":"passed","time":{"start":1716079430456,"stop":1716079431114,"duration":658}},{"uid":"ba483513b7732c18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1842//#testresult/ba483513b7732c18","status":"passed","time":{"start":1715992798832,"stop":1715992799483,"duration":651}},{"uid":"94f50209bf2a9ff5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1839//#testresult/94f50209bf2a9ff5","status":"passed","time":{"start":1715983735547,"stop":1715983743704,"duration":8157}}]},"tags":[]},"source":"ebae3d79fbf4b97f.json","parameterValues":["YorkCouncil"]}