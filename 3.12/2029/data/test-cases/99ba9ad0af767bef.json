{"uid":"99ba9ad0af767bef","name":"Validate Council Output [SouthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"efde6c2c8e15955ad5fa48845f3c2c06","time":{"start":1723853900120,"stop":1723853901358,"duration":1238},"status":"failed","statusMessage":"KeyError: 'result'","statusTrace":"fixturefunc = <function scrape_step at 0x7f1bb9fc5940>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f1bbac94e00>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f1bb8e6f650>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n>       json_result = json.loads(response.text)[\"result\"]\nE       KeyError: 'result'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:85: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"KeyError: 'result'","statusTrace":"fixturefunc = <function scrape_step at 0x7f1bb9fc5940>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f1bbac94e00>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f1bb8e6f650>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n>       json_result = json.loads(response.text)[\"result\"]\nE       KeyError: 'result'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:85: KeyError","steps":[{"name":"Given the council","time":{"start":1723853900120,"stop":1723853900120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723853900120,"stop":1723853901358,"duration":1238},"status":"failed","statusMessage":"'result'","statusTrace":"KeyError: 'result'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7d0e3024f3ab9da1","name":"stdout","source":"7d0e3024f3ab9da1.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az842-428"},{"name":"thread","value":"2789-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthTynesideCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":99,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":99},"items":[{"uid":"60a17c932253a53a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/60a17c932253a53a","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723767679370,"stop":1723767680758,"duration":1388}},{"uid":"be20eff087b59fb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/be20eff087b59fb3","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723680947073,"stop":1723680948419,"duration":1346}},{"uid":"81e7dd83c8756e96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2026//#testresult/81e7dd83c8756e96","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1723594899294,"stop":1723594901627,"duration":2333}},{"uid":"c01ec7c98719ce95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/c01ec7c98719ce95","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723508656122,"stop":1723508657565,"duration":1443}},{"uid":"e6d6f803a67c5d64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/e6d6f803a67c5d64","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723422250373,"stop":1723422251569,"duration":1196}},{"uid":"1e16966535603f59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/1e16966535603f59","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723335896775,"stop":1723335898240,"duration":1465}},{"uid":"26fe65bec4df6928","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/26fe65bec4df6928","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723249448505,"stop":1723249449837,"duration":1332}},{"uid":"6496517e2e511e14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/6496517e2e511e14","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723162867664,"stop":1723162869617,"duration":1953}},{"uid":"b85b9fbc0fbad515","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/b85b9fbc0fbad515","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723076565862,"stop":1723076569808,"duration":3946}},{"uid":"3893f2e834e1a1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2012//#testresult/3893f2e834e1a1e","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722990151471,"stop":1722990152585,"duration":1114}},{"uid":"71d0b400e2c374c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2007//#testresult/71d0b400e2c374c1","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722903755171,"stop":1722903756668,"duration":1497}},{"uid":"4e230f96f10ae063","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2006//#testresult/4e230f96f10ae063","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722817575895,"stop":1722817576439,"duration":544}},{"uid":"7f26bdb616decdfa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2005//#testresult/7f26bdb616decdfa","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722730936648,"stop":1722730937283,"duration":635}},{"uid":"11cefe691126d23b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2004//#testresult/11cefe691126d23b","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722644595115,"stop":1722644596542,"duration":1427}},{"uid":"aca582bd906ad405","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2003//#testresult/aca582bd906ad405","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722558079141,"stop":1722558080684,"duration":1543}},{"uid":"78bb21537c6e0692","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/78bb21537c6e0692","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722471655599,"stop":1722471656101,"duration":502}},{"uid":"3cfc948ad5b76a33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/3cfc948ad5b76a33","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722385231834,"stop":1722385233151,"duration":1317}},{"uid":"bda380ae8ecfa20d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/bda380ae8ecfa20d","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722298853907,"stop":1722298854331,"duration":424}},{"uid":"c8395c2c4edb245","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/c8395c2c4edb245","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722212488154,"stop":1722212488998,"duration":844}},{"uid":"9ee879416867d1ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/9ee879416867d1ef","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722126065316,"stop":1722126065741,"duration":425}}]},"tags":[]},"source":"99ba9ad0af767bef.json","parameterValues":["SouthTynesideCouncil"]}