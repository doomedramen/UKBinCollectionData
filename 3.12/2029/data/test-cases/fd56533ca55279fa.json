{"uid":"fd56533ca55279fa","name":"Validate Council Output [NottinghamCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d4f72ded7db85dcd7cecf3a5b5fd36e6","time":{"start":1723853840289,"stop":1723853900891,"duration":60602},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f0a6252a520>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0a75be1790>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0a7628f230>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f0a6252a520>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0a75be1790>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0a7628f230>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council","time":{"start":1723853840289,"stop":1723853840290,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723853840290,"stop":1723853900891,"duration":60601},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"cb12cdbf8ea082ed","name":"stdout","source":"cb12cdbf8ea082ed.txt","type":"text/plain","size":48}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az842-428"},{"name":"thread","value":"2780-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NottinghamCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":97,"unknown":0,"total":99},"items":[{"uid":"56ffb9b4b94a1c71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2028//#testresult/56ffb9b4b94a1c71","status":"passed","time":{"start":1723767645291,"stop":1723767651994,"duration":6703}},{"uid":"e4f1e25acc8319ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2027//#testresult/e4f1e25acc8319ec","status":"passed","time":{"start":1723680658129,"stop":1723680667118,"duration":8989}},{"uid":"d2b387bdabd6db19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2026//#testresult/d2b387bdabd6db19","status":"passed","time":{"start":1723594867588,"stop":1723594881056,"duration":13468}},{"uid":"1eb170f9d4cb6144","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2025//#testresult/1eb170f9d4cb6144","status":"passed","time":{"start":1723508604182,"stop":1723508607096,"duration":2914}},{"uid":"794a931324eed5ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2024//#testresult/794a931324eed5ee","status":"passed","time":{"start":1723422087970,"stop":1723422099159,"duration":11189}},{"uid":"387f477cbc5a96da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2022//#testresult/387f477cbc5a96da","status":"passed","time":{"start":1723335711772,"stop":1723335714831,"duration":3059}},{"uid":"9f4ccac9cc1766bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2020//#testresult/9f4ccac9cc1766bf","status":"passed","time":{"start":1723249425085,"stop":1723249429019,"duration":3934}},{"uid":"9d227e20b20351b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2019//#testresult/9d227e20b20351b3","status":"passed","time":{"start":1723162816790,"stop":1723162831618,"duration":14828}},{"uid":"c7d269af06632f73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2014//#testresult/c7d269af06632f73","status":"passed","time":{"start":1723076555725,"stop":1723076560317,"duration":4592}},{"uid":"9db1d6b0574cab21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2012//#testresult/9db1d6b0574cab21","status":"passed","time":{"start":1722990131999,"stop":1722990150361,"duration":18362}},{"uid":"33ae9db99656b133","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2007//#testresult/33ae9db99656b133","status":"passed","time":{"start":1722903741943,"stop":1722903745007,"duration":3064}},{"uid":"4e81d6f1200e70e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2006//#testresult/4e81d6f1200e70e6","status":"passed","time":{"start":1722817415543,"stop":1722817446920,"duration":31377}},{"uid":"e026d97606ea46ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2005//#testresult/e026d97606ea46ef","status":"passed","time":{"start":1722730913802,"stop":1722730917475,"duration":3673}},{"uid":"e2b5423018ac0f62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2004//#testresult/e2b5423018ac0f62","status":"passed","time":{"start":1722644567178,"stop":1722644573174,"duration":5996}},{"uid":"b6ece84084f17e7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2003//#testresult/b6ece84084f17e7a","status":"passed","time":{"start":1722558058907,"stop":1722558076723,"duration":17816}},{"uid":"6ec112c48beb77a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2002//#testresult/6ec112c48beb77a3","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1722471484326,"stop":1722471551619,"duration":67293}},{"uid":"2ef8260e1cc99eab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1998//#testresult/2ef8260e1cc99eab","status":"passed","time":{"start":1722385203297,"stop":1722385207229,"duration":3932}},{"uid":"e38be3f53feb49ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1997//#testresult/e38be3f53feb49ed","status":"passed","time":{"start":1722298663342,"stop":1722298671613,"duration":8271}},{"uid":"3c58a13aded098af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1996//#testresult/3c58a13aded098af","status":"passed","time":{"start":1722212448034,"stop":1722212454761,"duration":6727}},{"uid":"41391c2e80617983","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1995//#testresult/41391c2e80617983","status":"passed","time":{"start":1722125876903,"stop":1722125880192,"duration":3289}}]},"tags":[]},"source":"fd56533ca55279fa.json","parameterValues":["NottinghamCityCouncil"]}