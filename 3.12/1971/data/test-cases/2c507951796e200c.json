{"uid":"2c507951796e200c","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1720313348714,"stop":1720313427674,"duration":78960},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"fixturefunc = <function scrape_step at 0x7f566aeb9800>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f567e68f290>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:61: in parse_data\n    dropdown_search = wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8353e220902b675976ee582d454b9ee6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f5669f8ec00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"fixturefunc = <function scrape_step at 0x7f566aeb9800>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f567e68f290>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:61: in parse_data\n    dropdown_search = wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8353e220902b675976ee582d454b9ee6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f5669f8ec00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Given the council","time":{"start":1720313348715,"stop":1720313348715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720313348715,"stop":1720313427674,"duration":78959},"status":"failed","statusMessage":"Message: \n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: \n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"483657aa51b41e64","name":"stdout","source":"483657aa51b41e64.txt","type":"text/plain","size":70}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az658-851"},{"name":"thread","value":"2743-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":41},"items":[{"uid":"b470ca68297667f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1970//#testresult/b470ca68297667f0","status":"passed","time":{"start":1720226785933,"stop":1720226829338,"duration":43405}},{"uid":"7fb7717b925b8db7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1969//#testresult/7fb7717b925b8db7","status":"passed","time":{"start":1720140165131,"stop":1720140193109,"duration":27978}},{"uid":"e792f218735e40df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1968//#testresult/e792f218735e40df","status":"passed","time":{"start":1720053779773,"stop":1720053808842,"duration":29069}},{"uid":"1a974ec4376bb1d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1967//#testresult/1a974ec4376bb1d9","status":"passed","time":{"start":1719967395854,"stop":1719967424323,"duration":28469}},{"uid":"60b58e2d95f707ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1966//#testresult/60b58e2d95f707ac","status":"passed","time":{"start":1719880991230,"stop":1719881021362,"duration":30132}},{"uid":"98bcf67c7bc7b813","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1965//#testresult/98bcf67c7bc7b813","status":"passed","time":{"start":1719795051729,"stop":1719795073967,"duration":22238}},{"uid":"e3c8d4912632be4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1964//#testresult/e3c8d4912632be4b","status":"passed","time":{"start":1719708583796,"stop":1719708621065,"duration":37269}},{"uid":"d90050460adc0cc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1962//#testresult/d90050460adc0cc6","status":"passed","time":{"start":1719621924332,"stop":1719621964961,"duration":40629}},{"uid":"7212703ad2051ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1958//#testresult/7212703ad2051ab","status":"passed","time":{"start":1719535376610,"stop":1719535414729,"duration":38119}},{"uid":"488fb7c0a7fbb346","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1954//#testresult/488fb7c0a7fbb346","status":"passed","time":{"start":1719362776198,"stop":1719362807799,"duration":31601}},{"uid":"903d00eb26d63739","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1953//#testresult/903d00eb26d63739","status":"passed","time":{"start":1719276289427,"stop":1719276317988,"duration":28561}},{"uid":"bcd6cfd4f347a872","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1952//#testresult/bcd6cfd4f347a872","status":"passed","time":{"start":1719190089812,"stop":1719190122175,"duration":32363}},{"uid":"9ecf129e4bf31d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1951//#testresult/9ecf129e4bf31d0","status":"passed","time":{"start":1719103708873,"stop":1719103741719,"duration":32846}},{"uid":"cac73b0a524fae31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1950//#testresult/cac73b0a524fae31","status":"passed","time":{"start":1719017191901,"stop":1719017233584,"duration":41683}},{"uid":"e992c7e84bd6b759","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1949//#testresult/e992c7e84bd6b759","status":"passed","time":{"start":1718930784652,"stop":1718930817551,"duration":32899}},{"uid":"3a8d8998fd2c53c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1948//#testresult/3a8d8998fd2c53c9","status":"passed","time":{"start":1718844339525,"stop":1718844376680,"duration":37155}},{"uid":"c40e7901bf9a8898","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1947//#testresult/c40e7901bf9a8898","status":"passed","time":{"start":1718757987855,"stop":1718758008015,"duration":20160}},{"uid":"6ba65f19413317ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1946//#testresult/6ba65f19413317ef","status":"passed","time":{"start":1718671519161,"stop":1718671577510,"duration":58349}},{"uid":"4db7d800809953e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1945//#testresult/4db7d800809953e9","status":"passed","time":{"start":1718585071472,"stop":1718585222676,"duration":151204}},{"uid":"b445b7be0dd566f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/1944//#testresult/b445b7be0dd566f9","status":"passed","time":{"start":1718498781558,"stop":1718498809846,"duration":28288}}]},"tags":[]},"source":"2c507951796e200c.json","parameterValues":["WalthamForest"]}