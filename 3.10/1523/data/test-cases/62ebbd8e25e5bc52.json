{"uid":"62ebbd8e25e5bc52","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1706142447670,"stop":1706142449930,"duration":2260},"status":"failed","statusMessage":"ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.","statusTrace":"fixturefunc = <function scrape_step at 0x7f73b6f6f7f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f73b6f63070>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f73b6b0fcd0>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f73b6a589d0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '9d860509d43762ba5ee22e618d643d376e2f9cf2', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n                    .attrs[\"data-current_value\"]\n                    .strip()\n                )\n                dict_data = {\n                    \"type\": collection_type,\n                    \"collectionDate\": datetime.strptime(\n                        collection_date, \"%d/%m/%Y %H:%M\"\n                    ).strftime(date_format),\n                }\n                data[\"bins\"].append(dict_data)\n    \n            if len(data[\"bins\"]) == 0:\n>               raise ValueError(\n                    \"Code 5: No bin data found. Please ensure the council website is showing data first,\"\n                    \" then open an issue on GitHub.\"\n                )\nE               ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:286: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.","statusTrace":"fixturefunc = <function scrape_step at 0x7f73b6f6f7f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f73b6f63070>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f73b6b0fcd0>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f73b6a589d0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '9d860509d43762ba5ee22e618d643d376e2f9cf2', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n                    .attrs[\"data-current_value\"]\n                    .strip()\n                )\n                dict_data = {\n                    \"type\": collection_type,\n                    \"collectionDate\": datetime.strptime(\n                        collection_date, \"%d/%m/%Y %H:%M\"\n                    ).strftime(date_format),\n                }\n                data[\"bins\"].append(dict_data)\n    \n            if len(data[\"bins\"]) == 0:\n>               raise ValueError(\n                    \"Code 5: No bin data found. Please ensure the council website is showing data first,\"\n                    \" then open an issue on GitHub.\"\n                )\nE               ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:286: ValueError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1706142447670,"stop":1706142447670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1706142447670,"stop":1706142449929,"duration":2259},"status":"failed","statusMessage":"Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.","statusTrace":"ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1144-637"},{"name":"thread","value":"2710-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":105,"broken":0,"skipped":0,"passed":63,"unknown":0,"total":168},"items":[{"uid":"1977ab52bd33fae0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1522//#testresult/1977ab52bd33fae0","status":"passed","time":{"start":1706056052811,"stop":1706056057076,"duration":4265}},{"uid":"6c6e5f2b557d96da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1521//#testresult/6c6e5f2b557d96da","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705969665528,"stop":1705969667430,"duration":1902}},{"uid":"66f75d5fbfb7335b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1520//#testresult/66f75d5fbfb7335b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705883326342,"stop":1705883328236,"duration":1894}},{"uid":"c6c548e38f86d513","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1519//#testresult/c6c548e38f86d513","status":"passed","time":{"start":1705796983344,"stop":1705796988701,"duration":5357}},{"uid":"2535e10e1ea2c76","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1515//#testresult/2535e10e1ea2c76","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705710384897,"stop":1705710386342,"duration":1445}},{"uid":"6f6785423198da17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1511//#testresult/6f6785423198da17","status":"passed","time":{"start":1705624037120,"stop":1705624042628,"duration":5508}},{"uid":"7d31f7145769fe35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1505//#testresult/7d31f7145769fe35","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705537614288,"stop":1705537615489,"duration":1201}},{"uid":"876991f24251e138","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1500//#testresult/876991f24251e138","status":"passed","time":{"start":1705451220550,"stop":1705451225292,"duration":4742}},{"uid":"53bdf293a99621a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1499//#testresult/53bdf293a99621a","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705364824539,"stop":1705364825781,"duration":1242}},{"uid":"cb6f481355255619","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1492//#testresult/cb6f481355255619","status":"passed","time":{"start":1705295586106,"stop":1705295591333,"duration":5227}},{"uid":"5f4126eff5757bd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1491//#testresult/5f4126eff5757bd6","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705295155028,"stop":1705295156472,"duration":1444}},{"uid":"8c23decc2472c5b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1490//#testresult/8c23decc2472c5b4","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705278530345,"stop":1705278531711,"duration":1366}},{"uid":"db989fb595d27719","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1485//#testresult/db989fb595d27719","status":"passed","time":{"start":1705192188340,"stop":1705192192917,"duration":4577}},{"uid":"f3d451e4a3503169","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1484//#testresult/f3d451e4a3503169","status":"passed","time":{"start":1705105618368,"stop":1705105624467,"duration":6099}},{"uid":"b0c4127741ce8bc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1482//#testresult/b0c4127741ce8bc5","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705019233684,"stop":1705019235141,"duration":1457}},{"uid":"ecdaae1e4d0cdd73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1478//#testresult/ecdaae1e4d0cdd73","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1704932823359,"stop":1704932824618,"duration":1259}},{"uid":"b128fc794dbe712b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1472//#testresult/b128fc794dbe712b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1704846473447,"stop":1704846475131,"duration":1684}},{"uid":"651b14791aa414ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1456//#testresult/651b14791aa414ee","status":"passed","time":{"start":1704760141720,"stop":1704760154344,"duration":12624}},{"uid":"f670012751ab48d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1452//#testresult/f670012751ab48d5","status":"passed","time":{"start":1704711472037,"stop":1704711477521,"duration":5484}},{"uid":"5f96ec84230dab3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1450//#testresult/5f96ec84230dab3f","status":"passed","time":{"start":1704710681584,"stop":1704710686452,"duration":4868}}]},"tags":[]},"source":"62ebbd8e25e5bc52.json","parameterValues":["CroydonCouncil","None","None"]}