{"uid":"904e8c45bb04b984","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1703812233129,"stop":1703812238296,"duration":5167},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fd7e8788310>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd7d6de17b0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fd7d6de17b0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fd7e8788310>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd7d6de17b0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fd7d6de17b0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1703812233129,"stop":1703812233129,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1703812233130,"stop":1703812238294,"duration":5164},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703812238294,"stop":1703812238294,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703812238295,"stop":1703812238296,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-302"},{"name":"thread","value":"2695-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":95,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":95},"items":[{"uid":"e25334a65bab8f77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/e25334a65bab8f77","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756380260,"stop":1703756382099,"duration":1839}},{"uid":"46cf83bf2d56b76b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/46cf83bf2d56b76b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726410645,"stop":1703726412391,"duration":1746}},{"uid":"a357375edaaceb81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/a357375edaaceb81","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717648806,"stop":1703717651013,"duration":2207}},{"uid":"6ae244d307af6400","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/6ae244d307af6400","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717472037,"stop":1703717475330,"duration":3293}},{"uid":"967bee8cf9bedea7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/967bee8cf9bedea7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639889879,"stop":1703639891369,"duration":1490}},{"uid":"857e1c31b80bd53a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/857e1c31b80bd53a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553515857,"stop":1703553520426,"duration":4569}},{"uid":"560d929104802a82","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/560d929104802a82","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541358818,"stop":1703541360862,"duration":2044}},{"uid":"e487d9c46a729ffd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/e487d9c46a729ffd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467457260,"stop":1703467459489,"duration":2229}},{"uid":"41e32799eecc4617","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/41e32799eecc4617","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416562548,"stop":1703416567661,"duration":5113}},{"uid":"227cd3480c0c8fb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/227cd3480c0c8fb4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416515936,"stop":1703416519186,"duration":3250}},{"uid":"3b2d8290b7ec14b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/3b2d8290b7ec14b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703381225329,"stop":1703381236262,"duration":10933}},{"uid":"fff176cf0bc9da1b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1287//#testresult/fff176cf0bc9da1b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294240275,"stop":1703294242305,"duration":2030}},{"uid":"6a4671945d0a7e3b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1282//#testresult/6a4671945d0a7e3b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207985005,"stop":1703207991396,"duration":6391}},{"uid":"7dd9ec18f704b00d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1281//#testresult/7dd9ec18f704b00d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121646330,"stop":1703121647923,"duration":1593}},{"uid":"c4569e8b8684d06f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1280//#testresult/c4569e8b8684d06f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034464103,"stop":1703034467125,"duration":3022}},{"uid":"92859c759bc76b9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/92859c759bc76b9a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703025052486,"stop":1703025055754,"duration":3268}},{"uid":"64a213e79a4530da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/64a213e79a4530da","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948871355,"stop":1702948880194,"duration":8839}},{"uid":"2b6f01c647ee7bd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/2b6f01c647ee7bd6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862605044,"stop":1702862607328,"duration":2284}},{"uid":"df56e0a100103f9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/df56e0a100103f9f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702860119465,"stop":1702860121387,"duration":1922}},{"uid":"b11eec3bfe0d9d1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/b11eec3bfe0d9d1d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843786904,"stop":1702843791086,"duration":4182}}]},"tags":[]},"source":"904e8c45bb04b984.json","parameterValues":["WiltshireCouncil","None","None"]}