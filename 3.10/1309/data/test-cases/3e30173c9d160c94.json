{"uid":"3e30173c9d160c94","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1703812037156,"stop":1703812038574,"duration":1418},"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc6978f4430>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc689f80a60>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc6978f4430>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc689f80a60>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1703812037156,"stop":1703812037156,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1703812037157,"stop":1703812038574,"duration":1417},"status":"failed","statusMessage":"time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-302"},{"name":"thread","value":"2698-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":82,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":95},"items":[{"uid":"71d6376d56137947","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/71d6376d56137947","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703756191487,"stop":1703756193461,"duration":1974}},{"uid":"7e640bd9c33804be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/7e640bd9c33804be","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726156432,"stop":1703726157031,"duration":599}},{"uid":"bfb7afb4750c5a81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/bfb7afb4750c5a81","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717640202,"stop":1703717641049,"duration":847}},{"uid":"d88c3ae261f1439d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/d88c3ae261f1439d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717290371,"stop":1703717290939,"duration":568}},{"uid":"652c56c1cc3e6925","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/652c56c1cc3e6925","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639745060,"stop":1703639745801,"duration":741}},{"uid":"f8dc653af3d1f7f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/f8dc653af3d1f7f8","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703553334139,"stop":1703553335734,"duration":1595}},{"uid":"6d3b9d20c4e36806","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/6d3b9d20c4e36806","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541433629,"stop":1703541434439,"duration":810}},{"uid":"c7507b103e28ce78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/c7507b103e28ce78","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467422745,"stop":1703467423480,"duration":735}},{"uid":"6f8bcf186e575208","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/6f8bcf186e575208","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416411949,"stop":1703416412899,"duration":950}},{"uid":"f5e830a22c257339","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/f5e830a22c257339","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703416370908,"stop":1703416372555,"duration":1647}},{"uid":"74fde70dfa7e0918","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/74fde70dfa7e0918","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703380900694,"stop":1703380902955,"duration":2261}},{"uid":"9f63851490d9fd39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1287//#testresult/9f63851490d9fd39","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703294053330,"stop":1703294054895,"duration":1565}},{"uid":"cc921516b25bdc52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1282//#testresult/cc921516b25bdc52","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703207790860,"stop":1703207792665,"duration":1805}},{"uid":"fed7525851e68223","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1281//#testresult/fed7525851e68223","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121428363,"stop":1703121429120,"duration":757}},{"uid":"a3c8225b4f3836fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1280//#testresult/a3c8225b4f3836fc","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 20 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703034252939,"stop":1703034255131,"duration":2192}},{"uid":"328ef0c1de677e72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/328ef0c1de677e72","status":"failed","statusDetails":"ValueError: time data 'Friday, 29 December\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703024896211,"stop":1703024897765,"duration":1554}},{"uid":"d6aa2f7e4d3fcf4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/d6aa2f7e4d3fcf4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948682969,"stop":1702948683809,"duration":840}},{"uid":"29c242f96f0a8f2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/29c242f96f0a8f2c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862354742,"stop":1702862355304,"duration":562}},{"uid":"e61f115e2f47e787","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/e61f115e2f47e787","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702859991316,"stop":1702859992051,"duration":735}},{"uid":"fd32effef9d8b11","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/fd32effef9d8b11","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843540378,"stop":1702843541196,"duration":818}}]},"tags":[]},"source":"3e30173c9d160c94.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}