{"uid":"77bd2e02b0184a8d","name":"Validate Council Output [HighPeakCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f014a970b405df22a91c3a1e6926ba51","time":{"start":1698064892110,"stop":1698064900042,"duration":7932},"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f71101db1c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7104386d10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f7104386d10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f71101db1c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7104386d10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f7104386d10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","steps":[{"name":"Given the council: HighPeakCouncil","time":{"start":1698064892110,"stop":1698064892111,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from HighPeakCouncil","time":{"start":1698064892111,"stop":1698064900038,"duration":7927},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1698064900039,"stop":1698064900039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1698064900039,"stop":1698064900042,"duration":3},"status":"failed","statusMessage":"assert False is True","statusTrace":"AssertionError: assert False is True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az162-173"},{"name":"thread","value":"2232-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HighPeakCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":42,"broken":0,"skipped":0,"passed":106,"unknown":0,"total":148},"items":[{"uid":"e31c7affbc183658","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/e31c7affbc183658","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698023751012,"stop":1698023759378,"duration":8366}},{"uid":"6d23fbab683a08d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/6d23fbab683a08d4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697937629949,"stop":1697937638980,"duration":9031}},{"uid":"b76116c6f53fc95b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/b76116c6f53fc95b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697850796679,"stop":1697850804707,"duration":8028}},{"uid":"2a3051e33c4c11e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1037//#testresult/2a3051e33c4c11e","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697790376528,"stop":1697790383516,"duration":6988}},{"uid":"5e1d957799cc1a0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1036//#testresult/5e1d957799cc1a0a","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697790396681,"stop":1697790404850,"duration":8169}},{"uid":"13f357cf6739d817","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1034//#testresult/13f357cf6739d817","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697764516154,"stop":1697764524979,"duration":8825}},{"uid":"bb56439422fa343b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/bb56439422fa343b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706544223,"stop":1697706555182,"duration":10959}},{"uid":"74c39a6a0cde653e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/74c39a6a0cde653e","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706504849,"stop":1697706513296,"duration":8447}},{"uid":"41065285249ad46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/41065285249ad46","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702047934,"stop":1697702047935,"duration":1}},{"uid":"d9389bbf16ee30f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/d9389bbf16ee30f4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697696169611,"stop":1697696179905,"duration":10294}},{"uid":"ab10fe080d71a2c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/ab10fe080d71a2c5","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697678092925,"stop":1697678102611,"duration":9686}},{"uid":"5fa1214d30639eb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/5fa1214d30639eb7","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697666585877,"stop":1697666594925,"duration":9048}},{"uid":"c0dca0eabe7e1222","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/c0dca0eabe7e1222","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697666534078,"stop":1697666540551,"duration":6473}},{"uid":"a063d1271376b4b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/a063d1271376b4b0","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697656844023,"stop":1697656853350,"duration":9327}},{"uid":"9957ce3471e884e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/9957ce3471e884e3","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697656784402,"stop":1697656792623,"duration":8221}},{"uid":"27b188ff7603b9e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/27b188ff7603b9e8","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697650013474,"stop":1697650022575,"duration":9101}},{"uid":"a707f97e0231159c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/a707f97e0231159c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697618269897,"stop":1697618281602,"duration":11705}},{"uid":"a08d7ebafd3f92d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/a08d7ebafd3f92d1","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697618207731,"stop":1697618216953,"duration":9222}},{"uid":"98534d626126b097","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1010//#testresult/98534d626126b097","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697591740269,"stop":1697591748737,"duration":8468}},{"uid":"ef0ef121fa387089","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1009//#testresult/ef0ef121fa387089","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697542608690,"stop":1697542616548,"duration":7858}}]},"tags":[]},"source":"77bd2e02b0184a8d.json","parameterValues":["HighPeakCouncil"]}