{"uid":"1d6770c3303d6989","name":"Validate Council Output [GatesheadCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"06e54311f2a0be18545214e444671747","time":{"start":1701279310081,"stop":1701279615895,"duration":305814},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x564222ef25e3 <unknown>\n#1 0x564222bb50b7 <unknown>\n#2 0x564222b9b23a <unknown>\n#3 0x564222b9b0a9 <unknown>\n#4 0x564222b99481 <unknown>\n#5 0x564222b99e39 <unknown>\n#6 0x564222baa8ac <unknown>\n#7 0x564222bc24c1 <unknown>\n#8 0x564222bc813b <unknown>\n#9 0x564222b9a5ce <unknown>\n#10 0x564222bc22c4 <unknown>\n#11 0x564222c45d42 <unknown>\n#12 0x564222c29cc3 <unknown>\n#13 0x564222bf50e4 <unknown>\n#14 0x564222bf60ae <unknown>\n#15 0x564222eb8ce1 <unknown>\n#16 0x564222ebcb7e <unknown>\n#17 0x564222ea64b5 <unknown>\n#18 0x564222ebd7d6 <unknown>\n#19 0x564222e89dbf <unknown>\n#20 0x564222ee0748 <unknown>\n#21 0x564222ee0917 <unknown>\n#22 0x564222ef1773 <unknown>\n#23 0x7f035ae94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fc0b08cb0a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc09cd906a0>, 'council': 'GatesheadCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:49: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc09db9a3e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x564222ee0917 \\\\u003Cunknown>\\\\n#22 0x564222ef1773 \\\\u003Cunknown>\\\\n#23 0x7f035ae94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x564222ef25e3 <unknown>\nE       #1 0x564222bb50b7 <unknown>\nE       #2 0x564222b9b23a <unknown>\nE       #3 0x564222b9b0a9 <unknown>\nE       #4 0x564222b99481 <unknown>\nE       #5 0x564222b99e39 <unknown>\nE       #6 0x564222baa8ac <unknown>\nE       #7 0x564222bc24c1 <unknown>\nE       #8 0x564222bc813b <unknown>\nE       #9 0x564222b9a5ce <unknown>\nE       #10 0x564222bc22c4 <unknown>\nE       #11 0x564222c45d42 <unknown>\nE       #12 0x564222c29cc3 <unknown>\nE       #13 0x564222bf50e4 <unknown>\nE       #14 0x564222bf60ae <unknown>\nE       #15 0x564222eb8ce1 <unknown>\nE       #16 0x564222ebcb7e <unknown>\nE       #17 0x564222ea64b5 <unknown>\nE       #18 0x564222ebd7d6 <unknown>\nE       #19 0x564222e89dbf <unknown>\nE       #20 0x564222ee0748 <unknown>\nE       #21 0x564222ee0917 <unknown>\nE       #22 0x564222ef1773 <unknown>\nE       #23 0x7f035ae94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x564222ef25e3 <unknown>\n#1 0x564222bb50b7 <unknown>\n#2 0x564222b9b23a <unknown>\n#3 0x564222b9b0a9 <unknown>\n#4 0x564222b99481 <unknown>\n#5 0x564222b99e39 <unknown>\n#6 0x564222baa8ac <unknown>\n#7 0x564222bc24c1 <unknown>\n#8 0x564222bc813b <unknown>\n#9 0x564222b9a5ce <unknown>\n#10 0x564222bc22c4 <unknown>\n#11 0x564222c45d42 <unknown>\n#12 0x564222c29cc3 <unknown>\n#13 0x564222bf50e4 <unknown>\n#14 0x564222bf60ae <unknown>\n#15 0x564222eb8ce1 <unknown>\n#16 0x564222ebcb7e <unknown>\n#17 0x564222ea64b5 <unknown>\n#18 0x564222ebd7d6 <unknown>\n#19 0x564222e89dbf <unknown>\n#20 0x564222ee0748 <unknown>\n#21 0x564222ee0917 <unknown>\n#22 0x564222ef1773 <unknown>\n#23 0x7f035ae94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fc0b08cb0a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc09cd906a0>, 'council': 'GatesheadCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:49: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc09db9a3e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x564222ee0917 \\\\u003Cunknown>\\\\n#22 0x564222ef1773 \\\\u003Cunknown>\\\\n#23 0x7f035ae94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x564222ef25e3 <unknown>\nE       #1 0x564222bb50b7 <unknown>\nE       #2 0x564222b9b23a <unknown>\nE       #3 0x564222b9b0a9 <unknown>\nE       #4 0x564222b99481 <unknown>\nE       #5 0x564222b99e39 <unknown>\nE       #6 0x564222baa8ac <unknown>\nE       #7 0x564222bc24c1 <unknown>\nE       #8 0x564222bc813b <unknown>\nE       #9 0x564222b9a5ce <unknown>\nE       #10 0x564222bc22c4 <unknown>\nE       #11 0x564222c45d42 <unknown>\nE       #12 0x564222c29cc3 <unknown>\nE       #13 0x564222bf50e4 <unknown>\nE       #14 0x564222bf60ae <unknown>\nE       #15 0x564222eb8ce1 <unknown>\nE       #16 0x564222ebcb7e <unknown>\nE       #17 0x564222ea64b5 <unknown>\nE       #18 0x564222ebd7d6 <unknown>\nE       #19 0x564222e89dbf <unknown>\nE       #20 0x564222ee0748 <unknown>\nE       #21 0x564222ee0917 <unknown>\nE       #22 0x564222ef1773 <unknown>\nE       #23 0x7f035ae94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Given the council: GatesheadCouncil","time":{"start":1701279310081,"stop":1701279310082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GatesheadCouncil using local and the http://selenium:4444 is set","time":{"start":1701279310082,"stop":1701279615895,"duration":305813},"status":"failed","statusMessage":"Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x564222ef25e3 <unknown>\n#1 0x564222bb50b7 <unknown>\n#2 0x564222b9b23a <unknown>\n#3 0x564222b9b0a9 <unknown>\n#4 0x564222b99481 <unknown>\n#5 0x564222b99e39 <unknown>\n#6 0x564222baa8ac <unknown>\n#7 0x564222bc24c1 <unknown>\n#8 0x564222bc813b <unknown>\n#9 0x564222b9a5ce <unknown>\n#10 0x564222bc22c4 <unknown>\n#11 0x564222c45d42 <unknown>\n#12 0x564222c29cc3 <unknown>\n#13 0x564222bf50e4 <unknown>\n#14 0x564222bf60ae <unknown>\n#15 0x564222eb8ce1 <unknown>\n#16 0x564222ebcb7e <unknown>\n#17 0x564222ea64b5 <unknown>\n#18 0x564222ebd7d6 <unknown>\n#19 0x564222e89dbf <unknown>\n#20 0x564222ee0748 <unknown>\n#21 0x564222ee0917 <unknown>\n#22 0x564222ef1773 <unknown>\n#23 0x7f035ae94ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x564222ef25e3 <unknown>\n#1 0x564222bb50b7 <unknown>\n#2 0x564222b9b23a <unknown>\n#3 0x564222b9b0a9 <unknown>\n#4 0x564222b99481 <unknown>\n#5 0x564222b99e39 <unknown>\n#6 0x564222baa8ac <unknown>\n#7 0x564222bc24c1 <unknown>\n#8 0x564222bc813b <unknown>\n#9 0x564222b9a5ce <unknown>\n#10 0x564222bc22c4 <unknown>\n#11 0x564222c45d42 <unknown>\n#12 0x564222c29cc3 <unknown>\n#13 0x564222bf50e4 <unknown>\n#14 0x564222bf60ae <unknown>\n#15 0x564222eb8ce1 <unknown>\n#16 0x564222ebcb7e <unknown>\n#17 0x564222ea64b5 <unknown>\n#18 0x564222ebd7d6 <unknown>\n#19 0x564222e89dbf <unknown>\n#20 0x564222ee0748 <unknown>\n#21 0x564222ee0917 <unknown>\n#22 0x564222ef1773 <unknown>\n#23 0x7f035ae94ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1247-986"},{"name":"thread","value":"2721-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GatesheadCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":32},"items":[{"uid":"ca88a4638dbd3b28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/ca88a4638dbd3b28","status":"passed","time":{"start":1701279340732,"stop":1701279349353,"duration":8621}},{"uid":"4212508b7f489ae6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/4212508b7f489ae6","status":"passed","time":{"start":1701220748025,"stop":1701220756286,"duration":8261}},{"uid":"d5907d025e946777","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/d5907d025e946777","status":"passed","time":{"start":1701134362182,"stop":1701134374326,"duration":12144}},{"uid":"cb59e6fd18cdc3cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/cb59e6fd18cdc3cf","status":"passed","time":{"start":1701047898715,"stop":1701047907771,"duration":9056}},{"uid":"a25a6049c399efdc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/a25a6049c399efdc","status":"passed","time":{"start":1701036133916,"stop":1701036141849,"duration":7933}},{"uid":"cc03068fd7a2d3bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/cc03068fd7a2d3bd","status":"passed","time":{"start":1701036132443,"stop":1701036140491,"duration":8048}},{"uid":"19166881a0d6a48b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/19166881a0d6a48b","status":"passed","time":{"start":1700961905869,"stop":1700961914876,"duration":9007}},{"uid":"15e0123f09bb5d47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/15e0123f09bb5d47","status":"passed","time":{"start":1700874892038,"stop":1700874901227,"duration":9189}},{"uid":"9e99e6755587dc43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/9e99e6755587dc43","status":"passed","time":{"start":1700788567241,"stop":1700788577862,"duration":10621}},{"uid":"b270164b16e3f07d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/b270164b16e3f07d","status":"passed","time":{"start":1700702285435,"stop":1700702294668,"duration":9233}},{"uid":"ef41a085395b9185","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/ef41a085395b9185","status":"passed","time":{"start":1700646355157,"stop":1700646363039,"duration":7882}},{"uid":"5fab6e71907133b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/5fab6e71907133b7","status":"passed","time":{"start":1700616034411,"stop":1700616046117,"duration":11706}},{"uid":"f6b5e5b92df4bca3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/f6b5e5b92df4bca3","status":"passed","time":{"start":1700529859719,"stop":1700529871038,"duration":11319}},{"uid":"5162f8b77a806262","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/5162f8b77a806262","status":"passed","time":{"start":1700443163479,"stop":1700443175222,"duration":11743}},{"uid":"785509d6f069ddb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/785509d6f069ddb6","status":"passed","time":{"start":1700356980252,"stop":1700356987637,"duration":7385}},{"uid":"3864be7407d18e8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/3864be7407d18e8c","status":"passed","time":{"start":1700270278567,"stop":1700270288568,"duration":10001}},{"uid":"30491f9a3262d9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/30491f9a3262d9a","status":"passed","time":{"start":1700183911327,"stop":1700183919131,"duration":7804}},{"uid":"e24824d1c654636d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/e24824d1c654636d","status":"passed","time":{"start":1700097528089,"stop":1700097538464,"duration":10375}},{"uid":"9edb08a38bd86061","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/9edb08a38bd86061","status":"passed","time":{"start":1700011117407,"stop":1700011125386,"duration":7979}},{"uid":"e9e3d2b98145ed16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/e9e3d2b98145ed16","status":"passed","time":{"start":1699924682917,"stop":1699924692059,"duration":9142}}]},"tags":[]},"source":"1d6770c3303d6989.json","parameterValues":["GatesheadCouncil","local","http://selenium:4444"]}