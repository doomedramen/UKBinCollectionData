{"uid":"285b53f3419a128a","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1701279445319,"stop":1701279447171,"duration":1852},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f29f89a2950>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f29e57a0dc0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f29e57a0dc0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f29f89a2950>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f29e57a0dc0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f29e57a0dc0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1701279445319,"stop":1701279445319,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1701279445320,"stop":1701279447168,"duration":1848},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701279447169,"stop":1701279447169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701279447169,"stop":1701279447171,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1247-986"},{"name":"thread","value":"2715-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":32},"items":[{"uid":"d40a97acbfc14e0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/d40a97acbfc14e0b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279405705,"stop":1701279407493,"duration":1788}},{"uid":"9fb9f0afa38ed78e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/9fb9f0afa38ed78e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220832104,"stop":1701220834746,"duration":2642}},{"uid":"608b0b4c06dd2f16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/608b0b4c06dd2f16","status":"passed","time":{"start":1701134422340,"stop":1701134424217,"duration":1877}},{"uid":"816ddd59c20c1316","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/816ddd59c20c1316","status":"passed","time":{"start":1701047976209,"stop":1701047978677,"duration":2468}},{"uid":"f3751ab16f92e959","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/f3751ab16f92e959","status":"passed","time":{"start":1701036205608,"stop":1701036207092,"duration":1484}},{"uid":"77db63f69c5a6224","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/77db63f69c5a6224","status":"passed","time":{"start":1701036213357,"stop":1701036215066,"duration":1709}},{"uid":"c49f349981f2a7bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/c49f349981f2a7bf","status":"passed","time":{"start":1700961797433,"stop":1700961799894,"duration":2461}},{"uid":"4fd6e6bda793fff9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/4fd6e6bda793fff9","status":"passed","time":{"start":1700874994813,"stop":1700874999160,"duration":4347}},{"uid":"9050dca9abe8a079","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/9050dca9abe8a079","status":"passed","time":{"start":1700788634210,"stop":1700788636253,"duration":2043}},{"uid":"c35952d3b8e066a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/c35952d3b8e066a7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702339137,"stop":1700702343192,"duration":4055}},{"uid":"7baa2c6b20f284ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/7baa2c6b20f284ea","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646406507,"stop":1700646409059,"duration":2552}},{"uid":"f90d786adc825a73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/f90d786adc825a73","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616104192,"stop":1700616106104,"duration":1912}},{"uid":"1a8018107c331d12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/1a8018107c331d12","status":"passed","time":{"start":1700529758711,"stop":1700529760396,"duration":1685}},{"uid":"10e37d04714507df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/10e37d04714507df","status":"passed","time":{"start":1700443205007,"stop":1700443206716,"duration":1709}},{"uid":"7f648923af48d949","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/7f648923af48d949","status":"passed","time":{"start":1700357038213,"stop":1700357039999,"duration":1786}},{"uid":"7ea44b6461ed19fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/7ea44b6461ed19fb","status":"passed","time":{"start":1700270356241,"stop":1700270359265,"duration":3024}},{"uid":"a87bf087a422c651","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/a87bf087a422c651","status":"passed","time":{"start":1700183974078,"stop":1700183978718,"duration":4640}},{"uid":"70d32f2bc3b81d73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/70d32f2bc3b81d73","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097591718,"stop":1700097595323,"duration":3605}},{"uid":"df3134e05acd1eaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/df3134e05acd1eaf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011336060,"stop":1700011337534,"duration":1474}},{"uid":"b2cb31b884473769","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/b2cb31b884473769","status":"passed","time":{"start":1699924929542,"stop":1699924931116,"duration":1574}}]},"tags":[]},"source":"285b53f3419a128a.json","parameterValues":["SouthNorfolkCouncil","None","None"]}