{"uid":"5c4ee9f835e6641e","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1705624034462,"stop":1705624036488,"duration":2026},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7ff4818cae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff481790100>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7ff481790dc0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7ff4818cae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff481790100>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7ff481790dc0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1705624034462,"stop":1705624034463,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1705624034464,"stop":1705624036488,"duration":2024},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-526"},{"name":"thread","value":"2804-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":156,"unknown":0,"total":162},"items":[{"uid":"52c5f38be8ef0449","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1505//#testresult/52c5f38be8ef0449","status":"passed","time":{"start":1705537607055,"stop":1705537610980,"duration":3925}},{"uid":"7edac958cb32bbe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1500//#testresult/7edac958cb32bbe6","status":"failed","statusDetails":"ValueError: No collection data found for provided UPRN.","time":{"start":1705451217674,"stop":1705451219302,"duration":1628}},{"uid":"24934e548918af8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1499//#testresult/24934e548918af8e","status":"passed","time":{"start":1705364822249,"stop":1705364823363,"duration":1114}},{"uid":"e0cf693b7b2e8ca9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1492//#testresult/e0cf693b7b2e8ca9","status":"passed","time":{"start":1705295553045,"stop":1705295554033,"duration":988}},{"uid":"5d5a567ed3368c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1491//#testresult/5d5a567ed3368c4","status":"passed","time":{"start":1705295122417,"stop":1705295123286,"duration":869}},{"uid":"39f843e7a9a063d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1490//#testresult/39f843e7a9a063d1","status":"passed","time":{"start":1705278527700,"stop":1705278528642,"duration":942}},{"uid":"78aada76a40fc7dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1485//#testresult/78aada76a40fc7dd","status":"passed","time":{"start":1705192184969,"stop":1705192186940,"duration":1971}},{"uid":"e0ab85f8ac902ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1484//#testresult/e0ab85f8ac902ba","status":"passed","time":{"start":1705105614571,"stop":1705105617678,"duration":3107}},{"uid":"22f2c6159922fce7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1482//#testresult/22f2c6159922fce7","status":"passed","time":{"start":1705019226237,"stop":1705019227304,"duration":1067}},{"uid":"c7c345f2497576ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1478//#testresult/c7c345f2497576ec","status":"passed","time":{"start":1704932818230,"stop":1704932819225,"duration":995}},{"uid":"103be28b2cff4803","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1472//#testresult/103be28b2cff4803","status":"passed","time":{"start":1704846447387,"stop":1704846448525,"duration":1138}},{"uid":"d03dd9942832c75c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1456//#testresult/d03dd9942832c75c","status":"passed","time":{"start":1704760038699,"stop":1704760040171,"duration":1472}},{"uid":"79072c3385fa70f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1452//#testresult/79072c3385fa70f4","status":"passed","time":{"start":1704711457408,"stop":1704711459508,"duration":2100}},{"uid":"b22f2abe4716f8b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1450//#testresult/b22f2abe4716f8b1","status":"passed","time":{"start":1704710665993,"stop":1704710666955,"duration":962}},{"uid":"f9081f15f8912a2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1448//#testresult/f9081f15f8912a2c","status":"passed","time":{"start":1704710043558,"stop":1704710045268,"duration":1710}},{"uid":"5ff52abdb586878e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1446//#testresult/5ff52abdb586878e","status":"passed","time":{"start":1704709518794,"stop":1704709520623,"duration":1829}},{"uid":"f2c4ba3557f643e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1443//#testresult/f2c4ba3557f643e8","status":"passed","time":{"start":1704704030213,"stop":1704704031920,"duration":1707}},{"uid":"819c5eeb507c799e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1441//#testresult/819c5eeb507c799e","status":"passed","time":{"start":1704673678257,"stop":1704673679352,"duration":1095}},{"uid":"1932eb305b4b23b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1426//#testresult/1932eb305b4b23b3","status":"passed","time":{"start":1704615387049,"stop":1704615388158,"duration":1109}},{"uid":"cc4547f99533f288","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1423//#testresult/cc4547f99533f288","status":"passed","time":{"start":1704614737300,"stop":1704614738578,"duration":1278}}]},"tags":[]},"source":"5c4ee9f835e6641e.json","parameterValues":["AylesburyValeCouncil","None","None"]}