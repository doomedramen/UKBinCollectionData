{"uid":"6624eb6f91aca030","name":"Validate Council Output [TorridgeDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"da903249529007ec357275ac5f075b6c","time":{"start":1701048127459,"stop":1701048130309,"duration":2850},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fad4d0eedd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fad3ab30d00>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fad3ab30d00>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fad4d0eedd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fad3ab30d00>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fad3ab30d00>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: TorridgeDistrictCouncil","time":{"start":1701048127459,"stop":1701048127459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from TorridgeDistrictCouncil using None and the None is set","time":{"start":1701048127459,"stop":1701048130307,"duration":2848},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701048130307,"stop":1701048130307,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701048130307,"stop":1701048130309,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-861"},{"name":"thread","value":"2872-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TorridgeDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":18,"unknown":0,"total":28},"items":[{"uid":"223f93f20acf24b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/223f93f20acf24b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036351873,"stop":1701036354541,"duration":2668}},{"uid":"982ea1395bc774af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/982ea1395bc774af","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036348766,"stop":1701036351333,"duration":2567}},{"uid":"dd4f9fa1d19ef08e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/dd4f9fa1d19ef08e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961984675,"stop":1700961987261,"duration":2586}},{"uid":"65f4f51554a2bd48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/65f4f51554a2bd48","status":"passed","time":{"start":1700875028309,"stop":1700875031135,"duration":2826}},{"uid":"7a428ad952ac35e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/7a428ad952ac35e1","status":"passed","time":{"start":1700788659277,"stop":1700788662118,"duration":2841}},{"uid":"404a459ea61c8c46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/404a459ea61c8c46","status":"passed","time":{"start":1700702364757,"stop":1700702371117,"duration":6360}},{"uid":"8695bd58053f38df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/8695bd58053f38df","status":"passed","time":{"start":1700646550779,"stop":1700646554850,"duration":4071}},{"uid":"ebd8917554fd6b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/ebd8917554fd6b4","status":"passed","time":{"start":1700616118719,"stop":1700616121796,"duration":3077}},{"uid":"fe67c7c72756d705","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/fe67c7c72756d705","status":"passed","time":{"start":1700529874053,"stop":1700529876887,"duration":2834}},{"uid":"db1fd9936068fa69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/db1fd9936068fa69","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443226252,"stop":1700443229259,"duration":3007}},{"uid":"bf049ad6523bc058","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/bf049ad6523bc058","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357053982,"stop":1700357056917,"duration":2935}},{"uid":"793ec7f2abd12830","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/793ec7f2abd12830","status":"passed","time":{"start":1700270381389,"stop":1700270384517,"duration":3128}},{"uid":"b59b6a2a96aaaf18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/b59b6a2a96aaaf18","status":"passed","time":{"start":1700184123369,"stop":1700184128554,"duration":5185}},{"uid":"4097f51568c9a050","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/4097f51568c9a050","status":"passed","time":{"start":1700097615663,"stop":1700097618725,"duration":3062}},{"uid":"82107254bb6c7e92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/82107254bb6c7e92","status":"passed","time":{"start":1700011473055,"stop":1700011475961,"duration":2906}},{"uid":"5ecd4c06160a1730","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/5ecd4c06160a1730","status":"passed","time":{"start":1699924947617,"stop":1699924950768,"duration":3151}},{"uid":"89ca9e5f0fd6951","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1127//#testresult/89ca9e5f0fd6951","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838604717,"stop":1699838609077,"duration":4360}},{"uid":"da729cea3194280c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1126//#testresult/da729cea3194280c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752221424,"stop":1699752224213,"duration":2789}},{"uid":"f5ea99932d64d829","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1125//#testresult/f5ea99932d64d829","status":"passed","time":{"start":1699669624800,"stop":1699669627983,"duration":3183}},{"uid":"7bb589081f7c3258","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1124//#testresult/7bb589081f7c3258","status":"passed","time":{"start":1699579029663,"stop":1699579032743,"duration":3080}}]},"tags":[]},"source":"6624eb6f91aca030.json","parameterValues":["TorridgeDistrictCouncil","None","None"]}