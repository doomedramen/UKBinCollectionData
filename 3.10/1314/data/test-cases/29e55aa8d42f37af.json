{"uid":"29e55aa8d42f37af","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1703853487407,"stop":1703853496618,"duration":9211},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f3f0ecfbeb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3f0d9b2950>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f3f0d9b2950>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f3f0ecfbeb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3f0d9b2950>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f3f0d9b2950>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1703853487407,"stop":1703853487408,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1703853487408,"stop":1703853496616,"duration":9208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703853496616,"stop":1703853496617,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703853496617,"stop":1703853496618,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-131"},{"name":"thread","value":"2835-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":98,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":98},"items":[{"uid":"9a18a1ea5b1641e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/9a18a1ea5b1641e9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851074001,"stop":1703851083138,"duration":9137}},{"uid":"46bf0598b36d74ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/46bf0598b36d74ab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851106419,"stop":1703851125029,"duration":18610}},{"uid":"8a7dcf4cd90cf5ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/8a7dcf4cd90cf5ea","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812014054,"stop":1703812022826,"duration":8772}},{"uid":"5add6b717970c115","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/5add6b717970c115","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756137269,"stop":1703756145965,"duration":8696}},{"uid":"911208d607c5ad72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/911208d607c5ad72","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726123313,"stop":1703726132051,"duration":8738}},{"uid":"679b4e3ed62aa823","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/679b4e3ed62aa823","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717317636,"stop":1703717326654,"duration":9018}},{"uid":"2bebbc7c75f86ced","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/2bebbc7c75f86ced","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717262879,"stop":1703717271669,"duration":8790}},{"uid":"cfa10e9c1df46a2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/cfa10e9c1df46a2d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639715732,"stop":1703639724465,"duration":8733}},{"uid":"8e1e03fc40d79454","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/8e1e03fc40d79454","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553335842,"stop":1703553345398,"duration":9556}},{"uid":"592f9e67f9891e60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/592f9e67f9891e60","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541104626,"stop":1703541114188,"duration":9562}},{"uid":"d21619440f0cd737","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/d21619440f0cd737","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467103709,"stop":1703467113214,"duration":9505}},{"uid":"621e797ef19e9dbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/621e797ef19e9dbf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416381035,"stop":1703416391010,"duration":9975}},{"uid":"bece9507bc44297c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/bece9507bc44297c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416345972,"stop":1703416355449,"duration":9477}},{"uid":"b85657ae97160998","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/b85657ae97160998","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703380885708,"stop":1703381086781,"duration":201073}},{"uid":"42fd349327a168c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1287//#testresult/42fd349327a168c8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294038761,"stop":1703294066922,"duration":28161}},{"uid":"b7abd52269b8f77f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1282//#testresult/b7abd52269b8f77f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207776399,"stop":1703207786346,"duration":9947}},{"uid":"f7c8e78a7a0c744b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1281//#testresult/f7c8e78a7a0c744b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121417342,"stop":1703121426927,"duration":9585}},{"uid":"61b00f2e38bd1fed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1280//#testresult/61b00f2e38bd1fed","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034241954,"stop":1703034269432,"duration":27478}},{"uid":"d7730c87f0cc793","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/d7730c87f0cc793","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024888496,"stop":1703024898709,"duration":10213}},{"uid":"5aaa9ca4b53faf28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/5aaa9ca4b53faf28","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948669094,"stop":1702948678634,"duration":9540}}]},"tags":[]},"source":"29e55aa8d42f37af.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}