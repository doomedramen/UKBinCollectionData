{"uid":"5a41833151ce5430","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1704388271568,"stop":1704388273362,"duration":1794},"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f680092feb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f67ee9ac550>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f680092feb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f67ee9ac550>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1704388271569,"stop":1704388271569,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1704388271569,"stop":1704388273362,"duration":1793},"status":"failed","statusMessage":"time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az520-878"},{"name":"thread","value":"2729-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":113,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":126},"items":[{"uid":"145d518ee3989b26","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1369//#testresult/145d518ee3989b26","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378367388,"stop":1704378389408,"duration":22020}},{"uid":"be5c158f06a22c7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1367//#testresult/be5c158f06a22c7e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378117634,"stop":1704378118361,"duration":727}},{"uid":"ae9ae9bc83045eaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1366//#testresult/ae9ae9bc83045eaf","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704375872256,"stop":1704375873639,"duration":1383}},{"uid":"354eb5fc3a5dcfa2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1363//#testresult/354eb5fc3a5dcfa2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356770539,"stop":1704356771133,"duration":594}},{"uid":"eff56eb277e9d645","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1361//#testresult/eff56eb277e9d645","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355955055,"stop":1704355956107,"duration":1052}},{"uid":"767f7e96c86b3477","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1359//#testresult/767f7e96c86b3477","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331109414,"stop":1704331110022,"duration":608}},{"uid":"7f1e97a258965cbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1355//#testresult/7f1e97a258965cbf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303719806,"stop":1704303720949,"duration":1143}},{"uid":"f885a22f4fadad98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1354//#testresult/f885a22f4fadad98","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704303682945,"stop":1704303684375,"duration":1430}},{"uid":"eff7f8fe942c3e13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1352//#testresult/eff7f8fe942c3e13","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704301435487,"stop":1704301436480,"duration":993}},{"uid":"384c2edc3e2ca9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1349//#testresult/384c2edc3e2ca9b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244733731,"stop":1704244734391,"duration":660}},{"uid":"2bff69d87290520c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1348//#testresult/2bff69d87290520c","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704180242016,"stop":1704180243494,"duration":1478}},{"uid":"e3c5161c93542204","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1346//#testresult/e3c5161c93542204","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704158278370,"stop":1704158280064,"duration":1694}},{"uid":"506704f177c9bebd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1345//#testresult/506704f177c9bebd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704114629011,"stop":1704114629696,"duration":685}},{"uid":"5975f3a991e86b61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1343//#testresult/5975f3a991e86b61","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704113717289,"stop":1704113718312,"duration":1023}},{"uid":"8caa1b91ea2d373f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1341//#testresult/8caa1b91ea2d373f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112252560,"stop":1704112253572,"duration":1012}},{"uid":"7e13f1edea90d12e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/7e13f1edea90d12e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112103195,"stop":1704112104071,"duration":876}},{"uid":"19577cac96e39d65","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/19577cac96e39d65","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112084062,"stop":1704112084898,"duration":836}},{"uid":"15ca9ad18dc2f25f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/15ca9ad18dc2f25f","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704111826217,"stop":1704111827968,"duration":1751}},{"uid":"278d6683fbe4fbe1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/278d6683fbe4fbe1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111520113,"stop":1704111520696,"duration":583}},{"uid":"45ffc55357fdcb08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/45ffc55357fdcb08","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111475055,"stop":1704111476018,"duration":963}}]},"tags":[]},"source":"5a41833151ce5430.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}