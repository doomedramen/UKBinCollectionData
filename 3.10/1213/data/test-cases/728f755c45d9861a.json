{"uid":"728f755c45d9861a","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1701936592579,"stop":1701936594128,"duration":1549},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fef51dbc550>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fef3debde40>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fef3debde40>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fef51dbc550>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fef3debde40>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fef3debde40>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1701936592579,"stop":1701936592580,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1701936592580,"stop":1701936594126,"duration":1546},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1701936594126,"stop":1701936594126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1701936594127,"stop":1701936594128,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az985-106"},{"name":"thread","value":"2709-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":54,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":54},"items":[{"uid":"8f8d920971b64929","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/8f8d920971b64929","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701912127807,"stop":1701912130036,"duration":2229}},{"uid":"1b916dcd92b250a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/1b916dcd92b250a0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904981087,"stop":1701904982726,"duration":1639}},{"uid":"d4b68e8c197e83cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/d4b68e8c197e83cc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882631760,"stop":1701882633230,"duration":1470}},{"uid":"908e36c158c833f1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/908e36c158c833f1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825673447,"stop":1701825677655,"duration":4208}},{"uid":"21d18f0f8668163c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/21d18f0f8668163c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795700976,"stop":1701795703279,"duration":2303}},{"uid":"32905e2fd2d433fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/32905e2fd2d433fc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795616969,"stop":1701795623693,"duration":6724}},{"uid":"9207f9a771cb7087","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/9207f9a771cb7087","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758617283,"stop":1701758622274,"duration":4991}},{"uid":"fa06a20afbdd6fab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/fa06a20afbdd6fab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758775992,"stop":1701758778506,"duration":2514}},{"uid":"ae21c7641a2802b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/ae21c7641a2802b2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701739385693,"stop":1701739388210,"duration":2517}},{"uid":"6e4e48b20c4cece6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/6e4e48b20c4cece6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714540365,"stop":1701714544888,"duration":4523}},{"uid":"8ab169da6de4104a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/8ab169da6de4104a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714498116,"stop":1701714501042,"duration":2926}},{"uid":"1338ddd2de6ec84d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/1338ddd2de6ec84d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652867640,"stop":1701652882417,"duration":14777}},{"uid":"705fea5a5f2c731","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/705fea5a5f2c731","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701566768247,"stop":1701566770635,"duration":2388}},{"uid":"13850647c336adcf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/13850647c336adcf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479910947,"stop":1701479913791,"duration":2844}},{"uid":"cba2c04310b9f832","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/cba2c04310b9f832","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419146179,"stop":1701419148053,"duration":1874}},{"uid":"d61c3fc4e188cc5c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/d61c3fc4e188cc5c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419002761,"stop":1701419009758,"duration":6997}},{"uid":"c4e48a6459f6075e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/c4e48a6459f6075e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414474909,"stop":1701414479138,"duration":4229}},{"uid":"50af9dc6194d5593","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/50af9dc6194d5593","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414427078,"stop":1701414429071,"duration":1993}},{"uid":"bddc12386485a196","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/bddc12386485a196","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701394079413,"stop":1701394082340,"duration":2927}},{"uid":"bf9484fa48d2dcb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/bf9484fa48d2dcb6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353513843,"stop":1701353519519,"duration":5676}}]},"tags":[]},"source":"728f755c45d9861a.json","parameterValues":["WiltshireCouncil","None","None"]}