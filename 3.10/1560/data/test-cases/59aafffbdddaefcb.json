{"uid":"59aafffbdddaefcb","name":"Validate Council Output [NottinghamCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"10866f1748aa8c1e3efd6f525dda6e8f","time":{"start":1707784091748,"stop":1707784152922,"duration":61174},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f609f00f010>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f609dea6b30>, 'council': 'NottinghamCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f60b275a6e0>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f609f00f010>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f609dea6b30>, 'council': 'NottinghamCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f60b275a6e0>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: NottinghamCityCouncil","time":{"start":1707784091749,"stop":1707784091749,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NottinghamCityCouncil using None and the None is set","time":{"start":1707784091749,"stop":1707784152922,"duration":61173},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1269-622"},{"name":"thread","value":"2747-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NottinghamCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":70,"unknown":0,"total":71},"items":[{"uid":"6c33cb8ff98b29c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/6c33cb8ff98b29c4","status":"passed","time":{"start":1707697726374,"stop":1707697735244,"duration":8870}},{"uid":"68d5cee39ba9ffff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/68d5cee39ba9ffff","status":"passed","time":{"start":1707611423361,"stop":1707611441201,"duration":17840}},{"uid":"2020d37c96697996","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/2020d37c96697996","status":"passed","time":{"start":1707524792912,"stop":1707524815857,"duration":22945}},{"uid":"93e730dab53f70e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/93e730dab53f70e3","status":"passed","time":{"start":1707438416771,"stop":1707438447809,"duration":31038}},{"uid":"d83ab2463ea246a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/d83ab2463ea246a1","status":"passed","time":{"start":1707352048785,"stop":1707352057377,"duration":8592}},{"uid":"a44e06b291a12715","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1551//#testresult/a44e06b291a12715","status":"passed","time":{"start":1707265584591,"stop":1707265592273,"duration":7682}},{"uid":"33aa1e09729730bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1549//#testresult/33aa1e09729730bf","status":"passed","time":{"start":1707179252767,"stop":1707179262304,"duration":9537}},{"uid":"1e10d11b33630e87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/1e10d11b33630e87","status":"passed","time":{"start":1707092983745,"stop":1707092990154,"duration":6409}},{"uid":"781a488427822bcb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/781a488427822bcb","status":"passed","time":{"start":1707006628958,"stop":1707006636491,"duration":7533}},{"uid":"194ff2e38b4d30da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1545//#testresult/194ff2e38b4d30da","status":"passed","time":{"start":1706941950713,"stop":1706941952660,"duration":1947}},{"uid":"1351e46585d7ff17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1544//#testresult/1351e46585d7ff17","status":"passed","time":{"start":1706939039631,"stop":1706939041638,"duration":2007}},{"uid":"49eebbf4ddfa5eca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1542//#testresult/49eebbf4ddfa5eca","status":"passed","time":{"start":1706938525606,"stop":1706938528032,"duration":2426}},{"uid":"2c610c2a18d646d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1541//#testresult/2c610c2a18d646d","status":"passed","time":{"start":1706920079839,"stop":1706920091905,"duration":12066}},{"uid":"aa7f5ffeea72181","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1540//#testresult/aa7f5ffeea72181","status":"passed","time":{"start":1706833625696,"stop":1706833635091,"duration":9395}},{"uid":"18b162c36bcecd14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1538//#testresult/18b162c36bcecd14","status":"passed","time":{"start":1706747335733,"stop":1706747349818,"duration":14085}},{"uid":"c9568719719861ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1537//#testresult/c9568719719861ca","status":"passed","time":{"start":1706660908070,"stop":1706660913220,"duration":5150}},{"uid":"d10957ffdaa4c580","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1535//#testresult/d10957ffdaa4c580","status":"passed","time":{"start":1706574436456,"stop":1706574446891,"duration":10435}},{"uid":"e02f5392d98a473b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1534//#testresult/e02f5392d98a473b","status":"passed","time":{"start":1706488120787,"stop":1706488125080,"duration":4293}},{"uid":"f018675c9277a7e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1531//#testresult/f018675c9277a7e6","status":"passed","time":{"start":1706401817769,"stop":1706401824043,"duration":6274}},{"uid":"5804fbd4d3f56e05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1529//#testresult/5804fbd4d3f56e05","status":"passed","time":{"start":1706315232932,"stop":1706315249411,"duration":16479}}]},"tags":[]},"source":"59aafffbdddaefcb.json","parameterValues":["NottinghamCityCouncil","None","None"]}