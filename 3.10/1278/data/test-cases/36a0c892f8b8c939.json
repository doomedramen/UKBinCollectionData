{"uid":"36a0c892f8b8c939","name":"Validate Council Output [HaltonBoroughCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"024cdc84208f8db1df6dcbc8ace9ec6e","time":{"start":1703024893988,"stop":1703024898841,"duration":4853},"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55bcf94e1f83 <unknown>\n#1 0x55bcf919acf7 <unknown>\n#2 0x55bcf91f2d92 <unknown>\n#3 0x55bcf91f07f4 <unknown>\n#4 0x55bcf91ee0c1 <unknown>\n#5 0x55bcf91ec4b9 <unknown>\n#6 0x55bcf91de313 <unknown>\n#7 0x55bcf92140b2 <unknown>\n#8 0x55bcf91ddb49 <unknown>\n#9 0x55bcf92144ce <unknown>\n#10 0x55bcf9233006 <unknown>\n#11 0x55bcf9213e53 <unknown>\n#12 0x55bcf91dbdd4 <unknown>\n#13 0x55bcf91dd1de <unknown>\n#14 0x55bcf94a6531 <unknown>\n#15 0x55bcf94aa455 <unknown>\n#16 0x55bcf9492f55 <unknown>\n#17 0x55bcf94ab0ef <unknown>\n#18 0x55bcf947699f <unknown>\n#19 0x55bcf94cf008 <unknown>\n#20 0x55bcf94cf1d7 <unknown>\n#21 0x55bcf94e1124 <unknown>\n#22 0x7fe923294ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f10133f3130>\nrequest = <FixtureRequest for <Function test_scenario_outline[HaltonBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f100352b8e0>, 'council': 'HaltonBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/HaltonBoroughCouncil.py:55: in parse_data\n    wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@id='recaptcha-anchor']\"))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1003738190>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bcf94cf1d7 \\\\u003Cunknown>\\\\n#21 0x55bcf94e1124 \\\\u003Cunknown>\\\\n#22 0x7fe923294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55bcf94e1f83 <unknown>\nE       #1 0x55bcf919acf7 <unknown>\nE       #2 0x55bcf91f2d92 <unknown>\nE       #3 0x55bcf91f07f4 <unknown>\nE       #4 0x55bcf91ee0c1 <unknown>\nE       #5 0x55bcf91ec4b9 <unknown>\nE       #6 0x55bcf91de313 <unknown>\nE       #7 0x55bcf92140b2 <unknown>\nE       #8 0x55bcf91ddb49 <unknown>\nE       #9 0x55bcf92144ce <unknown>\nE       #10 0x55bcf9233006 <unknown>\nE       #11 0x55bcf9213e53 <unknown>\nE       #12 0x55bcf91dbdd4 <unknown>\nE       #13 0x55bcf91dd1de <unknown>\nE       #14 0x55bcf94a6531 <unknown>\nE       #15 0x55bcf94aa455 <unknown>\nE       #16 0x55bcf9492f55 <unknown>\nE       #17 0x55bcf94ab0ef <unknown>\nE       #18 0x55bcf947699f <unknown>\nE       #19 0x55bcf94cf008 <unknown>\nE       #20 0x55bcf94cf1d7 <unknown>\nE       #21 0x55bcf94e1124 <unknown>\nE       #22 0x7fe923294ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55bcf94e1f83 <unknown>\n#1 0x55bcf919acf7 <unknown>\n#2 0x55bcf91f2d92 <unknown>\n#3 0x55bcf91f07f4 <unknown>\n#4 0x55bcf91ee0c1 <unknown>\n#5 0x55bcf91ec4b9 <unknown>\n#6 0x55bcf91de313 <unknown>\n#7 0x55bcf92140b2 <unknown>\n#8 0x55bcf91ddb49 <unknown>\n#9 0x55bcf92144ce <unknown>\n#10 0x55bcf9233006 <unknown>\n#11 0x55bcf9213e53 <unknown>\n#12 0x55bcf91dbdd4 <unknown>\n#13 0x55bcf91dd1de <unknown>\n#14 0x55bcf94a6531 <unknown>\n#15 0x55bcf94aa455 <unknown>\n#16 0x55bcf9492f55 <unknown>\n#17 0x55bcf94ab0ef <unknown>\n#18 0x55bcf947699f <unknown>\n#19 0x55bcf94cf008 <unknown>\n#20 0x55bcf94cf1d7 <unknown>\n#21 0x55bcf94e1124 <unknown>\n#22 0x7fe923294ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f10133f3130>\nrequest = <FixtureRequest for <Function test_scenario_outline[HaltonBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f100352b8e0>, 'council': 'HaltonBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/HaltonBoroughCouncil.py:55: in parse_data\n    wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@id='recaptcha-anchor']\"))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1003738190>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bcf94cf1d7 \\\\u003Cunknown>\\\\n#21 0x55bcf94e1124 \\\\u003Cunknown>\\\\n#22 0x7fe923294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55bcf94e1f83 <unknown>\nE       #1 0x55bcf919acf7 <unknown>\nE       #2 0x55bcf91f2d92 <unknown>\nE       #3 0x55bcf91f07f4 <unknown>\nE       #4 0x55bcf91ee0c1 <unknown>\nE       #5 0x55bcf91ec4b9 <unknown>\nE       #6 0x55bcf91de313 <unknown>\nE       #7 0x55bcf92140b2 <unknown>\nE       #8 0x55bcf91ddb49 <unknown>\nE       #9 0x55bcf92144ce <unknown>\nE       #10 0x55bcf9233006 <unknown>\nE       #11 0x55bcf9213e53 <unknown>\nE       #12 0x55bcf91dbdd4 <unknown>\nE       #13 0x55bcf91dd1de <unknown>\nE       #14 0x55bcf94a6531 <unknown>\nE       #15 0x55bcf94aa455 <unknown>\nE       #16 0x55bcf9492f55 <unknown>\nE       #17 0x55bcf94ab0ef <unknown>\nE       #18 0x55bcf947699f <unknown>\nE       #19 0x55bcf94cf008 <unknown>\nE       #20 0x55bcf94cf1d7 <unknown>\nE       #21 0x55bcf94e1124 <unknown>\nE       #22 0x7fe923294ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Given the council: HaltonBoroughCouncil","time":{"start":1703024893988,"stop":1703024893989,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HaltonBoroughCouncil using local and the http://selenium:4444 is set","time":{"start":1703024893989,"stop":1703024898841,"duration":4852},"status":"failed","statusMessage":"Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55bcf94e1f83 <unknown>\n#1 0x55bcf919acf7 <unknown>\n#2 0x55bcf91f2d92 <unknown>\n#3 0x55bcf91f07f4 <unknown>\n#4 0x55bcf91ee0c1 <unknown>\n#5 0x55bcf91ec4b9 <unknown>\n#6 0x55bcf91de313 <unknown>\n#7 0x55bcf92140b2 <unknown>\n#8 0x55bcf91ddb49 <unknown>\n#9 0x55bcf92144ce <unknown>\n#10 0x55bcf9233006 <unknown>\n#11 0x55bcf9213e53 <unknown>\n#12 0x55bcf91dbdd4 <unknown>\n#13 0x55bcf91dd1de <unknown>\n#14 0x55bcf94a6531 <unknown>\n#15 0x55bcf94aa455 <unknown>\n#16 0x55bcf9492f55 <unknown>\n#17 0x55bcf94ab0ef <unknown>\n#18 0x55bcf947699f <unknown>\n#19 0x55bcf94cf008 <unknown>\n#20 0x55bcf94cf1d7 <unknown>\n#21 0x55bcf94e1124 <unknown>\n#22 0x7fe923294ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55bcf94e1f83 <unknown>\n#1 0x55bcf919acf7 <unknown>\n#2 0x55bcf91f2d92 <unknown>\n#3 0x55bcf91f07f4 <unknown>\n#4 0x55bcf91ee0c1 <unknown>\n#5 0x55bcf91ec4b9 <unknown>\n#6 0x55bcf91de313 <unknown>\n#7 0x55bcf92140b2 <unknown>\n#8 0x55bcf91ddb49 <unknown>\n#9 0x55bcf92144ce <unknown>\n#10 0x55bcf9233006 <unknown>\n#11 0x55bcf9213e53 <unknown>\n#12 0x55bcf91dbdd4 <unknown>\n#13 0x55bcf91dd1de <unknown>\n#14 0x55bcf94a6531 <unknown>\n#15 0x55bcf94aa455 <unknown>\n#16 0x55bcf9492f55 <unknown>\n#17 0x55bcf94ab0ef <unknown>\n#18 0x55bcf947699f <unknown>\n#19 0x55bcf94cf008 <unknown>\n#20 0x55bcf94cf1d7 <unknown>\n#21 0x55bcf94e1124 <unknown>\n#22 0x7fe923294ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az569-231"},{"name":"thread","value":"2813-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HaltonBoroughCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"434df96a42896e49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/434df96a42896e49","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55cf2fdaaf83 <unknown>\n#1 0x55cf2fa63cf7 <unknown>\n#2 0x55cf2fabbd92 <unknown>\n#3 0x55cf2fab97f4 <unknown>\n#4 0x55cf2fab70c1 <unknown>\n#5 0x55cf2fab54b9 <unknown>\n#6 0x55cf2faa7313 <unknown>\n#7 0x55cf2fadd0b2 <unknown>\n#8 0x55cf2faa6b49 <unknown>\n#9 0x55cf2fadd4ce <unknown>\n#10 0x55cf2fafc006 <unknown>\n#11 0x55cf2fadce53 <unknown>\n#12 0x55cf2faa4dd4 <unknown>\n#13 0x55cf2faa61de <unknown>\n#14 0x55cf2fd6f531 <unknown>\n#15 0x55cf2fd73455 <unknown>\n#16 0x55cf2fd5bf55 <unknown>\n#17 0x55cf2fd740ef <unknown>\n#18 0x55cf2fd3f99f <unknown>\n#19 0x55cf2fd98008 <unknown>\n#20 0x55cf2fd981d7 <unknown>\n#21 0x55cf2fdaa124 <unknown>\n#22 0x7fad99494ac3 <unknown>","time":{"start":1702948756180,"stop":1702948761694,"duration":5514}},{"uid":"2261b04d3d47de65","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/2261b04d3d47de65","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x5560b7f58d33 <unknown>\n#1 0x5560b7c15f87 <unknown>\n#2 0x5560b7c6e002 <unknown>\n#3 0x5560b7c6ba64 <unknown>\n#4 0x5560b7c69331 <unknown>\n#5 0x5560b7c67729 <unknown>\n#6 0x5560b7c59583 <unknown>\n#7 0x5560b7c8f342 <unknown>\n#8 0x5560b7c58db9 <unknown>\n#9 0x5560b7c8f75e <unknown>\n#10 0x5560b7cae297 <unknown>\n#11 0x5560b7c8f0e3 <unknown>\n#12 0x5560b7c57044 <unknown>\n#13 0x5560b7c5844e <unknown>\n#14 0x5560b7f1d861 <unknown>\n#15 0x5560b7f21785 <unknown>\n#16 0x5560b7f0b285 <unknown>\n#17 0x5560b7f2241f <unknown>\n#18 0x5560b7eef20f <unknown>\n#19 0x5560b7f46028 <unknown>\n#20 0x5560b7f461f7 <unknown>\n#21 0x5560b7f57ed4 <unknown>\n#22 0x7f0e7ce94ac3 <unknown>","time":{"start":1702862662122,"stop":1702862666870,"duration":4748}},{"uid":"2ee49653e4c59b10","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/2ee49653e4c59b10","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 681)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55990c2fdd33 <unknown>\n#1 0x55990bfbaf87 <unknown>\n#2 0x55990c013002 <unknown>\n#3 0x55990c010a64 <unknown>\n#4 0x55990c00e331 <unknown>\n#5 0x55990c00c729 <unknown>\n#6 0x55990bffe583 <unknown>\n#7 0x55990c034342 <unknown>\n#8 0x55990bffddb9 <unknown>\n#9 0x55990c03475e <unknown>\n#10 0x55990c053297 <unknown>\n#11 0x55990c0340e3 <unknown>\n#12 0x55990bffc044 <unknown>\n#13 0x55990bffd44e <unknown>\n#14 0x55990c2c2861 <unknown>\n#15 0x55990c2c6785 <unknown>\n#16 0x55990c2b0285 <unknown>\n#17 0x55990c2c741f <unknown>\n#18 0x55990c29420f <unknown>\n#19 0x55990c2eb028 <unknown>\n#20 0x55990c2eb1f7 <unknown>\n#21 0x55990c2fced4 <unknown>\n#22 0x7f5cae494ac3 <unknown>","time":{"start":1702860015001,"stop":1702860019671,"duration":4670}},{"uid":"94b50ef05b21d6ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/94b50ef05b21d6ad","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 683)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55deef398d33 <unknown>\n#1 0x55deef055f87 <unknown>\n#2 0x55deef0ae002 <unknown>\n#3 0x55deef0aba64 <unknown>\n#4 0x55deef0a9331 <unknown>\n#5 0x55deef0a7729 <unknown>\n#6 0x55deef099583 <unknown>\n#7 0x55deef0cf342 <unknown>\n#8 0x55deef098db9 <unknown>\n#9 0x55deef0cf75e <unknown>\n#10 0x55deef0ee297 <unknown>\n#11 0x55deef0cf0e3 <unknown>\n#12 0x55deef097044 <unknown>\n#13 0x55deef09844e <unknown>\n#14 0x55deef35d861 <unknown>\n#15 0x55deef361785 <unknown>\n#16 0x55deef34b285 <unknown>\n#17 0x55deef36241f <unknown>\n#18 0x55deef32f20f <unknown>\n#19 0x55deef386028 <unknown>\n#20 0x55deef3861f7 <unknown>\n#21 0x55deef397ed4 <unknown>\n#22 0x7fc848c94ac3 <unknown>","time":{"start":1702843613275,"stop":1702843618941,"duration":5666}},{"uid":"c5b7dc9528d21e1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1270//#testresult/c5b7dc9528d21e1a","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (110, 681)\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55ca9d738d33 <unknown>\n#1 0x55ca9d3f5f87 <unknown>\n#2 0x55ca9d44e002 <unknown>\n#3 0x55ca9d44ba64 <unknown>\n#4 0x55ca9d449331 <unknown>\n#5 0x55ca9d447729 <unknown>\n#6 0x55ca9d439583 <unknown>\n#7 0x55ca9d46f342 <unknown>\n#8 0x55ca9d438db9 <unknown>\n#9 0x55ca9d46f75e <unknown>\n#10 0x55ca9d48e297 <unknown>\n#11 0x55ca9d46f0e3 <unknown>\n#12 0x55ca9d437044 <unknown>\n#13 0x55ca9d43844e <unknown>\n#14 0x55ca9d6fd861 <unknown>\n#15 0x55ca9d701785 <unknown>\n#16 0x55ca9d6eb285 <unknown>\n#17 0x55ca9d70241f <unknown>\n#18 0x55ca9d6cf20f <unknown>\n#19 0x55ca9d726028 <unknown>\n#20 0x55ca9d7261f7 <unknown>\n#21 0x55ca9d737ed4 <unknown>\n#22 0x7eff83294ac3 <unknown>","time":{"start":1702809684630,"stop":1702809690284,"duration":5654}}]},"tags":[]},"source":"36a0c892f8b8c939.json","parameterValues":["HaltonBoroughCouncil","local","http://selenium:4444"]}