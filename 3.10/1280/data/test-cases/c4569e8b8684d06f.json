{"uid":"c4569e8b8684d06f","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1703034464103,"stop":1703034467125,"duration":3022},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f78cfe8cb80>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f78c19c66b0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f78c19c66b0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f78cfe8cb80>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f78c19c66b0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f78c19c66b0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1703034464104,"stop":1703034464104,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1703034464105,"stop":1703034467123,"duration":3018},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703034467123,"stop":1703034467123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703034467123,"stop":1703034467125,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-529"},{"name":"thread","value":"2921-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":80,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":80},"items":[{"uid":"92859c759bc76b9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/92859c759bc76b9a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703025052486,"stop":1703025055754,"duration":3268}},{"uid":"64a213e79a4530da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/64a213e79a4530da","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948871355,"stop":1702948880194,"duration":8839}},{"uid":"2b6f01c647ee7bd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/2b6f01c647ee7bd6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862605044,"stop":1702862607328,"duration":2284}},{"uid":"df56e0a100103f9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/df56e0a100103f9f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702860119465,"stop":1702860121387,"duration":1922}},{"uid":"b11eec3bfe0d9d1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/b11eec3bfe0d9d1d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843786904,"stop":1702843791086,"duration":4182}},{"uid":"37ab3ce36d69b600","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1270//#testresult/37ab3ce36d69b600","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809556341,"stop":1702809565539,"duration":9198}},{"uid":"9b7010e0e56cd8a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1247//#testresult/9b7010e0e56cd8a9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657413584,"stop":1702657415050,"duration":1466}},{"uid":"599d4646b50d9e32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1244//#testresult/599d4646b50d9e32","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603305755,"stop":1702603313089,"duration":7334}},{"uid":"a23c9b723742192c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1243//#testresult/a23c9b723742192c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540171309,"stop":1702540173073,"duration":1764}},{"uid":"2c1c78746172da31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1241//#testresult/2c1c78746172da31","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516858315,"stop":1702516865247,"duration":6932}},{"uid":"d81e409f6807c10b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1238//#testresult/d81e409f6807c10b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447790888,"stop":1702447793682,"duration":2794}},{"uid":"70ede478fe8dbe25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1237//#testresult/70ede478fe8dbe25","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447569674,"stop":1702447572034,"duration":2360}},{"uid":"84acc32f0b908bc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1236//#testresult/84acc32f0b908bc6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430613825,"stop":1702430619642,"duration":5817}},{"uid":"53c56f9eccbd533c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/53c56f9eccbd533c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366640096,"stop":1702366647019,"duration":6923}},{"uid":"2551072b6c91b33b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/2551072b6c91b33b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702344096100,"stop":1702344099462,"duration":3362}},{"uid":"e37c87a16d5c8136","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/e37c87a16d5c8136","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257685160,"stop":1702257688185,"duration":3025}},{"uid":"f6396e0d9dc0835b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/f6396e0d9dc0835b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171631987,"stop":1702171636234,"duration":4247}},{"uid":"6fa70d263ca788af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/6fa70d263ca788af","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084883035,"stop":1702084884875,"duration":1840}},{"uid":"f8509d7bca8124a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/f8509d7bca8124a8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066872531,"stop":1702066883196,"duration":10665}},{"uid":"396408e0778b7a10","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/396408e0778b7a10","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054625699,"stop":1702054628404,"duration":2705}}]},"tags":[]},"source":"c4569e8b8684d06f.json","parameterValues":["WiltshireCouncil","None","None"]}