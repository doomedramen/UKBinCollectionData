{"uid":"bac30b2c4472f127","name":"Validate Council Output [BasingstokeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"0d6549c1d81ad728472392d1bde7fbc5","time":{"start":1703034235486,"stop":1703034237285,"duration":1799},"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7f96bd60b880>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f96b5dda1a0>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7f96bd60b880>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f96b5dda1a0>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BasingstokeCouncil","time":{"start":1703034235486,"stop":1703034235487,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BasingstokeCouncil using None and the None is set","time":{"start":1703034235487,"stop":1703034237285,"duration":1798},"status":"failed","statusMessage":"unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-529"},{"name":"thread","value":"2912-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BasingstokeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":71,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":80},"items":[{"uid":"4024837bef89223c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/4024837bef89223c","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1703024884407,"stop":1703024889219,"duration":4812}},{"uid":"ecf4cadcd1db2ec0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/ecf4cadcd1db2ec0","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702948665607,"stop":1702948667267,"duration":1660}},{"uid":"77ca592989c6ede0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/77ca592989c6ede0","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702862338385,"stop":1702862339483,"duration":1098}},{"uid":"fa8a3378b924b3e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/fa8a3378b924b3e6","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702859980256,"stop":1702859982590,"duration":2334}},{"uid":"ae6cf8719a8b240d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/ae6cf8719a8b240d","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702843526038,"stop":1702843527001,"duration":963}},{"uid":"cb6fbee694d0a00a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1270//#testresult/cb6fbee694d0a00a","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702809352972,"stop":1702809355836,"duration":2864}},{"uid":"fb4335f040e0734a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1247//#testresult/fb4335f040e0734a","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702657110537,"stop":1702657113096,"duration":2559}},{"uid":"5450d2c9915fe373","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1244//#testresult/5450d2c9915fe373","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702603152521,"stop":1702603154105,"duration":1584}},{"uid":"c707365e04261e69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1243//#testresult/c707365e04261e69","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702540022657,"stop":1702540023827,"duration":1170}},{"uid":"45141435e32d0043","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1241//#testresult/45141435e32d0043","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702516650058,"stop":1702516651545,"duration":1487}},{"uid":"6a0153788092764c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1238//#testresult/6a0153788092764c","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702447452297,"stop":1702447454054,"duration":1757}},{"uid":"6e1a38acbee614f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1237//#testresult/6e1a38acbee614f6","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702447414543,"stop":1702447416016,"duration":1473}},{"uid":"dd20a050fdf1cbb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1236//#testresult/dd20a050fdf1cbb6","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702430310692,"stop":1702430315515,"duration":4823}},{"uid":"225c06790f9d818d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/225c06790f9d818d","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702366477095,"stop":1702366481229,"duration":4134}},{"uid":"75e5a786fe797ff7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/75e5a786fe797ff7","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702343932852,"stop":1702343934313,"duration":1461}},{"uid":"3a957c984870d6d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/3a957c984870d6d5","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702257529825,"stop":1702257530725,"duration":900}},{"uid":"86a65816c74a99d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/86a65816c74a99d4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171375389,"stop":1702171476241,"duration":100852}},{"uid":"e2844a6c5ac91d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/e2844a6c5ac91d1","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702084614445,"stop":1702084615626,"duration":1181}},{"uid":"5c65aa85a8407dea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/5c65aa85a8407dea","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702066701167,"stop":1702066704697,"duration":3530}},{"uid":"439004f06cce3523","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/439004f06cce3523","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702054341232,"stop":1702054342700,"duration":1468}}]},"tags":[]},"source":"bac30b2c4472f127.json","parameterValues":["BasingstokeCouncil","None","None"]}