{"uid":"e1f3dbaef165ee56","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1712700315849,"stop":1712700316893,"duration":1044},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f1034216e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1033c5f7f0>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f1034216e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1033c5f7f0>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1712700315849,"stop":1712700315850,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1712700315850,"stop":1712700316893,"duration":1043},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1432-985"},{"name":"thread","value":"2733-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":170,"unknown":0,"total":192},"items":[{"uid":"7c13f5bdfb793055","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1668//#testresult/7c13f5bdfb793055","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1712622397482,"stop":1712622398628,"duration":1146}},{"uid":"b81fa21e9cff1322","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1667//#testresult/b81fa21e9cff1322","status":"passed","time":{"start":1712536054504,"stop":1712536055409,"duration":905}},{"uid":"2a4caec1978e49a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1666//#testresult/2a4caec1978e49a3","status":"passed","time":{"start":1712449783708,"stop":1712449784846,"duration":1138}},{"uid":"7390cd165c0661d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1665//#testresult/7390cd165c0661d","status":"passed","time":{"start":1712363212858,"stop":1712363214301,"duration":1443}},{"uid":"e77fc174928e3c00","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1664//#testresult/e77fc174928e3c00","status":"passed","time":{"start":1712276773966,"stop":1712276775052,"duration":1086}},{"uid":"c70032ab90ee42d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1660//#testresult/c70032ab90ee42d9","status":"passed","time":{"start":1712190482772,"stop":1712190484226,"duration":1454}},{"uid":"5cdc1857058f3b9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1657//#testresult/5cdc1857058f3b9a","status":"passed","time":{"start":1712136936966,"stop":1712136938005,"duration":1039}},{"uid":"ebe081fb58c401ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1655//#testresult/ebe081fb58c401ed","status":"passed","time":{"start":1712103950620,"stop":1712103951660,"duration":1040}},{"uid":"a4b46dbb1fb86f0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1654//#testresult/a4b46dbb1fb86f0e","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1712017597747,"stop":1712017599175,"duration":1428}},{"uid":"4c2590485d1d0400","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1653//#testresult/4c2590485d1d0400","status":"passed","time":{"start":1711931424927,"stop":1711931426487,"duration":1560}},{"uid":"e4911d4652423b47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1652//#testresult/e4911d4652423b47","status":"passed","time":{"start":1711844963355,"stop":1711844964587,"duration":1232}},{"uid":"934f3b50a575b0d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1649//#testresult/934f3b50a575b0d7","status":"passed","time":{"start":1711671962968,"stop":1711671963844,"duration":876}},{"uid":"f8ea33483a1e7666","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1648//#testresult/f8ea33483a1e7666","status":"passed","time":{"start":1711585571996,"stop":1711585572880,"duration":884}},{"uid":"f73b48bd0cf4be9c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1646//#testresult/f73b48bd0cf4be9c","status":"passed","time":{"start":1711499139287,"stop":1711499140630,"duration":1343}},{"uid":"27c14e524ec878ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1645//#testresult/27c14e524ec878ba","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1711412714986,"stop":1711412716597,"duration":1611}},{"uid":"6ba7ef7230f1d7c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1641//#testresult/6ba7ef7230f1d7c9","status":"passed","time":{"start":1711326438697,"stop":1711326439474,"duration":777}},{"uid":"97fa75d6d2af3eb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1634//#testresult/97fa75d6d2af3eb8","status":"passed","time":{"start":1711240147213,"stop":1711240148353,"duration":1140}},{"uid":"e128c79b107a968d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1626//#testresult/e128c79b107a968d","status":"passed","time":{"start":1711153509012,"stop":1711153509899,"duration":887}},{"uid":"25a10b07cddf3b5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1625//#testresult/25a10b07cddf3b5b","status":"passed","time":{"start":1711067131023,"stop":1711067131983,"duration":960}},{"uid":"a00e7cfefe735a3b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1624//#testresult/a00e7cfefe735a3b","status":"passed","time":{"start":1710980797833,"stop":1710980799211,"duration":1378}}]},"tags":[]},"source":"e1f3dbaef165ee56.json","parameterValues":["BarnsleyMBCouncil","None","None"]}