{"uid":"e16c0820d6179f7a","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1706660891217,"stop":1706660901203,"duration":9986},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0d1d73ef80>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0d1d2ee080>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 31 January\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0d1d73ef80>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0d1d2ee080>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 31 January\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1706660891218,"stop":1706660891218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1706660891218,"stop":1706660901203,"duration":9985},"status":"failed","statusMessage":"time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1426-895"},{"name":"thread","value":"2865-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":143,"broken":0,"skipped":0,"passed":34,"unknown":0,"total":177},"items":[{"uid":"9408a03ca98e066f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1535//#testresult/9408a03ca98e066f","status":"passed","time":{"start":1706574451935,"stop":1706574460721,"duration":8786}},{"uid":"d59b1680ef30be24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1534//#testresult/d59b1680ef30be24","status":"passed","time":{"start":1706488091004,"stop":1706488098477,"duration":7473}},{"uid":"952efb608278d56a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1531//#testresult/952efb608278d56a","status":"passed","time":{"start":1706401761253,"stop":1706401768031,"duration":6778}},{"uid":"3526858d68141f34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1529//#testresult/3526858d68141f34","status":"passed","time":{"start":1706315207990,"stop":1706315214772,"duration":6782}},{"uid":"7447001188e5a858","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1528//#testresult/7447001188e5a858","status":"passed","time":{"start":1706228851397,"stop":1706228863641,"duration":12244}},{"uid":"d82ccf29643c3a40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1523//#testresult/d82ccf29643c3a40","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5599b7694f83 <unknown>\n#1 0x5599b734dcf7 <unknown>\n#2 0x5599b739d99e <unknown>\n#3 0x5599b739daa1 <unknown>\n#4 0x5599b73e8d64 <unknown>\n#5 0x5599b73c70dd <unknown>\n#6 0x5599b73e6006 <unknown>\n#7 0x5599b73c6e53 <unknown>\n#8 0x5599b738edd4 <unknown>\n#9 0x5599b73901de <unknown>\n#10 0x5599b7659531 <unknown>\n#11 0x5599b765d455 <unknown>\n#12 0x5599b7645f55 <unknown>\n#13 0x5599b765e0ef <unknown>\n#14 0x5599b762999f <unknown>\n#15 0x5599b7682008 <unknown>\n#16 0x5599b76821d7 <unknown>\n#17 0x5599b7694124 <unknown>\n#18 0x7f81dd694ac3 <unknown>","time":{"start":1706142540260,"stop":1706142559145,"duration":18885}},{"uid":"43dd49e445f6bc47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1522//#testresult/43dd49e445f6bc47","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 24 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1706056141780,"stop":1706056151883,"duration":10103}},{"uid":"11a1275029d338c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1521//#testresult/11a1275029d338c5","status":"passed","time":{"start":1705969759445,"stop":1705969769152,"duration":9707}},{"uid":"c577249cc394da5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1520//#testresult/c577249cc394da5b","status":"passed","time":{"start":1705883409672,"stop":1705883421451,"duration":11779}},{"uid":"aa2c51eefdc42764","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1519//#testresult/aa2c51eefdc42764","status":"passed","time":{"start":1705797101269,"stop":1705797108466,"duration":7197}},{"uid":"3acdeca65bf54834","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1515//#testresult/3acdeca65bf54834","status":"passed","time":{"start":1705710483729,"stop":1705710497001,"duration":13272}},{"uid":"28f7a5604fefae06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1511//#testresult/28f7a5604fefae06","status":"passed","time":{"start":1705624122100,"stop":1705624130985,"duration":8885}},{"uid":"c158d9c5a823351d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1505//#testresult/c158d9c5a823351d","status":"passed","time":{"start":1705537749809,"stop":1705537758727,"duration":8918}},{"uid":"b570c16d6c15ecbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1500//#testresult/b570c16d6c15ecbf","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 17 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1705451311723,"stop":1705451320633,"duration":8910}},{"uid":"795c1d0006fb8e4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1499//#testresult/795c1d0006fb8e4c","status":"passed","time":{"start":1705364942743,"stop":1705364951599,"duration":8856}},{"uid":"5e126d270a21de44","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1492//#testresult/5e126d270a21de44","status":"passed","time":{"start":1705295648908,"stop":1705295656627,"duration":7719}},{"uid":"aa79a24359460787","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1491//#testresult/aa79a24359460787","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705295136409,"stop":1705295137169,"duration":760}},{"uid":"21a12f4e5021628","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1490//#testresult/21a12f4e5021628","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705278541854,"stop":1705278542729,"duration":875}},{"uid":"38e24bda8f1f3967","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1485//#testresult/38e24bda8f1f3967","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705192200294,"stop":1705192200931,"duration":637}},{"uid":"bb83bdd7e5a86ab9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1484//#testresult/bb83bdd7e5a86ab9","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705105645763,"stop":1705105646860,"duration":1097}}]},"tags":[]},"source":"e16c0820d6179f7a.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}