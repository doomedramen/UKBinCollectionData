{"uid":"4ea688b411990a19","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1711412797872,"stop":1711412798796,"duration":924},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fba91646e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fba91032ad0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fba91646e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fba91032ad0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1711412797872,"stop":1711412797873,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1711412797873,"stop":1711412798796,"duration":923},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1567-623"},{"name":"thread","value":"2731-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":116,"broken":0,"skipped":0,"passed":103,"unknown":0,"total":219},"items":[{"uid":"81899c6bea4df384","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1641//#testresult/81899c6bea4df384","status":"passed","time":{"start":1711326502187,"stop":1711326502778,"duration":591}},{"uid":"9c300f1e2a30d1a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1634//#testresult/9c300f1e2a30d1a8","status":"passed","time":{"start":1711240210478,"stop":1711240211058,"duration":580}},{"uid":"73040ecfd96542bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1626//#testresult/73040ecfd96542bf","status":"passed","time":{"start":1711153571229,"stop":1711153572175,"duration":946}},{"uid":"a8aa19d8abebc8d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1625//#testresult/a8aa19d8abebc8d0","status":"passed","time":{"start":1711067206895,"stop":1711067207659,"duration":764}},{"uid":"309a5bf8c7ccb648","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1624//#testresult/309a5bf8c7ccb648","status":"passed","time":{"start":1710980878454,"stop":1710980879339,"duration":885}},{"uid":"3016aeb8992735c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1621//#testresult/3016aeb8992735c3","status":"passed","time":{"start":1710970967613,"stop":1710970969115,"duration":1502}},{"uid":"71b4b18fb513a2ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1619//#testresult/71b4b18fb513a2ae","status":"passed","time":{"start":1710894386926,"stop":1710894387508,"duration":582}},{"uid":"c845602d82e30a01","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1615//#testresult/c845602d82e30a01","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1710807996313,"stop":1710807997101,"duration":788}},{"uid":"522af1958776b650","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1609//#testresult/522af1958776b650","status":"passed","time":{"start":1710721723299,"stop":1710721724008,"duration":709}},{"uid":"44f3080e6bf37458","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1608//#testresult/44f3080e6bf37458","status":"passed","time":{"start":1710635379569,"stop":1710635380194,"duration":625}},{"uid":"26f2f3859d38f7c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1607//#testresult/26f2f3859d38f7c7","status":"passed","time":{"start":1710548702584,"stop":1710548703191,"duration":607}},{"uid":"b99666e94aa93c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1605//#testresult/b99666e94aa93c","status":"passed","time":{"start":1710462377293,"stop":1710462378246,"duration":953}},{"uid":"2d1fa20b8fb75d6a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1604//#testresult/2d1fa20b8fb75d6a","status":"passed","time":{"start":1710452851357,"stop":1710452852373,"duration":1016}},{"uid":"9e858ac7e1d824a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1602//#testresult/9e858ac7e1d824a0","status":"passed","time":{"start":1710376070231,"stop":1710376071505,"duration":1274}},{"uid":"2360a75cb3508294","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1601//#testresult/2360a75cb3508294","status":"passed","time":{"start":1710289582759,"stop":1710289583386,"duration":627}},{"uid":"199cd6ec29a593f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1600//#testresult/199cd6ec29a593f4","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1710203177982,"stop":1710203178809,"duration":827}},{"uid":"f62f46be384e3bb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1599//#testresult/f62f46be384e3bb8","status":"passed","time":{"start":1710116863230,"stop":1710116864087,"duration":857}},{"uid":"5642fb6b24940aa1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1598//#testresult/5642fb6b24940aa1","status":"passed","time":{"start":1710030566057,"stop":1710030566708,"duration":651}},{"uid":"a8727fe81049d140","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1597//#testresult/a8727fe81049d140","status":"passed","time":{"start":1709944025514,"stop":1709944026226,"duration":712}},{"uid":"8295dd8755e086f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1596//#testresult/8295dd8755e086f3","status":"passed","time":{"start":1709857607804,"stop":1709857608412,"duration":608}}]},"tags":[]},"source":"4ea688b411990a19.json","parameterValues":["LiverpoolCityCouncil","None","None"]}