{"uid":"d5f92793ca6b6fb6","name":"Validate Council Output [MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b599a4dd435703dc5f9937f69cb0d25f","time":{"start":1702948702368,"stop":1702948721893,"duration":19525},"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x7fe5e4d07e20>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe5d2ef2cb0>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:102: in parse_data\n    date = datetime.strptime(' '.join(binDict[bin][1:]), \"%d %b\").replace(year=datetime.today().year)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '23 Dec(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x7fe5e4d07e20>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe5d2ef2cb0>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:102: in parse_data\n    date = datetime.strptime(' '.join(binDict[bin][1:]), \"%d %b\").replace(year=datetime.today().year)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '23 Dec(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","steps":[{"name":"Given the council: MidAndEastAntrimBoroughCouncil","time":{"start":1702948702368,"stop":1702948702369,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from MidAndEastAntrimBoroughCouncil using local and the http://selenium:4444 is set","time":{"start":1702948702369,"stop":1702948721893,"duration":19524},"status":"failed","statusMessage":"unconverted data remains: (Adjusted","statusTrace":"ValueError: unconverted data remains: (Adjusted\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az975-303"},{"name":"thread","value":"2777-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MidAndEastAntrimBoroughCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":53},"items":[{"uid":"f05b118b4ce3be7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/f05b118b4ce3be7f","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702862384118,"stop":1702862400868,"duration":16750}},{"uid":"55e2a79931d22b6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/55e2a79931d22b6e","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702860033548,"stop":1702860050375,"duration":16827}},{"uid":"77b73dbf7a4ebf8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/77b73dbf7a4ebf8a","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702843566277,"stop":1702843583649,"duration":17372}},{"uid":"f01681be35012eeb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1270//#testresult/f01681be35012eeb","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702809394973,"stop":1702809413827,"duration":18854}},{"uid":"4436f962afa601bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1247//#testresult/4436f962afa601bb","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702657157192,"stop":1702657173949,"duration":16757}},{"uid":"8aabbc274dbc0855","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1244//#testresult/8aabbc274dbc0855","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702603192125,"stop":1702603210194,"duration":18069}},{"uid":"69a9bfe7034fe194","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1243//#testresult/69a9bfe7034fe194","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702540057328,"stop":1702540074457,"duration":17129}},{"uid":"28ae8780fcf4165b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1241//#testresult/28ae8780fcf4165b","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702516692632,"stop":1702516709989,"duration":17357}},{"uid":"b8323121f2eae30c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1238//#testresult/b8323121f2eae30c","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702447496957,"stop":1702447515134,"duration":18177}},{"uid":"5e27fc1494c5b563","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1237//#testresult/5e27fc1494c5b563","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702447449131,"stop":1702447467103,"duration":17972}},{"uid":"e071bf5cfc735e09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1236//#testresult/e071bf5cfc735e09","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702430343877,"stop":1702430360936,"duration":17059}},{"uid":"cbdb075cf0b5b91f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/cbdb075cf0b5b91f","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702366515283,"stop":1702366532380,"duration":17097}},{"uid":"97dd88f05653a97b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/97dd88f05653a97b","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702343984606,"stop":1702344002888,"duration":18282}},{"uid":"7c9f8a93a90aba60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/7c9f8a93a90aba60","status":"passed","time":{"start":1702257570042,"stop":1702257587092,"duration":17050}},{"uid":"8c1a4208d9a85246","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/8c1a4208d9a85246","status":"passed","time":{"start":1702171442595,"stop":1702171459754,"duration":17159}},{"uid":"b305e3d6f9fee91c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/b305e3d6f9fee91c","status":"passed","time":{"start":1702084712258,"stop":1702084729405,"duration":17147}},{"uid":"da5d49a3418a2d57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/da5d49a3418a2d57","status":"passed","time":{"start":1702066744639,"stop":1702066762767,"duration":18128}},{"uid":"1932a09f447cbc60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/1932a09f447cbc60","status":"passed","time":{"start":1702054380866,"stop":1702054397994,"duration":17128}},{"uid":"afd80ba0c7363389","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/afd80ba0c7363389","status":"passed","time":{"start":1701998397828,"stop":1701998416412,"duration":18584}},{"uid":"a74127ae19585307","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/a74127ae19585307","status":"passed","time":{"start":1701990389604,"stop":1701990407665,"duration":18061}}]},"tags":[]},"source":"d5f92793ca6b6fb6.json","parameterValues":["MidAndEastAntrimBoroughCouncil","local","http://selenium:4444"]}