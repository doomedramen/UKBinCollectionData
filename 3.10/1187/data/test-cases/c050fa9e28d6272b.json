{"uid":"c050fa9e28d6272b","name":"Validate Council Output [TorridgeDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"da903249529007ec357275ac5f075b6c","time":{"start":1701714476396,"stop":1701714478836,"duration":2440},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fb10cbff400>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb0fa5dfa00>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fb0fa5dfa00>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fb10cbff400>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb0fa5dfa00>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fb0fa5dfa00>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: TorridgeDistrictCouncil","time":{"start":1701714476396,"stop":1701714476397,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from TorridgeDistrictCouncil using None and the None is set","time":{"start":1701714476397,"stop":1701714478834,"duration":2437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701714478834,"stop":1701714478834,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701714478834,"stop":1701714478836,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1205-785"},{"name":"thread","value":"2722-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TorridgeDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":30,"unknown":0,"total":44},"items":[{"uid":"4a84465a6bc66fa7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/4a84465a6bc66fa7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714472103,"stop":1701714474730,"duration":2627}},{"uid":"de3a8419ec4a577f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/de3a8419ec4a577f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652823697,"stop":1701652826530,"duration":2833}},{"uid":"a698393dc72b8c5d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/a698393dc72b8c5d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701566729719,"stop":1701566732523,"duration":2804}},{"uid":"e065d192630ed258","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/e065d192630ed258","status":"passed","time":{"start":1701479863989,"stop":1701479867324,"duration":3335}},{"uid":"5fe3b3435f1a7767","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/5fe3b3435f1a7767","status":"passed","time":{"start":1701419101824,"stop":1701419104298,"duration":2474}},{"uid":"9468f65d17e29306","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/9468f65d17e29306","status":"passed","time":{"start":1701418960072,"stop":1701418963214,"duration":3142}},{"uid":"f1d0b3cd05d458ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/f1d0b3cd05d458ef","status":"passed","time":{"start":1701414433218,"stop":1701414436061,"duration":2843}},{"uid":"cf9b68e9c9cab25a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/cf9b68e9c9cab25a","status":"passed","time":{"start":1701414382640,"stop":1701414385250,"duration":2610}},{"uid":"e3f829f4f1de4be7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/e3f829f4f1de4be7","status":"passed","time":{"start":1701394029463,"stop":1701394032270,"duration":2807}},{"uid":"bb46635b68d7fb47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/bb46635b68d7fb47","status":"passed","time":{"start":1701353484556,"stop":1701353487237,"duration":2681}},{"uid":"8ec57b6381fc3797","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/8ec57b6381fc3797","status":"passed","time":{"start":1701307166288,"stop":1701307168970,"duration":2682}},{"uid":"effe1962386cd611","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/effe1962386cd611","status":"passed","time":{"start":1701279538409,"stop":1701279541195,"duration":2786}},{"uid":"b8413056e05602d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/b8413056e05602d9","status":"passed","time":{"start":1701279424109,"stop":1701279428518,"duration":4409}},{"uid":"4ccf46dbb1614fe2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/4ccf46dbb1614fe2","status":"passed","time":{"start":1701220856559,"stop":1701220859183,"duration":2624}},{"uid":"f628dbee26f85510","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/f628dbee26f85510","status":"passed","time":{"start":1701134566069,"stop":1701134569412,"duration":3343}},{"uid":"6624eb6f91aca030","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/6624eb6f91aca030","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701048127459,"stop":1701048130309,"duration":2850}},{"uid":"223f93f20acf24b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/223f93f20acf24b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036351873,"stop":1701036354541,"duration":2668}},{"uid":"982ea1395bc774af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/982ea1395bc774af","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036348766,"stop":1701036351333,"duration":2567}},{"uid":"dd4f9fa1d19ef08e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/dd4f9fa1d19ef08e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961984675,"stop":1700961987261,"duration":2586}},{"uid":"65f4f51554a2bd48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/65f4f51554a2bd48","status":"passed","time":{"start":1700875028309,"stop":1700875031135,"duration":2826}}]},"tags":[]},"source":"c050fa9e28d6272b.json","parameterValues":["TorridgeDistrictCouncil","None","None"]}