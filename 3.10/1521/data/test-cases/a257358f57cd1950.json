{"uid":"a257358f57cd1950","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1705969747032,"stop":1705969748494,"duration":1462},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f43bc3672e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f43bb6d3430>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f43bc3672e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f43bb6d3430>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1705969747032,"stop":1705969747032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1705969747032,"stop":1705969748494,"duration":1462},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1052-501"},{"name":"thread","value":"2723-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":108,"broken":0,"skipped":0,"passed":53,"unknown":0,"total":161},"items":[{"uid":"359c2ae321652c42","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1520//#testresult/359c2ae321652c42","status":"failed","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='liverpool.gov.uk', port=443): Max retries exceeded with url: /Bins/BinDatesTable?UPRN=38164600&User-Agent=Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F108.0.0.0+Safari%2F537.36 (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f6a4bc62bf0>, 'Connection to liverpool.gov.uk timed out. (connect timeout=None)'))","time":{"start":1705883382373,"stop":1705883512342,"duration":129969}},{"uid":"26737e020ad9a811","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1519//#testresult/26737e020ad9a811","status":"passed","time":{"start":1705797048150,"stop":1705797049541,"duration":1391}},{"uid":"153ff1a3fbd05e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1515//#testresult/153ff1a3fbd05e45","status":"passed","time":{"start":1705710447862,"stop":1705710449035,"duration":1173}},{"uid":"f3b4b9a5a20a8a0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1511//#testresult/f3b4b9a5a20a8a0a","status":"passed","time":{"start":1705624106905,"stop":1705624107820,"duration":915}},{"uid":"6387f63c04aeb28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1505//#testresult/6387f63c04aeb28","status":"passed","time":{"start":1705537675218,"stop":1705537676343,"duration":1125}},{"uid":"8c4f14494c29739","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1500//#testresult/8c4f14494c29739","status":"passed","time":{"start":1705451296579,"stop":1705451297781,"duration":1202}},{"uid":"601756d1119644a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1499//#testresult/601756d1119644a7","status":"failed","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='liverpool.gov.uk', port=443): Max retries exceeded with url: /Bins/BinDatesTable?UPRN=38164600&User-Agent=Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F108.0.0.0+Safari%2F537.36 (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fe1034d88e0>, 'Connection to liverpool.gov.uk timed out. (connect timeout=None)'))","time":{"start":1705364914475,"stop":1705365044076,"duration":129601}},{"uid":"e1dd97a97aae8fbd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1492//#testresult/e1dd97a97aae8fbd","status":"passed","time":{"start":1705295633140,"stop":1705295634518,"duration":1378}},{"uid":"241fb81f867b11f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1491//#testresult/241fb81f867b11f6","status":"passed","time":{"start":1705295146063,"stop":1705295147030,"duration":967}},{"uid":"27e341dd5c09a064","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1490//#testresult/27e341dd5c09a064","status":"passed","time":{"start":1705278553586,"stop":1705278555098,"duration":1512}},{"uid":"4f00864ccfe630fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1485//#testresult/4f00864ccfe630fa","status":"passed","time":{"start":1705192215969,"stop":1705192217166,"duration":1197}},{"uid":"67b44ea833760e1b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1484//#testresult/67b44ea833760e1b","status":"passed","time":{"start":1705105633343,"stop":1705105634245,"duration":902}},{"uid":"d00242b4bf5fd72c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1482//#testresult/d00242b4bf5fd72c","status":"passed","time":{"start":1705019255680,"stop":1705019256942,"duration":1262}},{"uid":"da271a68c0ef73b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1478//#testresult/da271a68c0ef73b6","status":"passed","time":{"start":1704932841420,"stop":1704932842113,"duration":693}},{"uid":"1543820fcfa64b58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1472//#testresult/1543820fcfa64b58","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1704846469634,"stop":1704846470543,"duration":909}},{"uid":"6fd629f8093c7a14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1456//#testresult/6fd629f8093c7a14","status":"passed","time":{"start":1704760116004,"stop":1704760117211,"duration":1207}},{"uid":"4d3513e9ac369ea8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1452//#testresult/4d3513e9ac369ea8","status":"passed","time":{"start":1704711540026,"stop":1704711541240,"duration":1214}},{"uid":"8ed1964aad302184","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1450//#testresult/8ed1964aad302184","status":"passed","time":{"start":1704710729044,"stop":1704710730199,"duration":1155}},{"uid":"4bde725c0a849710","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1448//#testresult/4bde725c0a849710","status":"passed","time":{"start":1704710125123,"stop":1704710126300,"duration":1177}},{"uid":"2590a2e9105e9c3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1446//#testresult/2590a2e9105e9c3a","status":"passed","time":{"start":1704709660342,"stop":1704709661176,"duration":834}}]},"tags":[]},"source":"a257358f57cd1950.json","parameterValues":["LiverpoolCityCouncil","None","None"]}