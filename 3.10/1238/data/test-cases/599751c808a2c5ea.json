{"uid":"599751c808a2c5ea","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1702447590909,"stop":1702447592628,"duration":1719},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f0a419103a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0a419ae200>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f0a419ae200>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f0a419103a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0a419ae200>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f0a419ae200>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1702447590909,"stop":1702447590909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1702447590910,"stop":1702447592625,"duration":1715},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702447592626,"stop":1702447592626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702447592626,"stop":1702447592628,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1206-703"},{"name":"thread","value":"2735-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":43,"unknown":0,"total":69},"items":[{"uid":"242694aec02c2a9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1237//#testresult/242694aec02c2a9a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447513202,"stop":1702447515461,"duration":2259}},{"uid":"b16e589ab5e500c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1236//#testresult/b16e589ab5e500c8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430453718,"stop":1702430456059,"duration":2341}},{"uid":"37a4a9beccbae088","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/37a4a9beccbae088","status":"passed","time":{"start":1702366556314,"stop":1702366557369,"duration":1055}},{"uid":"d93ffeee50d144b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/d93ffeee50d144b4","status":"passed","time":{"start":1702344025102,"stop":1702344027652,"duration":2550}},{"uid":"a8e92ad993c09a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/a8e92ad993c09a2","status":"passed","time":{"start":1702257624605,"stop":1702257625872,"duration":1267}},{"uid":"bbe781ee02d934f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/bbe781ee02d934f4","status":"passed","time":{"start":1702171672557,"stop":1702171674805,"duration":2248}},{"uid":"5e977080f60e0eaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/5e977080f60e0eaf","status":"passed","time":{"start":1702084739147,"stop":1702084742910,"duration":3763}},{"uid":"54854066d1a8739e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/54854066d1a8739e","status":"passed","time":{"start":1702066802593,"stop":1702066804311,"duration":1718}},{"uid":"8c92f0fdd6b3027f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/8c92f0fdd6b3027f","status":"passed","time":{"start":1702054443229,"stop":1702054444924,"duration":1695}},{"uid":"3a419fe39fb7133","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/3a419fe39fb7133","status":"passed","time":{"start":1701998478356,"stop":1701998480273,"duration":1917}},{"uid":"2af8f2f875a12f71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/2af8f2f875a12f71","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990449136,"stop":1701990450826,"duration":1690}},{"uid":"216a81b21a470fda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/216a81b21a470fda","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990400164,"stop":1701990401721,"duration":1557}},{"uid":"fb1e7f64bc00002f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/fb1e7f64bc00002f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942864877,"stop":1701942868981,"duration":4104}},{"uid":"e8416f14e9d385b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/e8416f14e9d385b8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936602059,"stop":1701936606112,"duration":4053}},{"uid":"e5ab8ca5228eb233","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/e5ab8ca5228eb233","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936560049,"stop":1701936564924,"duration":4875}},{"uid":"99e30b24df973d49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/99e30b24df973d49","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701912053381,"stop":1701912055104,"duration":1723}},{"uid":"e5679ccfe75ce365","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/e5679ccfe75ce365","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904918970,"stop":1701904921085,"duration":2115}},{"uid":"662437a507bb6ad3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/662437a507bb6ad3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882575324,"stop":1701882576857,"duration":1533}},{"uid":"38c701bf5dbdb260","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/38c701bf5dbdb260","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825607697,"stop":1701825612369,"duration":4672}},{"uid":"c541106eda470811","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/c541106eda470811","status":"passed","time":{"start":1701795621075,"stop":1701795622400,"duration":1325}}]},"tags":[]},"source":"599751c808a2c5ea.json","parameterValues":["SouthNorfolkCouncil","None","None"]}