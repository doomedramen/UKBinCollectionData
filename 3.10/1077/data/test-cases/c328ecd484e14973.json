{"uid":"c328ecd484e14973","name":"Validate Council Output [NorthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5f199ed7bccd24a997d0abd44066cd21","time":{"start":1698715028788,"stop":1698715040801,"duration":12013},"status":"failed","statusMessage":"NotImplementedError: Country GB does not have subdivision Eng","statusTrace":"fixturefunc = <function scrape_step at 0x7f9dd1b5ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f9dd0186830>, 'council': 'NorthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthTynesideCouncil.py:184: in parse_data\n    if is_holiday(item_as_date, Region.ENG):\nuk_bin_collection/uk_bin_collection/common.py:149: in is_holiday\n    uk_holidays = holidays.country_holidays(\"GB\", subdiv=subdiv)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/utils.py:187: in country_holidays\n    return getattr(holidays, country)(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/registry.py:195: in __call__\n    return cls(*args, **kwargs)  # type: ignore[misc, operator]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/countries/united_kingdom.py:64: in __init__\n    super().__init__(observed_rule=SAT_SUN_TO_NEXT_MON, *args, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/observed_holiday_base.py:100: in __init__\n    super().__init__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = holidays.country_holidays('GB', subdiv='Eng'), years = None\nexpand = True, observed = True, subdiv = 'Eng', prov = None, state = None\nlanguage = None, categories = None\n\n    def __init__(\n        self,\n        years: Optional[Union[int, Iterable[int]]] = None,\n        expand: bool = True,\n        observed: bool = True,\n        subdiv: Optional[str] = None,\n        prov: Optional[str] = None,  # Deprecated.\n        state: Optional[str] = None,  # Deprecated.\n        language: Optional[str] = None,\n        categories: Optional[Tuple[str]] = None,\n    ) -> None:\n        \"\"\"\n        :param years:\n            The year(s) to pre-calculate public holidays for at instantiation.\n    \n        :param expand:\n            Whether the entire year is calculated when one date from that year\n            is requested.\n    \n        :param observed:\n            Whether to include the dates when public holiday are observed\n            (e.g. a holiday falling on a Sunday being observed the\n            following Monday). This doesn't work for all countries.\n    \n        :param subdiv:\n            The subdivision (e.g. state or province); not implemented for all\n            countries (see documentation).\n    \n        :param prov:\n            *deprecated* use subdiv instead.\n    \n        :param state:\n            *deprecated* use subdiv instead.\n    \n        :param language:\n            The language which the returned holiday names will be translated\n            into. It must be an ISO 639-1 (2-letter) language code. If the\n            language translation is not supported the original holiday names\n            will be used.\n    \n        :param categories:\n            Requested holiday categories.\n    \n        :return:\n            A :class:`HolidayBase` object matching the **country**.\n        \"\"\"\n        super().__init__()\n    \n        self.expand = expand\n        self.language = language.lower() if language else None\n        self.observed = observed\n        self.subdiv = subdiv or prov or state\n        self.categories = set(categories) if categories else {PUBLIC}\n    \n        self.tr = gettext  # Default translation method.\n    \n        if prov or state:\n            warnings.warn(\n                f\"Arguments prov and state are deprecated, use subdiv='{prov or state}' instead.\",\n                DeprecationWarning,\n            )\n    \n        if isinstance(self.subdiv, int):\n            self.subdiv = str(self.subdiv)\n    \n        if not isinstance(self, HolidaySum):\n            if self.subdiv and self.subdiv not in set(\n                self.subdivisions + self._deprecated_subdivisions\n            ):\n>               raise NotImplementedError(\n                    f\"Market {self.market} does not have subdivision {self.subdiv}\"\n                    if hasattr(self, \"market\")\n                    else f\"Country {self.country} does not have subdivision {self.subdiv}\"\n                )\nE               NotImplementedError: Country GB does not have subdivision Eng\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/holiday_base.py:308: NotImplementedError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"NotImplementedError: Country GB does not have subdivision Eng","statusTrace":"fixturefunc = <function scrape_step at 0x7f9dd1b5ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f9dd0186830>, 'council': 'NorthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthTynesideCouncil.py:184: in parse_data\n    if is_holiday(item_as_date, Region.ENG):\nuk_bin_collection/uk_bin_collection/common.py:149: in is_holiday\n    uk_holidays = holidays.country_holidays(\"GB\", subdiv=subdiv)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/utils.py:187: in country_holidays\n    return getattr(holidays, country)(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/registry.py:195: in __call__\n    return cls(*args, **kwargs)  # type: ignore[misc, operator]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/countries/united_kingdom.py:64: in __init__\n    super().__init__(observed_rule=SAT_SUN_TO_NEXT_MON, *args, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/observed_holiday_base.py:100: in __init__\n    super().__init__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = holidays.country_holidays('GB', subdiv='Eng'), years = None\nexpand = True, observed = True, subdiv = 'Eng', prov = None, state = None\nlanguage = None, categories = None\n\n    def __init__(\n        self,\n        years: Optional[Union[int, Iterable[int]]] = None,\n        expand: bool = True,\n        observed: bool = True,\n        subdiv: Optional[str] = None,\n        prov: Optional[str] = None,  # Deprecated.\n        state: Optional[str] = None,  # Deprecated.\n        language: Optional[str] = None,\n        categories: Optional[Tuple[str]] = None,\n    ) -> None:\n        \"\"\"\n        :param years:\n            The year(s) to pre-calculate public holidays for at instantiation.\n    \n        :param expand:\n            Whether the entire year is calculated when one date from that year\n            is requested.\n    \n        :param observed:\n            Whether to include the dates when public holiday are observed\n            (e.g. a holiday falling on a Sunday being observed the\n            following Monday). This doesn't work for all countries.\n    \n        :param subdiv:\n            The subdivision (e.g. state or province); not implemented for all\n            countries (see documentation).\n    \n        :param prov:\n            *deprecated* use subdiv instead.\n    \n        :param state:\n            *deprecated* use subdiv instead.\n    \n        :param language:\n            The language which the returned holiday names will be translated\n            into. It must be an ISO 639-1 (2-letter) language code. If the\n            language translation is not supported the original holiday names\n            will be used.\n    \n        :param categories:\n            Requested holiday categories.\n    \n        :return:\n            A :class:`HolidayBase` object matching the **country**.\n        \"\"\"\n        super().__init__()\n    \n        self.expand = expand\n        self.language = language.lower() if language else None\n        self.observed = observed\n        self.subdiv = subdiv or prov or state\n        self.categories = set(categories) if categories else {PUBLIC}\n    \n        self.tr = gettext  # Default translation method.\n    \n        if prov or state:\n            warnings.warn(\n                f\"Arguments prov and state are deprecated, use subdiv='{prov or state}' instead.\",\n                DeprecationWarning,\n            )\n    \n        if isinstance(self.subdiv, int):\n            self.subdiv = str(self.subdiv)\n    \n        if not isinstance(self, HolidaySum):\n            if self.subdiv and self.subdiv not in set(\n                self.subdivisions + self._deprecated_subdivisions\n            ):\n>               raise NotImplementedError(\n                    f\"Market {self.market} does not have subdivision {self.subdiv}\"\n                    if hasattr(self, \"market\")\n                    else f\"Country {self.country} does not have subdivision {self.subdiv}\"\n                )\nE               NotImplementedError: Country GB does not have subdivision Eng\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/holidays/holiday_base.py:308: NotImplementedError","steps":[{"name":"Given the council: NorthTynesideCouncil","time":{"start":1698715028789,"stop":1698715028789,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from NorthTynesideCouncil","time":{"start":1698715028789,"stop":1698715040801,"duration":12012},"status":"failed","statusMessage":"Country GB does not have subdivision Eng","statusTrace":"NotImplementedError: Country GB does not have subdivision Eng\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az210-28"},{"name":"thread","value":"2247-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthTynesideCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":158,"unknown":0,"total":166},"items":[{"uid":"f3fcc17e01765cb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1075//#testresult/f3fcc17e01765cb6","status":"failed","statusDetails":"NotImplementedError: Country GB does not have subdivision Eng","time":{"start":1698701400539,"stop":1698701408322,"duration":7783}},{"uid":"68ba860f703dc9d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1073//#testresult/68ba860f703dc9d5","status":"passed","time":{"start":1698700254608,"stop":1698700259853,"duration":5245}},{"uid":"63700010bb15efc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1070//#testresult/63700010bb15efc9","status":"passed","time":{"start":1698692896571,"stop":1698692897900,"duration":1329}},{"uid":"739feac8eca70a8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/739feac8eca70a8d","status":"passed","time":{"start":1698692764880,"stop":1698692770149,"duration":5269}},{"uid":"da4e73625ffb19d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/da4e73625ffb19d","status":"passed","time":{"start":1698646380313,"stop":1698646386556,"duration":6243}},{"uid":"17377b76348a5d90","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/17377b76348a5d90","status":"passed","time":{"start":1698628597293,"stop":1698628603432,"duration":6139}},{"uid":"f269d9897876e0a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/f269d9897876e0a7","status":"passed","time":{"start":1698615210439,"stop":1698615218809,"duration":8370}},{"uid":"3cca0f70ae582ab6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1061//#testresult/3cca0f70ae582ab6","status":"passed","time":{"start":1698615116081,"stop":1698615117747,"duration":1666}},{"uid":"f1517ff5b8939c8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/f1517ff5b8939c8f","status":"passed","time":{"start":1698542382606,"stop":1698542385029,"duration":2423}},{"uid":"bf918bbf5866a745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/bf918bbf5866a745","status":"passed","time":{"start":1698455591929,"stop":1698455597746,"duration":5817}},{"uid":"a5451fb0639820ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1051//#testresult/a5451fb0639820ff","status":"passed","time":{"start":1698369262806,"stop":1698369268323,"duration":5517}},{"uid":"cb08544ba9862589","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1050//#testresult/cb08544ba9862589","status":"passed","time":{"start":1698282858118,"stop":1698282863467,"duration":5349}},{"uid":"c9234c0e6f5595b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1049//#testresult/c9234c0e6f5595b9","status":"passed","time":{"start":1698196523091,"stop":1698196528457,"duration":5366}},{"uid":"287753027f9a16e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1048//#testresult/287753027f9a16e8","status":"passed","time":{"start":1698178246247,"stop":1698178252232,"duration":5985}},{"uid":"9ba649ead52778e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1047//#testresult/9ba649ead52778e7","status":"passed","time":{"start":1698178187451,"stop":1698178194319,"duration":6868}},{"uid":"3b2222d4fb3bcb2b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1046//#testresult/3b2222d4fb3bcb2b","status":"passed","time":{"start":1698110112386,"stop":1698110113960,"duration":1574}},{"uid":"8c6db1c27e1e70e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/8c6db1c27e1e70e6","status":"passed","time":{"start":1698064874574,"stop":1698064879809,"duration":5235}},{"uid":"a2cd0c0b12fe53d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/a2cd0c0b12fe53d6","status":"passed","time":{"start":1698064908743,"stop":1698064914437,"duration":5694}},{"uid":"6bc9ab8601a1eac8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/6bc9ab8601a1eac8","status":"passed","time":{"start":1698023786890,"stop":1698023788871,"duration":1981}},{"uid":"6dcb2d991ca449a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/6dcb2d991ca449a0","status":"passed","time":{"start":1697937667354,"stop":1697937673715,"duration":6361}}]},"tags":[]},"source":"c328ecd484e14973.json","parameterValues":["NorthTynesideCouncil"]}