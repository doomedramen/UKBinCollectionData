{"uid":"e66fad4e1ea3b95c","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1702843514932,"stop":1702843524469,"duration":9537},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff69ee3beb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff69e17fa60>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff69e17fa60>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff69ee3beb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff69e17fa60>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff69e17fa60>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1702843514932,"stop":1702843514933,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1702843514933,"stop":1702843524467,"duration":9534},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702843524467,"stop":1702843524467,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702843524468,"stop":1702843524469,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1251-712"},{"name":"thread","value":"2784-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":75,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":75},"items":[{"uid":"a539e03251a95ec8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1270//#testresult/a539e03251a95ec8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809358621,"stop":1702809368523,"duration":9902}},{"uid":"d48c3554d8806a1b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1247//#testresult/d48c3554d8806a1b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657114281,"stop":1702657123648,"duration":9367}},{"uid":"31fa8004a2f2cc86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1244//#testresult/31fa8004a2f2cc86","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603159492,"stop":1702603185768,"duration":26276}},{"uid":"c740c78ceae0c6fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1243//#testresult/c740c78ceae0c6fd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540027619,"stop":1702540036705,"duration":9086}},{"uid":"756b382c2abfa906","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1241//#testresult/756b382c2abfa906","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516654247,"stop":1702516663117,"duration":8870}},{"uid":"5c833ad7edd39dd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1238//#testresult/5c833ad7edd39dd4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447457845,"stop":1702447467606,"duration":9761}},{"uid":"ed47873d99aeaecc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1237//#testresult/ed47873d99aeaecc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447419412,"stop":1702447428719,"duration":9307}},{"uid":"2906ceccfd7e1b06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1236//#testresult/2906ceccfd7e1b06","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430309479,"stop":1702430318743,"duration":9264}},{"uid":"f4a8cc3c71f7742b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/f4a8cc3c71f7742b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366476733,"stop":1702366486156,"duration":9423}},{"uid":"7a00b32518725eff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/7a00b32518725eff","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343931187,"stop":1702343957658,"duration":26471}},{"uid":"57b4641cc6fe9a6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/57b4641cc6fe9a6c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257529354,"stop":1702257538718,"duration":9364}},{"uid":"439ce9a168c05cb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/439ce9a168c05cb8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171374290,"stop":1702171575061,"duration":200771}},{"uid":"2e498ddd88913f52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/2e498ddd88913f52","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084613955,"stop":1702084623365,"duration":9410}},{"uid":"c311fa1769562cf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/c311fa1769562cf8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066700729,"stop":1702066710616,"duration":9887}},{"uid":"1cd4539f9dfacbef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/1cd4539f9dfacbef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054340691,"stop":1702054350212,"duration":9521}},{"uid":"1cb31ca259a99c6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/1cb31ca259a99c6b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998344975,"stop":1701998370190,"duration":25215}},{"uid":"1b5a12f5de3b4a25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/1b5a12f5de3b4a25","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990352838,"stop":1701990362059,"duration":9221}},{"uid":"68e9b37cec028702","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/68e9b37cec028702","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990321110,"stop":1701990329906,"duration":8796}},{"uid":"e0f1c66faf374ba7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/e0f1c66faf374ba7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942762642,"stop":1701942772064,"duration":9422}},{"uid":"6a60b43cedd79d02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/6a60b43cedd79d02","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936464572,"stop":1701936474588,"duration":10016}}]},"tags":[]},"source":"e66fad4e1ea3b95c.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}