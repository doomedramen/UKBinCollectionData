{"uid":"67c787b32002104c","name":"Validate Council Output [BuryCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a4aaab859b0cc98805b6ab39b299e88b","time":{"start":1707265508444,"stop":1707265539921,"duration":31477},"status":"failed","statusMessage":"ConnectionAbortedError: Issue encountered getting bin data.","statusTrace":"fixturefunc = <function scrape_step at 0x7ff9c561f2e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuryCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff9c4878700>, 'council': 'BuryCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BuryCouncil.CouncilClass object at 0x7ff9c48dbfd0>, page = ''\nkwargs = {'headless': True, 'paon': '3', 'postcode': 'M26 3XY', 'uprn': None, ...}\ncollections = [], data = {'bins': []}, postcode = 'M26 3XY'\naddr_response = <Response [200]>\naddress_json = [{'addressLine1': '1 Burghley Drive', 'city': 'Radcliffe', 'id': '603448', 'postcode': 'M26 3XY'}, {'addressLine1': '3...de': 'M26 3XY'}, {'addressLine1': '7 Burghley Drive', 'city': 'Radcliffe', 'id': '603453', 'postcode': 'M26 3XY'}, ...]\naddr = {'addressLine1': '3 Burghley Drive', 'city': 'Radcliffe', 'id': '603449', 'postcode': 'M26 3XY'}\nresponse = <Response [404]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        collections = []\n        data = {\"bins\": []}\n    \n        # Get and check postcode and PAON\n        postcode = kwargs.get(\"postcode\")\n        paon = kwargs.get(\"paon\")\n        check_postcode(postcode)\n        check_paon(paon)\n    \n        # Make API call to get property info using postcode\n        addr_response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getProperties?postcode={postcode.replace(\" \", \"\")}'\n        )\n        if addr_response.status_code != 200:\n            raise ConnectionAbortedError(\"Issue encountered getting addresses.\")\n        address_json = json.loads(addr_response.text)[\"response\"]\n    \n        # This makes addr the next item that has the house number. Since these are ordered by house number, a single\n        # number like 3 wouldn't return 33\n        addr = next(item for item in address_json if paon in item[\"addressLine1\"])\n    \n        # Make API call to get bin data using property ID\n        response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getPropertyById?id={addr.get(\"id\")}'\n        )\n        if response.status_code != 200:\n>           raise ConnectionAbortedError(\"Issue encountered getting bin data.\")\nE           ConnectionAbortedError: Issue encountered getting bin data.\n\nuk_bin_collection/uk_bin_collection/councils/BuryCouncil.py:42: ConnectionAbortedError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ConnectionAbortedError: Issue encountered getting bin data.","statusTrace":"fixturefunc = <function scrape_step at 0x7ff9c561f2e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuryCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff9c4878700>, 'council': 'BuryCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BuryCouncil.CouncilClass object at 0x7ff9c48dbfd0>, page = ''\nkwargs = {'headless': True, 'paon': '3', 'postcode': 'M26 3XY', 'uprn': None, ...}\ncollections = [], data = {'bins': []}, postcode = 'M26 3XY'\naddr_response = <Response [200]>\naddress_json = [{'addressLine1': '1 Burghley Drive', 'city': 'Radcliffe', 'id': '603448', 'postcode': 'M26 3XY'}, {'addressLine1': '3...de': 'M26 3XY'}, {'addressLine1': '7 Burghley Drive', 'city': 'Radcliffe', 'id': '603453', 'postcode': 'M26 3XY'}, ...]\naddr = {'addressLine1': '3 Burghley Drive', 'city': 'Radcliffe', 'id': '603449', 'postcode': 'M26 3XY'}\nresponse = <Response [404]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        collections = []\n        data = {\"bins\": []}\n    \n        # Get and check postcode and PAON\n        postcode = kwargs.get(\"postcode\")\n        paon = kwargs.get(\"paon\")\n        check_postcode(postcode)\n        check_paon(paon)\n    \n        # Make API call to get property info using postcode\n        addr_response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getProperties?postcode={postcode.replace(\" \", \"\")}'\n        )\n        if addr_response.status_code != 200:\n            raise ConnectionAbortedError(\"Issue encountered getting addresses.\")\n        address_json = json.loads(addr_response.text)[\"response\"]\n    \n        # This makes addr the next item that has the house number. Since these are ordered by house number, a single\n        # number like 3 wouldn't return 33\n        addr = next(item for item in address_json if paon in item[\"addressLine1\"])\n    \n        # Make API call to get bin data using property ID\n        response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getPropertyById?id={addr.get(\"id\")}'\n        )\n        if response.status_code != 200:\n>           raise ConnectionAbortedError(\"Issue encountered getting bin data.\")\nE           ConnectionAbortedError: Issue encountered getting bin data.\n\nuk_bin_collection/uk_bin_collection/councils/BuryCouncil.py:42: ConnectionAbortedError","steps":[{"name":"Given the council: BuryCouncil","time":{"start":1707265508444,"stop":1707265508445,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BuryCouncil using None and the None is set","time":{"start":1707265508445,"stop":1707265539921,"duration":31476},"status":"failed","statusMessage":"Issue encountered getting bin data.","statusTrace":"ConnectionAbortedError: Issue encountered getting bin data.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1016-395"},{"name":"thread","value":"2712-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BuryCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":183,"unknown":0,"total":184},"items":[{"uid":"e09910e3e9313245","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1549//#testresult/e09910e3e9313245","status":"passed","time":{"start":1707179184785,"stop":1707179186214,"duration":1429}},{"uid":"3238330fdd5fc980","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/3238330fdd5fc980","status":"passed","time":{"start":1707092961220,"stop":1707092962616,"duration":1396}},{"uid":"c0d9054b31902ef2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/c0d9054b31902ef2","status":"passed","time":{"start":1707006549774,"stop":1707006551391,"duration":1617}},{"uid":"9fee25b2bd7a8997","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1545//#testresult/9fee25b2bd7a8997","status":"passed","time":{"start":1706941915268,"stop":1706941916819,"duration":1551}},{"uid":"ce399d772cfd0e39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1544//#testresult/ce399d772cfd0e39","status":"passed","time":{"start":1706938989943,"stop":1706938991367,"duration":1424}},{"uid":"2cf9f7eb50422c1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1542//#testresult/2cf9f7eb50422c1a","status":"passed","time":{"start":1706938481208,"stop":1706938482780,"duration":1572}},{"uid":"ca061f258eb38fba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1541//#testresult/ca061f258eb38fba","status":"passed","time":{"start":1706920012900,"stop":1706920014890,"duration":1990}},{"uid":"fd1ac73197a8e22b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1540//#testresult/fd1ac73197a8e22b","status":"passed","time":{"start":1706833568924,"stop":1706833570586,"duration":1662}},{"uid":"1f64e7c4b120c41b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1538//#testresult/1f64e7c4b120c41b","status":"passed","time":{"start":1706747295439,"stop":1706747297266,"duration":1827}},{"uid":"3cf8f705807713d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1537//#testresult/3cf8f705807713d5","status":"passed","time":{"start":1706660857525,"stop":1706660859932,"duration":2407}},{"uid":"af7db546a896d838","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1535//#testresult/af7db546a896d838","status":"passed","time":{"start":1706574354829,"stop":1706574358561,"duration":3732}},{"uid":"dd8e9202ab5f575f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1534//#testresult/dd8e9202ab5f575f","status":"passed","time":{"start":1706488034773,"stop":1706488037115,"duration":2342}},{"uid":"d846efc83199292","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1531//#testresult/d846efc83199292","status":"passed","time":{"start":1706401722841,"stop":1706401724665,"duration":1824}},{"uid":"e08e0a1b371d0c52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1529//#testresult/e08e0a1b371d0c52","status":"passed","time":{"start":1706315184551,"stop":1706315186178,"duration":1627}},{"uid":"fd468cb8fde412bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1528//#testresult/fd468cb8fde412bc","status":"passed","time":{"start":1706228808565,"stop":1706228811117,"duration":2552}},{"uid":"e7b78f08bfc80831","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1523//#testresult/e7b78f08bfc80831","status":"passed","time":{"start":1706142518962,"stop":1706142520885,"duration":1923}},{"uid":"80ceaa322cf10710","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1522//#testresult/80ceaa322cf10710","status":"passed","time":{"start":1706056120541,"stop":1706056122375,"duration":1834}},{"uid":"ab4630ed28c782bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1521//#testresult/ab4630ed28c782bd","status":"passed","time":{"start":1705969735152,"stop":1705969737322,"duration":2170}},{"uid":"9088f501514bb8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1520//#testresult/9088f501514bb8f","status":"passed","time":{"start":1705883382251,"stop":1705883385263,"duration":3012}},{"uid":"52a10ec88531b5d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1519//#testresult/52a10ec88531b5d7","status":"passed","time":{"start":1705797045359,"stop":1705797047283,"duration":1924}}]},"tags":[]},"source":"67c787b32002104c.json","parameterValues":["BuryCouncil","None","None"]}