{"uid":"8176167fd7d969e2","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1698064777629,"stop":1698064779300,"duration":1671},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fcc4ec8edd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcc421e1ea0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fcc4ec8edd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcc421e1ea0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1698064777629,"stop":1698064777630,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1698064777630,"stop":1698064779300,"duration":1670},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az445-542"},{"name":"thread","value":"2149-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":127,"unknown":0,"total":149},"items":[{"uid":"f334b5a6ad9e14d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/f334b5a6ad9e14d0","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698064817074,"stop":1698064818929,"duration":1855}},{"uid":"2f477ed1b697e27f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/2f477ed1b697e27f","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698023671690,"stop":1698023674796,"duration":3106}},{"uid":"5515d15639044d8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/5515d15639044d8b","status":"passed","time":{"start":1697937534660,"stop":1697937537346,"duration":2686}},{"uid":"d9daf2e1d91f7abf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/d9daf2e1d91f7abf","status":"passed","time":{"start":1697850723415,"stop":1697850725616,"duration":2201}},{"uid":"eb06e33c45d91997","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1037//#testresult/eb06e33c45d91997","status":"passed","time":{"start":1697790327141,"stop":1697790330663,"duration":3522}},{"uid":"38382973aa449eba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1036//#testresult/38382973aa449eba","status":"passed","time":{"start":1697790314950,"stop":1697790316867,"duration":1917}},{"uid":"ac0b797fb1df9d7d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1034//#testresult/ac0b797fb1df9d7d","status":"passed","time":{"start":1697764436713,"stop":1697764438870,"duration":2157}},{"uid":"656c10072f3a2797","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/656c10072f3a2797","status":"passed","time":{"start":1697706470043,"stop":1697706472180,"duration":2137}},{"uid":"f122ba7c58963e71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/f122ba7c58963e71","status":"passed","time":{"start":1697706435985,"stop":1697706437892,"duration":1907}},{"uid":"267a95e6cce935fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/267a95e6cce935fd","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702047432,"stop":1697702047433,"duration":1}},{"uid":"7d53756211226c58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/7d53756211226c58","status":"passed","time":{"start":1697696125381,"stop":1697696128077,"duration":2696}},{"uid":"f63383afea76f10f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/f63383afea76f10f","status":"passed","time":{"start":1697678035867,"stop":1697678037403,"duration":1536}},{"uid":"3879c3078e394e6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/3879c3078e394e6c","status":"passed","time":{"start":1697666530493,"stop":1697666532697,"duration":2204}},{"uid":"34f37c272b8d77bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/34f37c272b8d77bb","status":"passed","time":{"start":1697666483979,"stop":1697666485890,"duration":1911}},{"uid":"7e4661b73b79677e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/7e4661b73b79677e","status":"passed","time":{"start":1697656775623,"stop":1697656777855,"duration":2232}},{"uid":"41f1acfa686b753e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/41f1acfa686b753e","status":"passed","time":{"start":1697656734568,"stop":1697656736720,"duration":2152}},{"uid":"8b94dddd3dfecce5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/8b94dddd3dfecce5","status":"passed","time":{"start":1697649994013,"stop":1697649996728,"duration":2715}},{"uid":"f97dfe0fe252ceaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/f97dfe0fe252ceaa","status":"passed","time":{"start":1697618230834,"stop":1697618232606,"duration":1772}},{"uid":"94c84b0e220f9dee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/94c84b0e220f9dee","status":"passed","time":{"start":1697618192125,"stop":1697618193998,"duration":1873}},{"uid":"8da9dc7bf88450f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1010//#testresult/8da9dc7bf88450f","status":"passed","time":{"start":1697591667427,"stop":1697591669438,"duration":2011}}]},"tags":[]},"source":"8176167fd7d969e2.json","parameterValues":["CharnwoodBoroughCouncil"]}