{"uid":"94f7b6ba48bc478f","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1701714265699,"stop":1701714275658,"duration":9959},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f0ac5893400>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0ac41c0430>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f0ac41c0430>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f0ac5893400>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0ac41c0430>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f0ac41c0430>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1701714265700,"stop":1701714265700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1701714265700,"stop":1701714275655,"duration":9955},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701714275656,"stop":1701714275656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701714275656,"stop":1701714275658,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1247-286"},{"name":"thread","value":"2717-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":43},"items":[{"uid":"3cade8a0427b453f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/3cade8a0427b453f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652723035,"stop":1701652732638,"duration":9603}},{"uid":"b7737307cc190c50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/b7737307cc190c50","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701566515817,"stop":1701566717703,"duration":201886}},{"uid":"7977a262d67f6c15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/7977a262d67f6c15","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479698311,"stop":1701479723618,"duration":25307}},{"uid":"7215f0edbf49be35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/7215f0edbf49be35","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418941779,"stop":1701418951386,"duration":9607}},{"uid":"9c2a24ce1a38ec4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/9c2a24ce1a38ec4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418872535,"stop":1701418881980,"duration":9445}},{"uid":"10c7e87545dbcf99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/10c7e87545dbcf99","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414333691,"stop":1701414342957,"duration":9266}},{"uid":"5727f753e2c8e6dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/5727f753e2c8e6dd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414292659,"stop":1701414301939,"duration":9280}},{"uid":"474bb95b79932150","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/474bb95b79932150","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701393877149,"stop":1701394077886,"duration":200737}},{"uid":"fa627fb5282b7874","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/fa627fb5282b7874","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353324447,"stop":1701353334252,"duration":9805}},{"uid":"b445d8149761172a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/b445d8149761172a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307066770,"stop":1701307091943,"duration":25173}},{"uid":"9a3355840052ec38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/9a3355840052ec38","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279299336,"stop":1701279309184,"duration":9848}},{"uid":"2a2456f11c4628f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/2a2456f11c4628f7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279329887,"stop":1701279339753,"duration":9866}},{"uid":"f644562e63a1a1a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/f644562e63a1a1a3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220723453,"stop":1701220747131,"duration":23678}},{"uid":"bc65c1040e96f369","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/bc65c1040e96f369","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134337690,"stop":1701134361272,"duration":23582}},{"uid":"5ca8cab6b7400598","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/5ca8cab6b7400598","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701047887827,"stop":1701047897542,"duration":9715}},{"uid":"6a83e2b25bf297d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/6a83e2b25bf297d6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036123573,"stop":1701036133054,"duration":9481}},{"uid":"ef8f1bf5d8974ea3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/ef8f1bf5d8974ea3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036121811,"stop":1701036131535,"duration":9724}},{"uid":"cde4db3a261dbc35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/cde4db3a261dbc35","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961703729,"stop":1700961904996,"duration":201267}},{"uid":"db7298caa39aa2e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/db7298caa39aa2e7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874892244,"stop":1700874916431,"duration":24187}},{"uid":"c7394055a66fc61b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/c7394055a66fc61b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788557251,"stop":1700788566390,"duration":9139}}]},"tags":[]},"source":"94f7b6ba48bc478f.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}