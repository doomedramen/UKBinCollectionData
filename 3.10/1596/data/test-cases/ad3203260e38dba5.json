{"uid":"ad3203260e38dba5","name":"Validate Council Output [StratfordUponAvonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"509b870beccc9821c4386e0d8cd0e001","time":{"start":1709857721998,"stop":1709857727707,"duration":5709},"status":"failed","statusMessage":"jsonschema.exceptions.ValidationError: [] is too short\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\n\nOn instance['bins']:\n    []","statusTrace":"fixturefunc = <function validate_output_step at 0x7f7234743760>\nrequest = <FixtureRequest for <Function test_scenario_outline[StratfordUponAvonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7234285420>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:105: in validate_output_step\n    assert file_handler.validate_json_schema(\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:32: in validate_json_schema\n    validate(instance=json_data, schema=schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'bins': []}\nschema = {'$ref': '#/definitions/BinData', '$schema': 'http://json-schema.org/draft-06/schema#', 'definitions': {'Bin': {'addit...ems': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}}, 'required': ['bins'], 'title': 'BinData', ...}}}\ncls = <class 'jsonschema.validators.Draft6Validator'>, args = (), kwargs = {}\nvalidator = Draft6Validator(schema={'$ref': '#/definitions/BinData', '$schema': 'http://json-...ft-06/schema#', 'definitions': {'B...nitions/Bin'}, 'minItems': 1, 'type': 'array'}}, 'required': ['bins'], 'title': 'BinData', ...}}}, format_checker=None)\nerror = <ValidationError: '[] is too short'>\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: [] is too short\nE           \nE           Failed validating 'minItems' in schema['properties']['bins']:\nE               {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\nE           \nE           On instance['bins']:\nE               []\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/jsonschema/validators.py:1306: ValidationError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"jsonschema.exceptions.ValidationError: [] is too short\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\n\nOn instance['bins']:\n    []","statusTrace":"fixturefunc = <function validate_output_step at 0x7f7234743760>\nrequest = <FixtureRequest for <Function test_scenario_outline[StratfordUponAvonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7234285420>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:105: in validate_output_step\n    assert file_handler.validate_json_schema(\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:32: in validate_json_schema\n    validate(instance=json_data, schema=schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'bins': []}\nschema = {'$ref': '#/definitions/BinData', '$schema': 'http://json-schema.org/draft-06/schema#', 'definitions': {'Bin': {'addit...ems': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}}, 'required': ['bins'], 'title': 'BinData', ...}}}\ncls = <class 'jsonschema.validators.Draft6Validator'>, args = (), kwargs = {}\nvalidator = Draft6Validator(schema={'$ref': '#/definitions/BinData', '$schema': 'http://json-...ft-06/schema#', 'definitions': {'B...nitions/Bin'}, 'minItems': 1, 'type': 'array'}}, 'required': ['bins'], 'title': 'BinData', ...}}}, format_checker=None)\nerror = <ValidationError: '[] is too short'>\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: [] is too short\nE           \nE           Failed validating 'minItems' in schema['properties']['bins']:\nE               {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\nE           \nE           On instance['bins']:\nE               []\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/jsonschema/validators.py:1306: ValidationError","steps":[{"name":"Given the council: StratfordUponAvonCouncil","time":{"start":1709857721999,"stop":1709857721999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from StratfordUponAvonCouncil using None and the None is set","time":{"start":1709857721999,"stop":1709857727705,"duration":5706},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1709857727705,"stop":1709857727705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1709857727705,"stop":1709857727707,"duration":2},"status":"failed","statusMessage":"[] is too short\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\n\nOn instance['bins']:\n    []","statusTrace":"jsonschema.exceptions.ValidationError: [] is too short\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\n\nOn instance['bins']:\n    []\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1501-126"},{"name":"thread","value":"2876-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StratfordUponAvonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":202,"unknown":0,"total":205},"items":[{"uid":"392f6104d7f26ac7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1595//#testresult/392f6104d7f26ac7","status":"passed","time":{"start":1709771039346,"stop":1709771041209,"duration":1863}},{"uid":"e3d796a7e5cc832b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1594//#testresult/e3d796a7e5cc832b","status":"passed","time":{"start":1709684924176,"stop":1709684925621,"duration":1445}},{"uid":"21d254cb36513bf4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1593//#testresult/21d254cb36513bf4","status":"passed","time":{"start":1709598476478,"stop":1709598478628,"duration":2150}},{"uid":"8c583405860a90ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/8c583405860a90ec","status":"passed","time":{"start":1709512155572,"stop":1709512158190,"duration":2618}},{"uid":"ec4075f96aaacba2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/ec4075f96aaacba2","status":"passed","time":{"start":1708561696292,"stop":1708561697619,"duration":1327}},{"uid":"dc33d0e4888c9b70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/dc33d0e4888c9b70","status":"passed","time":{"start":1708475284559,"stop":1708475285819,"duration":1260}},{"uid":"272a50acb04a150a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/272a50acb04a150a","status":"passed","time":{"start":1708388880875,"stop":1708388882536,"duration":1661}},{"uid":"56a346b290268869","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/56a346b290268869","status":"passed","time":{"start":1708302611295,"stop":1708302612794,"duration":1499}},{"uid":"7185eca83284ed4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/7185eca83284ed4","status":"passed","time":{"start":1708216241409,"stop":1708216242765,"duration":1356}},{"uid":"c9c578e35aecea0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/c9c578e35aecea0","status":"passed","time":{"start":1708129682380,"stop":1708129696353,"duration":13973}},{"uid":"7e920e022734e7e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/7e920e022734e7e7","status":"passed","time":{"start":1708043283633,"stop":1708043285433,"duration":1800}},{"uid":"42a5e502a617b3fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/42a5e502a617b3fe","status":"passed","time":{"start":1707957005480,"stop":1707957006846,"duration":1366}},{"uid":"7903ac9288ba8a44","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/7903ac9288ba8a44","status":"passed","time":{"start":1707870505964,"stop":1707870507852,"duration":1888}},{"uid":"5e4184f5d8278ceb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1560//#testresult/5e4184f5d8278ceb","status":"passed","time":{"start":1707784141538,"stop":1707784143312,"duration":1774}},{"uid":"7d6ad158460d0144","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/7d6ad158460d0144","status":"passed","time":{"start":1707697755419,"stop":1707697757073,"duration":1654}},{"uid":"7f7f9a6cbbc81d9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/7f7f9a6cbbc81d9f","status":"passed","time":{"start":1707611437234,"stop":1707611438714,"duration":1480}},{"uid":"3695c9ab8bcf6e26","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/3695c9ab8bcf6e26","status":"passed","time":{"start":1707524857933,"stop":1707524860058,"duration":2125}},{"uid":"bb3451586235d86e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/bb3451586235d86e","status":"passed","time":{"start":1707438478966,"stop":1707438480809,"duration":1843}},{"uid":"2dd8ba4b11debb61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/2dd8ba4b11debb61","status":"passed","time":{"start":1707352104994,"stop":1707352106524,"duration":1530}},{"uid":"3202e0b410c82125","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1551//#testresult/3202e0b410c82125","status":"passed","time":{"start":1707265620642,"stop":1707265622033,"duration":1391}}]},"tags":[]},"source":"ad3203260e38dba5.json","parameterValues":["StratfordUponAvonCouncil","None","None"]}