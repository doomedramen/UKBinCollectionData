{"uid":"d2a153b36e18e674","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1702366505519,"stop":1702366515006,"duration":9487},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7eff71030790>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7eff5eab84c0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7eff5eab84c0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7eff71030790>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7eff5eab84c0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7eff5eab84c0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1702366505519,"stop":1702366505519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1702366505520,"stop":1702366515004,"duration":9484},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702366515004,"stop":1702366515004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702366515005,"stop":1702366515006,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az530-236"},{"name":"thread","value":"2783-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":66,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":66},"items":[{"uid":"7a00b32518725eff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/7a00b32518725eff","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343931187,"stop":1702343957658,"duration":26471}},{"uid":"57b4641cc6fe9a6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/57b4641cc6fe9a6c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257529354,"stop":1702257538718,"duration":9364}},{"uid":"439ce9a168c05cb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/439ce9a168c05cb8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171374290,"stop":1702171575061,"duration":200771}},{"uid":"2e498ddd88913f52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/2e498ddd88913f52","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084613955,"stop":1702084623365,"duration":9410}},{"uid":"c311fa1769562cf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/c311fa1769562cf8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066700729,"stop":1702066710616,"duration":9887}},{"uid":"1cd4539f9dfacbef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/1cd4539f9dfacbef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054340691,"stop":1702054350212,"duration":9521}},{"uid":"1cb31ca259a99c6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/1cb31ca259a99c6b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998344975,"stop":1701998370190,"duration":25215}},{"uid":"1b5a12f5de3b4a25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/1b5a12f5de3b4a25","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990352838,"stop":1701990362059,"duration":9221}},{"uid":"68e9b37cec028702","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/68e9b37cec028702","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990321110,"stop":1701990329906,"duration":8796}},{"uid":"e0f1c66faf374ba7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/e0f1c66faf374ba7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942762642,"stop":1701942772064,"duration":9422}},{"uid":"6a60b43cedd79d02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/6a60b43cedd79d02","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936464572,"stop":1701936474588,"duration":10016}},{"uid":"4b56d07679f94a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/4b56d07679f94a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936425400,"stop":1701936434868,"duration":9468}},{"uid":"567fa041248ff01d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/567fa041248ff01d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911903532,"stop":1701911929241,"duration":25709}},{"uid":"65cbd97d5ff418aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/65cbd97d5ff418aa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904837021,"stop":1701904845826,"duration":8805}},{"uid":"7135fb5b25ea0230","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/7135fb5b25ea0230","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882494781,"stop":1701882505810,"duration":11029}},{"uid":"8256382933aa576f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/8256382933aa576f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825520308,"stop":1701825547019,"duration":26711}},{"uid":"e56ed7a2c954852f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/e56ed7a2c954852f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795521033,"stop":1701795534862,"duration":13829}},{"uid":"b661977b08e5ab70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/b661977b08e5ab70","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795468985,"stop":1701795479226,"duration":10241}},{"uid":"2e279e135f8903a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/2e279e135f8903a8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758489433,"stop":1701758498899,"duration":9466}},{"uid":"70444d16b5480607","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/70444d16b5480607","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758496111,"stop":1701758506418,"duration":10307}}]},"tags":[]},"source":"d2a153b36e18e674.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}