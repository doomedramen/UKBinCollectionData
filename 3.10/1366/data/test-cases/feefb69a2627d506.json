{"uid":"feefb69a2627d506","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1704375871082,"stop":1704375872154,"duration":1072},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7effcb7bfa30>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7effc83fad10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7effc83fad10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7effcb7bfa30>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7effc83fad10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7effc83fad10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1704375871082,"stop":1704375871083,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1704375871083,"stop":1704375872151,"duration":1068},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"Then the result is valid json","time":{"start":1704375872152,"stop":1704375872152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"And the output should validate against the schema","time":{"start":1704375872152,"stop":1704375872154,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"host","value":"fv-az738-229"},{"name":"thread","value":"2690-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":123,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":123},"items":[{"uid":"f842982c7aad3284","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1363//#testresult/f842982c7aad3284","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356807271,"stop":1704356808312,"duration":1041}},{"uid":"b7fe7235acf9fa37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1361//#testresult/b7fe7235acf9fa37","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355957797,"stop":1704355959405,"duration":1608}},{"uid":"9df75e1aa476278c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1359//#testresult/9df75e1aa476278c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331105575,"stop":1704331106733,"duration":1158}},{"uid":"6e57658ce99510","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1355//#testresult/6e57658ce99510","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303745542,"stop":1704303746785,"duration":1243}},{"uid":"14160d29cafc88b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1354//#testresult/14160d29cafc88b4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303715534,"stop":1704303716691,"duration":1157}},{"uid":"beef1847938813df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1352//#testresult/beef1847938813df","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704301441585,"stop":1704301443229,"duration":1644}},{"uid":"7531e68f18b85be2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1349//#testresult/7531e68f18b85be2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244732401,"stop":1704244733633,"duration":1232}},{"uid":"9a2097404ab47921","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1348//#testresult/9a2097404ab47921","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704180240737,"stop":1704180241914,"duration":1177}},{"uid":"46edc17e6c73498c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1346//#testresult/46edc17e6c73498c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704158276696,"stop":1704158278267,"duration":1571}},{"uid":"a1f4d296f7b62b04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1345//#testresult/a1f4d296f7b62b04","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704114627621,"stop":1704114628913,"duration":1292}},{"uid":"191dbd3954549422","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1343//#testresult/191dbd3954549422","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704113715859,"stop":1704113717165,"duration":1306}},{"uid":"edd946a107f6e513","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1341//#testresult/edd946a107f6e513","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112250866,"stop":1704112252461,"duration":1595}},{"uid":"758c61c4b96e94e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/758c61c4b96e94e5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112101808,"stop":1704112103093,"duration":1285}},{"uid":"c7cbf76955b4333b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/c7cbf76955b4333b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112082262,"stop":1704112083965,"duration":1703}},{"uid":"35319911a186ae60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/35319911a186ae60","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111824786,"stop":1704111826079,"duration":1293}},{"uid":"1af974ce5d5732c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/1af974ce5d5732c6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111518827,"stop":1704111520014,"duration":1187}},{"uid":"62238c8b6e95c00f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/62238c8b6e95c00f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111473417,"stop":1704111474950,"duration":1533}},{"uid":"6b61defae9ce272b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/6b61defae9ce272b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111327643,"stop":1704111328875,"duration":1232}},{"uid":"996883d9e05c48d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1330//#testresult/996883d9e05c48d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704100019114,"stop":1704100020183,"duration":1069}},{"uid":"f51492a5cc0f8ff8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/f51492a5cc0f8ff8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704072588827,"stop":1704072590065,"duration":1238}}]},"tags":[]},"source":"feefb69a2627d506.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}