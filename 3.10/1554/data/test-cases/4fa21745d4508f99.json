{"uid":"4fa21745d4508f99","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1707524657133,"stop":1707524660308,"duration":3175},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f44ea55ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f44ea3d0190>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7f44ea3d0fd0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f44ea55ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f44ea3d0190>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7f44ea3d0fd0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1707524657134,"stop":1707524657135,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1707524657135,"stop":1707524660308,"duration":3173},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1110-386"},{"name":"thread","value":"2803-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":180,"unknown":0,"total":187},"items":[{"uid":"80eb01385aee8e68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/80eb01385aee8e68","status":"passed","time":{"start":1707438288753,"stop":1707438290158,"duration":1405}},{"uid":"7e0743fcdfb8a3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/7e0743fcdfb8a3d","status":"passed","time":{"start":1707351916090,"stop":1707351934737,"duration":18647}},{"uid":"733be859ab969dcb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1551//#testresult/733be859ab969dcb","status":"passed","time":{"start":1707265438982,"stop":1707265441525,"duration":2543}},{"uid":"40a58da1f7d3456","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1549//#testresult/40a58da1f7d3456","status":"passed","time":{"start":1707179110205,"stop":1707179111583,"duration":1378}},{"uid":"f0733642e027c1a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/f0733642e027c1a9","status":"passed","time":{"start":1707092847382,"stop":1707092848401,"duration":1019}},{"uid":"b25131e875961f87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/b25131e875961f87","status":"passed","time":{"start":1707006469653,"stop":1707006475554,"duration":5901}},{"uid":"860c583be5be2c50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1545//#testresult/860c583be5be2c50","status":"passed","time":{"start":1706941853287,"stop":1706941854314,"duration":1027}},{"uid":"bd40e09b0e3d2591","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1544//#testresult/bd40e09b0e3d2591","status":"passed","time":{"start":1706938932168,"stop":1706938933283,"duration":1115}},{"uid":"ff02b3003458754f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1542//#testresult/ff02b3003458754f","status":"passed","time":{"start":1706938412453,"stop":1706938413459,"duration":1006}},{"uid":"122c4a517a9bd75f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1541//#testresult/122c4a517a9bd75f","status":"passed","time":{"start":1706919945447,"stop":1706919953081,"duration":7634}},{"uid":"c922487f072fd8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1540//#testresult/c922487f072fd8b","status":"passed","time":{"start":1706833508983,"stop":1706833514173,"duration":5190}},{"uid":"4dd6ba41d2a9716a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1538//#testresult/4dd6ba41d2a9716a","status":"passed","time":{"start":1706747198614,"stop":1706747202552,"duration":3938}},{"uid":"1b718c3abf7a9f69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1537//#testresult/1b718c3abf7a9f69","status":"passed","time":{"start":1706660773086,"stop":1706660775114,"duration":2028}},{"uid":"a76d897286c80669","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1535//#testresult/a76d897286c80669","status":"passed","time":{"start":1706574297589,"stop":1706574300851,"duration":3262}},{"uid":"c1cca23651cc4be8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1534//#testresult/c1cca23651cc4be8","status":"passed","time":{"start":1706487957089,"stop":1706487960756,"duration":3667}},{"uid":"6bf874213639fcbe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1531//#testresult/6bf874213639fcbe","status":"passed","time":{"start":1706401652806,"stop":1706401653945,"duration":1139}},{"uid":"483a20496d1d5f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1529//#testresult/483a20496d1d5f4","status":"passed","time":{"start":1706315109004,"stop":1706315114890,"duration":5886}},{"uid":"66ffbbffd4029a35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1528//#testresult/66ffbbffd4029a35","status":"passed","time":{"start":1706228741003,"stop":1706228743982,"duration":2979}},{"uid":"1ff573f1c51348c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1523//#testresult/1ff573f1c51348c2","status":"passed","time":{"start":1706142439260,"stop":1706142446171,"duration":6911}},{"uid":"bd1e7b4fd2e8bbc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1522//#testresult/bd1e7b4fd2e8bbc5","status":"passed","time":{"start":1706056046483,"stop":1706056048202,"duration":1719}}]},"tags":[]},"source":"4fa21745d4508f99.json","parameterValues":["AylesburyValeCouncil","None","None"]}