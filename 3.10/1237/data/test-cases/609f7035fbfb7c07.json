{"uid":"609f7035fbfb7c07","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1702447429497,"stop":1702447431101,"duration":1604},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f83616bff40>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f834f81c730>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 13 December\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f83616bff40>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f834f81c730>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 13 December\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1702447429497,"stop":1702447429498,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1702447429498,"stop":1702447431101,"duration":1603},"status":"failed","statusMessage":"time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az847-311"},{"name":"thread","value":"2761-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":57,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":68},"items":[{"uid":"c229016823f70dca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1236//#testresult/c229016823f70dca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430337710,"stop":1702430338278,"duration":568}},{"uid":"27e310f1a3735920","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/27e310f1a3735920","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366504295,"stop":1702366504820,"duration":525}},{"uid":"dc7520b12cba75cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/dc7520b12cba75cf","status":"passed","time":{"start":1702343967152,"stop":1702343968756,"duration":1604}},{"uid":"c7ad12ff0da87284","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/c7ad12ff0da87284","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257554546,"stop":1702257555329,"duration":783}},{"uid":"61e81821ced6a9fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/61e81821ced6a9fa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171418479,"stop":1702171419283,"duration":804}},{"uid":"19537d74279dfe9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/19537d74279dfe9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084687741,"stop":1702084688493,"duration":752}},{"uid":"7468457bc3129b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/7468457bc3129b8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066732698,"stop":1702066733606,"duration":908}},{"uid":"d013b5c365363dad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/d013b5c365363dad","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054369092,"stop":1702054369889,"duration":797}},{"uid":"4639e09c107ad753","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/4639e09c107ad753","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998389470,"stop":1701998390237,"duration":767}},{"uid":"4b984622ef3de0d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/4b984622ef3de0d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990381183,"stop":1701990382018,"duration":835}},{"uid":"dad1daa74c9cf206","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/dad1daa74c9cf206","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990351886,"stop":1701990352716,"duration":830}},{"uid":"8a90f50eb92b4366","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/8a90f50eb92b4366","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942787785,"stop":1701942788824,"duration":1039}},{"uid":"73f3996f7161ff35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/73f3996f7161ff35","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936501669,"stop":1701936502532,"duration":863}},{"uid":"a89745d5ed53dc57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/a89745d5ed53dc57","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936446089,"stop":1701936447075,"duration":986}},{"uid":"29a4aae98a24cac5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/29a4aae98a24cac5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911959035,"stop":1701911960224,"duration":1189}},{"uid":"af2648469250e1b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/af2648469250e1b8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904867550,"stop":1701904868177,"duration":627}},{"uid":"1ef0742759888c52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/1ef0742759888c52","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882527990,"stop":1701882528767,"duration":777}},{"uid":"2da8a20694b9ee0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/2da8a20694b9ee0c","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","time":{"start":1701825557339,"stop":1701825558930,"duration":1591}},{"uid":"96ffb404d1879d6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/96ffb404d1879d6d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795554992,"stop":1701795555816,"duration":824}},{"uid":"9521306b42242fc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/9521306b42242fc5","status":"passed","time":{"start":1701795506322,"stop":1701795507814,"duration":1492}}]},"tags":[]},"source":"609f7035fbfb7c07.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}