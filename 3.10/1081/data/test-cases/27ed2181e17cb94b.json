{"uid":"27ed2181e17cb94b","name":"Validate Council Output [SwaleBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"af246d65f1eea891cf11ee497308965a","time":{"start":1698801788333,"stop":1698801791552,"duration":3219},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f951ed4e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SwaleBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f9512b4ecb0>, 'council': 'SwaleBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:61: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:57: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SwaleBoroughCouncil.CouncilClass object at 0x7f9510d8e920>, page = ''\nkwargs = {'paon': None, 'postcode': 'ME12 2NQ', 'uprn': '100061081168', 'url': 'https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days', ...}\nuser_postcode = 'ME12 2NQ', user_uprn = '100061081168'\ncouncil_url = 'https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode=ME12+2NQ&addresses=100061081168&address-submit='\nresponse = <Response [200]>\nsoup = <!--// Edit plus -->\n<!--// Edit plus end -->\n<!DOCTYPE html>\n\n<html lang=\"en-gb\" xmlns=\"http://www.w3.org/1999/xhtml\"...    //--> End cookies\n               \n            });\n        </script>\n<!--// EU Cookie banner end -->\n</body>\n</html>\ndata = {'bins': []}\nform_area = <form autocomplete=\"off\" class=\"integration bin-lookup\" method=\"GET\" name=\"bin-collection-form\">\n<fieldset id=\"tab1\">\n...e=\"change-postcode\" type=\"submit\" value=\"Try another post code\">try another post code</button>.</p> </fieldset>\n</form>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Get postcode and UPRN from kwargs\n        user_postcode = kwargs.get(\"postcode\")\n        user_uprn = kwargs.get(\"uprn\")\n        check_postcode(user_postcode)\n        check_uprn(user_uprn)\n    \n        # Build URL to parse\n        council_url = f\"https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode={user_postcode.replace(' ', '+')}&addresses={user_uprn}&address-submit=\"\n    \n        # Parse URL and read if connection successful\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(council_url, verify=False)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, features=\"html.parser\")\n            soup.prettify()\n        else:\n            raise ConnectionAbortedError(\"Could not parse council website.\")\n    \n        data = {\"bins\": []}\n    \n        # Get the collection bullet points on the page and parse them\n        form_area = soup.find(\"form\", {\"class\": \"integration bin-lookup\"})\n        collections = [\n            item.text.strip().split(\",\") for item in form_area.find_all(\"li\")\n        ]\n        for c in collections:\n            bin_type = c[0].strip()\n            # temp_date = c[2].strip() + \" \" + str(datetime.now().year)\n            bin_date = datetime.strptime(\n>               c[2].strip() + \" \" + str(datetime.now().year), \"%d %B %Y\"\n            ).strftime(date_format)\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/SwaleBoroughCouncil.py:48: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f951ed4e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SwaleBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f9512b4ecb0>, 'council': 'SwaleBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:61: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:57: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SwaleBoroughCouncil.CouncilClass object at 0x7f9510d8e920>, page = ''\nkwargs = {'paon': None, 'postcode': 'ME12 2NQ', 'uprn': '100061081168', 'url': 'https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days', ...}\nuser_postcode = 'ME12 2NQ', user_uprn = '100061081168'\ncouncil_url = 'https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode=ME12+2NQ&addresses=100061081168&address-submit='\nresponse = <Response [200]>\nsoup = <!--// Edit plus -->\n<!--// Edit plus end -->\n<!DOCTYPE html>\n\n<html lang=\"en-gb\" xmlns=\"http://www.w3.org/1999/xhtml\"...    //--> End cookies\n               \n            });\n        </script>\n<!--// EU Cookie banner end -->\n</body>\n</html>\ndata = {'bins': []}\nform_area = <form autocomplete=\"off\" class=\"integration bin-lookup\" method=\"GET\" name=\"bin-collection-form\">\n<fieldset id=\"tab1\">\n...e=\"change-postcode\" type=\"submit\" value=\"Try another post code\">try another post code</button>.</p> </fieldset>\n</form>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Get postcode and UPRN from kwargs\n        user_postcode = kwargs.get(\"postcode\")\n        user_uprn = kwargs.get(\"uprn\")\n        check_postcode(user_postcode)\n        check_uprn(user_uprn)\n    \n        # Build URL to parse\n        council_url = f\"https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode={user_postcode.replace(' ', '+')}&addresses={user_uprn}&address-submit=\"\n    \n        # Parse URL and read if connection successful\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(council_url, verify=False)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, features=\"html.parser\")\n            soup.prettify()\n        else:\n            raise ConnectionAbortedError(\"Could not parse council website.\")\n    \n        data = {\"bins\": []}\n    \n        # Get the collection bullet points on the page and parse them\n        form_area = soup.find(\"form\", {\"class\": \"integration bin-lookup\"})\n        collections = [\n            item.text.strip().split(\",\") for item in form_area.find_all(\"li\")\n        ]\n        for c in collections:\n            bin_type = c[0].strip()\n            # temp_date = c[2].strip() + \" \" + str(datetime.now().year)\n            bin_date = datetime.strptime(\n>               c[2].strip() + \" \" + str(datetime.now().year), \"%d %B %Y\"\n            ).strftime(date_format)\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/SwaleBoroughCouncil.py:48: IndexError","steps":[{"name":"Given the council: SwaleBoroughCouncil","time":{"start":1698801788333,"stop":1698801788334,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from SwaleBoroughCouncil","time":{"start":1698801788334,"stop":1698801791552,"duration":3218},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az441-541"},{"name":"thread","value":"2179-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SwaleBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":143,"broken":0,"skipped":0,"passed":25,"unknown":0,"total":168},"items":[{"uid":"5ec44e4c4a15ecb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1079//#testresult/5ec44e4c4a15ecb5","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1698788666066,"stop":1698788669111,"duration":3045}},{"uid":"a3f55e945210a77d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1077//#testresult/a3f55e945210a77d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1698715205575,"stop":1698715208826,"duration":3251}},{"uid":"df5b6055d3286408","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1075//#testresult/df5b6055d3286408","status":"passed","time":{"start":1698701589042,"stop":1698701591142,"duration":2100}},{"uid":"60ecd658497bf6d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1073//#testresult/60ecd658497bf6d6","status":"passed","time":{"start":1698700393042,"stop":1698700394195,"duration":1153}},{"uid":"73e8d7073b49470b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1070//#testresult/73e8d7073b49470b","status":"passed","time":{"start":1698693078651,"stop":1698693079756,"duration":1105}},{"uid":"fb7913c4da1a931f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/fb7913c4da1a931f","status":"passed","time":{"start":1698692903647,"stop":1698692933302,"duration":29655}},{"uid":"15d5090b3d14b81c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/15d5090b3d14b81c","status":"passed","time":{"start":1698646582912,"stop":1698646612289,"duration":29377}},{"uid":"c9c43b551db1f580","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/c9c43b551db1f580","status":"passed","time":{"start":1698628641629,"stop":1698628667087,"duration":25458}},{"uid":"6fca79c1db2b62bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/6fca79c1db2b62bf","status":"passed","time":{"start":1698615412284,"stop":1698615414191,"duration":1907}},{"uid":"5649973f872bd0d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1061//#testresult/5649973f872bd0d1","status":"passed","time":{"start":1698615297104,"stop":1698615298474,"duration":1370}},{"uid":"8f1c18328c11259e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/8f1c18328c11259e","status":"passed","time":{"start":1698542568532,"stop":1698542594270,"duration":25738}},{"uid":"1125f7b9c2638c71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/1125f7b9c2638c71","status":"passed","time":{"start":1698455636739,"stop":1698455665918,"duration":29179}},{"uid":"26969becfe1fd247","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1051//#testresult/26969becfe1fd247","status":"passed","time":{"start":1698369305475,"stop":1698369328966,"duration":23491}},{"uid":"c88812bdf2083059","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1050//#testresult/c88812bdf2083059","status":"passed","time":{"start":1698283068253,"stop":1698283088095,"duration":19842}},{"uid":"14265c2b2a73086f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1049//#testresult/14265c2b2a73086f","status":"passed","time":{"start":1698196718261,"stop":1698196745217,"duration":26956}},{"uid":"5c2babbbb4979501","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1048//#testresult/5c2babbbb4979501","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1698178442915,"stop":1698178444577,"duration":1662}},{"uid":"b2e451609847b13e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1047//#testresult/b2e451609847b13e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1698178379713,"stop":1698178381532,"duration":1819}},{"uid":"78a1ccd2c7e2167d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1046//#testresult/78a1ccd2c7e2167d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1698110279719,"stop":1698110280868,"duration":1149}},{"uid":"2131a8e510828b86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/2131a8e510828b86","status":"passed","time":{"start":1698065076771,"stop":1698065098003,"duration":21232}},{"uid":"8b6f98f4b63b023d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/8b6f98f4b63b023d","status":"passed","time":{"start":1698064956763,"stop":1698064974340,"duration":17577}}]},"tags":[]},"source":"27ed2181e17cb94b.json","parameterValues":["SwaleBoroughCouncil"]}