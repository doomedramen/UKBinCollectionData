{"uid":"c60e4b306795e888","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1700702403311,"stop":1700702408239,"duration":4928},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f1395d0f250>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f139415e8c0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f139415e8c0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f1395d0f250>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f139415e8c0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f139415e8c0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1700702403312,"stop":1700702403312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1700702403312,"stop":1700702408237,"duration":4925},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700702408237,"stop":1700702408237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700702408237,"stop":1700702408239,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az714-44"},{"name":"thread","value":"2710-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":22},"items":[{"uid":"9839231cb63ad18a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/9839231cb63ad18a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646449836,"stop":1700646454826,"duration":4990}},{"uid":"c4df751fce19504","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/c4df751fce19504","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616152492,"stop":1700616156773,"duration":4281}},{"uid":"a291d5d97e1af6b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/a291d5d97e1af6b6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529898182,"stop":1700529901109,"duration":2927}},{"uid":"c13e0907fe2fc4d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/c13e0907fe2fc4d7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443262816,"stop":1700443268946,"duration":6130}},{"uid":"9aea2e1d17898c81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/9aea2e1d17898c81","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357111026,"stop":1700357113144,"duration":2118}},{"uid":"2a51489eea171bf2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/2a51489eea171bf2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270441553,"stop":1700270445238,"duration":3685}},{"uid":"67ec1c5c46c2e0b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/67ec1c5c46c2e0b6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700184079709,"stop":1700184083231,"duration":3522}},{"uid":"cc564fb71fd7bf3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/cc564fb71fd7bf3a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097661732,"stop":1700097669237,"duration":7505}},{"uid":"f1b759209c0d8248","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/f1b759209c0d8248","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011384584,"stop":1700011386585,"duration":2001}},{"uid":"a154bcd5dd263965","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/a154bcd5dd263965","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924984982,"stop":1699924993353,"duration":8371}},{"uid":"1faa8141c64f7db6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1127//#testresult/1faa8141c64f7db6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838640362,"stop":1699838646111,"duration":5749}},{"uid":"e1169097746ae38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1126//#testresult/e1169097746ae38","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752245331,"stop":1699752248251,"duration":2920}},{"uid":"c2794cdcdf3e9151","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1125//#testresult/c2794cdcdf3e9151","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699669663040,"stop":1699669669785,"duration":6745}},{"uid":"17a55aeba6ee1054","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1124//#testresult/17a55aeba6ee1054","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699579064002,"stop":1699579067249,"duration":3247}},{"uid":"6ed795718e9a6693","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1123//#testresult/6ed795718e9a6693","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492751122,"stop":1699492755356,"duration":4234}},{"uid":"47b959e7637b89bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1121//#testresult/47b959e7637b89bd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481352224,"stop":1699481354499,"duration":2275}},{"uid":"470cbe97af0f772d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1117//#testresult/470cbe97af0f772d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445394419,"stop":1699445397239,"duration":2820}},{"uid":"912497f2ccff7cc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1115//#testresult/912497f2ccff7cc5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406594755,"stop":1699406597650,"duration":2895}},{"uid":"b8c85ba9bb0b941b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1114//#testresult/b8c85ba9bb0b941b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699320026253,"stop":1699320033595,"duration":7342}},{"uid":"7edd8392b0df2441","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1113//#testresult/7edd8392b0df2441","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233668446,"stop":1699233670417,"duration":1971}}]},"tags":[]},"source":"c60e4b306795e888.json","parameterValues":["WiltshireCouncil","None","None"]}