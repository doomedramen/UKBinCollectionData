{"uid":"96fe539ca5cb488a","name":"Validate Council Output [MertonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"36e8dead67440054ce559fdfe42912ec","time":{"start":1699060680267,"stop":1699060686267,"duration":6000},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f54bf2e2b90>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f54b7566f80>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:94: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f54b7566f80>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:89: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f54bf2e2b90>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f54b7566f80>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:94: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f54b7566f80>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:89: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1699060680267,"stop":1699060680268,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from MertonCouncil","time":{"start":1699060680268,"stop":1699060686264,"duration":5996},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1699060686264,"stop":1699060686264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1699060686265,"stop":1699060686267,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az400-886"},{"name":"thread","value":"2568-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":133,"broken":0,"skipped":0,"passed":43,"unknown":0,"total":176},"items":[{"uid":"5df50909f3902919","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1100//#testresult/5df50909f3902919","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699007833436,"stop":1699007839134,"duration":5698}},{"uid":"d8f617a9dc1b6ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1095//#testresult/d8f617a9dc1b6ab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698988597655,"stop":1698988599363,"duration":1708}},{"uid":"9620966f91c33678","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1094//#testresult/9620966f91c33678","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698974344384,"stop":1698974345986,"duration":1602}},{"uid":"4c9e76db8edf8f79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1091//#testresult/4c9e76db8edf8f79","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698887668529,"stop":1698887673957,"duration":5428}},{"uid":"7d0841cc10c2826f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1090//#testresult/7d0841cc10c2826f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878442490,"stop":1698878444035,"duration":1545}},{"uid":"c7e1103d39b0bd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1086//#testresult/c7e1103d39b0bd1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698867664356,"stop":1698867666506,"duration":2150}},{"uid":"811373d6ef99d3ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1087//#testresult/811373d6ef99d3ca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698867578966,"stop":1698867583930,"duration":4964}},{"uid":"28174ff85070b899","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1081//#testresult/28174ff85070b899","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698801688709,"stop":1698801694751,"duration":6042}},{"uid":"9271cddb604f8848","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1079//#testresult/9271cddb604f8848","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698788597497,"stop":1698788602386,"duration":4889}},{"uid":"3e28bb51543e4d5f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1077//#testresult/3e28bb51543e4d5f","status":"passed","time":{"start":1698715140513,"stop":1698715142049,"duration":1536}},{"uid":"2cc7a04d9c9c4b76","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1075//#testresult/2cc7a04d9c9c4b76","status":"passed","time":{"start":1698701555040,"stop":1698701556684,"duration":1644}},{"uid":"268785b1a5363d7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1073//#testresult/268785b1a5363d7a","status":"passed","time":{"start":1698700328565,"stop":1698700334453,"duration":5888}},{"uid":"a9e63d464dfe9a86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1070//#testresult/a9e63d464dfe9a86","status":"passed","time":{"start":1698692867250,"stop":1698692868564,"duration":1314}},{"uid":"3466e8a25b0d05e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/3466e8a25b0d05e8","status":"passed","time":{"start":1698692838889,"stop":1698692844299,"duration":5410}},{"uid":"2656f34bd0c1e562","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/2656f34bd0c1e562","status":"passed","time":{"start":1698646549569,"stop":1698646551218,"duration":1649}},{"uid":"6b3e7bc1a2be8e63","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/6b3e7bc1a2be8e63","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1698628533742,"stop":1698628539647,"duration":5905}},{"uid":"ed489eb0b86236da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/ed489eb0b86236da","status":"passed","time":{"start":1698615173064,"stop":1698615174798,"duration":1734}},{"uid":"fd6414b21cdf95d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1061//#testresult/fd6414b21cdf95d1","status":"passed","time":{"start":1698615080045,"stop":1698615085737,"duration":5692}},{"uid":"fd2316c7164ecc12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/fd2316c7164ecc12","status":"passed","time":{"start":1698542333543,"stop":1698542342193,"duration":8650}},{"uid":"8b1c0bead6ae0cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/8b1c0bead6ae0cc","status":"passed","time":{"start":1698455524197,"stop":1698455529482,"duration":5285}}]},"tags":[]},"source":"96fe539ca5cb488a.json","parameterValues":["MertonCouncil"]}