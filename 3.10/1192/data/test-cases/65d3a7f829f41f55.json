{"uid":"65d3a7f829f41f55","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1701758495147,"stop":1701758496120,"duration":973},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f7f40dcf0a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7f3bf83a00>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7f7f3bf75a80>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '100050768956', 'url': 'https://www.doncaster.gov.uk/Compass/Entity/Launch/D3/', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1701758495, four_weeks = 1704177695\nparams = {'End': '1704177695', 'Start': '1701758495', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:45: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f7f40dcf0a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7f3bf83a00>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7f7f3bf75a80>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '100050768956', 'url': 'https://www.doncaster.gov.uk/Compass/Entity/Launch/D3/', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1701758495, four_weeks = 1704177695\nparams = {'End': '1704177695', 'Start': '1701758495', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:45: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1701758495147,"stop":1701758495147,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1701758495148,"stop":1701758496120,"duration":972},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az979-599"},{"name":"thread","value":"2719-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":45,"unknown":0,"total":46},"items":[{"uid":"6d3692df4ef7cee8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/6d3692df4ef7cee8","status":"passed","time":{"start":1701739159344,"stop":1701739160912,"duration":1568}},{"uid":"19c01eca73a76127","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/19c01eca73a76127","status":"passed","time":{"start":1701714323674,"stop":1701714325022,"duration":1348}},{"uid":"50a47fac399e9a8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/50a47fac399e9a8e","status":"passed","time":{"start":1701714272846,"stop":1701714274583,"duration":1737}},{"uid":"63351293c8b48a17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/63351293c8b48a17","status":"passed","time":{"start":1701652747519,"stop":1701652748952,"duration":1433}},{"uid":"21ba61b6f1dc84a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/21ba61b6f1dc84a9","status":"passed","time":{"start":1701566523638,"stop":1701566525247,"duration":1609}},{"uid":"a244e84c0269cbb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/a244e84c0269cbb8","status":"passed","time":{"start":1701479701463,"stop":1701479703140,"duration":1677}},{"uid":"b00344fd2a227dcd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/b00344fd2a227dcd","status":"passed","time":{"start":1701418949421,"stop":1701418950716,"duration":1295}},{"uid":"34a63afc1850200","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/34a63afc1850200","status":"passed","time":{"start":1701418878769,"stop":1701418885505,"duration":6736}},{"uid":"3c57673f443e4534","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/3c57673f443e4534","status":"passed","time":{"start":1701414353334,"stop":1701414355586,"duration":2252}},{"uid":"bea02e99125722fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/bea02e99125722fd","status":"passed","time":{"start":1701414302392,"stop":1701414303883,"duration":1491}},{"uid":"2f47297624597789","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/2f47297624597789","status":"passed","time":{"start":1701393887144,"stop":1701393888580,"duration":1436}},{"uid":"23e4700f9f1db165","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/23e4700f9f1db165","status":"passed","time":{"start":1701353327949,"stop":1701353329627,"duration":1678}},{"uid":"d4c03bec6ef9b611","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/d4c03bec6ef9b611","status":"passed","time":{"start":1701307074765,"stop":1701307076237,"duration":1472}},{"uid":"9241eed1f0d4c912","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/9241eed1f0d4c912","status":"passed","time":{"start":1701279310630,"stop":1701279312179,"duration":1549}},{"uid":"c3cb8be2a052286f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/c3cb8be2a052286f","status":"passed","time":{"start":1701279334093,"stop":1701279336756,"duration":2663}},{"uid":"fe834872c8eaf06e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/fe834872c8eaf06e","status":"passed","time":{"start":1701220732597,"stop":1701220733986,"duration":1389}},{"uid":"1d5f9b6a7af8bc29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/1d5f9b6a7af8bc29","status":"passed","time":{"start":1701134346260,"stop":1701134347830,"duration":1570}},{"uid":"e5be1c809bf7081c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/e5be1c809bf7081c","status":"passed","time":{"start":1701047899926,"stop":1701047901529,"duration":1603}},{"uid":"8f325631b03fb139","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/8f325631b03fb139","status":"passed","time":{"start":1701036128604,"stop":1701036131038,"duration":2434}},{"uid":"5f1a97de0af1106d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/5f1a97de0af1106d","status":"passed","time":{"start":1701036134403,"stop":1701036135747,"duration":1344}}]},"tags":[]},"source":"65d3a7f829f41f55.json","parameterValues":["DoncasterCouncil","None","None"]}