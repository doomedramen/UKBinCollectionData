{"uid":"7baa2c6b20f284ea","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1700646406507,"stop":1700646409059,"duration":2552},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f59d376a950>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f59c3cbe6e0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f59c3cbe6e0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f59d376a950>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f59c3cbe6e0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f59c3cbe6e0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1700646406507,"stop":1700646406508,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1700646406508,"stop":1700646409056,"duration":2548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700646409057,"stop":1700646409057,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700646409057,"stop":1700646409059,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1208-985"},{"name":"thread","value":"2690-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":21},"items":[{"uid":"f90d786adc825a73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/f90d786adc825a73","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616104192,"stop":1700616106104,"duration":1912}},{"uid":"1a8018107c331d12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/1a8018107c331d12","status":"passed","time":{"start":1700529758711,"stop":1700529760396,"duration":1685}},{"uid":"10e37d04714507df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/10e37d04714507df","status":"passed","time":{"start":1700443205007,"stop":1700443206716,"duration":1709}},{"uid":"7f648923af48d949","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/7f648923af48d949","status":"passed","time":{"start":1700357038213,"stop":1700357039999,"duration":1786}},{"uid":"7ea44b6461ed19fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/7ea44b6461ed19fb","status":"passed","time":{"start":1700270356241,"stop":1700270359265,"duration":3024}},{"uid":"a87bf087a422c651","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/a87bf087a422c651","status":"passed","time":{"start":1700183974078,"stop":1700183978718,"duration":4640}},{"uid":"70d32f2bc3b81d73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/70d32f2bc3b81d73","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097591718,"stop":1700097595323,"duration":3605}},{"uid":"df3134e05acd1eaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/df3134e05acd1eaf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011336060,"stop":1700011337534,"duration":1474}},{"uid":"b2cb31b884473769","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/b2cb31b884473769","status":"passed","time":{"start":1699924929542,"stop":1699924931116,"duration":1574}},{"uid":"2c9f2afab6f55eb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1127//#testresult/2c9f2afab6f55eb4","status":"passed","time":{"start":1699838581485,"stop":1699838583568,"duration":2083}},{"uid":"9bf347896f95245","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1126//#testresult/9bf347896f95245","status":"passed","time":{"start":1699752135522,"stop":1699752137463,"duration":1941}},{"uid":"70c9c2ccdd8ef9d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1125//#testresult/70c9c2ccdd8ef9d0","status":"passed","time":{"start":1699669578079,"stop":1699669579841,"duration":1762}},{"uid":"334255700b5fb6b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1124//#testresult/334255700b5fb6b6","status":"passed","time":{"start":1699579008362,"stop":1699579010811,"duration":2449}},{"uid":"8edee591c5f49c0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1123//#testresult/8edee591c5f49c0a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492691170,"stop":1699492695394,"duration":4224}},{"uid":"e212545a528037fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1121//#testresult/e212545a528037fa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481301674,"stop":1699481303272,"duration":1598}},{"uid":"b93a3deda1cb3ebc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1117//#testresult/b93a3deda1cb3ebc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445328099,"stop":1699445329223,"duration":1124}},{"uid":"63cb425c8b29a0bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1115//#testresult/63cb425c8b29a0bf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406467773,"stop":1699406470387,"duration":2614}},{"uid":"f278d2884e9e8bb9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1114//#testresult/f278d2884e9e8bb9","status":"passed","time":{"start":1699319899699,"stop":1699319901899,"duration":2200}},{"uid":"227da78b18ff2c64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1113//#testresult/227da78b18ff2c64","status":"passed","time":{"start":1699233549623,"stop":1699233552271,"duration":2648}},{"uid":"3250a96d18137d95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1111//#testresult/3250a96d18137d95","status":"passed","time":{"start":1699170729292,"stop":1699170731321,"duration":2029}}]},"tags":[]},"source":"7baa2c6b20f284ea.json","parameterValues":["SouthNorfolkCouncil","None","None"]}