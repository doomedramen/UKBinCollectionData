{"uid":"d7bda781f10be160","name":"Validate Council Output [StHelensBC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aefb4666f5cfa7265d9db53c16df38b6","time":{"start":1695206358266,"stop":1695206358937,"duration":671},"status":"failed","statusMessage":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 22 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 22 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: StHelensBC","time":{"start":1695206358266,"stop":1695206358267,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from StHelensBC","time":{"start":1695206358267,"stop":1695206358937,"duration":670},"status":"failed","statusMessage":"time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1098-243"},{"name":"thread","value":"2105-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StHelensBC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":75,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":86},"items":[{"uid":"b4859af4b3d5913e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/939//#testresult/b4859af4b3d5913e","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1695193845152,"stop":1695193846896,"duration":1744}},{"uid":"4eedbe84efc7da43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/937//#testresult/4eedbe84efc7da43","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1695172611484,"stop":1695172615495,"duration":4011}},{"uid":"8dda68af3bd3485b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/936//#testresult/8dda68af3bd3485b","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1695162086277,"stop":1695162090260,"duration":3983}},{"uid":"1705663a0a0081e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/935//#testresult/1705663a0a0081e","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1695160113564,"stop":1695160114536,"duration":972}},{"uid":"e38a444cc6e17be1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/932//#testresult/e38a444cc6e17be1","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1695157013518,"stop":1695157014115,"duration":597}},{"uid":"b1e6feaf0989590f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/930//#testresult/b1e6feaf0989590f","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1695086318058,"stop":1695086318878,"duration":820}},{"uid":"3e75c10730e160ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/929//#testresult/3e75c10730e160ba","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694999808845,"stop":1694999814478,"duration":5633}},{"uid":"55080c2b80bbc479","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/928//#testresult/55080c2b80bbc479","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694987931110,"stop":1694987937029,"duration":5919}},{"uid":"3f2c12fdf1431e51","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/926//#testresult/3f2c12fdf1431e51","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694987875378,"stop":1694987875962,"duration":584}},{"uid":"443324e4f14d415c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/922//#testresult/443324e4f14d415c","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694971709632,"stop":1694971715262,"duration":5630}},{"uid":"a28fc22ec1961315","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/920//#testresult/a28fc22ec1961315","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694913687255,"stop":1694913688246,"duration":991}},{"uid":"35d5c838cff53f7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/919//#testresult/35d5c838cff53f7f","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694892823717,"stop":1694892824305,"duration":588}},{"uid":"7ea88c09a4f2cf94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/917//#testresult/7ea88c09a4f2cf94","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694889944421,"stop":1694889945033,"duration":612}},{"uid":"9a5ad58710558e89","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/915//#testresult/9a5ad58710558e89","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694864836821,"stop":1694864842611,"duration":5790}},{"uid":"a6076f6315d070a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/913//#testresult/a6076f6315d070a","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694840539835,"stop":1694840545701,"duration":5866}},{"uid":"3cbaf069fc14cbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/912//#testresult/3cbaf069fc14cbf","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694826890850,"stop":1694826893960,"duration":3110}},{"uid":"fc055093fd01119e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/910//#testresult/fc055093fd01119e","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694796964151,"stop":1694796965116,"duration":965}},{"uid":"7c1eb049c10175f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/906//#testresult/7c1eb049c10175f","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694740682538,"stop":1694740683293,"duration":755}},{"uid":"77de2d3fffe7f19b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/905//#testresult/77de2d3fffe7f19b","status":"failed","statusDetails":"ValueError: time data 'Fri 22 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1694654132073,"stop":1694654134347,"duration":2274}},{"uid":"619b0c39802009fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/904//#testresult/619b0c39802009fe","status":"failed","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='secure.sthelens.net', port=443): Max retries exceeded with url: /website/CollectionDates.nsf/servlet.xsp/NextCollections?source=1&refid=39081672 (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)')))","time":{"start":1694567862489,"stop":1694567862921,"duration":432}}]},"tags":[]},"source":"d7bda781f10be160.json","parameterValues":["StHelensBC"]}