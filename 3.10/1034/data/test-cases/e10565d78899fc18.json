{"uid":"e10565d78899fc18","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1697764526738,"stop":1697764528653,"duration":1915},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f522c68e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5220704310>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f522c68e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5220704310>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1697764526738,"stop":1697764526739,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1697764526739,"stop":1697764528653,"duration":1914},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az454-940"},{"name":"thread","value":"2236-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":124,"unknown":0,"total":142},"items":[{"uid":"df4181cb74f66815","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/df4181cb74f66815","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697706556872,"stop":1697706558787,"duration":1915}},{"uid":"140b965d79ba45a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/140b965d79ba45a5","status":"passed","time":{"start":1697706514537,"stop":1697706515444,"duration":907}},{"uid":"253fc0f6119ac882","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/253fc0f6119ac882","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702048026,"stop":1697702048027,"duration":1}},{"uid":"edb94b88cc277afe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/edb94b88cc277afe","status":"passed","time":{"start":1697696181482,"stop":1697696182296,"duration":814}},{"uid":"7318f2386d61fa78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/7318f2386d61fa78","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697678103999,"stop":1697678106045,"duration":2046}},{"uid":"b57db574509752c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/b57db574509752c3","status":"passed","time":{"start":1697666596744,"stop":1697666597632,"duration":888}},{"uid":"71d2fd640fb44329","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/71d2fd640fb44329","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697666541618,"stop":1697666543505,"duration":1887}},{"uid":"998e9c4094eee89e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/998e9c4094eee89e","status":"passed","time":{"start":1697656855264,"stop":1697656856144,"duration":880}},{"uid":"af9527965de5f6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/af9527965de5f6d","status":"passed","time":{"start":1697656793946,"stop":1697656794814,"duration":868}},{"uid":"b69d0ed8eae2ebe4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/b69d0ed8eae2ebe4","status":"passed","time":{"start":1697650024179,"stop":1697650024876,"duration":697}},{"uid":"d6ec9758567952d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/d6ec9758567952d5","status":"passed","time":{"start":1697618283283,"stop":1697618284170,"duration":887}},{"uid":"8c1c6c0a13c88781","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/8c1c6c0a13c88781","status":"passed","time":{"start":1697618218524,"stop":1697618219419,"duration":895}},{"uid":"89dd9e1e54d9a8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1010//#testresult/89dd9e1e54d9a8a","status":"passed","time":{"start":1697591750268,"stop":1697591751258,"duration":990}},{"uid":"23d5c5960f74e057","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1009//#testresult/23d5c5960f74e057","status":"passed","time":{"start":1697542617927,"stop":1697542618706,"duration":779}},{"uid":"87bddb6619e00522","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1008//#testresult/87bddb6619e00522","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697505337591,"stop":1697505339496,"duration":1905}},{"uid":"3bcd1d6bb2d8da35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1006//#testresult/3bcd1d6bb2d8da35","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697484639587,"stop":1697484641361,"duration":1774}},{"uid":"2ddd2abe0e49015","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1005//#testresult/2ddd2abe0e49015","status":"passed","time":{"start":1697484591294,"stop":1697484591951,"duration":657}},{"uid":"ac1373aa673c418e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1004//#testresult/ac1373aa673c418e","status":"passed","time":{"start":1697418975711,"stop":1697418976377,"duration":666}},{"uid":"3c988413d6408ad9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1001//#testresult/3c988413d6408ad9","status":"passed","time":{"start":1697403157131,"stop":1697403157848,"duration":717}},{"uid":"b008a1826263ef94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/998//#testresult/b008a1826263ef94","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697399713712,"stop":1697399715205,"duration":1493}}]},"tags":[]},"source":"e10565d78899fc18.json","parameterValues":["KingstonUponThamesCouncil"]}