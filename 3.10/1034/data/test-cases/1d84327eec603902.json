{"uid":"1d84327eec603902","name":"Validate Council Output [NeathPortTalbotCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"6a7795e00df27bb2a2723cbd96dd78a1","time":{"start":1697764486196,"stop":1697764491651,"duration":5455},"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x555e5ab6cfb3 <unknown>\n#1 0x555e5a8404a7 <unknown>\n#2 0x555e5a88decd <unknown>\n#3 0x555e5a88c26d <unknown>\n#4 0x555e5a88a028 <unknown>\n#5 0x555e5a889097 <unknown>\n#6 0x555e5a87dd59 <unknown>\n#7 0x555e5a8a9942 <unknown>\n#8 0x555e5a87d776 <unknown>\n#9 0x555e5a8a9b0e <unknown>\n#10 0x555e5a8c2c02 <unknown>\n#11 0x555e5a8a9713 <unknown>\n#12 0x555e5a87c18b <unknown>\n#13 0x555e5a87cf7e <unknown>\n#14 0x555e5ab328d8 <unknown>\n#15 0x555e5ab36800 <unknown>\n#16 0x555e5ab40cfc <unknown>\n#17 0x555e5ab37418 <unknown>\n#18 0x555e5ab0442f <unknown>\n#19 0x555e5ab5b4e8 <unknown>\n#20 0x555e5ab5b6b4 <unknown>\n#21 0x555e5ab6c143 <unknown>\n#22 0x7ffb1da94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f5d278d2e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[NeathPortTalbotCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5d1f542bc0>, 'council': 'NeathPortTalbotCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NeathPortTalbotCouncil.py:46: in parse_data\n    cookieAccept.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5d1fa6a5c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x555e5ab5b6b4 \\\\u003Cunknown>\\\\n#21 0x555e5ab6c143 \\\\u003Cunknown>\\\\n#22 0x7ffb1da94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\nE         (Session info: headless chrome=118.0.5993.70)\nE       Stacktrace:\nE       #0 0x555e5ab6cfb3 <unknown>\nE       #1 0x555e5a8404a7 <unknown>\nE       #2 0x555e5a88decd <unknown>\nE       #3 0x555e5a88c26d <unknown>\nE       #4 0x555e5a88a028 <unknown>\nE       #5 0x555e5a889097 <unknown>\nE       #6 0x555e5a87dd59 <unknown>\nE       #7 0x555e5a8a9942 <unknown>\nE       #8 0x555e5a87d776 <unknown>\nE       #9 0x555e5a8a9b0e <unknown>\nE       #10 0x555e5a8c2c02 <unknown>\nE       #11 0x555e5a8a9713 <unknown>\nE       #12 0x555e5a87c18b <unknown>\nE       #13 0x555e5a87cf7e <unknown>\nE       #14 0x555e5ab328d8 <unknown>\nE       #15 0x555e5ab36800 <unknown>\nE       #16 0x555e5ab40cfc <unknown>\nE       #17 0x555e5ab37418 <unknown>\nE       #18 0x555e5ab0442f <unknown>\nE       #19 0x555e5ab5b4e8 <unknown>\nE       #20 0x555e5ab5b6b4 <unknown>\nE       #21 0x555e5ab6c143 <unknown>\nE       #22 0x7ffb1da94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x555e5ab6cfb3 <unknown>\n#1 0x555e5a8404a7 <unknown>\n#2 0x555e5a88decd <unknown>\n#3 0x555e5a88c26d <unknown>\n#4 0x555e5a88a028 <unknown>\n#5 0x555e5a889097 <unknown>\n#6 0x555e5a87dd59 <unknown>\n#7 0x555e5a8a9942 <unknown>\n#8 0x555e5a87d776 <unknown>\n#9 0x555e5a8a9b0e <unknown>\n#10 0x555e5a8c2c02 <unknown>\n#11 0x555e5a8a9713 <unknown>\n#12 0x555e5a87c18b <unknown>\n#13 0x555e5a87cf7e <unknown>\n#14 0x555e5ab328d8 <unknown>\n#15 0x555e5ab36800 <unknown>\n#16 0x555e5ab40cfc <unknown>\n#17 0x555e5ab37418 <unknown>\n#18 0x555e5ab0442f <unknown>\n#19 0x555e5ab5b4e8 <unknown>\n#20 0x555e5ab5b6b4 <unknown>\n#21 0x555e5ab6c143 <unknown>\n#22 0x7ffb1da94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f5d278d2e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[NeathPortTalbotCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5d1f542bc0>, 'council': 'NeathPortTalbotCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NeathPortTalbotCouncil.py:46: in parse_data\n    cookieAccept.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5d1fa6a5c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x555e5ab5b6b4 \\\\u003Cunknown>\\\\n#21 0x555e5ab6c143 \\\\u003Cunknown>\\\\n#22 0x7ffb1da94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\nE         (Session info: headless chrome=118.0.5993.70)\nE       Stacktrace:\nE       #0 0x555e5ab6cfb3 <unknown>\nE       #1 0x555e5a8404a7 <unknown>\nE       #2 0x555e5a88decd <unknown>\nE       #3 0x555e5a88c26d <unknown>\nE       #4 0x555e5a88a028 <unknown>\nE       #5 0x555e5a889097 <unknown>\nE       #6 0x555e5a87dd59 <unknown>\nE       #7 0x555e5a8a9942 <unknown>\nE       #8 0x555e5a87d776 <unknown>\nE       #9 0x555e5a8a9b0e <unknown>\nE       #10 0x555e5a8c2c02 <unknown>\nE       #11 0x555e5a8a9713 <unknown>\nE       #12 0x555e5a87c18b <unknown>\nE       #13 0x555e5a87cf7e <unknown>\nE       #14 0x555e5ab328d8 <unknown>\nE       #15 0x555e5ab36800 <unknown>\nE       #16 0x555e5ab40cfc <unknown>\nE       #17 0x555e5ab37418 <unknown>\nE       #18 0x555e5ab0442f <unknown>\nE       #19 0x555e5ab5b4e8 <unknown>\nE       #20 0x555e5ab5b6b4 <unknown>\nE       #21 0x555e5ab6c143 <unknown>\nE       #22 0x7ffb1da94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Given the council: NeathPortTalbotCouncil","time":{"start":1697764486196,"stop":1697764486197,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from NeathPortTalbotCouncil","time":{"start":1697764486197,"stop":1697764491651,"duration":5454},"status":"failed","statusMessage":"Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x555e5ab6cfb3 <unknown>\n#1 0x555e5a8404a7 <unknown>\n#2 0x555e5a88decd <unknown>\n#3 0x555e5a88c26d <unknown>\n#4 0x555e5a88a028 <unknown>\n#5 0x555e5a889097 <unknown>\n#6 0x555e5a87dd59 <unknown>\n#7 0x555e5a8a9942 <unknown>\n#8 0x555e5a87d776 <unknown>\n#9 0x555e5a8a9b0e <unknown>\n#10 0x555e5a8c2c02 <unknown>\n#11 0x555e5a8a9713 <unknown>\n#12 0x555e5a87c18b <unknown>\n#13 0x555e5a87cf7e <unknown>\n#14 0x555e5ab328d8 <unknown>\n#15 0x555e5ab36800 <unknown>\n#16 0x555e5ab40cfc <unknown>\n#17 0x555e5ab37418 <unknown>\n#18 0x555e5ab0442f <unknown>\n#19 0x555e5ab5b4e8 <unknown>\n#20 0x555e5ab5b6b4 <unknown>\n#21 0x555e5ab6c143 <unknown>\n#22 0x7ffb1da94ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x555e5ab6cfb3 <unknown>\n#1 0x555e5a8404a7 <unknown>\n#2 0x555e5a88decd <unknown>\n#3 0x555e5a88c26d <unknown>\n#4 0x555e5a88a028 <unknown>\n#5 0x555e5a889097 <unknown>\n#6 0x555e5a87dd59 <unknown>\n#7 0x555e5a8a9942 <unknown>\n#8 0x555e5a87d776 <unknown>\n#9 0x555e5a8a9b0e <unknown>\n#10 0x555e5a8c2c02 <unknown>\n#11 0x555e5a8a9713 <unknown>\n#12 0x555e5a87c18b <unknown>\n#13 0x555e5a87cf7e <unknown>\n#14 0x555e5ab328d8 <unknown>\n#15 0x555e5ab36800 <unknown>\n#16 0x555e5ab40cfc <unknown>\n#17 0x555e5ab37418 <unknown>\n#18 0x555e5ab0442f <unknown>\n#19 0x555e5ab5b4e8 <unknown>\n#20 0x555e5ab5b6b4 <unknown>\n#21 0x555e5ab6c143 <unknown>\n#22 0x7ffb1da94ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az454-940"},{"name":"thread","value":"2239-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NeathPortTalbotCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":8},"items":[{"uid":"626ba009f20cac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/626ba009f20cac9","status":"passed","time":{"start":1697706657669,"stop":1697706665010,"duration":7341}},{"uid":"edb68e8281d486e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/edb68e8281d486e6","status":"passed","time":{"start":1697706607981,"stop":1697706613980,"duration":5999}},{"uid":"938f67edf2e558d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/938f67edf2e558d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702048571,"stop":1697702048572,"duration":1}},{"uid":"7936db50370adcda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/7936db50370adcda","status":"passed","time":{"start":1697696170081,"stop":1697696176406,"duration":6325}},{"uid":"49cd99ad90905eed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/49cd99ad90905eed","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x56356894ffb3 <unknown>\n#1 0x5635686234a7 <unknown>\n#2 0x563568670ecd <unknown>\n#3 0x56356866f26d <unknown>\n#4 0x56356866d028 <unknown>\n#5 0x56356866c097 <unknown>\n#6 0x563568660d59 <unknown>\n#7 0x56356868c942 <unknown>\n#8 0x563568660776 <unknown>\n#9 0x56356868cb0e <unknown>\n#10 0x5635686a5c02 <unknown>\n#11 0x56356868c713 <unknown>\n#12 0x56356865f18b <unknown>\n#13 0x56356865ff7e <unknown>\n#14 0x5635689158d8 <unknown>\n#15 0x563568919800 <unknown>\n#16 0x563568923cfc <unknown>\n#17 0x56356891a418 <unknown>\n#18 0x5635688e742f <unknown>\n#19 0x56356893e4e8 <unknown>\n#20 0x56356893e6b4 <unknown>\n#21 0x56356894f143 <unknown>\n#22 0x7f6923694ac3 <unknown>","time":{"start":1697678094615,"stop":1697678099095,"duration":4480}},{"uid":"7964699214828a86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/7964699214828a86","status":"passed","time":{"start":1697666583890,"stop":1697666590663,"duration":6773}},{"uid":"e77ec674766df41a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/e77ec674766df41a","status":"passed","time":{"start":1697666531356,"stop":1697666536645,"duration":5289}}]},"tags":[]},"source":"1d84327eec603902.json","parameterValues":["NeathPortTalbotCouncil"]}