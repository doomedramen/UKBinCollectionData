{"uid":"de0fc05cefa21a4c","name":"Validate Council Output [BromleyBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7f3dc7acf0fc90eded39e25c4ed3bb60","time":{"start":1697764441133,"stop":1697764445679,"duration":4546},"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              \n              (In progress)","statusTrace":"fixturefunc = <function scrape_step at 0x7f522c68e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f521fbf6c80>, 'council': 'BromleyBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 20 October\\n              \\n              (In progress)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         \nE                         (In progress)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              \n              (In progress)","statusTrace":"fixturefunc = <function scrape_step at 0x7f522c68e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f521fbf6c80>, 'council': 'BromleyBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 20 October\\n              \\n              (In progress)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         \nE                         (In progress)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BromleyBoroughCouncil","time":{"start":1697764441133,"stop":1697764441134,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from BromleyBoroughCouncil","time":{"start":1697764441134,"stop":1697764445679,"duration":4545},"status":"failed","statusMessage":"unconverted data remains: \n              \n              (In progress)","statusTrace":"ValueError: unconverted data remains: \n              \n              (In progress)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az454-940"},{"name":"thread","value":"2236-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BromleyBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":115,"unknown":0,"total":142},"items":[{"uid":"bcc5e0a2be89c5f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/bcc5e0a2be89c5f0","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697706472824,"stop":1697706474294,"duration":1470}},{"uid":"8ebbd5d96e141b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/8ebbd5d96e141b0","status":"passed","time":{"start":1697706429314,"stop":1697706432121,"duration":2807}},{"uid":"3863ce88419c5452","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/3863ce88419c5452","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702047733,"stop":1697702047734,"duration":1}},{"uid":"8c43622f2ec4bfa9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/8c43622f2ec4bfa9","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697696118561,"stop":1697696119514,"duration":953}},{"uid":"690736e8ee8be70c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/690736e8ee8be70c","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697678046924,"stop":1697678047919,"duration":995}},{"uid":"37449ba25e95a334","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/37449ba25e95a334","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697666540284,"stop":1697666541394,"duration":1110}},{"uid":"f5909e49e38b0129","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/f5909e49e38b0129","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697666490780,"stop":1697666491792,"duration":1012}},{"uid":"394fbf16e15b0ad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/394fbf16e15b0ad6","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697656784273,"stop":1697656785679,"duration":1406}},{"uid":"c60382536a7eb9b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/c60382536a7eb9b8","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697656742409,"stop":1697656743264,"duration":855}},{"uid":"b3b5059b353cef71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/b3b5059b353cef71","status":"passed","time":{"start":1697649982000,"stop":1697649986219,"duration":4219}},{"uid":"369ceb3988ae858e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/369ceb3988ae858e","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697618217706,"stop":1697618218981,"duration":1275}},{"uid":"4dd4c82a00007479","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/4dd4c82a00007479","status":"passed","time":{"start":1697618173276,"stop":1697618176757,"duration":3481}},{"uid":"ffe85544d3772797","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1010//#testresult/ffe85544d3772797","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697591675175,"stop":1697591676064,"duration":889}},{"uid":"b875996e76ed720b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1009//#testresult/b875996e76ed720b","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697542558091,"stop":1697542559165,"duration":1074}},{"uid":"afd41404d63331d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1008//#testresult/afd41404d63331d0","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697505284930,"stop":1697505285990,"duration":1060}},{"uid":"6cb491a50a770697","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1006//#testresult/6cb491a50a770697","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697484598446,"stop":1697484599421,"duration":975}},{"uid":"81223e6949358f56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1005//#testresult/81223e6949358f56","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697484555457,"stop":1697484556252,"duration":795}},{"uid":"592a11f27dbae439","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1004//#testresult/592a11f27dbae439","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697418935473,"stop":1697418936535,"duration":1062}},{"uid":"29d4d5215424e299","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1001//#testresult/29d4d5215424e299","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697403126510,"stop":1697403127423,"duration":913}},{"uid":"302c8124e7fd59d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/998//#testresult/302c8124e7fd59d","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697399679666,"stop":1697399680551,"duration":885}}]},"tags":[]},"source":"de0fc05cefa21a4c.json","parameterValues":["BromleyBoroughCouncil"]}