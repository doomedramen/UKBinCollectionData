{"uid":"97395dd941f6bbab","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1704113660584,"stop":1704113661205,"duration":621},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fe96e8fbf40>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe95dddc970>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fe96e8d8610>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '100050768956', 'url': 'https://www.doncaster.gov.uk/Compass/Entity/Launch/D3/', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1704113660, four_weeks = 1706532860\nparams = {'End': '1706532860', 'Start': '1704113660', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fe96e8fbf40>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe95dddc970>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fe96e8d8610>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '100050768956', 'url': 'https://www.doncaster.gov.uk/Compass/Entity/Launch/D3/', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1704113660, four_weeks = 1706532860\nparams = {'End': '1706532860', 'Start': '1704113660', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1704113660584,"stop":1704113660585,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1704113660585,"stop":1704113661205,"duration":620},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1543-731"},{"name":"thread","value":"2676-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":110,"unknown":0,"total":112},"items":[{"uid":"83d77cb9e1712eab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1341//#testresult/83d77cb9e1712eab","status":"passed","time":{"start":1704112229363,"stop":1704112232506,"duration":3143}},{"uid":"5d418db2bdc45cc3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/5d418db2bdc45cc3","status":"passed","time":{"start":1704112079282,"stop":1704112080857,"duration":1575}},{"uid":"7e4c47fc7e9d3e4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/7e4c47fc7e9d3e4a","status":"passed","time":{"start":1704112036711,"stop":1704112038318,"duration":1607}},{"uid":"caf7c2db86fd7aea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/caf7c2db86fd7aea","status":"passed","time":{"start":1704111803631,"stop":1704111805023,"duration":1392}},{"uid":"c2225d37592b0d14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/c2225d37592b0d14","status":"passed","time":{"start":1704111495813,"stop":1704111497194,"duration":1381}},{"uid":"98ccdeaf9e387fa7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/98ccdeaf9e387fa7","status":"passed","time":{"start":1704111446915,"stop":1704111448678,"duration":1763}},{"uid":"ac8f330f90f3219f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/ac8f330f90f3219f","status":"passed","time":{"start":1704111307296,"stop":1704111308787,"duration":1491}},{"uid":"87b375fecb53e943","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1330//#testresult/87b375fecb53e943","status":"passed","time":{"start":1704099919544,"stop":1704099920950,"duration":1406}},{"uid":"64faf6adb7dfe274","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/64faf6adb7dfe274","status":"passed","time":{"start":1704072238945,"stop":1704072240450,"duration":1505}},{"uid":"aba9b1296705cbd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1327//#testresult/aba9b1296705cbd7","status":"passed","time":{"start":1704050369311,"stop":1704050371051,"duration":1740}},{"uid":"eb02ea1e63531322","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1325//#testresult/eb02ea1e63531322","status":"passed","time":{"start":1704043859757,"stop":1704043861437,"duration":1680}},{"uid":"85cd32764c7c60e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/85cd32764c7c60e","status":"passed","time":{"start":1703985730002,"stop":1703985732281,"duration":2279}},{"uid":"1813be37bc9c1710","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/1813be37bc9c1710","status":"passed","time":{"start":1703898893741,"stop":1703898895364,"duration":1623}},{"uid":"491b4040181c3836","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/491b4040181c3836","status":"passed","time":{"start":1703853446876,"stop":1703853448532,"duration":1656}},{"uid":"b34a843a27324ea3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/b34a843a27324ea3","status":"passed","time":{"start":1703851063275,"stop":1703851064977,"duration":1702}},{"uid":"32e8ee2dcbe9c56b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/32e8ee2dcbe9c56b","status":"passed","time":{"start":1703851093879,"stop":1703851095691,"duration":1812}},{"uid":"524085b9f0adccf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/524085b9f0adccf3","status":"passed","time":{"start":1703812001875,"stop":1703812003269,"duration":1394}},{"uid":"762c7f1322e15f3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/762c7f1322e15f3e","status":"passed","time":{"start":1703756133431,"stop":1703756134814,"duration":1383}},{"uid":"5d5895f7d76793ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/5d5895f7d76793ae","status":"passed","time":{"start":1703726117244,"stop":1703726118761,"duration":1517}},{"uid":"cce1b60fb3fdc1dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/cce1b60fb3fdc1dc","status":"passed","time":{"start":1703717303040,"stop":1703717304795,"duration":1755}}]},"tags":[]},"source":"97395dd941f6bbab.json","parameterValues":["DoncasterCouncil","None","None"]}