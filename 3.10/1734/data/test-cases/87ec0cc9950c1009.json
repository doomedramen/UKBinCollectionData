{"uid":"87ec0cc9950c1009","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1714436791783,"stop":1714436792848,"duration":1065},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fd4f8143130>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd4f7556b90>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fd4f73b9600>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1714436791, four_weeks = 1716855991\nparams = {'End': '1716855991', 'Start': '1714436791', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fd4f8143130>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd4f7556b90>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fd4f73b9600>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1714436791, four_weeks = 1716855991\nparams = {'End': '1716855991', 'Start': '1714436791', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1714436791784,"stop":1714436791784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1714436791784,"stop":1714436792848,"duration":1064},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1247-807"},{"name":"thread","value":"2736-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":262,"unknown":0,"total":265},"items":[{"uid":"2a5bee48b15d108","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1732//#testresult/2a5bee48b15d108","status":"passed","time":{"start":1714350502039,"stop":1714350505278,"duration":3239}},{"uid":"794d37f57a58c489","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1724//#testresult/794d37f57a58c489","status":"passed","time":{"start":1714264273716,"stop":1714264275165,"duration":1449}},{"uid":"2335d4575d1f6690","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1722//#testresult/2335d4575d1f6690","status":"passed","time":{"start":1714234168137,"stop":1714234170225,"duration":2088}},{"uid":"3869290305e7a7be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1714//#testresult/3869290305e7a7be","status":"passed","time":{"start":1714232710380,"stop":1714232712124,"duration":1744}},{"uid":"d2412a6976f195b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1713//#testresult/d2412a6976f195b4","status":"passed","time":{"start":1714177562093,"stop":1714177563667,"duration":1574}},{"uid":"667e8a614f65dc21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1712//#testresult/667e8a614f65dc21","status":"passed","time":{"start":1714091212895,"stop":1714091215469,"duration":2574}},{"uid":"63501db047681f6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1711//#testresult/63501db047681f6b","status":"passed","time":{"start":1714004895831,"stop":1714004897183,"duration":1352}},{"uid":"b8c110cfc5f18362","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1710//#testresult/b8c110cfc5f18362","status":"passed","time":{"start":1713918442418,"stop":1713918443658,"duration":1240}},{"uid":"fc7d512c7f10a86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1709//#testresult/fc7d512c7f10a86","status":"passed","time":{"start":1713832508392,"stop":1713832509970,"duration":1578}},{"uid":"fd47ac38cf66ec3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1708//#testresult/fd47ac38cf66ec3a","status":"passed","time":{"start":1713745673326,"stop":1713745675216,"duration":1890}},{"uid":"fed25f5eec0ecdc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1707//#testresult/fed25f5eec0ecdc6","status":"passed","time":{"start":1713659336169,"stop":1713659337623,"duration":1454}},{"uid":"dc4c4ad3be10ceb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1706//#testresult/dc4c4ad3be10ceb7","status":"passed","time":{"start":1713572748422,"stop":1713572750292,"duration":1870}},{"uid":"8c68cf16e621a555","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1702//#testresult/8c68cf16e621a555","status":"passed","time":{"start":1713486398956,"stop":1713486400644,"duration":1688}},{"uid":"1422ac54dde43c12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1698//#testresult/1422ac54dde43c12","status":"passed","time":{"start":1713399984807,"stop":1713399986968,"duration":2161}},{"uid":"3cf07a803197ac17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1697//#testresult/3cf07a803197ac17","status":"passed","time":{"start":1713313604965,"stop":1713313606170,"duration":1205}},{"uid":"547048048b779c96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1696//#testresult/547048048b779c96","status":"passed","time":{"start":1713252703875,"stop":1713252705208,"duration":1333}},{"uid":"e69451e0b0eff32a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1695//#testresult/e69451e0b0eff32a","status":"passed","time":{"start":1713227155585,"stop":1713227158143,"duration":2558}},{"uid":"6b31592a89ddeca2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1692//#testresult/6b31592a89ddeca2","status":"passed","time":{"start":1713207733825,"stop":1713207736996,"duration":3171}},{"uid":"f7b41d0a3d34e9d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1683//#testresult/f7b41d0a3d34e9d5","status":"passed","time":{"start":1713188278228,"stop":1713188280016,"duration":1788}},{"uid":"2f56020f803c942b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1682//#testresult/2f56020f803c942b","status":"passed","time":{"start":1713149749410,"stop":1713149752040,"duration":2630}}]},"tags":[]},"source":"87ec0cc9950c1009.json","parameterValues":["DoncasterCouncil","None","None"]}