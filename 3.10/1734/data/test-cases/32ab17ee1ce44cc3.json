{"uid":"32ab17ee1ce44cc3","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1714436774978,"stop":1714436777006,"duration":2028},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f5f02ceaef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5f02125a20>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f5f02ceaef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5f02125a20>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1714436774978,"stop":1714436774979,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1714436774979,"stop":1714436777006,"duration":2027},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1247-807"},{"name":"thread","value":"2727-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":192,"unknown":0,"total":218},"items":[{"uid":"7500078e35a64ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1732//#testresult/7500078e35a64ec","status":"passed","time":{"start":1714350487478,"stop":1714350488594,"duration":1116}},{"uid":"6f82351fc9ed27bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1724//#testresult/6f82351fc9ed27bc","status":"passed","time":{"start":1714264247672,"stop":1714264248924,"duration":1252}},{"uid":"6ede528420f54414","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1722//#testresult/6ede528420f54414","status":"passed","time":{"start":1714234154705,"stop":1714234155757,"duration":1052}},{"uid":"8e025c9b3fceccd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1714//#testresult/8e025c9b3fceccd3","status":"passed","time":{"start":1714232712640,"stop":1714232714042,"duration":1402}},{"uid":"e944db686dc9bd49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1713//#testresult/e944db686dc9bd49","status":"passed","time":{"start":1714177661941,"stop":1714177663181,"duration":1240}},{"uid":"16cc4f3866cf2839","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1712//#testresult/16cc4f3866cf2839","status":"passed","time":{"start":1714091224888,"stop":1714091226761,"duration":1873}},{"uid":"449b2cc5e800f38b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1711//#testresult/449b2cc5e800f38b","status":"passed","time":{"start":1714004909019,"stop":1714004909998,"duration":979}},{"uid":"895e73747d3dd4d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1710//#testresult/895e73747d3dd4d5","status":"passed","time":{"start":1713918451757,"stop":1713918452625,"duration":868}},{"uid":"4f8c0b034cd2d90f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1709//#testresult/4f8c0b034cd2d90f","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713832554106,"stop":1713832555139,"duration":1033}},{"uid":"ee3dbb7530c0c0b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1708//#testresult/ee3dbb7530c0c0b7","status":"passed","time":{"start":1713745677481,"stop":1713745679425,"duration":1944}},{"uid":"c90509e2143cf7da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1707//#testresult/c90509e2143cf7da","status":"passed","time":{"start":1713659335497,"stop":1713659336641,"duration":1144}},{"uid":"30157c0d3c8f5d1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1706//#testresult/30157c0d3c8f5d1d","status":"passed","time":{"start":1713572756917,"stop":1713572758001,"duration":1084}},{"uid":"304fb3271409f034","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1702//#testresult/304fb3271409f034","status":"passed","time":{"start":1713486409998,"stop":1713486412282,"duration":2284}},{"uid":"39f9609b1c64d4ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1698//#testresult/39f9609b1c64d4ca","status":"passed","time":{"start":1713399996678,"stop":1713399997785,"duration":1107}},{"uid":"5783d15a283ba83d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1697//#testresult/5783d15a283ba83d","status":"passed","time":{"start":1713313609963,"stop":1713313610878,"duration":915}},{"uid":"80629c21eaa08374","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1696//#testresult/80629c21eaa08374","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713252705196,"stop":1713252706281,"duration":1085}},{"uid":"a226b2515867d7f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1695//#testresult/a226b2515867d7f4","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713227162825,"stop":1713227164119,"duration":1294}},{"uid":"4578af4f56b45d59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1692//#testresult/4578af4f56b45d59","status":"passed","time":{"start":1713207741452,"stop":1713207742502,"duration":1050}},{"uid":"efae4bd044d9932b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1683//#testresult/efae4bd044d9932b","status":"passed","time":{"start":1713188261760,"stop":1713188263493,"duration":1733}},{"uid":"9b3556a028588188","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1682//#testresult/9b3556a028588188","status":"passed","time":{"start":1713149749553,"stop":1713149750897,"duration":1344}}]},"tags":[]},"source":"32ab17ee1ce44cc3.json","parameterValues":["BarnsleyMBCouncil","None","None"]}