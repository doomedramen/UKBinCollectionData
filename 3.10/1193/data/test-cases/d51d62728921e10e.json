{"uid":"d51d62728921e10e","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1701758501872,"stop":1701758502458,"duration":586},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa6a4bab400>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa6928ad2d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa6928ad2d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa6a4bab400>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa6928ad2d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa6928ad2d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1701758501872,"stop":1701758501872,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1701758501872,"stop":1701758502455,"duration":583},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701758502455,"stop":1701758502455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701758502455,"stop":1701758502458,"duration":3},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1210-273"},{"name":"thread","value":"2877-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":38,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":47},"items":[{"uid":"261197eac841f7f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/261197eac841f7f8","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1701758506444,"stop":1701758508797,"duration":2353}},{"uid":"6a68b54be9c6eb0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/6a68b54be9c6eb0e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701739162531,"stop":1701739163429,"duration":898}},{"uid":"71be7520a267347b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/71be7520a267347b","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1701714326260,"stop":1701714327887,"duration":1627}},{"uid":"e5a3a51bacea82d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/e5a3a51bacea82d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714276810,"stop":1701714277707,"duration":897}},{"uid":"63614c95453e62f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/63614c95453e62f8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652750148,"stop":1701652750743,"duration":595}},{"uid":"4a43c722e47d8c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/4a43c722e47d8c3","status":"passed","time":{"start":1701566526906,"stop":1701566528681,"duration":1775}},{"uid":"820b41466283dd0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/820b41466283dd0d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479705356,"stop":1701479706251,"duration":895}},{"uid":"b5bd709f70ce8745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/b5bd709f70ce8745","status":"passed","time":{"start":1701418952067,"stop":1701418953750,"duration":1683}},{"uid":"5d9a220d2ebbc0bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/5d9a220d2ebbc0bb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418886705,"stop":1701418887425,"duration":720}},{"uid":"abdc9c9bc1117e70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/abdc9c9bc1117e70","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414355589,"stop":1701414356251,"duration":662}},{"uid":"3d750eb940ced2ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/3d750eb940ced2ef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414303886,"stop":1701414304754,"duration":868}},{"uid":"dfbef00169b3395a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/dfbef00169b3395a","status":"passed","time":{"start":1701393888583,"stop":1701393890259,"duration":1676}},{"uid":"b256d477e18b8612","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/b256d477e18b8612","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353329630,"stop":1701353330463,"duration":833}},{"uid":"2782686344037264","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/2782686344037264","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307076240,"stop":1701307077161,"duration":921}},{"uid":"9738b38e1cf05a4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/9738b38e1cf05a4c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279312181,"stop":1701279313097,"duration":916}},{"uid":"cbd86313714c86b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/cbd86313714c86b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279336759,"stop":1701279337603,"duration":844}},{"uid":"40aaf6c47f9da617","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/40aaf6c47f9da617","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220735136,"stop":1701220735985,"duration":849}},{"uid":"12d54a5f74566e32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/12d54a5f74566e32","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134347833,"stop":1701134348668,"duration":835}},{"uid":"bb359c85b34c09ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/bb359c85b34c09ac","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701047901532,"stop":1701047902613,"duration":1081}},{"uid":"f9662f1e9a353a24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/f9662f1e9a353a24","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036131040,"stop":1701036131672,"duration":632}}]},"tags":[]},"source":"d51d62728921e10e.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}