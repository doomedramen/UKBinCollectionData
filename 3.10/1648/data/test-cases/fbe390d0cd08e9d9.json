{"uid":"fbe390d0cd08e9d9","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1711585559849,"stop":1711585565248,"duration":5399},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fabaa8bfbe0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fab98484d30>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fabaa382c50>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fabaa383af0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '002ba780a58a461759592b603b8d7a0d677eb30e', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fabaa8bfbe0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fab98484d30>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fabaa382c50>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fabaa383af0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '002ba780a58a461759592b603b8d7a0d677eb30e', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1711585559850,"stop":1711585559850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1711585559850,"stop":1711585565248,"duration":5398},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1383-341"},{"name":"thread","value":"2918-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":130,"broken":0,"skipped":0,"passed":96,"unknown":0,"total":226},"items":[{"uid":"9ec564c50afc8f95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1646//#testresult/9ec564c50afc8f95","status":"passed","time":{"start":1711499124767,"stop":1711499130473,"duration":5706}},{"uid":"d86a9761b5d4b03a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1645//#testresult/d86a9761b5d4b03a","status":"passed","time":{"start":1711412710174,"stop":1711412716258,"duration":6084}},{"uid":"64b6d704b23c001e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1641//#testresult/64b6d704b23c001e","status":"passed","time":{"start":1711326426721,"stop":1711326432246,"duration":5525}},{"uid":"a00fde7fdca18324","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1634//#testresult/a00fde7fdca18324","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1711240115362,"stop":1711240116576,"duration":1214}},{"uid":"33c86ab4c401cc7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1626//#testresult/33c86ab4c401cc7b","status":"passed","time":{"start":1711153496571,"stop":1711153501308,"duration":4737}},{"uid":"3cbcbdfca5addc59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1625//#testresult/3cbcbdfca5addc59","status":"passed","time":{"start":1711067118611,"stop":1711067124009,"duration":5398}},{"uid":"9f3d35f6e7394350","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1624//#testresult/9f3d35f6e7394350","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1710980793324,"stop":1710980798991,"duration":5667}},{"uid":"228f93efd4cb53a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1621//#testresult/228f93efd4cb53a1","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1710970902323,"stop":1710970904204,"duration":1881}},{"uid":"ed2697173de14fac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1619//#testresult/ed2697173de14fac","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1710894330713,"stop":1710894331946,"duration":1233}},{"uid":"f392281a3b992a63","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1615//#testresult/f392281a3b992a63","status":"passed","time":{"start":1710807932945,"stop":1710807938375,"duration":5430}},{"uid":"4e497bcb41592654","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1609//#testresult/4e497bcb41592654","status":"passed","time":{"start":1710721639425,"stop":1710721644835,"duration":5410}},{"uid":"a530d350622a7478","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1608//#testresult/a530d350622a7478","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1710635306125,"stop":1710635307714,"duration":1589}},{"uid":"1baec9a97589f2fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1607//#testresult/1baec9a97589f2fc","status":"passed","time":{"start":1710548643385,"stop":1710548647948,"duration":4563}},{"uid":"875d216397f07d74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1605//#testresult/875d216397f07d74","status":"passed","time":{"start":1710462319545,"stop":1710462325461,"duration":5916}},{"uid":"7b6e932350c3af56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1604//#testresult/7b6e932350c3af56","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1710452799195,"stop":1710452804704,"duration":5509}},{"uid":"a2dd31874e47b6de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1602//#testresult/a2dd31874e47b6de","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1710375967598,"stop":1710375973523,"duration":5925}},{"uid":"32f9ea7285b0824e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1601//#testresult/32f9ea7285b0824e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1710289516293,"stop":1710289517666,"duration":1373}},{"uid":"a3d30cb1576251bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1600//#testresult/a3d30cb1576251bf","status":"passed","time":{"start":1710203112365,"stop":1710203117821,"duration":5456}},{"uid":"e08b494d58e5582","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1599//#testresult/e08b494d58e5582","status":"passed","time":{"start":1710116816862,"stop":1710116821241,"duration":4379}},{"uid":"2a67c2104ee6436e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1598//#testresult/2a67c2104ee6436e","status":"passed","time":{"start":1710030484229,"stop":1710030488861,"duration":4632}}]},"tags":[]},"source":"fbe390d0cd08e9d9.json","parameterValues":["CroydonCouncil","None","None"]}