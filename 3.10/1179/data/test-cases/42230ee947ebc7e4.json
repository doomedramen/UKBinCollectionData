{"uid":"42230ee947ebc7e4","name":"Validate Council Output [LondonBoroughHounslow-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2d5d41f2f80a2dfc213e6858543e98d5","time":{"start":1701418966860,"stop":1701418969484,"duration":2624},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcf4ba0edd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcf3c943940>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcf3c943940>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcf4ba0edd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcf3c943940>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcf3c943940>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: LondonBoroughHounslow","time":{"start":1701418966860,"stop":1701418966861,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from LondonBoroughHounslow using None and the None is set","time":{"start":1701418966861,"stop":1701418969481,"duration":2620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701418969481,"stop":1701418969481,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701418969481,"stop":1701418969484,"duration":3},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az881-266"},{"name":"thread","value":"2703-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LondonBoroughHounslow"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":39,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":39},"items":[{"uid":"7e222007fc9a70db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/7e222007fc9a70db","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418898187,"stop":1701418900672,"duration":2485}},{"uid":"8ab418c326f6642c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/8ab418c326f6642c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414480972,"stop":1701414483808,"duration":2836}},{"uid":"645c73def896d93e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/645c73def896d93e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414423900,"stop":1701414426531,"duration":2631}},{"uid":"d6f8f842bec9a82e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/d6f8f842bec9a82e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701394023672,"stop":1701394026420,"duration":2748}},{"uid":"64509a679b788c44","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/64509a679b788c44","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353481748,"stop":1701353485412,"duration":3664}},{"uid":"31fc885551b7ee43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/31fc885551b7ee43","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307205035,"stop":1701307207760,"duration":2725}},{"uid":"764ae13bc81c52a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/764ae13bc81c52a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279535351,"stop":1701279538383,"duration":3032}},{"uid":"e2ef0988b9790c4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/e2ef0988b9790c4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279540960,"stop":1701279543552,"duration":2592}},{"uid":"e2125aaacbec8017","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/e2125aaacbec8017","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220751166,"stop":1701220756342,"duration":5176}},{"uid":"c994d80a22263852","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/c994d80a22263852","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134499692,"stop":1701134502717,"duration":3025}},{"uid":"c2237db00623b85f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/c2237db00623b85f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701048108035,"stop":1701048111269,"duration":3234}},{"uid":"678491a085c2c4c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/678491a085c2c4c0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036280598,"stop":1701036283149,"duration":2551}},{"uid":"73a3f02a8c5e4a79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/73a3f02a8c5e4a79","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036264771,"stop":1701036267228,"duration":2457}},{"uid":"e546bc25305b67e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/e546bc25305b67e8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961850703,"stop":1700961853459,"duration":2756}},{"uid":"9c70f06fc63a6594","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/9c70f06fc63a6594","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874913976,"stop":1700874956694,"duration":42718}},{"uid":"69305cbae742a6ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/69305cbae742a6ee","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788780208,"stop":1700788783111,"duration":2903}},{"uid":"84c9e7d8d1bd6c69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/84c9e7d8d1bd6c69","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702465771,"stop":1700702468948,"duration":3177}},{"uid":"be5e31b47cf53933","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/be5e31b47cf53933","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646480628,"stop":1700646483476,"duration":2848}},{"uid":"9e4430cd3832f8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/9e4430cd3832f8f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616275219,"stop":1700616278486,"duration":3267}},{"uid":"1392281086bbe74c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/1392281086bbe74c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529889804,"stop":1700529893179,"duration":3375}}]},"tags":[]},"source":"42230ee947ebc7e4.json","parameterValues":["LondonBoroughHounslow","None","None"]}