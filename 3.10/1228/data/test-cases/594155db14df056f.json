{"uid":"594155db14df056f","name":"Validate Council Output [NorthWestLeicestershire-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"636da600d3c2f6211f4c406b74efac78","time":{"start":1702171498329,"stop":1702171508296,"duration":9967},"status":"failed","statusMessage":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f5b79d1b0a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5b789a78e0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:85: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'December 2023', format = '%d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'December 2023' does not match format '%d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f5b79d1b0a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5b789a78e0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:85: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'December 2023', format = '%d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'December 2023' does not match format '%d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: NorthWestLeicestershire","time":{"start":1702171498329,"stop":1702171498329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NorthWestLeicestershire using local and the http://selenium:4444 is set","time":{"start":1702171498329,"stop":1702171508296,"duration":9967},"status":"failed","statusMessage":"time data 'December 2023' does not match format '%d %B %Y'","statusTrace":"ValueError: time data 'December 2023' does not match format '%d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1251-511"},{"name":"thread","value":"2734-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthWestLeicestershire"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":13},"items":[{"uid":"9eabba76558d2cd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/9eabba76558d2cd4","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1702084694149,"stop":1702084706477,"duration":12328}},{"uid":"dfb1fec64126afab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/dfb1fec64126afab","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1702066768292,"stop":1702066782066,"duration":13774}},{"uid":"221676e261de084","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/221676e261de084","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1702054394317,"stop":1702054403850,"duration":9533}},{"uid":"501cf1adc810f8dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/501cf1adc810f8dd","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701998438795,"stop":1701998451427,"duration":12632}},{"uid":"dc57dc2ad010f298","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/dc57dc2ad010f298","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701990413293,"stop":1701990427239,"duration":13946}},{"uid":"8fa38e67bdcffdb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/8fa38e67bdcffdb5","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701990372576,"stop":1701990382715,"duration":10139}},{"uid":"1689a35a5967126b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/1689a35a5967126b","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701942847785,"stop":1701942861990,"duration":14205}},{"uid":"92c3fad8961dc2b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/92c3fad8961dc2b1","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701936574423,"stop":1701936584450,"duration":10027}},{"uid":"928e20dd3d6f6731","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/928e20dd3d6f6731","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701936520307,"stop":1701936533039,"duration":12732}},{"uid":"4541380225ba3f80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/4541380225ba3f80","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701912011882,"stop":1701912023780,"duration":11898}},{"uid":"548ac5dee13831c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/548ac5dee13831c6","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701904895333,"stop":1701904903852,"duration":8519}},{"uid":"f0c42f70fde92671","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/f0c42f70fde92671","status":"failed","statusDetails":"ValueError: time data 'December 2023' does not match format '%d %B %Y'","time":{"start":1701882550398,"stop":1701882562807,"duration":12409}}]},"tags":[]},"source":"594155db14df056f.json","parameterValues":["NorthWestLeicestershire","local","http://selenium:4444"]}