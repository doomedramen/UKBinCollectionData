{"uid":"7f75d70156089234","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1701990379439,"stop":1701990381157,"duration":1718},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f9593f30af0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f95853f4520>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f95853f4520>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f9593f30af0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f95853f4520>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f95853f4520>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1701990379439,"stop":1701990379439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1701990379439,"stop":1701990381155,"duration":1716},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1701990381155,"stop":1701990381155,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1701990381155,"stop":1701990381157,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1429-363"},{"name":"thread","value":"2738-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":58,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":58},"items":[{"uid":"cfee8b3aa22a02ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/cfee8b3aa22a02ed","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990350759,"stop":1701990351860,"duration":1101}},{"uid":"b3673790ef39829","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/b3673790ef39829","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942785913,"stop":1701942787759,"duration":1846}},{"uid":"e10a40d0ae626b02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/e10a40d0ae626b02","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936499843,"stop":1701936501642,"duration":1799}},{"uid":"84e9c3b0fa328d5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/84e9c3b0fa328d5a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936444759,"stop":1701936446042,"duration":1283}},{"uid":"97ca81ad66fb5856","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/97ca81ad66fb5856","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911957374,"stop":1701911959011,"duration":1637}},{"uid":"1192bbd3af565f47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/1192bbd3af565f47","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904866384,"stop":1701904867525,"duration":1141}},{"uid":"f87537e5ae8ab008","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/f87537e5ae8ab008","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882526884,"stop":1701882527966,"duration":1082}},{"uid":"674eb68eb9272045","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/674eb68eb9272045","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825556102,"stop":1701825557315,"duration":1213}},{"uid":"6a7d5aa6495b7255","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/6a7d5aa6495b7255","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795553306,"stop":1701795554944,"duration":1638}},{"uid":"89fdc53416a611a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/89fdc53416a611a1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795505288,"stop":1701795506292,"duration":1004}},{"uid":"7e707bd62c77a8b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/7e707bd62c77a8b4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758525281,"stop":1701758526320,"duration":1039}},{"uid":"79d22a3fc57a2576","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/79d22a3fc57a2576","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758820041,"stop":1701758821491,"duration":1450}},{"uid":"dd7476b334b2a86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/dd7476b334b2a86","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701739160915,"stop":1701739162507,"duration":1592}},{"uid":"2dfe0c53e9f54074","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/2dfe0c53e9f54074","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714325024,"stop":1701714326230,"duration":1206}},{"uid":"bdc5912fb2623ee8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/bdc5912fb2623ee8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714274594,"stop":1701714276785,"duration":2191}},{"uid":"33ce96ab4e07b58d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/33ce96ab4e07b58d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652748955,"stop":1701652750122,"duration":1167}},{"uid":"6f59ec243154f86f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/6f59ec243154f86f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701566525249,"stop":1701566526808,"duration":1559}},{"uid":"6628699e4869039b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/6628699e4869039b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479703580,"stop":1701479705331,"duration":1751}},{"uid":"dae049b9c720eb55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/dae049b9c720eb55","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418950718,"stop":1701418951966,"duration":1248}},{"uid":"c820ae53801673f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/c820ae53801673f4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418885508,"stop":1701418886678,"duration":1170}}]},"tags":[]},"source":"7f75d70156089234.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}