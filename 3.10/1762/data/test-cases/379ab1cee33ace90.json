{"uid":"379ab1cee33ace90","name":"Validate Council Output [GuildfordCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e46674f50d553b47bc9413db8fed7350","time":{"start":1715300850992,"stop":1715300872058,"duration":21066},"status":"failed","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: IO Exception: Read timed out\nMessage: unexpected alert open: {Alert text : IO Exception: Read timed out}\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x55fe48240e43 <unknown>\n#1 0x55fe47f2f4e7 <unknown>\n#2 0x55fe47fbb618 <unknown>\n#3 0x55fe47f9c1f3 <unknown>\n#4 0x55fe47f6d28a <unknown>\n#5 0x55fe47f6dc5e <unknown>\n#6 0x55fe4820516b <unknown>\n#7 0x55fe482090bb <unknown>\n#8 0x55fe481f1281 <unknown>\n#9 0x55fe48209c22 <unknown>\n#10 0x55fe481d613f <unknown>\n#11 0x55fe4822ff98 <unknown>\n#12 0x55fe48230170 <unknown>\n#13 0x55fe4823ff94 <unknown>\n#14 0x7f3026894ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f8a8ea7f1c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8a8de46fe0>, 'council': 'GuildfordCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:85: in parse_data\n    results2 = wait.until(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:81: in _predicate\n    return driver.find_element(*locator)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8a8ea50cd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"IO Exception: Read timed out\"},\"error\":\"unexpected alert open\",\"me...\\\\n#12 0x55fe48230170 \\\\u003Cunknown>\\\\n#13 0x55fe4823ff94 \\\\u003Cunknown>\\\\n#14 0x7f3026894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: IO Exception: Read timed out\nE           Message: unexpected alert open: {Alert text : IO Exception: Read timed out}\nE             (Session info: chrome-headless-shell=124.0.6367.60)\nE           Stacktrace:\nE           #0 0x55fe48240e43 <unknown>\nE           #1 0x55fe47f2f4e7 <unknown>\nE           #2 0x55fe47fbb618 <unknown>\nE           #3 0x55fe47f9c1f3 <unknown>\nE           #4 0x55fe47f6d28a <unknown>\nE           #5 0x55fe47f6dc5e <unknown>\nE           #6 0x55fe4820516b <unknown>\nE           #7 0x55fe482090bb <unknown>\nE           #8 0x55fe481f1281 <unknown>\nE           #9 0x55fe48209c22 <unknown>\nE           #10 0x55fe481d613f <unknown>\nE           #11 0x55fe4822ff98 <unknown>\nE           #12 0x55fe48230170 <unknown>\nE           #13 0x55fe4823ff94 <unknown>\nE           #14 0x7f3026894ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:228: UnexpectedAlertPresentException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: IO Exception: Read timed out\nMessage: unexpected alert open: {Alert text : IO Exception: Read timed out}\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x55fe48240e43 <unknown>\n#1 0x55fe47f2f4e7 <unknown>\n#2 0x55fe47fbb618 <unknown>\n#3 0x55fe47f9c1f3 <unknown>\n#4 0x55fe47f6d28a <unknown>\n#5 0x55fe47f6dc5e <unknown>\n#6 0x55fe4820516b <unknown>\n#7 0x55fe482090bb <unknown>\n#8 0x55fe481f1281 <unknown>\n#9 0x55fe48209c22 <unknown>\n#10 0x55fe481d613f <unknown>\n#11 0x55fe4822ff98 <unknown>\n#12 0x55fe48230170 <unknown>\n#13 0x55fe4823ff94 <unknown>\n#14 0x7f3026894ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f8a8ea7f1c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8a8de46fe0>, 'council': 'GuildfordCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:85: in parse_data\n    results2 = wait.until(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:81: in _predicate\n    return driver.find_element(*locator)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8a8ea50cd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"IO Exception: Read timed out\"},\"error\":\"unexpected alert open\",\"me...\\\\n#12 0x55fe48230170 \\\\u003Cunknown>\\\\n#13 0x55fe4823ff94 \\\\u003Cunknown>\\\\n#14 0x7f3026894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: IO Exception: Read timed out\nE           Message: unexpected alert open: {Alert text : IO Exception: Read timed out}\nE             (Session info: chrome-headless-shell=124.0.6367.60)\nE           Stacktrace:\nE           #0 0x55fe48240e43 <unknown>\nE           #1 0x55fe47f2f4e7 <unknown>\nE           #2 0x55fe47fbb618 <unknown>\nE           #3 0x55fe47f9c1f3 <unknown>\nE           #4 0x55fe47f6d28a <unknown>\nE           #5 0x55fe47f6dc5e <unknown>\nE           #6 0x55fe4820516b <unknown>\nE           #7 0x55fe482090bb <unknown>\nE           #8 0x55fe481f1281 <unknown>\nE           #9 0x55fe48209c22 <unknown>\nE           #10 0x55fe481d613f <unknown>\nE           #11 0x55fe4822ff98 <unknown>\nE           #12 0x55fe48230170 <unknown>\nE           #13 0x55fe4823ff94 <unknown>\nE           #14 0x7f3026894ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:228: UnexpectedAlertPresentException","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1715300850992,"stop":1715300850993,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GuildfordCouncil using local and the http://selenium:4444 is set","time":{"start":1715300850993,"stop":1715300872058,"duration":21065},"status":"failed","statusMessage":"Alert Text: IO Exception: Read timed out\nMessage: unexpected alert open: {Alert text : IO Exception: Read timed out}\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x55fe48240e43 <unknown>\n#1 0x55fe47f2f4e7 <unknown>\n#2 0x55fe47fbb618 <unknown>\n#3 0x55fe47f9c1f3 <unknown>\n#4 0x55fe47f6d28a <unknown>\n#5 0x55fe47f6dc5e <unknown>\n#6 0x55fe4820516b <unknown>\n#7 0x55fe482090bb <unknown>\n#8 0x55fe481f1281 <unknown>\n#9 0x55fe48209c22 <unknown>\n#10 0x55fe481d613f <unknown>\n#11 0x55fe4822ff98 <unknown>\n#12 0x55fe48230170 <unknown>\n#13 0x55fe4823ff94 <unknown>\n#14 0x7f3026894ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: IO Exception: Read timed out\nMessage: unexpected alert open: {Alert text : IO Exception: Read timed out}\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x55fe48240e43 <unknown>\n#1 0x55fe47f2f4e7 <unknown>\n#2 0x55fe47fbb618 <unknown>\n#3 0x55fe47f9c1f3 <unknown>\n#4 0x55fe47f6d28a <unknown>\n#5 0x55fe47f6dc5e <unknown>\n#6 0x55fe4820516b <unknown>\n#7 0x55fe482090bb <unknown>\n#8 0x55fe481f1281 <unknown>\n#9 0x55fe48209c22 <unknown>\n#10 0x55fe481d613f <unknown>\n#11 0x55fe4822ff98 <unknown>\n#12 0x55fe48230170 <unknown>\n#13 0x55fe4823ff94 <unknown>\n#14 0x7f3026894ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1196-675"},{"name":"thread","value":"2690-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":168,"unknown":0,"total":176},"items":[{"uid":"86e2d163a0976d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1760//#testresult/86e2d163a0976d","status":"passed","time":{"start":1715285176664,"stop":1715285187085,"duration":10421}},{"uid":"3a1b6ed05329e2d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1756//#testresult/3a1b6ed05329e2d1","status":"passed","time":{"start":1715214439124,"stop":1715214447484,"duration":8360}},{"uid":"a17812b705f05360","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1743//#testresult/a17812b705f05360","status":"passed","time":{"start":1715041642207,"stop":1715041650531,"duration":8324}},{"uid":"263860d1c61fee97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1742//#testresult/263860d1c61fee97","status":"passed","time":{"start":1714955304261,"stop":1714955313827,"duration":9566}},{"uid":"931d35993f8b4e7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1741//#testresult/931d35993f8b4e7c","status":"passed","time":{"start":1714869025798,"stop":1714869036852,"duration":11054}},{"uid":"83b58f4d0d0c36f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1740//#testresult/83b58f4d0d0c36f6","status":"passed","time":{"start":1714782385030,"stop":1714782397656,"duration":12626}},{"uid":"503b9b209d63f09d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1739//#testresult/503b9b209d63f09d","status":"passed","time":{"start":1714696032323,"stop":1714696042861,"duration":10538}},{"uid":"e5081e6e9e18784d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1738//#testresult/e5081e6e9e18784d","status":"passed","time":{"start":1714609620137,"stop":1714609629277,"duration":9140}},{"uid":"cab1b7559735c3ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1735//#testresult/cab1b7559735c3ff","status":"passed","time":{"start":1714523352056,"stop":1714523362045,"duration":9989}},{"uid":"5ef92af7079c55ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1734//#testresult/5ef92af7079c55ee","status":"passed","time":{"start":1714436799282,"stop":1714436810018,"duration":10736}},{"uid":"26495a57fa0e37d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1732//#testresult/26495a57fa0e37d","status":"passed","time":{"start":1714350510650,"stop":1714350519573,"duration":8923}},{"uid":"45db17321d8789","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1724//#testresult/45db17321d8789","status":"passed","time":{"start":1714264280769,"stop":1714264289826,"duration":9057}},{"uid":"b907580607584d24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1722//#testresult/b907580607584d24","status":"passed","time":{"start":1714234175878,"stop":1714234185148,"duration":9270}},{"uid":"6768fb455efb2427","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1714//#testresult/6768fb455efb2427","status":"passed","time":{"start":1714232725312,"stop":1714232734246,"duration":8934}},{"uid":"cfa4d3edd1c2e8de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1713//#testresult/cfa4d3edd1c2e8de","status":"passed","time":{"start":1714177632220,"stop":1714177644151,"duration":11931}},{"uid":"acf805cc032564cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1712//#testresult/acf805cc032564cd","status":"passed","time":{"start":1714091239102,"stop":1714091247310,"duration":8208}},{"uid":"5ba7a01b0b0ae343","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1711//#testresult/5ba7a01b0b0ae343","status":"passed","time":{"start":1714004920488,"stop":1714004931050,"duration":10562}},{"uid":"63206b9406d0c462","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1710//#testresult/63206b9406d0c462","status":"passed","time":{"start":1713918463781,"stop":1713918471173,"duration":7392}},{"uid":"be52705d96ec55de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1709//#testresult/be52705d96ec55de","status":"passed","time":{"start":1713832569199,"stop":1713832579118,"duration":9919}},{"uid":"f38f8e845b5a5ac3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1708//#testresult/f38f8e845b5a5ac3","status":"passed","time":{"start":1713745689809,"stop":1713745701626,"duration":11817}}]},"tags":[]},"source":"379ab1cee33ace90.json","parameterValues":["GuildfordCouncil","local","http://selenium:4444"]}