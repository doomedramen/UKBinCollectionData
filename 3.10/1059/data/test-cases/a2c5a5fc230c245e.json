{"uid":"a2c5a5fc230c245e","name":"Validate Council Output [HighPeakCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f014a970b405df22a91c3a1e6926ba51","time":{"start":1698615082634,"stop":1698615090028,"duration":7394},"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f69a3596cb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f699b1067d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f699b1067d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f69a3596cb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f699b1067d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f699b1067d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","steps":[{"name":"Given the council: HighPeakCouncil","time":{"start":1698615082635,"stop":1698615082635,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from HighPeakCouncil","time":{"start":1698615082636,"stop":1698615090021,"duration":7385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1698615090022,"stop":1698615090022,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1698615090022,"stop":1698615090028,"duration":6},"status":"failed","statusMessage":"assert False is True","statusTrace":"AssertionError: assert False is True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az305-64"},{"name":"thread","value":"2279-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HighPeakCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":52,"broken":0,"skipped":0,"passed":106,"unknown":0,"total":158},"items":[{"uid":"e9236bbd134854e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/e9236bbd134854e6","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698542367402,"stop":1698542375117,"duration":7715}},{"uid":"dd1b2478f7d7b7e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/dd1b2478f7d7b7e4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698455555393,"stop":1698455561920,"duration":6527}},{"uid":"1a2486c55ca55a1f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1051//#testresult/1a2486c55ca55a1f","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698369230524,"stop":1698369238056,"duration":7532}},{"uid":"998b930c0ff3bd99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1050//#testresult/998b930c0ff3bd99","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698282845992,"stop":1698282856298,"duration":10306}},{"uid":"950b0ca68c25077d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1049//#testresult/950b0ca68c25077d","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698196503856,"stop":1698196513068,"duration":9212}},{"uid":"545f3bac2e4efcc0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1048//#testresult/545f3bac2e4efcc0","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698178229438,"stop":1698178238455,"duration":9017}},{"uid":"9edf33c62ac3fb34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1047//#testresult/9edf33c62ac3fb34","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698178209315,"stop":1698178219110,"duration":9795}},{"uid":"942f191adb3df58f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1046//#testresult/942f191adb3df58f","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698110098471,"stop":1698110105807,"duration":7336}},{"uid":"e42387588ffb25df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/e42387588ffb25df","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698065162303,"stop":1698065169445,"duration":7142}},{"uid":"77bd2e02b0184a8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/77bd2e02b0184a8d","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698064892110,"stop":1698064900042,"duration":7932}},{"uid":"e31c7affbc183658","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/e31c7affbc183658","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698023751012,"stop":1698023759378,"duration":8366}},{"uid":"6d23fbab683a08d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/6d23fbab683a08d4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697937629949,"stop":1697937638980,"duration":9031}},{"uid":"b76116c6f53fc95b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/b76116c6f53fc95b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697850796679,"stop":1697850804707,"duration":8028}},{"uid":"2a3051e33c4c11e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1037//#testresult/2a3051e33c4c11e","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697790376528,"stop":1697790383516,"duration":6988}},{"uid":"5e1d957799cc1a0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1036//#testresult/5e1d957799cc1a0a","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697790396681,"stop":1697790404850,"duration":8169}},{"uid":"13f357cf6739d817","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1034//#testresult/13f357cf6739d817","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697764516154,"stop":1697764524979,"duration":8825}},{"uid":"bb56439422fa343b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/bb56439422fa343b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706544223,"stop":1697706555182,"duration":10959}},{"uid":"74c39a6a0cde653e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/74c39a6a0cde653e","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706504849,"stop":1697706513296,"duration":8447}},{"uid":"41065285249ad46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/41065285249ad46","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702047934,"stop":1697702047935,"duration":1}},{"uid":"d9389bbf16ee30f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/d9389bbf16ee30f4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697696169611,"stop":1697696179905,"duration":10294}}]},"tags":[]},"source":"a2c5a5fc230c245e.json","parameterValues":["HighPeakCouncil"]}