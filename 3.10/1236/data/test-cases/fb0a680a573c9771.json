{"uid":"fb0a680a573c9771","name":"Validate Council Output [GatesheadCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"06e54311f2a0be18545214e444671747","time":{"start":1702430346526,"stop":1702430656526,"duration":310000},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.199)\nStacktrace:\n#0 0x55e8d94bc5e3 <unknown>\n#1 0x55e8d917f0b7 <unknown>\n#2 0x55e8d916523a <unknown>\n#3 0x55e8d91650a9 <unknown>\n#4 0x55e8d9163481 <unknown>\n#5 0x55e8d9163e39 <unknown>\n#6 0x55e8d91748ac <unknown>\n#7 0x55e8d918c4c1 <unknown>\n#8 0x55e8d919213b <unknown>\n#9 0x55e8d91645ce <unknown>\n#10 0x55e8d918c2c4 <unknown>\n#11 0x55e8d920fd42 <unknown>\n#12 0x55e8d91f3cc3 <unknown>\n#13 0x55e8d91bf0e4 <unknown>\n#14 0x55e8d91c00ae <unknown>\n#15 0x55e8d9482ce1 <unknown>\n#16 0x55e8d9486b7e <unknown>\n#17 0x55e8d94704b5 <unknown>\n#18 0x55e8d94877d6 <unknown>\n#19 0x55e8d9453dbf <unknown>\n#20 0x55e8d94aa748 <unknown>\n#21 0x55e8d94aa917 <unknown>\n#22 0x55e8d94bb773 <unknown>\n#23 0x7f7a1b094ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f667592aef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6664282aa0>, 'council': 'GatesheadCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:49: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6664281660>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55e8d94aa917 \\\\u003Cunknown>\\\\n#22 0x55e8d94bb773 \\\\u003Cunknown>\\\\n#23 0x7f7a1b094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=119.0.6045.199)\nE       Stacktrace:\nE       #0 0x55e8d94bc5e3 <unknown>\nE       #1 0x55e8d917f0b7 <unknown>\nE       #2 0x55e8d916523a <unknown>\nE       #3 0x55e8d91650a9 <unknown>\nE       #4 0x55e8d9163481 <unknown>\nE       #5 0x55e8d9163e39 <unknown>\nE       #6 0x55e8d91748ac <unknown>\nE       #7 0x55e8d918c4c1 <unknown>\nE       #8 0x55e8d919213b <unknown>\nE       #9 0x55e8d91645ce <unknown>\nE       #10 0x55e8d918c2c4 <unknown>\nE       #11 0x55e8d920fd42 <unknown>\nE       #12 0x55e8d91f3cc3 <unknown>\nE       #13 0x55e8d91bf0e4 <unknown>\nE       #14 0x55e8d91c00ae <unknown>\nE       #15 0x55e8d9482ce1 <unknown>\nE       #16 0x55e8d9486b7e <unknown>\nE       #17 0x55e8d94704b5 <unknown>\nE       #18 0x55e8d94877d6 <unknown>\nE       #19 0x55e8d9453dbf <unknown>\nE       #20 0x55e8d94aa748 <unknown>\nE       #21 0x55e8d94aa917 <unknown>\nE       #22 0x55e8d94bb773 <unknown>\nE       #23 0x7f7a1b094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.199)\nStacktrace:\n#0 0x55e8d94bc5e3 <unknown>\n#1 0x55e8d917f0b7 <unknown>\n#2 0x55e8d916523a <unknown>\n#3 0x55e8d91650a9 <unknown>\n#4 0x55e8d9163481 <unknown>\n#5 0x55e8d9163e39 <unknown>\n#6 0x55e8d91748ac <unknown>\n#7 0x55e8d918c4c1 <unknown>\n#8 0x55e8d919213b <unknown>\n#9 0x55e8d91645ce <unknown>\n#10 0x55e8d918c2c4 <unknown>\n#11 0x55e8d920fd42 <unknown>\n#12 0x55e8d91f3cc3 <unknown>\n#13 0x55e8d91bf0e4 <unknown>\n#14 0x55e8d91c00ae <unknown>\n#15 0x55e8d9482ce1 <unknown>\n#16 0x55e8d9486b7e <unknown>\n#17 0x55e8d94704b5 <unknown>\n#18 0x55e8d94877d6 <unknown>\n#19 0x55e8d9453dbf <unknown>\n#20 0x55e8d94aa748 <unknown>\n#21 0x55e8d94aa917 <unknown>\n#22 0x55e8d94bb773 <unknown>\n#23 0x7f7a1b094ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f667592aef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6664282aa0>, 'council': 'GatesheadCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:49: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6664281660>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55e8d94aa917 \\\\u003Cunknown>\\\\n#22 0x55e8d94bb773 \\\\u003Cunknown>\\\\n#23 0x7f7a1b094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=119.0.6045.199)\nE       Stacktrace:\nE       #0 0x55e8d94bc5e3 <unknown>\nE       #1 0x55e8d917f0b7 <unknown>\nE       #2 0x55e8d916523a <unknown>\nE       #3 0x55e8d91650a9 <unknown>\nE       #4 0x55e8d9163481 <unknown>\nE       #5 0x55e8d9163e39 <unknown>\nE       #6 0x55e8d91748ac <unknown>\nE       #7 0x55e8d918c4c1 <unknown>\nE       #8 0x55e8d919213b <unknown>\nE       #9 0x55e8d91645ce <unknown>\nE       #10 0x55e8d918c2c4 <unknown>\nE       #11 0x55e8d920fd42 <unknown>\nE       #12 0x55e8d91f3cc3 <unknown>\nE       #13 0x55e8d91bf0e4 <unknown>\nE       #14 0x55e8d91c00ae <unknown>\nE       #15 0x55e8d9482ce1 <unknown>\nE       #16 0x55e8d9486b7e <unknown>\nE       #17 0x55e8d94704b5 <unknown>\nE       #18 0x55e8d94877d6 <unknown>\nE       #19 0x55e8d9453dbf <unknown>\nE       #20 0x55e8d94aa748 <unknown>\nE       #21 0x55e8d94aa917 <unknown>\nE       #22 0x55e8d94bb773 <unknown>\nE       #23 0x7f7a1b094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Given the council: GatesheadCouncil","time":{"start":1702430346526,"stop":1702430346527,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"When we scrape the data from GatesheadCouncil using local and the http://selenium:4444 is set","time":{"start":1702430346527,"stop":1702430656526,"duration":309999},"status":"failed","statusMessage":"Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.199)\nStacktrace:\n#0 0x55e8d94bc5e3 <unknown>\n#1 0x55e8d917f0b7 <unknown>\n#2 0x55e8d916523a <unknown>\n#3 0x55e8d91650a9 <unknown>\n#4 0x55e8d9163481 <unknown>\n#5 0x55e8d9163e39 <unknown>\n#6 0x55e8d91748ac <unknown>\n#7 0x55e8d918c4c1 <unknown>\n#8 0x55e8d919213b <unknown>\n#9 0x55e8d91645ce <unknown>\n#10 0x55e8d918c2c4 <unknown>\n#11 0x55e8d920fd42 <unknown>\n#12 0x55e8d91f3cc3 <unknown>\n#13 0x55e8d91bf0e4 <unknown>\n#14 0x55e8d91c00ae <unknown>\n#15 0x55e8d9482ce1 <unknown>\n#16 0x55e8d9486b7e <unknown>\n#17 0x55e8d94704b5 <unknown>\n#18 0x55e8d94877d6 <unknown>\n#19 0x55e8d9453dbf <unknown>\n#20 0x55e8d94aa748 <unknown>\n#21 0x55e8d94aa917 <unknown>\n#22 0x55e8d94bb773 <unknown>\n#23 0x7f7a1b094ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.199)\nStacktrace:\n#0 0x55e8d94bc5e3 <unknown>\n#1 0x55e8d917f0b7 <unknown>\n#2 0x55e8d916523a <unknown>\n#3 0x55e8d91650a9 <unknown>\n#4 0x55e8d9163481 <unknown>\n#5 0x55e8d9163e39 <unknown>\n#6 0x55e8d91748ac <unknown>\n#7 0x55e8d918c4c1 <unknown>\n#8 0x55e8d919213b <unknown>\n#9 0x55e8d91645ce <unknown>\n#10 0x55e8d918c2c4 <unknown>\n#11 0x55e8d920fd42 <unknown>\n#12 0x55e8d91f3cc3 <unknown>\n#13 0x55e8d91bf0e4 <unknown>\n#14 0x55e8d91c00ae <unknown>\n#15 0x55e8d9482ce1 <unknown>\n#16 0x55e8d9486b7e <unknown>\n#17 0x55e8d94704b5 <unknown>\n#18 0x55e8d94877d6 <unknown>\n#19 0x55e8d9453dbf <unknown>\n#20 0x55e8d94aa748 <unknown>\n#21 0x55e8d94aa917 <unknown>\n#22 0x55e8d94bb773 <unknown>\n#23 0x7f7a1b094ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":2},"afterStages":[],"labels":[{"name":"host","value":"fv-az1542-548"},{"name":"thread","value":"2748-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GatesheadCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":62,"unknown":0,"total":67},"items":[{"uid":"fe5762a99557afbb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/fe5762a99557afbb","status":"passed","time":{"start":1702366504362,"stop":1702366511303,"duration":6941}},{"uid":"4dd5b0c5ca11b646","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/4dd5b0c5ca11b646","status":"passed","time":{"start":1702343965924,"stop":1702343974400,"duration":8476}},{"uid":"d2afe1eaf3e5b1d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/d2afe1eaf3e5b1d7","status":"passed","time":{"start":1702257566058,"stop":1702257573125,"duration":7067}},{"uid":"6d278f39db9d762c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/6d278f39db9d762c","status":"passed","time":{"start":1702171418041,"stop":1702171426205,"duration":8164}},{"uid":"46b0b257cc7f3421","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/46b0b257cc7f3421","status":"passed","time":{"start":1702084652005,"stop":1702084668187,"duration":16182}},{"uid":"a93fccecebe79251","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/a93fccecebe79251","status":"passed","time":{"start":1702066738861,"stop":1702066747477,"duration":8616}},{"uid":"590dd4af9da402d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/590dd4af9da402d1","status":"passed","time":{"start":1702054374121,"stop":1702054381076,"duration":6955}},{"uid":"486d0b9327e5d18a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/486d0b9327e5d18a","status":"passed","time":{"start":1701998393879,"stop":1701998403405,"duration":9526}},{"uid":"676f1aae3cceb168","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/676f1aae3cceb168","status":"passed","time":{"start":1701990385202,"stop":1701990393715,"duration":8513}},{"uid":"d4b7b7cbbce404f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/d4b7b7cbbce404f7","status":"passed","time":{"start":1701990351639,"stop":1701990359474,"duration":7835}},{"uid":"97c1ecf5c12f835f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/97c1ecf5c12f835f","status":"passed","time":{"start":1701942781593,"stop":1701942791970,"duration":10377}},{"uid":"600138a72eddcfea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/600138a72eddcfea","status":"passed","time":{"start":1701936491014,"stop":1701936499930,"duration":8916}},{"uid":"649dc789d4a5b779","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/649dc789d4a5b779","status":"passed","time":{"start":1701936460296,"stop":1701936467010,"duration":6714}},{"uid":"699f978024a7c705","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/699f978024a7c705","status":"passed","time":{"start":1701911951232,"stop":1701911960469,"duration":9237}},{"uid":"7dce2c47337f85fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/7dce2c47337f85fd","status":"passed","time":{"start":1701904849401,"stop":1701904857155,"duration":7754}},{"uid":"3c48cdac18c4a036","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/3c48cdac18c4a036","status":"passed","time":{"start":1701882508439,"stop":1701882515473,"duration":7034}},{"uid":"ed9eb4c355e644b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/ed9eb4c355e644b7","status":"passed","time":{"start":1701825536661,"stop":1701825544735,"duration":8074}},{"uid":"6b4f8425af0c05df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/6b4f8425af0c05df","status":"passed","time":{"start":1701795540731,"stop":1701795556593,"duration":15862}},{"uid":"29a788a3f441e4f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/29a788a3f441e4f4","status":"passed","time":{"start":1701795484655,"stop":1701795491981,"duration":7326}},{"uid":"79c3ba62825a9bb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/79c3ba62825a9bb3","status":"passed","time":{"start":1701758502355,"stop":1701758509668,"duration":7313}}]},"tags":[]},"source":"fb0a680a573c9771.json","parameterValues":["GatesheadCouncil","local","http://selenium:4444"]}