{"uid":"b37e689797721328","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1702430336620,"stop":1702430337657,"duration":1037},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f4e16524700>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4e04835270>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f4e04835270>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f4e16524700>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4e04835270>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f4e04835270>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1702430336620,"stop":1702430336620,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1702430336620,"stop":1702430337655,"duration":1035},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"Then the result is valid json","time":{"start":1702430337655,"stop":1702430337655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"And the output should validate against the schema","time":{"start":1702430337656,"stop":1702430337657,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":4},"afterStages":[],"labels":[{"name":"host","value":"fv-az1542-548"},{"name":"thread","value":"2757-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":67,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":67},"items":[{"uid":"36da5dbd8768a11c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1232//#testresult/36da5dbd8768a11c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366503144,"stop":1702366504270,"duration":1126}},{"uid":"1aa5c9c24d34fa98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1231//#testresult/1aa5c9c24d34fa98","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343965939,"stop":1702343967126,"duration":1187}},{"uid":"abd8928dd28f3b42","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/abd8928dd28f3b42","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257553220,"stop":1702257554509,"duration":1289}},{"uid":"221c8554131ac2e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/221c8554131ac2e3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171417365,"stop":1702171418455,"duration":1090}},{"uid":"df5557a9e1e7bdd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/df5557a9e1e7bdd8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084686516,"stop":1702084687717,"duration":1201}},{"uid":"84ca0cf44852c0ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/84ca0cf44852c0ff","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066730966,"stop":1702066732665,"duration":1699}},{"uid":"6d138b84481aad22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/6d138b84481aad22","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054366887,"stop":1702054369061,"duration":2174}},{"uid":"bf87cd22af56e49b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/bf87cd22af56e49b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998387936,"stop":1701998389445,"duration":1509}},{"uid":"7f75d70156089234","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/7f75d70156089234","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990379439,"stop":1701990381157,"duration":1718}},{"uid":"cfee8b3aa22a02ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/cfee8b3aa22a02ed","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990350759,"stop":1701990351860,"duration":1101}},{"uid":"b3673790ef39829","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/b3673790ef39829","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942785913,"stop":1701942787759,"duration":1846}},{"uid":"e10a40d0ae626b02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/e10a40d0ae626b02","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936499843,"stop":1701936501642,"duration":1799}},{"uid":"84e9c3b0fa328d5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/84e9c3b0fa328d5a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936444759,"stop":1701936446042,"duration":1283}},{"uid":"97ca81ad66fb5856","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/97ca81ad66fb5856","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911957374,"stop":1701911959011,"duration":1637}},{"uid":"1192bbd3af565f47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/1192bbd3af565f47","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904866384,"stop":1701904867525,"duration":1141}},{"uid":"f87537e5ae8ab008","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/f87537e5ae8ab008","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882526884,"stop":1701882527966,"duration":1082}},{"uid":"674eb68eb9272045","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/674eb68eb9272045","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825556102,"stop":1701825557315,"duration":1213}},{"uid":"6a7d5aa6495b7255","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/6a7d5aa6495b7255","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795553306,"stop":1701795554944,"duration":1638}},{"uid":"89fdc53416a611a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/89fdc53416a611a1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795505288,"stop":1701795506292,"duration":1004}},{"uid":"7e707bd62c77a8b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/7e707bd62c77a8b4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758525281,"stop":1701758526320,"duration":1039}}]},"tags":[]},"source":"b37e689797721328.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}