{"uid":"ef8f1bf5d8974ea3","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1701036121811,"stop":1701036131535,"duration":9724},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f146e63edd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f145c429f00>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f145c429f00>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f146e63edd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f145c429f00>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f145c429f00>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1701036121811,"stop":1701036121812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1701036121812,"stop":1701036131533,"duration":9721},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701036131533,"stop":1701036131533,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701036131534,"stop":1701036131535,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1543-991"},{"name":"thread","value":"2980-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":26},"items":[{"uid":"cde4db3a261dbc35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/cde4db3a261dbc35","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961703729,"stop":1700961904996,"duration":201267}},{"uid":"db7298caa39aa2e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/db7298caa39aa2e7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874892244,"stop":1700874916431,"duration":24187}},{"uid":"c7394055a66fc61b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/c7394055a66fc61b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788557251,"stop":1700788566390,"duration":9139}},{"uid":"d5302e027d9fd737","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/d5302e027d9fd737","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702260235,"stop":1700702284358,"duration":24123}},{"uid":"67a1b8c56e843ecf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/67a1b8c56e843ecf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646345277,"stop":1700646354390,"duration":9113}},{"uid":"10489f930074075d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/10489f930074075d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616024051,"stop":1700616033435,"duration":9384}},{"uid":"c763b08113d07c14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/c763b08113d07c14","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529657416,"stop":1700529858581,"duration":201165}},{"uid":"12c758f461f53b8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/12c758f461f53b8b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443139287,"stop":1700443162622,"duration":23335}},{"uid":"65988538a3f35241","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/65988538a3f35241","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700356981060,"stop":1700357181771,"duration":200711}},{"uid":"545f16b8e7a273e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/545f16b8e7a273e1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270305954,"stop":1700270315054,"duration":9100}},{"uid":"a79030fbcd9b9e02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/a79030fbcd9b9e02","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700183887991,"stop":1700183910493,"duration":22502}},{"uid":"261ad3570c8b922f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/261ad3570c8b922f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097518024,"stop":1700097527032,"duration":9008}},{"uid":"a1344ef404c9b6b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/a1344ef404c9b6b0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011060102,"stop":1700011069502,"duration":9400}},{"uid":"6863930d67206ae7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/6863930d67206ae7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924590719,"stop":1699924613848,"duration":23129}},{"uid":"832d1c0357a57ac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1127//#testresult/832d1c0357a57ac9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838303957,"stop":1699838326471,"duration":22514}},{"uid":"ef1464a84fda3fc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1126//#testresult/ef1464a84fda3fc9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752076689,"stop":1699752277390,"duration":200701}},{"uid":"faa6e0c2dc608747","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1125//#testresult/faa6e0c2dc608747","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699669485675,"stop":1699669508431,"duration":22756}},{"uid":"1981046254ea55ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1124//#testresult/1981046254ea55ab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699578923201,"stop":1699578945887,"duration":22686}},{"uid":"dc6557e6f822517a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1123//#testresult/dc6557e6f822517a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492585295,"stop":1699492606863,"duration":21568}},{"uid":"59c148a1d26d972c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1121//#testresult/59c148a1d26d972c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481240103,"stop":1699481248819,"duration":8716}}]},"tags":[]},"source":"ef8f1bf5d8974ea3.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}