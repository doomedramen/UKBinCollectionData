{"uid":"6f7727d6ab29498d","name":"Validate Council Output [MertonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a067692419696058d026d9aab0da27d0","time":{"start":1699669518199,"stop":1699669523597,"duration":5398},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f57e84ba9e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f57d4cddea0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f57d4cddea0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f57e84ba9e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f57d4cddea0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f57d4cddea0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1699669518199,"stop":1699669518200,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from MertonCouncil using None and the None is set","time":{"start":1699669518200,"stop":1699669523594,"duration":5394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1699669523595,"stop":1699669523595,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1699669523595,"stop":1699669523597,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az773-392"},{"name":"thread","value":"2666-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"612156867a7ee6a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1124//#testresult/612156867a7ee6a0","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1699578959129,"stop":1699578961118,"duration":1989}},{"uid":"370a6a20ecf86ada","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1123//#testresult/370a6a20ecf86ada","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492644308,"stop":1699492646479,"duration":2171}},{"uid":"957a1852d214ec2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1121//#testresult/957a1852d214ec2d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481274382,"stop":1699481275714,"duration":1332}},{"uid":"e363c2f30276ab98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1117//#testresult/e363c2f30276ab98","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445235244,"stop":1699445236622,"duration":1378}},{"uid":"a94c8f98aca7df3b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1115//#testresult/a94c8f98aca7df3b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406433829,"stop":1699406436062,"duration":2233}},{"uid":"b217637002338be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1114//#testresult/b217637002338be","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699319820280,"stop":1699319821902,"duration":1622}},{"uid":"df32ab016ca8fb05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1113//#testresult/df32ab016ca8fb05","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233485491,"stop":1699233491008,"duration":5517}},{"uid":"89fd0ba9003954c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1111//#testresult/89fd0ba9003954c3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699170684801,"stop":1699170690476,"duration":5675}}]},"tags":[]},"source":"6f7727d6ab29498d.json","parameterValues":["MertonCouncil","None","None"]}