{"uid":"4797be01544e14bf","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1697706491700,"stop":1697706497179,"duration":5479},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2140722ef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f21347514b0>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f213554c790>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7f213554e7a0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'dd60c7ca02090db088c70f96101dc53ab1927dd9', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2140722ef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f21347514b0>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f213554c790>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7f213554e7a0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'dd60c7ca02090db088c70f96101dc53ab1927dd9', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1697706491701,"stop":1697706491701,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CroydonCouncil","time":{"start":1697706491702,"stop":1697706497179,"duration":5477},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az455-329"},{"name":"thread","value":"2102-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":93,"broken":0,"skipped":0,"passed":48,"unknown":0,"total":141},"items":[{"uid":"b2d61d05d654062d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/b2d61d05d654062d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697706456504,"stop":1697706458290,"duration":1786}},{"uid":"f36dbf6cfe1ca7ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/f36dbf6cfe1ca7ed","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702047630,"stop":1697702047631,"duration":1}},{"uid":"83f6d7d0b102605a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/83f6d7d0b102605a","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697696140979,"stop":1697696142787,"duration":1808}},{"uid":"f4b840b1bae5d092","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/f4b840b1bae5d092","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1697678062546,"stop":1697678066903,"duration":4357}},{"uid":"eeab67678da97f6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/eeab67678da97f6b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697666550138,"stop":1697666552443,"duration":2305}},{"uid":"b0d3cc4c81cfe54e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/b0d3cc4c81cfe54e","status":"passed","time":{"start":1697666502020,"stop":1697666506403,"duration":4383}},{"uid":"aa12cd6538d28c25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/aa12cd6538d28c25","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697656794999,"stop":1697656796845,"duration":1846}},{"uid":"93d49d432db15084","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/93d49d432db15084","status":"passed","time":{"start":1697656749969,"stop":1697656754772,"duration":4803}},{"uid":"b6e538598f9884cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/b6e538598f9884cb","status":"passed","time":{"start":1697650014798,"stop":1697650019736,"duration":4938}},{"uid":"e652384dcd9cdf68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/e652384dcd9cdf68","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697618246692,"stop":1697618248593,"duration":1901}},{"uid":"f0262a6f690c2a00","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/f0262a6f690c2a00","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697618210401,"stop":1697618212013,"duration":1612}},{"uid":"173e59915a4d7742","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1010//#testresult/173e59915a4d7742","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697591737840,"stop":1697591739665,"duration":1825}},{"uid":"f859a8ecce3e4ea9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1009//#testresult/f859a8ecce3e4ea9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697542596982,"stop":1697542598471,"duration":1489}},{"uid":"cc5c7bdb2790781f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1008//#testresult/cc5c7bdb2790781f","status":"passed","time":{"start":1697505320413,"stop":1697505325992,"duration":5579}},{"uid":"c38f946bf447e712","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1006//#testresult/c38f946bf447e712","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697484624716,"stop":1697484626408,"duration":1692}},{"uid":"5e5cb6a9a9936670","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1005//#testresult/5e5cb6a9a9936670","status":"passed","time":{"start":1697484577978,"stop":1697484581933,"duration":3955}},{"uid":"46a73003bd812a6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1004//#testresult/46a73003bd812a6c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697418984560,"stop":1697418986229,"duration":1669}},{"uid":"4294c4fe5c95d3b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1001//#testresult/4294c4fe5c95d3b6","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697403147125,"stop":1697403148283,"duration":1158}},{"uid":"adec718085df97e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/998//#testresult/adec718085df97e9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697399704824,"stop":1697399706050,"duration":1226}},{"uid":"186674935ac7ca04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/994//#testresult/186674935ac7ca04","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1697366959469,"stop":1697366960711,"duration":1242}}]},"tags":[]},"source":"4797be01544e14bf.json","parameterValues":["CroydonCouncil"]}