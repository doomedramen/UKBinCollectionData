{"uid":"584cb7b2ee27577f","name":"Validate Council Output [GatesheadCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"3a7171e6de629587a3f0d32410302b35","time":{"start":1698692756617,"stop":1698693060902,"duration":304285},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=118.0.5993.117)\nStacktrace:\n#0 0x5609899affb3 <unknown>\n#1 0x5609896834a7 <unknown>\n#2 0x56098966b49e <unknown>\n#3 0x56098966b2ce <unknown>\n#4 0x560989669ecd <unknown>\n#5 0x56098966a4cf <unknown>\n#6 0x560989679a04 <unknown>\n#7 0x56098968e651 <unknown>\n#8 0x56098969304b <unknown>\n#9 0x56098966abf1 <unknown>\n#10 0x56098968e446 <unknown>\n#11 0x560989705dfc <unknown>\n#12 0x5609896ec713 <unknown>\n#13 0x5609896bf18b <unknown>\n#14 0x5609896bff7e <unknown>\n#15 0x5609899758d8 <unknown>\n#16 0x560989979800 <unknown>\n#17 0x560989983cfc <unknown>\n#18 0x56098997a418 <unknown>\n#19 0x56098994742f <unknown>\n#20 0x56098999e4e8 <unknown>\n#21 0x56098999e6b4 <unknown>\n#22 0x5609899af143 <unknown>\n#23 0x7f6748e94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fc16a562dd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc15e11ae00>, 'council': 'GatesheadCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:48: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc15e55a2f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x56098999e6b4 \\\\u003Cunknown>\\\\n#22 0x5609899af143 \\\\u003Cunknown>\\\\n#23 0x7f6748e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=118.0.5993.117)\nE       Stacktrace:\nE       #0 0x5609899affb3 <unknown>\nE       #1 0x5609896834a7 <unknown>\nE       #2 0x56098966b49e <unknown>\nE       #3 0x56098966b2ce <unknown>\nE       #4 0x560989669ecd <unknown>\nE       #5 0x56098966a4cf <unknown>\nE       #6 0x560989679a04 <unknown>\nE       #7 0x56098968e651 <unknown>\nE       #8 0x56098969304b <unknown>\nE       #9 0x56098966abf1 <unknown>\nE       #10 0x56098968e446 <unknown>\nE       #11 0x560989705dfc <unknown>\nE       #12 0x5609896ec713 <unknown>\nE       #13 0x5609896bf18b <unknown>\nE       #14 0x5609896bff7e <unknown>\nE       #15 0x5609899758d8 <unknown>\nE       #16 0x560989979800 <unknown>\nE       #17 0x560989983cfc <unknown>\nE       #18 0x56098997a418 <unknown>\nE       #19 0x56098994742f <unknown>\nE       #20 0x56098999e4e8 <unknown>\nE       #21 0x56098999e6b4 <unknown>\nE       #22 0x5609899af143 <unknown>\nE       #23 0x7f6748e94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=118.0.5993.117)\nStacktrace:\n#0 0x5609899affb3 <unknown>\n#1 0x5609896834a7 <unknown>\n#2 0x56098966b49e <unknown>\n#3 0x56098966b2ce <unknown>\n#4 0x560989669ecd <unknown>\n#5 0x56098966a4cf <unknown>\n#6 0x560989679a04 <unknown>\n#7 0x56098968e651 <unknown>\n#8 0x56098969304b <unknown>\n#9 0x56098966abf1 <unknown>\n#10 0x56098968e446 <unknown>\n#11 0x560989705dfc <unknown>\n#12 0x5609896ec713 <unknown>\n#13 0x5609896bf18b <unknown>\n#14 0x5609896bff7e <unknown>\n#15 0x5609899758d8 <unknown>\n#16 0x560989979800 <unknown>\n#17 0x560989983cfc <unknown>\n#18 0x56098997a418 <unknown>\n#19 0x56098994742f <unknown>\n#20 0x56098999e4e8 <unknown>\n#21 0x56098999e6b4 <unknown>\n#22 0x5609899af143 <unknown>\n#23 0x7f6748e94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fc16a562dd0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc15e11ae00>, 'council': 'GatesheadCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:48: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc15e55a2f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x56098999e6b4 \\\\u003Cunknown>\\\\n#22 0x5609899af143 \\\\u003Cunknown>\\\\n#23 0x7f6748e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=118.0.5993.117)\nE       Stacktrace:\nE       #0 0x5609899affb3 <unknown>\nE       #1 0x5609896834a7 <unknown>\nE       #2 0x56098966b49e <unknown>\nE       #3 0x56098966b2ce <unknown>\nE       #4 0x560989669ecd <unknown>\nE       #5 0x56098966a4cf <unknown>\nE       #6 0x560989679a04 <unknown>\nE       #7 0x56098968e651 <unknown>\nE       #8 0x56098969304b <unknown>\nE       #9 0x56098966abf1 <unknown>\nE       #10 0x56098968e446 <unknown>\nE       #11 0x560989705dfc <unknown>\nE       #12 0x5609896ec713 <unknown>\nE       #13 0x5609896bf18b <unknown>\nE       #14 0x5609896bff7e <unknown>\nE       #15 0x5609899758d8 <unknown>\nE       #16 0x560989979800 <unknown>\nE       #17 0x560989983cfc <unknown>\nE       #18 0x56098997a418 <unknown>\nE       #19 0x56098994742f <unknown>\nE       #20 0x56098999e4e8 <unknown>\nE       #21 0x56098999e6b4 <unknown>\nE       #22 0x5609899af143 <unknown>\nE       #23 0x7f6748e94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Given the council: GatesheadCouncil","time":{"start":1698692756617,"stop":1698692756618,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GatesheadCouncil","time":{"start":1698692756618,"stop":1698693060902,"duration":304284},"status":"failed","statusMessage":"Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=118.0.5993.117)\nStacktrace:\n#0 0x5609899affb3 <unknown>\n#1 0x5609896834a7 <unknown>\n#2 0x56098966b49e <unknown>\n#3 0x56098966b2ce <unknown>\n#4 0x560989669ecd <unknown>\n#5 0x56098966a4cf <unknown>\n#6 0x560989679a04 <unknown>\n#7 0x56098968e651 <unknown>\n#8 0x56098969304b <unknown>\n#9 0x56098966abf1 <unknown>\n#10 0x56098968e446 <unknown>\n#11 0x560989705dfc <unknown>\n#12 0x5609896ec713 <unknown>\n#13 0x5609896bf18b <unknown>\n#14 0x5609896bff7e <unknown>\n#15 0x5609899758d8 <unknown>\n#16 0x560989979800 <unknown>\n#17 0x560989983cfc <unknown>\n#18 0x56098997a418 <unknown>\n#19 0x56098994742f <unknown>\n#20 0x56098999e4e8 <unknown>\n#21 0x56098999e6b4 <unknown>\n#22 0x5609899af143 <unknown>\n#23 0x7f6748e94ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=118.0.5993.117)\nStacktrace:\n#0 0x5609899affb3 <unknown>\n#1 0x5609896834a7 <unknown>\n#2 0x56098966b49e <unknown>\n#3 0x56098966b2ce <unknown>\n#4 0x560989669ecd <unknown>\n#5 0x56098966a4cf <unknown>\n#6 0x560989679a04 <unknown>\n#7 0x56098968e651 <unknown>\n#8 0x56098969304b <unknown>\n#9 0x56098966abf1 <unknown>\n#10 0x56098968e446 <unknown>\n#11 0x560989705dfc <unknown>\n#12 0x5609896ec713 <unknown>\n#13 0x5609896bf18b <unknown>\n#14 0x5609896bff7e <unknown>\n#15 0x5609899758d8 <unknown>\n#16 0x560989979800 <unknown>\n#17 0x560989983cfc <unknown>\n#18 0x56098997a418 <unknown>\n#19 0x56098994742f <unknown>\n#20 0x56098999e4e8 <unknown>\n#21 0x56098999e6b4 <unknown>\n#22 0x5609899af143 <unknown>\n#23 0x7f6748e94ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az563-398"},{"name":"thread","value":"2165-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GatesheadCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":16},"items":[{"uid":"f14d59ab60748dfd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/f14d59ab60748dfd","status":"passed","time":{"start":1698692723448,"stop":1698692730979,"duration":7531}},{"uid":"b107966b3d44337c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/b107966b3d44337c","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a12d4eefb3 <unknown>\n#1 0x55a12d1c24a7 <unknown>\n#2 0x55a12d209dd6 <unknown>\n#3 0x55a12d209ec1 <unknown>\n#4 0x55a12d247354 <unknown>\n#5 0x55a12d22b96d <unknown>\n#6 0x55a12d244c02 <unknown>\n#7 0x55a12d22b713 <unknown>\n#8 0x55a12d1fe18b <unknown>\n#9 0x55a12d1fef7e <unknown>\n#10 0x55a12d4b48d8 <unknown>\n#11 0x55a12d4b8800 <unknown>\n#12 0x55a12d4c2cfc <unknown>\n#13 0x55a12d4b9418 <unknown>\n#14 0x55a12d48642f <unknown>\n#15 0x55a12d4dd4e8 <unknown>\n#16 0x55a12d4dd6b4 <unknown>\n#17 0x55a12d4ee143 <unknown>\n#18 0x7f4760494ac3 <unknown>","time":{"start":1698646313421,"stop":1698646328817,"duration":15396}},{"uid":"529b28f61f08b312","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/529b28f61f08b312","status":"passed","time":{"start":1698628537138,"stop":1698628546623,"duration":9485}},{"uid":"9e987d6b6c3e9f7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/9e987d6b6c3e9f7c","status":"passed","time":{"start":1698615195844,"stop":1698615205519,"duration":9675}},{"uid":"1026b03c72a404f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1061//#testresult/1026b03c72a404f7","status":"passed","time":{"start":1698615090043,"stop":1698615097928,"duration":7885}},{"uid":"97904f871f1a1fac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/97904f871f1a1fac","status":"passed","time":{"start":1698542352330,"stop":1698542361010,"duration":8680}},{"uid":"a65a42445bbec2dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/a65a42445bbec2dd","status":"passed","time":{"start":1698455542992,"stop":1698455550066,"duration":7074}},{"uid":"91ec55df5370342","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1051//#testresult/91ec55df5370342","status":"passed","time":{"start":1698369216108,"stop":1698369224058,"duration":7950}},{"uid":"cad55d6b1a0a6d70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1050//#testresult/cad55d6b1a0a6d70","status":"passed","time":{"start":1698282827655,"stop":1698282837283,"duration":9628}},{"uid":"153147fd04257ab9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1049//#testresult/153147fd04257ab9","status":"passed","time":{"start":1698196487904,"stop":1698196496351,"duration":8447}},{"uid":"7fd6cf11c95e8a42","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1048//#testresult/7fd6cf11c95e8a42","status":"passed","time":{"start":1698178211447,"stop":1698178221135,"duration":9688}},{"uid":"e8c5baac69e8a4ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1047//#testresult/e8c5baac69e8a4ce","status":"passed","time":{"start":1698178193203,"stop":1698178201540,"duration":8337}},{"uid":"e748600695ce7504","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1046//#testresult/e748600695ce7504","status":"passed","time":{"start":1698110085862,"stop":1698110092678,"duration":6816}},{"uid":"f0110509bf417780","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/f0110509bf417780","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x559efd056fb3 <unknown>\n#1 0x559efcd2a4a7 <unknown>\n#2 0x559efcd1249e <unknown>\n#3 0x559efcd122ce <unknown>\n#4 0x559efcd10ecd <unknown>\n#5 0x559efcd114cf <unknown>\n#6 0x559efcd20a04 <unknown>\n#7 0x559efcd35651 <unknown>\n#8 0x559efcd3a04b <unknown>\n#9 0x559efcd11bf1 <unknown>\n#10 0x559efcd35446 <unknown>\n#11 0x559efcdacdfc <unknown>\n#12 0x559efcd93713 <unknown>\n#13 0x559efcd6618b <unknown>\n#14 0x559efcd66f7e <unknown>\n#15 0x559efd01c8d8 <unknown>\n#16 0x559efd020800 <unknown>\n#17 0x559efd02acfc <unknown>\n#18 0x559efd021418 <unknown>\n#19 0x559efcfee42f <unknown>\n#20 0x559efd0454e8 <unknown>\n#21 0x559efd0456b4 <unknown>\n#22 0x559efd056143 <unknown>\n#23 0x7f4b86494ac3 <unknown>","time":{"start":1698064850979,"stop":1698065155519,"duration":304540}},{"uid":"a18e17e40e07e09b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/a18e17e40e07e09b","status":"passed","time":{"start":1698064876322,"stop":1698064884726,"duration":8404}}]},"tags":[]},"source":"584cb7b2ee27577f.json","parameterValues":["GatesheadCouncil"]}