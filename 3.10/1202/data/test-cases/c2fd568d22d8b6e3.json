{"uid":"c2fd568d22d8b6e3","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1701882545729,"stop":1701882547393,"duration":1664},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe5328670a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe520326ad0>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 6 December\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe5328670a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe520326ad0>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 6 December\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1701882545729,"stop":1701882545730,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1701882545730,"stop":1701882547393,"duration":1663},"status":"failed","statusMessage":"time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1016-860"},{"name":"thread","value":"2728-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":41,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":51},"items":[{"uid":"2da8a20694b9ee0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/2da8a20694b9ee0c","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","time":{"start":1701825557339,"stop":1701825558930,"duration":1591}},{"uid":"96ffb404d1879d6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/96ffb404d1879d6d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795554992,"stop":1701795555816,"duration":824}},{"uid":"9521306b42242fc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/9521306b42242fc5","status":"passed","time":{"start":1701795506322,"stop":1701795507814,"duration":1492}},{"uid":"d51d62728921e10e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/d51d62728921e10e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758501872,"stop":1701758502458,"duration":586}},{"uid":"261197eac841f7f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/261197eac841f7f8","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1701758506444,"stop":1701758508797,"duration":2353}},{"uid":"6a68b54be9c6eb0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/6a68b54be9c6eb0e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701739162531,"stop":1701739163429,"duration":898}},{"uid":"71be7520a267347b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/71be7520a267347b","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1701714326260,"stop":1701714327887,"duration":1627}},{"uid":"e5a3a51bacea82d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/e5a3a51bacea82d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714276810,"stop":1701714277707,"duration":897}},{"uid":"63614c95453e62f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/63614c95453e62f8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652750148,"stop":1701652750743,"duration":595}},{"uid":"4a43c722e47d8c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/4a43c722e47d8c3","status":"passed","time":{"start":1701566526906,"stop":1701566528681,"duration":1775}},{"uid":"820b41466283dd0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/820b41466283dd0d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479705356,"stop":1701479706251,"duration":895}},{"uid":"b5bd709f70ce8745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/b5bd709f70ce8745","status":"passed","time":{"start":1701418952067,"stop":1701418953750,"duration":1683}},{"uid":"5d9a220d2ebbc0bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/5d9a220d2ebbc0bb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418886705,"stop":1701418887425,"duration":720}},{"uid":"abdc9c9bc1117e70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/abdc9c9bc1117e70","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414355589,"stop":1701414356251,"duration":662}},{"uid":"3d750eb940ced2ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/3d750eb940ced2ef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414303886,"stop":1701414304754,"duration":868}},{"uid":"dfbef00169b3395a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/dfbef00169b3395a","status":"passed","time":{"start":1701393888583,"stop":1701393890259,"duration":1676}},{"uid":"b256d477e18b8612","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/b256d477e18b8612","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353329630,"stop":1701353330463,"duration":833}},{"uid":"2782686344037264","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/2782686344037264","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307076240,"stop":1701307077161,"duration":921}},{"uid":"9738b38e1cf05a4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/9738b38e1cf05a4c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279312181,"stop":1701279313097,"duration":916}},{"uid":"cbd86313714c86b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/cbd86313714c86b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279336759,"stop":1701279337603,"duration":844}}]},"tags":[]},"source":"c2fd568d22d8b6e3.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}