{"uid":"e2aaf4335d660789","name":"Validate Council Output [GuildfordCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7920670628eac2b6a4c154f0eb5095c4","time":{"start":1701911963139,"stop":1701911965290,"duration":2151},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fe4d412f6d0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe4c1dc20b0>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fe4d4d8a710>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fe4d412f6d0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe4c1dc20b0>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fe4d4d8a710>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1701911963140,"stop":1701911963140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GuildfordCouncil using None and the None is set","time":{"start":1701911963140,"stop":1701911965290,"duration":2150},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1426-718"},{"name":"thread","value":"2858-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":53,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":53},"items":[{"uid":"5cd21cb42a8c840a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/5cd21cb42a8c840a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701904859289,"stop":1701904864409,"duration":5120}},{"uid":"cc8905412316bb74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/cc8905412316bb74","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701882517741,"stop":1701882518910,"duration":1169}},{"uid":"7e0c79cee5100c9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/7e0c79cee5100c9e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701825546981,"stop":1701825548029,"duration":1048}},{"uid":"a33ffbe67b52492e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/a33ffbe67b52492e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701795559031,"stop":1701795562516,"duration":3485}},{"uid":"c7f2720354cd7a3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/c7f2720354cd7a3f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701795494108,"stop":1701795495335,"duration":1227}},{"uid":"7d949d47f50bde9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/7d949d47f50bde9e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701758511799,"stop":1701758512626,"duration":827}},{"uid":"e9d763868d8d2e3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/e9d763868d8d2e3e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701758804586,"stop":1701758806259,"duration":1673}},{"uid":"29c5becb5dd32485","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/29c5becb5dd32485","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701739189571,"stop":1701739192194,"duration":2623}},{"uid":"1febf0b88a501917","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/1febf0b88a501917","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701714342523,"stop":1701714344588,"duration":2065}},{"uid":"c878c25150869795","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/c878c25150869795","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701714291503,"stop":1701714293229,"duration":1726}},{"uid":"7b24f7d861d5d16f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/7b24f7d861d5d16f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701652751493,"stop":1701652753234,"duration":1741}},{"uid":"bbb741f9ddc904d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/bbb741f9ddc904d9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701566735007,"stop":1701566738903,"duration":3896}},{"uid":"eab1b493fac562ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/eab1b493fac562ea","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701479723220,"stop":1701479724627,"duration":1407}},{"uid":"5d9cb2e29d320d98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/5d9cb2e29d320d98","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701418965736,"stop":1701418967130,"duration":1394}},{"uid":"ead847d7247bd09b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/ead847d7247bd09b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701418895513,"stop":1701418896365,"duration":852}},{"uid":"dfab2b33ad821bb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/dfab2b33ad821bb3","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701414358465,"stop":1701414360720,"duration":2255}},{"uid":"b1e3512fa981b3e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/b1e3512fa981b3e1","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701414312966,"stop":1701414314168,"duration":1202}},{"uid":"4c3313f083078d08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/4c3313f083078d08","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701394088436,"stop":1701394091216,"duration":2780}},{"uid":"2a48cda48ee37c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/2a48cda48ee37c7","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701353346490,"stop":1701353347397,"duration":907}},{"uid":"7649fc49b1118b6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/7649fc49b1118b6f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701307103641,"stop":1701307105517,"duration":1876}}]},"tags":[]},"source":"e2aaf4335d660789.json","parameterValues":["GuildfordCouncil","None","None"]}