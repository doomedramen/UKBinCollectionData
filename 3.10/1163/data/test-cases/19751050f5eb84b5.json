{"uid":"19751050f5eb84b5","name":"Validate Council Output [MertonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a067692419696058d026d9aab0da27d0","time":{"start":1701307100145,"stop":1701307101741,"duration":1596},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcfbbefeef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcfadd92590>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcfadd92590>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcfbbefeef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcfadd92590>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcfadd92590>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1701307100146,"stop":1701307100146,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from MertonCouncil using None and the None is set","time":{"start":1701307100146,"stop":1701307101738,"duration":1592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701307101738,"stop":1701307101738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701307101738,"stop":1701307101741,"duration":3},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1116-834"},{"name":"thread","value":"2793-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":33,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":33},"items":[{"uid":"effb1460649a1fd9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/effb1460649a1fd9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279333460,"stop":1701279339940,"duration":6480}},{"uid":"ff5a650a4b5aba03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/ff5a650a4b5aba03","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279359051,"stop":1701279361211,"duration":2160}},{"uid":"4f838693063268fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/4f838693063268fb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220764351,"stop":1701220767041,"duration":2690}},{"uid":"c4a191002e78df6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/c4a191002e78df6e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134366081,"stop":1701134367859,"duration":1778}},{"uid":"e5713f53cb9f3a48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/e5713f53cb9f3a48","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701047928513,"stop":1701047930297,"duration":1784}},{"uid":"c21260bc877542b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/c21260bc877542b2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036187149,"stop":1701036192119,"duration":4970}},{"uid":"5f0f1dbe1c269e83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/5f0f1dbe1c269e83","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036189479,"stop":1701036195863,"duration":6384}},{"uid":"cd45419f7de13615","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/cd45419f7de13615","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961739320,"stop":1700961740886,"duration":1566}},{"uid":"8f3948f995f6c64f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/8f3948f995f6c64f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874962853,"stop":1700875019998,"duration":57145}},{"uid":"6a087a4e1bd5811b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/6a087a4e1bd5811b","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1700788592375,"stop":1700788620643,"duration":28268}},{"uid":"4cbb058b22e50f2b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/4cbb058b22e50f2b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702296180,"stop":1700702298213,"duration":2033}},{"uid":"4c8d7c2c0d193c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/4c8d7c2c0d193c0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646378917,"stop":1700646381884,"duration":2967}},{"uid":"476a7174c2bf7572","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/476a7174c2bf7572","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616067407,"stop":1700616069581,"duration":2174}},{"uid":"8d839ea73776a7c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/8d839ea73776a7c5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529689958,"stop":1700529695291,"duration":5333}},{"uid":"992c800418ebb5c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/992c800418ebb5c2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443169272,"stop":1700443170990,"duration":1718}},{"uid":"53468e6cba996e84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/53468e6cba996e84","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357004478,"stop":1700357005813,"duration":1335}},{"uid":"60ef9d39a72736c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/60ef9d39a72736c9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270310781,"stop":1700270316419,"duration":5638}},{"uid":"d025fc48f752d6b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/d025fc48f752d6b8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700183916703,"stop":1700183921628,"duration":4925}},{"uid":"92d568efae737e7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/92d568efae737e7c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097546655,"stop":1700097551745,"duration":5090}},{"uid":"4089fba614031f21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/4089fba614031f21","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011288210,"stop":1700011289661,"duration":1451}}]},"tags":[]},"source":"19751050f5eb84b5.json","parameterValues":["MertonCouncil","None","None"]}