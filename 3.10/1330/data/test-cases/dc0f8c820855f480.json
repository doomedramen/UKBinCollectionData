{"uid":"dc0f8c820855f480","name":"Validate Council Output [TorridgeDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"da903249529007ec357275ac5f075b6c","time":{"start":1704100183180,"stop":1704100185675,"duration":2495},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f7dca200430>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7db89b7cd0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f7db89b7cd0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f7dca200430>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7db89b7cd0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f7db89b7cd0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: TorridgeDistrictCouncil","time":{"start":1704100183181,"stop":1704100183181,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from TorridgeDistrictCouncil using None and the None is set","time":{"start":1704100183181,"stop":1704100185673,"duration":2492},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704100185673,"stop":1704100185673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704100185673,"stop":1704100185675,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1435-110"},{"name":"thread","value":"2738-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TorridgeDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":78,"unknown":0,"total":104},"items":[{"uid":"be90f4c2f967c0b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/be90f4c2f967c0b2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704072521960,"stop":1704072524906,"duration":2946}},{"uid":"60a6318f8295924e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1327//#testresult/60a6318f8295924e","status":"passed","time":{"start":1704050564527,"stop":1704050568774,"duration":4247}},{"uid":"d6feeffb8eee9333","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1325//#testresult/d6feeffb8eee9333","status":"passed","time":{"start":1704044214141,"stop":1704044216800,"duration":2659}},{"uid":"697251f0d0cf2646","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/697251f0d0cf2646","status":"passed","time":{"start":1703985983317,"stop":1703985986044,"duration":2727}},{"uid":"6abb66dd0fdf637","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/6abb66dd0fdf637","status":"passed","time":{"start":1703899129877,"stop":1703899132738,"duration":2861}},{"uid":"2f05ab74c0f6e91f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/2f05ab74c0f6e91f","status":"passed","time":{"start":1703853654474,"stop":1703853657527,"duration":3053}},{"uid":"d663a118f31907a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/d663a118f31907a2","status":"passed","time":{"start":1703851400298,"stop":1703851403457,"duration":3159}},{"uid":"20ce52ed9145b502","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/20ce52ed9145b502","status":"passed","time":{"start":1703851305741,"stop":1703851308561,"duration":2820}},{"uid":"5aed33822667241","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/5aed33822667241","status":"passed","time":{"start":1703812185406,"stop":1703812187989,"duration":2583}},{"uid":"5baeb1f107f252b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/5baeb1f107f252b","status":"passed","time":{"start":1703756339082,"stop":1703756341261,"duration":2179}},{"uid":"1d2795a55773926d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/1d2795a55773926d","status":"passed","time":{"start":1703726297379,"stop":1703726300385,"duration":3006}},{"uid":"5ee8f2a34f7bd080","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/5ee8f2a34f7bd080","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717635168,"stop":1703717638101,"duration":2933}},{"uid":"11cd98ec3948033e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/11cd98ec3948033e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717431277,"stop":1703717433886,"duration":2609}},{"uid":"3cf132a0d48b8869","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/3cf132a0d48b8869","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639869814,"stop":1703639872325,"duration":2511}},{"uid":"e5650e01c235295e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/e5650e01c235295e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553468555,"stop":1703553471798,"duration":3243}},{"uid":"6369349485b1b09b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/6369349485b1b09b","status":"passed","time":{"start":1703541303780,"stop":1703541309200,"duration":5420}},{"uid":"9a78d89923647482","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/9a78d89923647482","status":"passed","time":{"start":1703467324562,"stop":1703467327870,"duration":3308}},{"uid":"3a26d98faea89e26","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/3a26d98faea89e26","status":"passed","time":{"start":1703416541423,"stop":1703416544767,"duration":3344}},{"uid":"3e5968a0d2f1c153","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/3e5968a0d2f1c153","status":"passed","time":{"start":1703416495168,"stop":1703416498218,"duration":3050}},{"uid":"f7c3085a62f4206f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/f7c3085a62f4206f","status":"passed","time":{"start":1703381203274,"stop":1703381206869,"duration":3595}}]},"tags":[]},"source":"dc0f8c820855f480.json","parameterValues":["TorridgeDistrictCouncil","None","None"]}