{"uid":"1b3301e5d8805dc2","name":"Validate Council Output [BasingstokeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"0d6549c1d81ad728472392d1bde7fbc5","time":{"start":1700529640872,"stop":1700529642152,"duration":1280},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fecccfea950>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fecbabe1de0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fecbabe1de0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fecccfea950>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fecbabe1de0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fecbabe1de0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: BasingstokeCouncil","time":{"start":1700529640873,"stop":1700529640873,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from BasingstokeCouncil using None and the None is set","time":{"start":1700529640873,"stop":1700529642148,"duration":1275},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700529642148,"stop":1700529642149,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700529642149,"stop":1700529642152,"duration":3},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az698-468"},{"name":"thread","value":"2712-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BasingstokeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":19},"items":[{"uid":"b5308167096a416e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1135//#testresult/b5308167096a416e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443120739,"stop":1700443121715,"duration":976}},{"uid":"ff332f727b7da087","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1134//#testresult/ff332f727b7da087","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700356963843,"stop":1700356964421,"duration":578}},{"uid":"42ccfe2c982c202a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1133//#testresult/42ccfe2c982c202a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270240905,"stop":1700270241886,"duration":981}},{"uid":"7d6ce0daf319749a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1132//#testresult/7d6ce0daf319749a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700183875931,"stop":1700183876796,"duration":865}},{"uid":"dfb7f6d790c2c9c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1131//#testresult/dfb7f6d790c2c9c8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097497325,"stop":1700097498234,"duration":909}},{"uid":"926f0489500f5158","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1129//#testresult/926f0489500f5158","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011052698,"stop":1700011053259,"duration":561}},{"uid":"d3ee20ae4ed9f788","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1128//#testresult/d3ee20ae4ed9f788","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924557779,"stop":1699924558788,"duration":1009}},{"uid":"b27a109b0454a7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1127//#testresult/b27a109b0454a7b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838271640,"stop":1699838272400,"duration":760}},{"uid":"f6808398fc7d27d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1126//#testresult/f6808398fc7d27d1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752010228,"stop":1699752010961,"duration":733}},{"uid":"c90afa2ee2a3f692","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1125//#testresult/c90afa2ee2a3f692","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699669466614,"stop":1699669467879,"duration":1265}},{"uid":"603ea345ba489541","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1124//#testresult/603ea345ba489541","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699578913293,"stop":1699578914273,"duration":980}},{"uid":"f537ad389f8c8b08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1123//#testresult/f537ad389f8c8b08","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492575144,"stop":1699492576310,"duration":1166}},{"uid":"6e3751c036038132","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1121//#testresult/6e3751c036038132","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481231274,"stop":1699481232020,"duration":746}},{"uid":"b330d9834f3e51f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1117//#testresult/b330d9834f3e51f2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445063712,"stop":1699445064301,"duration":589}},{"uid":"7ced739d02f2e214","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1115//#testresult/7ced739d02f2e214","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406149440,"stop":1699406150724,"duration":1284}},{"uid":"136d48636dd7896a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1114//#testresult/136d48636dd7896a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699319774614,"stop":1699319775314,"duration":700}},{"uid":"12b93408b2fd5e01","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1113//#testresult/12b93408b2fd5e01","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233440357,"stop":1699233441543,"duration":1186}},{"uid":"1bf9773e44a8c63e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1111//#testresult/1bf9773e44a8c63e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699170633804,"stop":1699170634429,"duration":625}}]},"tags":[]},"source":"1b3301e5d8805dc2.json","parameterValues":["BasingstokeCouncil","None","None"]}