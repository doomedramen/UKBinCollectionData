{"uid":"999d114f2bd1eeed","name":"Validate Council Output [GuildfordCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"316f6b3276320661fa68609de6296157","time":{"start":1698110094905,"stop":1698110096357,"duration":1452},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f644f40ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f64475e2530>, 'council': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f644fe2a770>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f644f40ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f64475e2530>, 'council': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f644fe2a770>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1698110094905,"stop":1698110094906,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GuildfordCouncil","time":{"start":1698110094906,"stop":1698110096357,"duration":1451},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az560-191"},{"name":"thread","value":"2128-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":32,"broken":0,"skipped":0,"passed":85,"unknown":0,"total":117},"items":[{"uid":"24cc790af14fa1e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/24cc790af14fa1e9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1698065157835,"stop":1698065158616,"duration":781}},{"uid":"36ecb40ecf24eee5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/36ecb40ecf24eee5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1698064887201,"stop":1698064888369,"duration":1168}},{"uid":"a9336908221b56a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/a9336908221b56a0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1698023747204,"stop":1698023748294,"duration":1090}},{"uid":"e42fe8081d8a06f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/e42fe8081d8a06f7","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697937624008,"stop":1697937625530,"duration":1522}},{"uid":"b1e710aa166825f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/b1e710aa166825f9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697850790646,"stop":1697850793852,"duration":3206}},{"uid":"f16d13fee07e9dc3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1037//#testresult/f16d13fee07e9dc3","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697790372294,"stop":1697790373855,"duration":1561}},{"uid":"8e008f2633f21a2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1036//#testresult/8e008f2633f21a2d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697790389667,"stop":1697790392002,"duration":2335}},{"uid":"38b06e44b693220","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1034//#testresult/38b06e44b693220","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697764510497,"stop":1697764513433,"duration":2936}},{"uid":"b1d25752935ee450","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/b1d25752935ee450","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697706538516,"stop":1697706539837,"duration":1321}},{"uid":"13977797dd4893b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/13977797dd4893b3","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697706501317,"stop":1697706502547,"duration":1230}},{"uid":"787fcf3167db580b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/787fcf3167db580b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702048282,"stop":1697702048283,"duration":1}},{"uid":"7bb5da9e74e239ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/7bb5da9e74e239ec","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697696164181,"stop":1697696165866,"duration":1685}},{"uid":"66faed7874eeb9a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/66faed7874eeb9a0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697678088954,"stop":1697678090353,"duration":1399}},{"uid":"7ad314be12583d0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/7ad314be12583d0a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697666580428,"stop":1697666583176,"duration":2748}},{"uid":"2e453002e199f602","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/2e453002e199f602","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697666530862,"stop":1697666531725,"duration":863}},{"uid":"62668f405348cd21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/62668f405348cd21","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697656839726,"stop":1697656841290,"duration":1564}},{"uid":"7eaa252c748cee57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/7eaa252c748cee57","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697656779431,"stop":1697656781201,"duration":1770}},{"uid":"992d7e3b22ee153e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/992d7e3b22ee153e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697650009085,"stop":1697650010888,"duration":1803}},{"uid":"543500fd99b14d6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/543500fd99b14d6b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697618263265,"stop":1697618266762,"duration":3497}},{"uid":"76fdfb80d5d60c7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/76fdfb80d5d60c7f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697618203099,"stop":1697618204247,"duration":1148}}]},"tags":[]},"source":"999d114f2bd1eeed.json","parameterValues":["GuildfordCouncil"]}