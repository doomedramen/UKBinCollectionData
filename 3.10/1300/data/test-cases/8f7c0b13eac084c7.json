{"uid":"8f7c0b13eac084c7","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1703553332862,"stop":1703553334014,"duration":1152},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f45031a4280>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f44f33315d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f44f33315d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f45031a4280>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f44f33315d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f44f33315d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1703553332862,"stop":1703553332862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1703553332862,"stop":1703553334012,"duration":1150},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703553334012,"stop":1703553334012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703553334013,"stop":1703553334014,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az659-507"},{"name":"thread","value":"2690-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":89,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":89},"items":[{"uid":"2a7e4a6b91dfb8c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/2a7e4a6b91dfb8c2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541430785,"stop":1703541433456,"duration":2671}},{"uid":"e7b21225dec08669","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/e7b21225dec08669","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467421626,"stop":1703467422720,"duration":1094}},{"uid":"a4bd2047d5ad4878","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/a4bd2047d5ad4878","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416410327,"stop":1703416411825,"duration":1498}},{"uid":"4468b7dbc9da1cdc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/4468b7dbc9da1cdc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416369775,"stop":1703416370881,"duration":1106}},{"uid":"50093045144c0caa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/50093045144c0caa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703381286070,"stop":1703381287712,"duration":1642}},{"uid":"b1a777a5df4f57d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1287//#testresult/b1a777a5df4f57d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294135212,"stop":1703294136752,"duration":1540}},{"uid":"2af78257a04bd26e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1282//#testresult/2af78257a04bd26e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207885968,"stop":1703207887715,"duration":1747}},{"uid":"ee6d092b14f9a769","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1281//#testresult/ee6d092b14f9a769","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121512998,"stop":1703121514171,"duration":1173}},{"uid":"be208aa5e16dc5e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1280//#testresult/be208aa5e16dc5e5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034347196,"stop":1703034349850,"duration":2654}},{"uid":"aa0ed0075ddc531a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/aa0ed0075ddc531a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024932384,"stop":1703024934380,"duration":1996}},{"uid":"1795766b8d33a19a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/1795766b8d33a19a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948772900,"stop":1702948774174,"duration":1274}},{"uid":"14ef42517db12a52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/14ef42517db12a52","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862676759,"stop":1702862677846,"duration":1087}},{"uid":"1437c01131445f7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/1437c01131445f7b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702860034121,"stop":1702860035142,"duration":1021}},{"uid":"d5dd646ae9b30925","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1272//#testresult/d5dd646ae9b30925","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843630237,"stop":1702843631413,"duration":1176}},{"uid":"e70a886de9498a48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1270//#testresult/e70a886de9498a48","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809702133,"stop":1702809703642,"duration":1509}},{"uid":"ccfa3e1c54e9a457","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1247//#testresult/ccfa3e1c54e9a457","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657131627,"stop":1702657132667,"duration":1040}},{"uid":"3b1e44cb967a4a90","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1244//#testresult/3b1e44cb967a4a90","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603189792,"stop":1702603190873,"duration":1081}},{"uid":"dd714482047adfdb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1243//#testresult/dd714482047adfdb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540055774,"stop":1702540056921,"duration":1147}},{"uid":"8e466eab2d965f1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1241//#testresult/8e466eab2d965f1c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516683900,"stop":1702516685141,"duration":1241}},{"uid":"b9c6c6866579e5c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1238//#testresult/b9c6c6866579e5c3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447789243,"stop":1702447790863,"duration":1620}}]},"tags":[]},"source":"8f7c0b13eac084c7.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}