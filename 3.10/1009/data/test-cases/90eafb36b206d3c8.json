{"uid":"90eafb36b206d3c8","name":"Validate Council Output [GuildfordCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"316f6b3276320661fa68609de6296157","time":{"start":1697542601454,"stop":1697542603883,"duration":2429},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fee0fa0e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fee0787e260>, 'council': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fee1446e6b0>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fee0fa0e8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fee0787e260>, 'council': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fee1446e6b0>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1697542601454,"stop":1697542601455,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GuildfordCouncil","time":{"start":1697542601455,"stop":1697542603883,"duration":2428},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az713-629"},{"name":"thread","value":"2099-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":85,"unknown":0,"total":95},"items":[{"uid":"cce4b991e4238404","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1008//#testresult/cce4b991e4238404","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697505320992,"stop":1697505322471,"duration":1479}},{"uid":"a0d3146c24d70d2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1006//#testresult/a0d3146c24d70d2c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697484622940,"stop":1697484625302,"duration":2362}},{"uid":"40c7de5ec6861cbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1005//#testresult/40c7de5ec6861cbf","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697484580252,"stop":1697484581076,"duration":824}},{"uid":"7ffe4fc0a51e72a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1004//#testresult/7ffe4fc0a51e72a5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697418962745,"stop":1697418964806,"duration":2061}},{"uid":"a50c09f835c577e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1001//#testresult/a50c09f835c577e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697403145619,"stop":1697403146533,"duration":914}},{"uid":"6cdae3e6bc32d1b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/998//#testresult/6cdae3e6bc32d1b7","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697399702381,"stop":1697399703461,"duration":1080}},{"uid":"3d02733029d2a95e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/994//#testresult/3d02733029d2a95e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697366959363,"stop":1697366960319,"duration":956}},{"uid":"388fbebe503c6da6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/992//#testresult/388fbebe503c6da6","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697332797810,"stop":1697332799910,"duration":2100}},{"uid":"5b0d04392ca975be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/988//#testresult/5b0d04392ca975be","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697245960967,"stop":1697245962918,"duration":1951}},{"uid":"c9c4221dcd8786b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/986//#testresult/c9c4221dcd8786b7","status":"passed","time":{"start":1697159798350,"stop":1697159801260,"duration":2910}},{"uid":"a726c2e5f8fcdb8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/985//#testresult/a726c2e5f8fcdb8f","status":"passed","time":{"start":1697073139326,"stop":1697073141613,"duration":2287}},{"uid":"9c8b9849f473845b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/984//#testresult/9c8b9849f473845b","status":"passed","time":{"start":1697052896845,"stop":1697052899211,"duration":2366}},{"uid":"95bf232c1a8738fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/981//#testresult/95bf232c1a8738fb","status":"passed","time":{"start":1697050709269,"stop":1697050711223,"duration":1954}},{"uid":"107e231909b4dbf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/978//#testresult/107e231909b4dbf3","status":"passed","time":{"start":1696986863231,"stop":1696986866236,"duration":3005}},{"uid":"263c7793347ea65a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/977//#testresult/263c7793347ea65a","status":"passed","time":{"start":1696900429592,"stop":1696900433338,"duration":3746}},{"uid":"6b9a15b3fb197b7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/976//#testresult/6b9a15b3fb197b7f","status":"passed","time":{"start":1696814058073,"stop":1696814060606,"duration":2533}},{"uid":"654e664418d36e15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/975//#testresult/654e664418d36e15","status":"passed","time":{"start":1696727946560,"stop":1696727949193,"duration":2633}},{"uid":"1c609ebcf4a22b93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/974//#testresult/1c609ebcf4a22b93","status":"passed","time":{"start":1696641228348,"stop":1696641230650,"duration":2302}},{"uid":"a35b670ece52b7d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/973//#testresult/a35b670ece52b7d3","status":"passed","time":{"start":1696554869129,"stop":1696554871869,"duration":2740}},{"uid":"8d804d40ebdb6393","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/972//#testresult/8d804d40ebdb6393","status":"passed","time":{"start":1696468461197,"stop":1696468464416,"duration":3219}}]},"tags":[]},"source":"90eafb36b206d3c8.json","parameterValues":["GuildfordCouncil"]}