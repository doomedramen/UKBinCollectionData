{"uid":"aaef875028a3e337","name":"Validate Council Output [DorsetCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9fa7d7cb5c863d45fe9f4c51c5fb024f","time":{"start":1705710392861,"stop":1705710516858,"duration":123997},"status":"failed","statusMessage":"UnboundLocalError: local variable 'ordered_data' referenced before assignment","statusTrace":"fixturefunc = <function scrape_step at 0x7fe5e96c7ac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe5e93af130>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7fe5e8b566b0>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: local variable 'ordered_data' referenced before assignment\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: local variable 'ordered_data' referenced before assignment","statusTrace":"fixturefunc = <function scrape_step at 0x7fe5e96c7ac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe5e93af130>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7fe5e8b566b0>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: local variable 'ordered_data' referenced before assignment\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","steps":[{"name":"Given the council: DorsetCouncil","time":{"start":1705710392861,"stop":1705710392862,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DorsetCouncil using None and the None is set","time":{"start":1705710392862,"stop":1705710516858,"duration":123996},"status":"failed","statusMessage":"local variable 'ordered_data' referenced before assignment","statusTrace":"UnboundLocalError: local variable 'ordered_data' referenced before assignment\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az532-522"},{"name":"thread","value":"2739-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DorsetCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":116,"unknown":0,"total":117},"items":[{"uid":"aec8ee77038afd7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1511//#testresult/aec8ee77038afd7b","status":"passed","time":{"start":1705624048635,"stop":1705624049699,"duration":1064}},{"uid":"1957b042918dc22a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1505//#testresult/1957b042918dc22a","status":"passed","time":{"start":1705537621690,"stop":1705537623698,"duration":2008}},{"uid":"213b78964d477b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1500//#testresult/213b78964d477b","status":"passed","time":{"start":1705451231027,"stop":1705451232116,"duration":1089}},{"uid":"8cb3dfe5c8e5131e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1499//#testresult/8cb3dfe5c8e5131e","status":"passed","time":{"start":1705364896474,"stop":1705364897625,"duration":1151}},{"uid":"872aa754ec29fd88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1492//#testresult/872aa754ec29fd88","status":"passed","time":{"start":1705295598145,"stop":1705295599923,"duration":1778}},{"uid":"7d3d3a2f9ddc4608","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1491//#testresult/7d3d3a2f9ddc4608","status":"passed","time":{"start":1705295158009,"stop":1705295159401,"duration":1392}},{"uid":"2359641791a369a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1490//#testresult/2359641791a369a0","status":"passed","time":{"start":1705278533377,"stop":1705278534566,"duration":1189}},{"uid":"87e2593e5cf3b392","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1485//#testresult/87e2593e5cf3b392","status":"passed","time":{"start":1705192194638,"stop":1705192195655,"duration":1017}},{"uid":"cb2f5887918e0369","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1484//#testresult/cb2f5887918e0369","status":"passed","time":{"start":1705105626462,"stop":1705105628795,"duration":2333}},{"uid":"28b5310712accf35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1482//#testresult/28b5310712accf35","status":"passed","time":{"start":1705019237064,"stop":1705019239041,"duration":1977}},{"uid":"7c2fd5a1135f9575","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1478//#testresult/7c2fd5a1135f9575","status":"passed","time":{"start":1704932826959,"stop":1704932828796,"duration":1837}},{"uid":"857f1475877adba0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1472//#testresult/857f1475877adba0","status":"passed","time":{"start":1704846459850,"stop":1704846461059,"duration":1209}},{"uid":"9c0434ddbda010e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1456//#testresult/9c0434ddbda010e1","status":"passed","time":{"start":1704760070101,"stop":1704760072093,"duration":1992}},{"uid":"c8254af98d0f2630","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1452//#testresult/c8254af98d0f2630","status":"passed","time":{"start":1704711482308,"stop":1704711484411,"duration":2103}},{"uid":"7fe8c8bf0c6caef6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1450//#testresult/7fe8c8bf0c6caef6","status":"passed","time":{"start":1704710691034,"stop":1704710693295,"duration":2261}},{"uid":"9d8c6acf67b0aa80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1448//#testresult/9d8c6acf67b0aa80","status":"passed","time":{"start":1704710077587,"stop":1704710079224,"duration":1637}},{"uid":"5e95cb559a196ea0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1446//#testresult/5e95cb559a196ea0","status":"passed","time":{"start":1704709546795,"stop":1704709548213,"duration":1418}},{"uid":"116a335b94a9d92b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1443//#testresult/116a335b94a9d92b","status":"passed","time":{"start":1704704062378,"stop":1704704064516,"duration":2138}},{"uid":"659b08fdd31d6e7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1441//#testresult/659b08fdd31d6e7e","status":"passed","time":{"start":1704673703793,"stop":1704673705446,"duration":1653}},{"uid":"e2bc5a24113f617c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1426//#testresult/e2bc5a24113f617c","status":"passed","time":{"start":1704615397884,"stop":1704615399392,"duration":1508}}]},"tags":[]},"source":"aaef875028a3e337.json","parameterValues":["DorsetCouncil","None","None"]}