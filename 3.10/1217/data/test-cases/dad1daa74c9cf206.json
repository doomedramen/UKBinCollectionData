{"uid":"dad1daa74c9cf206","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1701990351886,"stop":1701990352716,"duration":830},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa81a7d0310>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa8077c8640>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa8077c8640>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa81a7d0310>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa8077c8640>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa8077c8640>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1701990351886,"stop":1701990351886,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1701990351886,"stop":1701990352714,"duration":828},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1701990352714,"stop":1701990352714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1701990352714,"stop":1701990352716,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1432-321"},{"name":"thread","value":"2738-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":47,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":57},"items":[{"uid":"8a90f50eb92b4366","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/8a90f50eb92b4366","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942787785,"stop":1701942788824,"duration":1039}},{"uid":"73f3996f7161ff35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/73f3996f7161ff35","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936501669,"stop":1701936502532,"duration":863}},{"uid":"a89745d5ed53dc57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/a89745d5ed53dc57","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936446089,"stop":1701936447075,"duration":986}},{"uid":"29a4aae98a24cac5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/29a4aae98a24cac5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911959035,"stop":1701911960224,"duration":1189}},{"uid":"af2648469250e1b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/af2648469250e1b8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904867550,"stop":1701904868177,"duration":627}},{"uid":"1ef0742759888c52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/1ef0742759888c52","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882527990,"stop":1701882528767,"duration":777}},{"uid":"2da8a20694b9ee0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/2da8a20694b9ee0c","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 6 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","time":{"start":1701825557339,"stop":1701825558930,"duration":1591}},{"uid":"96ffb404d1879d6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/96ffb404d1879d6d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795554992,"stop":1701795555816,"duration":824}},{"uid":"9521306b42242fc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/9521306b42242fc5","status":"passed","time":{"start":1701795506322,"stop":1701795507814,"duration":1492}},{"uid":"d51d62728921e10e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/d51d62728921e10e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758501872,"stop":1701758502458,"duration":586}},{"uid":"261197eac841f7f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/261197eac841f7f8","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1701758506444,"stop":1701758508797,"duration":2353}},{"uid":"6a68b54be9c6eb0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/6a68b54be9c6eb0e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701739162531,"stop":1701739163429,"duration":898}},{"uid":"71be7520a267347b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/71be7520a267347b","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1701714326260,"stop":1701714327887,"duration":1627}},{"uid":"e5a3a51bacea82d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/e5a3a51bacea82d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714276810,"stop":1701714277707,"duration":897}},{"uid":"63614c95453e62f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/63614c95453e62f8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652750148,"stop":1701652750743,"duration":595}},{"uid":"4a43c722e47d8c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/4a43c722e47d8c3","status":"passed","time":{"start":1701566526906,"stop":1701566528681,"duration":1775}},{"uid":"820b41466283dd0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/820b41466283dd0d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479705356,"stop":1701479706251,"duration":895}},{"uid":"b5bd709f70ce8745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/b5bd709f70ce8745","status":"passed","time":{"start":1701418952067,"stop":1701418953750,"duration":1683}},{"uid":"5d9a220d2ebbc0bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/5d9a220d2ebbc0bb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418886705,"stop":1701418887425,"duration":720}},{"uid":"abdc9c9bc1117e70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/abdc9c9bc1117e70","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414355589,"stop":1701414356251,"duration":662}}]},"tags":[]},"source":"dad1daa74c9cf206.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}