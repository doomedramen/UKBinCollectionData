{"uid":"9b453995b9a40b88","name":"Validate Council Output [BasingstokeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"0d6549c1d81ad728472392d1bde7fbc5","time":{"start":1701990321555,"stop":1701990322380,"duration":825},"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc94ba7b5b0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc93d3f64d0>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc94ba7b5b0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc93d3f64d0>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BasingstokeCouncil","time":{"start":1701990321555,"stop":1701990321556,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BasingstokeCouncil using None and the None is set","time":{"start":1701990321556,"stop":1701990322380,"duration":824},"status":"failed","statusMessage":"unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1432-321"},{"name":"thread","value":"2729-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BasingstokeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":48,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":57},"items":[{"uid":"178f79738fddd0ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/178f79738fddd0ad","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701942765705,"stop":1701942767847,"duration":2142}},{"uid":"68b88d6166152dac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/68b88d6166152dac","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701936597165,"stop":1701936598768,"duration":1603}},{"uid":"acd23fc31299c300","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/acd23fc31299c300","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701936557667,"stop":1701936558587,"duration":920}},{"uid":"f47aa474774e6c5d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/f47aa474774e6c5d","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701912036712,"stop":1701912038828,"duration":2116}},{"uid":"8692ff9ce2d9750f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/8692ff9ce2d9750f","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701904839058,"stop":1701904840265,"duration":1207}},{"uid":"e79a7a24e27a99a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/e79a7a24e27a99a1","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701882498768,"stop":1701882500484,"duration":1716}},{"uid":"5a9b948a2c5db3ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/5a9b948a2c5db3ec","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701825524627,"stop":1701825525563,"duration":936}},{"uid":"c06e840042930be1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/c06e840042930be1","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701795526793,"stop":1701795529787,"duration":2994}},{"uid":"65f4a2e636cfc1ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/65f4a2e636cfc1ed","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701795473941,"stop":1701795475177,"duration":1236}},{"uid":"3776711625ac49e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/3776711625ac49e5","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701758482735,"stop":1701758484731,"duration":1996}},{"uid":"b00b78b5ce87e38f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/b00b78b5ce87e38f","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701758480079,"stop":1701758481647,"duration":1568}},{"uid":"698d7b636f08e22f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/698d7b636f08e22f","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701739140037,"stop":1701739141379,"duration":1342}},{"uid":"d822221b858a3012","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1187//#testresult/d822221b858a3012","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701714312095,"stop":1701714313387,"duration":1292}},{"uid":"44d87d153748c88f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1186//#testresult/44d87d153748c88f","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701714255441,"stop":1701714261513,"duration":6072}},{"uid":"ec43bdd6fa2d2a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1184//#testresult/ec43bdd6fa2d2a7","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701652715312,"stop":1701652716127,"duration":815}},{"uid":"d79d99a61c2b4500","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1183//#testresult/d79d99a61c2b4500","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701566504883,"stop":1701566506610,"duration":1727}},{"uid":"f9a63ff9e9826e09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1182//#testresult/f9a63ff9e9826e09","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701479696681,"stop":1701479700233,"duration":3552}},{"uid":"326bd178ac7352c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1179//#testresult/326bd178ac7352c1","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701418934633,"stop":1701418935722,"duration":1089}},{"uid":"53e8e1eb584654f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/53e8e1eb584654f2","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701418861269,"stop":1701418862191,"duration":922}},{"uid":"b8361f422c4d0e3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/b8361f422c4d0e3d","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701414327088,"stop":1701414328141,"duration":1053}}]},"tags":[]},"source":"9b453995b9a40b88.json","parameterValues":["BasingstokeCouncil","None","None"]}