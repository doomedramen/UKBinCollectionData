{"uid":"e603fdbeb15a30aa","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1697418925717,"stop":1697418927632,"duration":1915},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f300dd4eef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f300cf3c5e0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f300dd4eef0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f300cf3c5e0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1697418925717,"stop":1697418925718,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1697418925718,"stop":1697418927632,"duration":1914},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az570-444"},{"name":"thread","value":"2140-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":108,"unknown":0,"total":124},"items":[{"uid":"7e1ae073a9dc103f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1001//#testresult/7e1ae073a9dc103f","status":"passed","time":{"start":1697403116696,"stop":1697403118296,"duration":1600}},{"uid":"5b73720eea2daac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/998//#testresult/5b73720eea2daac9","status":"passed","time":{"start":1697399670161,"stop":1697399671770,"duration":1609}},{"uid":"8a21d4c28c4645c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/994//#testresult/8a21d4c28c4645c7","status":"passed","time":{"start":1697366928036,"stop":1697366929542,"duration":1506}},{"uid":"4530701dea8b02bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/992//#testresult/4530701dea8b02bb","status":"passed","time":{"start":1697332745745,"stop":1697332747858,"duration":2113}},{"uid":"d73a1aafe5444a70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/988//#testresult/d73a1aafe5444a70","status":"passed","time":{"start":1697245918694,"stop":1697245920961,"duration":2267}},{"uid":"67c80e7846a90b74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/986//#testresult/67c80e7846a90b74","status":"passed","time":{"start":1697159760668,"stop":1697159763002,"duration":2334}},{"uid":"e52bb30419f829f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/985//#testresult/e52bb30419f829f9","status":"passed","time":{"start":1697073099069,"stop":1697073100780,"duration":1711}},{"uid":"c1c0c8ca4e9fad57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/984//#testresult/c1c0c8ca4e9fad57","status":"passed","time":{"start":1697052862121,"stop":1697052864204,"duration":2083}},{"uid":"c327b18fdd112c38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/981//#testresult/c327b18fdd112c38","status":"passed","time":{"start":1697050675198,"stop":1697050676795,"duration":1597}},{"uid":"a1f5ace39876bafd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/978//#testresult/a1f5ace39876bafd","status":"passed","time":{"start":1696986814320,"stop":1696986816169,"duration":1849}},{"uid":"cc42bb8c9f0c920","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/977//#testresult/cc42bb8c9f0c920","status":"passed","time":{"start":1696900394872,"stop":1696900396274,"duration":1402}},{"uid":"2c280cb0490df310","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/976//#testresult/2c280cb0490df310","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1696814027593,"stop":1696814029304,"duration":1711}},{"uid":"394d40d02437405b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/975//#testresult/394d40d02437405b","status":"passed","time":{"start":1696727908778,"stop":1696727910300,"duration":1522}},{"uid":"26b870746c3be605","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/974//#testresult/26b870746c3be605","status":"passed","time":{"start":1696641183655,"stop":1696641186867,"duration":3212}},{"uid":"5e60fb28dd64cfa8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/973//#testresult/5e60fb28dd64cfa8","status":"passed","time":{"start":1696554831661,"stop":1696554833785,"duration":2124}},{"uid":"dbcee319e4f9105e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/972//#testresult/dbcee319e4f9105e","status":"passed","time":{"start":1696468427542,"stop":1696468429154,"duration":1612}},{"uid":"d36f8a4cef67270d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/971//#testresult/d36f8a4cef67270d","status":"passed","time":{"start":1696382132998,"stop":1696382134620,"duration":1622}},{"uid":"deb4acef4a9aa427","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/970//#testresult/deb4acef4a9aa427","status":"passed","time":{"start":1696366184899,"stop":1696366186512,"duration":1613}},{"uid":"f1b937dccdec94c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/969//#testresult/f1b937dccdec94c","status":"passed","time":{"start":1696295655524,"stop":1696295658661,"duration":3137}},{"uid":"338223e0462af7a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/967//#testresult/338223e0462af7a1","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1696209263483,"stop":1696209265585,"duration":2102}}]},"tags":[]},"source":"e603fdbeb15a30aa.json","parameterValues":["CharnwoodBoroughCouncil"]}