{"uid":"c08366cc92b9f4b3","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1704158217318,"stop":1704158218401,"duration":1083},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f8d4bd63130>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8d3e1be410>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f8d4bd63130>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8d3e1be410>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1704158217318,"stop":1704158217319,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1704158217319,"stop":1704158218401,"duration":1082},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1567-133"},{"name":"thread","value":"2796-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":67},"items":[{"uid":"9621db3336a116f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1345//#testresult/9621db3336a116f6","status":"passed","time":{"start":1704114587678,"stop":1704114588535,"duration":857}},{"uid":"ddc2809821377012","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1343//#testresult/ddc2809821377012","status":"passed","time":{"start":1704113684022,"stop":1704113685190,"duration":1168}},{"uid":"8dab3bf47fa4c231","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1341//#testresult/8dab3bf47fa4c231","status":"passed","time":{"start":1704112217051,"stop":1704112218166,"duration":1115}},{"uid":"14ef081f86687bde","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/14ef081f86687bde","status":"passed","time":{"start":1704112065050,"stop":1704112066428,"duration":1378}},{"uid":"ba53a4fd48d7d269","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/ba53a4fd48d7d269","status":"passed","time":{"start":1704112023526,"stop":1704112025266,"duration":1740}},{"uid":"a63baa5cc38e447a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/a63baa5cc38e447a","status":"passed","time":{"start":1704111791388,"stop":1704111792430,"duration":1042}},{"uid":"2fe2515474101430","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/2fe2515474101430","status":"passed","time":{"start":1704111483120,"stop":1704111483944,"duration":824}},{"uid":"b001f8b6cf617003","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/b001f8b6cf617003","status":"passed","time":{"start":1704111432020,"stop":1704111433179,"duration":1159}},{"uid":"c413962cf98d5205","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/c413962cf98d5205","status":"passed","time":{"start":1704111295764,"stop":1704111296610,"duration":846}},{"uid":"94aed43229c26e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1330//#testresult/94aed43229c26e78","status":"passed","time":{"start":1704099903206,"stop":1704099904495,"duration":1289}},{"uid":"2ee7da67952aabf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/2ee7da67952aabf8","status":"passed","time":{"start":1704072215241,"stop":1704072216083,"duration":842}},{"uid":"6bbe722c091d32ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1327//#testresult/6bbe722c091d32ce","status":"passed","time":{"start":1704050354068,"stop":1704050355563,"duration":1495}},{"uid":"6cbe1732ab1eaca1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1325//#testresult/6cbe1732ab1eaca1","status":"passed","time":{"start":1704043848061,"stop":1704043849479,"duration":1418}},{"uid":"59949fda041e4df0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/59949fda041e4df0","status":"passed","time":{"start":1703985714371,"stop":1703985715694,"duration":1323}},{"uid":"b77cfbcb762f89ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/b77cfbcb762f89ea","status":"passed","time":{"start":1703898876752,"stop":1703898877516,"duration":764}},{"uid":"345eed113609aac6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/345eed113609aac6","status":"passed","time":{"start":1703853431626,"stop":1703853433320,"duration":1694}},{"uid":"590edc36088441bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/590edc36088441bd","status":"passed","time":{"start":1703851050640,"stop":1703851052274,"duration":1634}},{"uid":"a7489ac4f27b5b58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/a7489ac4f27b5b58","status":"passed","time":{"start":1703851082671,"stop":1703851083939,"duration":1268}},{"uid":"fcbcbfeafc19c05c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/fcbcbfeafc19c05c","status":"passed","time":{"start":1703811987790,"stop":1703811988593,"duration":803}},{"uid":"ee13bdf7281f4a2a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/ee13bdf7281f4a2a","status":"passed","time":{"start":1703756122045,"stop":1703756122936,"duration":891}}]},"tags":[]},"source":"c08366cc92b9f4b3.json","parameterValues":["BarnsleyMBCouncil","None","None"]}