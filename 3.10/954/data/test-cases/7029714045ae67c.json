{"uid":"7029714045ae67c","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1695841448751,"stop":1695841450126,"duration":1375},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\n_pytest_bdd_example = {'council': 'KingstonUponThamesCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 27 September\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\n_pytest_bdd_example = {'council': 'KingstonUponThamesCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 27 September\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1695841448752,"stop":1695841448752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1695841448753,"stop":1695841450126,"duration":1373},"status":"failed","statusMessage":"time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az562-124"},{"name":"thread","value":"2138-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":89,"unknown":0,"total":95},"items":[{"uid":"f786c1fa6d57e1c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/953//#testresult/f786c1fa6d57e1c7","status":"passed","time":{"start":1695841408974,"stop":1695841409932,"duration":958}},{"uid":"58ee596362d3b839","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/948//#testresult/58ee596362d3b839","status":"passed","time":{"start":1695777293490,"stop":1695777294010,"duration":520}},{"uid":"b70a19d1f4e102c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/947//#testresult/b70a19d1f4e102c9","status":"passed","time":{"start":1695690889085,"stop":1695690889617,"duration":532}},{"uid":"66576893bfefba74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/946//#testresult/66576893bfefba74","status":"passed","time":{"start":1695604531655,"stop":1695604532509,"duration":854}},{"uid":"90ee99e6f3a361ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/945//#testresult/90ee99e6f3a361ce","status":"passed","time":{"start":1695518310412,"stop":1695518312585,"duration":2173}},{"uid":"d34e023f8cdd7305","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/944//#testresult/d34e023f8cdd7305","status":"passed","time":{"start":1695431543329,"stop":1695431544289,"duration":960}},{"uid":"bb9a63fd18cbabdc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/943//#testresult/bb9a63fd18cbabdc","status":"passed","time":{"start":1695345270780,"stop":1695345272339,"duration":1559}},{"uid":"15b8852412cc7863","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/942//#testresult/15b8852412cc7863","status":"passed","time":{"start":1695258799107,"stop":1695258799902,"duration":795}},{"uid":"67129d89c2a9d25f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/941//#testresult/67129d89c2a9d25f","status":"passed","time":{"start":1695206186100,"stop":1695206186679,"duration":579}},{"uid":"7d766a964eba580","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/939//#testresult/7d766a964eba580","status":"passed","time":{"start":1695193644554,"stop":1695193645299,"duration":745}},{"uid":"261ce6f3ecef21ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/937//#testresult/261ce6f3ecef21ab","status":"passed","time":{"start":1695172421697,"stop":1695172422506,"duration":809}},{"uid":"786e09c26de66454","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/936//#testresult/786e09c26de66454","status":"passed","time":{"start":1695161921424,"stop":1695161922146,"duration":722}},{"uid":"55730ea4b2ce2d21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/935//#testresult/55730ea4b2ce2d21","status":"passed","time":{"start":1695159895487,"stop":1695159896382,"duration":895}},{"uid":"39c10168eb12e055","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/932//#testresult/39c10168eb12e055","status":"passed","time":{"start":1695156954921,"stop":1695156955348,"duration":427}},{"uid":"8aba2112ee0419e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/930//#testresult/8aba2112ee0419e9","status":"passed","time":{"start":1695086089256,"stop":1695086090064,"duration":808}},{"uid":"b44413e3050c9aaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/929//#testresult/b44413e3050c9aaa","status":"passed","time":{"start":1694999624031,"stop":1694999624938,"duration":907}},{"uid":"4b8e1776391016b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/928//#testresult/4b8e1776391016b6","status":"passed","time":{"start":1694987858981,"stop":1694987860007,"duration":1026}},{"uid":"8f055ee973bcd84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/926//#testresult/8f055ee973bcd84","status":"passed","time":{"start":1694987696629,"stop":1694987697299,"duration":670}},{"uid":"e53351e05a1f2220","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/922//#testresult/e53351e05a1f2220","status":"passed","time":{"start":1694971663032,"stop":1694971663920,"duration":888}},{"uid":"3e0448037c82dcc7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/920//#testresult/3e0448037c82dcc7","status":"passed","time":{"start":1694913459057,"stop":1694913459934,"duration":877}}]},"tags":[]},"source":"7029714045ae67c.json","parameterValues":["KingstonUponThamesCouncil"]}