{"uid":"4eacf766a51b6c3a","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1704378484955,"stop":1704378486762,"duration":1807},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcb1dde3910>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcb0a294910>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcb0a294910>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcb1dde3910>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcb0a294910>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcb0a294910>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1704378484955,"stop":1704378484956,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1704378484956,"stop":1704378486760,"duration":1804},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704378486760,"stop":1704378486760,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704378486761,"stop":1704378486762,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az735-909"},{"name":"thread","value":"2702-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":46,"broken":0,"skipped":0,"passed":79,"unknown":0,"total":125},"items":[{"uid":"e695635e402eeedf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1367//#testresult/e695635e402eeedf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378155100,"stop":1704378156459,"duration":1359}},{"uid":"402b047b632ed4c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1366//#testresult/402b047b632ed4c1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375969944,"stop":1704375971523,"duration":1579}},{"uid":"7e1a5f59c9c9b08d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1363//#testresult/7e1a5f59c9c9b08d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356875883,"stop":1704356877563,"duration":1680}},{"uid":"ecfe6ab6546196ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1361//#testresult/ecfe6ab6546196ba","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356050324,"stop":1704356052951,"duration":2627}},{"uid":"eb71cf7022a76217","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1359//#testresult/eb71cf7022a76217","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331216948,"stop":1704331218768,"duration":1820}},{"uid":"ff5a7dfb769e1566","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1355//#testresult/ff5a7dfb769e1566","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303840864,"stop":1704303842769,"duration":1905}},{"uid":"cfba1f88dc155572","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1354//#testresult/cfba1f88dc155572","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303791228,"stop":1704303792780,"duration":1552}},{"uid":"7430cef5058b1232","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1352//#testresult/7430cef5058b1232","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704301526512,"stop":1704301528245,"duration":1733}},{"uid":"826bf917390045d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1349//#testresult/826bf917390045d3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244775635,"stop":1704244776960,"duration":1325}},{"uid":"4ecfcdfd1392b98c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1348//#testresult/4ecfcdfd1392b98c","status":"passed","time":{"start":1704180386138,"stop":1704180388269,"duration":2131}},{"uid":"12a18f9f4b112f3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1346//#testresult/12a18f9f4b112f3f","status":"passed","time":{"start":1704158450444,"stop":1704158452437,"duration":1993}},{"uid":"787a468189f222ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1345//#testresult/787a468189f222ae","status":"passed","time":{"start":1704114762108,"stop":1704114763657,"duration":1549}},{"uid":"e6a1a39c0445eb3b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1343//#testresult/e6a1a39c0445eb3b","status":"passed","time":{"start":1704113859451,"stop":1704113860710,"duration":1259}},{"uid":"ac4f530e4bcd79dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1341//#testresult/ac4f530e4bcd79dd","status":"passed","time":{"start":1704112418291,"stop":1704112419950,"duration":1659}},{"uid":"c72955ae27bab2e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/c72955ae27bab2e5","status":"passed","time":{"start":1704112308584,"stop":1704112310146,"duration":1562}},{"uid":"b2cf4844bf13d50c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/b2cf4844bf13d50c","status":"passed","time":{"start":1704112255471,"stop":1704112257124,"duration":1653}},{"uid":"f8107f69845a5181","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/f8107f69845a5181","status":"passed","time":{"start":1704111987562,"stop":1704111989161,"duration":1599}},{"uid":"1235f17a4c8b1973","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/1235f17a4c8b1973","status":"passed","time":{"start":1704111687969,"stop":1704111689346,"duration":1377}},{"uid":"e854c5a8a220ef6a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/e854c5a8a220ef6a","status":"passed","time":{"start":1704111638317,"stop":1704111639908,"duration":1591}},{"uid":"9f742c892336f96f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/9f742c892336f96f","status":"passed","time":{"start":1704111466590,"stop":1704111468184,"duration":1594}}]},"tags":[]},"source":"4eacf766a51b6c3a.json","parameterValues":["SouthNorfolkCouncil","None","None"]}