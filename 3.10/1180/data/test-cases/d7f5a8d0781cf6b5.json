{"uid":"d7f5a8d0781cf6b5","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1701419154466,"stop":1701419156412,"duration":1946},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa1c75b6950>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa1b92d4460>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa1b92d4460>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa1c75b6950>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa1b92d4460>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa1b92d4460>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1701419154467,"stop":1701419154467,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1701419154467,"stop":1701419156410,"duration":1943},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701419156410,"stop":1701419156410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701419156410,"stop":1701419156412,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az530-677"},{"name":"thread","value":"2862-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":39,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":39},"items":[{"uid":"d61c3fc4e188cc5c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1176//#testresult/d61c3fc4e188cc5c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419002761,"stop":1701419009758,"duration":6997}},{"uid":"c4e48a6459f6075e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1175//#testresult/c4e48a6459f6075e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414474909,"stop":1701414479138,"duration":4229}},{"uid":"50af9dc6194d5593","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1174//#testresult/50af9dc6194d5593","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414427078,"stop":1701414429071,"duration":1993}},{"uid":"bddc12386485a196","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1173//#testresult/bddc12386485a196","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701394079413,"stop":1701394082340,"duration":2927}},{"uid":"bf9484fa48d2dcb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1169//#testresult/bf9484fa48d2dcb6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353513843,"stop":1701353519519,"duration":5676}},{"uid":"eb63783d17b1a01e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1163//#testresult/eb63783d17b1a01e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307196736,"stop":1701307199673,"duration":2937}},{"uid":"3534a0b5ec03d924","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1161//#testresult/3534a0b5ec03d924","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279553879,"stop":1701279556090,"duration":2211}},{"uid":"d13e8c2781a35586","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1162//#testresult/d13e8c2781a35586","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279450854,"stop":1701279453729,"duration":2875}},{"uid":"8459d72824d302b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1156//#testresult/8459d72824d302b3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220868876,"stop":1701220870872,"duration":1996}},{"uid":"5d700c764d3be2d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1155//#testresult/5d700c764d3be2d7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134553458,"stop":1701134555360,"duration":1902}},{"uid":"42b15cd096de7bf7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1152//#testresult/42b15cd096de7bf7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701048111561,"stop":1701048128073,"duration":16512}},{"uid":"e4fdb686cab286a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1151//#testresult/e4fdb686cab286a9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036341610,"stop":1701036349028,"duration":7418}},{"uid":"f95eedb6bb5566f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1150//#testresult/f95eedb6bb5566f5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036292872,"stop":1701036300736,"duration":7864}},{"uid":"28e2bccaa91f3cc1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1148//#testresult/28e2bccaa91f3cc1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961930115,"stop":1700961942928,"duration":12813}},{"uid":"60a763c03b85b331","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1147//#testresult/60a763c03b85b331","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700875050305,"stop":1700875053823,"duration":3518}},{"uid":"f84f309d000d77d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1146//#testresult/f84f309d000d77d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788692416,"stop":1700788695241,"duration":2825}},{"uid":"c60e4b306795e888","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1145//#testresult/c60e4b306795e888","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702403311,"stop":1700702408239,"duration":4928}},{"uid":"9839231cb63ad18a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1143//#testresult/9839231cb63ad18a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646449836,"stop":1700646454826,"duration":4990}},{"uid":"c4df751fce19504","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1141//#testresult/c4df751fce19504","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616152492,"stop":1700616156773,"duration":4281}},{"uid":"a291d5d97e1af6b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1136//#testresult/a291d5d97e1af6b6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529898182,"stop":1700529901109,"duration":2927}}]},"tags":[]},"source":"d7f5a8d0781cf6b5.json","parameterValues":["WiltshireCouncil","None","None"]}