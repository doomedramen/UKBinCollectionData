{"uid":"e7dababb70474f94","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1704496289670,"stop":1704496290773,"duration":1103},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f5656ac7b50>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f56563f5660>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f56563f5660>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f5656ac7b50>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f56563f5660>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f56563f5660>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1704496289670,"stop":1704496289671,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1704496289671,"stop":1704496290770,"duration":1099},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704496290771,"stop":1704496290771,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704496290771,"stop":1704496290773,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1433-659"},{"name":"thread","value":"2692-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":139,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":139},"items":[{"uid":"a5a3b95953287791","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1406//#testresult/a5a3b95953287791","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704453415870,"stop":1704453417617,"duration":1747}},{"uid":"8e51fc0306b9cdae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1407//#testresult/8e51fc0306b9cdae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704453425717,"stop":1704453427064,"duration":1347}},{"uid":"c6d20038eb34e41a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1405//#testresult/c6d20038eb34e41a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704452630395,"stop":1704452631661,"duration":1266}},{"uid":"1ea16e0d3d10e053","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1400//#testresult/1ea16e0d3d10e053","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443770582,"stop":1704443771720,"duration":1138}},{"uid":"41cd6709169676e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1399//#testresult/41cd6709169676e6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443360497,"stop":1704443361743,"duration":1246}},{"uid":"73aaffcaf11ac0db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1397//#testresult/73aaffcaf11ac0db","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442496788,"stop":1704442497882,"duration":1094}},{"uid":"adf16eb09bea5d07","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1390//#testresult/adf16eb09bea5d07","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704417545186,"stop":1704417546358,"duration":1172}},{"uid":"e48f4271573f8431","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1379//#testresult/e48f4271573f8431","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704406031166,"stop":1704406032746,"duration":1580}},{"uid":"8cd6e3928ca149c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1378//#testresult/8cd6e3928ca149c6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704405971941,"stop":1704405973126,"duration":1185}},{"uid":"cd35248a93e534d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1376//#testresult/cd35248a93e534d3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398813054,"stop":1704398814248,"duration":1194}},{"uid":"3c775e95dde8b225","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1375//#testresult/3c775e95dde8b225","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398755596,"stop":1704398756802,"duration":1206}},{"uid":"4b4a1bc3c67199e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1373//#testresult/4b4a1bc3c67199e9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704388315835,"stop":1704388317558,"duration":1723}},{"uid":"b2c19b7fbbb5be57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1372//#testresult/b2c19b7fbbb5be57","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704388270174,"stop":1704388271469,"duration":1295}},{"uid":"32c1fdb913d22529","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1369//#testresult/32c1fdb913d22529","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378365794,"stop":1704378367363,"duration":1569}},{"uid":"b4cc24e0acb36f17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1367//#testresult/b4cc24e0acb36f17","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378116503,"stop":1704378117610,"duration":1107}},{"uid":"feefb69a2627d506","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1366//#testresult/feefb69a2627d506","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375871082,"stop":1704375872154,"duration":1072}},{"uid":"f842982c7aad3284","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1363//#testresult/f842982c7aad3284","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356807271,"stop":1704356808312,"duration":1041}},{"uid":"b7fe7235acf9fa37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1361//#testresult/b7fe7235acf9fa37","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355957797,"stop":1704355959405,"duration":1608}},{"uid":"9df75e1aa476278c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1359//#testresult/9df75e1aa476278c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331105575,"stop":1704331106733,"duration":1158}},{"uid":"6e57658ce99510","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1355//#testresult/6e57658ce99510","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303745542,"stop":1704303746785,"duration":1243}}]},"tags":[]},"source":"e7dababb70474f94.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}