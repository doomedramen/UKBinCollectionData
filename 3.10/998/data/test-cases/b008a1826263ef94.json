{"uid":"b008a1826263ef94","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1697399713712,"stop":1697399715205,"duration":1493},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f83e879a8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f83dbceb370>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f83e879a8c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f83dbceb370>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1697399713712,"stop":1697399713713,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1697399713713,"stop":1697399715205,"duration":1492},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az810-293"},{"name":"thread","value":"2355-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":111,"unknown":0,"total":122},"items":[{"uid":"7455f8233898a21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/994//#testresult/7455f8233898a21","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697366971628,"stop":1697366973068,"duration":1440}},{"uid":"1ea42600d467a964","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/992//#testresult/1ea42600d467a964","status":"passed","time":{"start":1697332812423,"stop":1697332813343,"duration":920}},{"uid":"21ae4380e4bda3fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/988//#testresult/21ae4380e4bda3fa","status":"passed","time":{"start":1697245975487,"stop":1697245976345,"duration":858}},{"uid":"ce11c7ba6d9e9ade","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/986//#testresult/ce11c7ba6d9e9ade","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697159811465,"stop":1697159813224,"duration":1759}},{"uid":"b5d7baa45c4b216a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/985//#testresult/b5d7baa45c4b216a","status":"passed","time":{"start":1697073152841,"stop":1697073154359,"duration":1518}},{"uid":"216ab13780c57413","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/984//#testresult/216ab13780c57413","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697052910717,"stop":1697052912539,"duration":1822}},{"uid":"2547b15da0872edf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/981//#testresult/2547b15da0872edf","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697050720363,"stop":1697050721849,"duration":1486}},{"uid":"4ca5658e810b18d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/978//#testresult/4ca5658e810b18d7","status":"passed","time":{"start":1696986877734,"stop":1696986878640,"duration":906}},{"uid":"b7d16b63d939a719","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/977//#testresult/b7d16b63d939a719","status":"passed","time":{"start":1696900442758,"stop":1696900443567,"duration":809}},{"uid":"307460c0066c84b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/976//#testresult/307460c0066c84b4","status":"passed","time":{"start":1696814068937,"stop":1696814069778,"duration":841}},{"uid":"4dadce0b525b7729","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/975//#testresult/4dadce0b525b7729","status":"passed","time":{"start":1696727957134,"stop":1696727957990,"duration":856}},{"uid":"64818e8f8c94a0ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/974//#testresult/64818e8f8c94a0ac","status":"passed","time":{"start":1696641242009,"stop":1696641242910,"duration":901}},{"uid":"a76b92e840b96f94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/973//#testresult/a76b92e840b96f94","status":"passed","time":{"start":1696554883744,"stop":1696554884671,"duration":927}},{"uid":"95f9b03227910e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/972//#testresult/95f9b03227910e45","status":"passed","time":{"start":1696468472085,"stop":1696468472619,"duration":534}},{"uid":"87457237b8c641c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/971//#testresult/87457237b8c641c3","status":"passed","time":{"start":1696382180294,"stop":1696382181113,"duration":819}},{"uid":"e7e8a34210f6bc77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/970//#testresult/e7e8a34210f6bc77","status":"passed","time":{"start":1696366222829,"stop":1696366223264,"duration":435}},{"uid":"da9d495a52cb23f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/969//#testresult/da9d495a52cb23f","status":"passed","time":{"start":1696295711882,"stop":1696295713601,"duration":1719}},{"uid":"2393de20898dc7cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/967//#testresult/2393de20898dc7cf","status":"passed","time":{"start":1696209312399,"stop":1696209313110,"duration":711}},{"uid":"6fd95e533b0c9e5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/966//#testresult/6fd95e533b0c9e5a","status":"passed","time":{"start":1696123413521,"stop":1696123414474,"duration":953}},{"uid":"602deb3328828f1f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/965//#testresult/602deb3328828f1f","status":"passed","time":{"start":1696036369737,"stop":1696036370269,"duration":532}}]},"tags":[]},"source":"b008a1826263ef94.json","parameterValues":["KingstonUponThamesCouncil"]}