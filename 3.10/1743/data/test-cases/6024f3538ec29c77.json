{"uid":"6024f3538ec29c77","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1715041627127,"stop":1715041628037,"duration":910},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2e9e25ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2e9d2e3820>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2e9e25ae60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2e9d2e3820>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1715041627127,"stop":1715041627128,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1715041627128,"stop":1715041628037,"duration":909},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-937"},{"name":"thread","value":"2666-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":198,"unknown":0,"total":225},"items":[{"uid":"c3a6d93607fd2233","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1742//#testresult/c3a6d93607fd2233","status":"passed","time":{"start":1714955283987,"stop":1714955285577,"duration":1590}},{"uid":"f680b8313bfcc5c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1741//#testresult/f680b8313bfcc5c3","status":"passed","time":{"start":1714869005447,"stop":1714869006493,"duration":1046}},{"uid":"b71497b891297fe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1740//#testresult/b71497b891297fe6","status":"passed","time":{"start":1714782360005,"stop":1714782361015,"duration":1010}},{"uid":"6cabd20872f42f8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1739//#testresult/6cabd20872f42f8a","status":"passed","time":{"start":1714696011445,"stop":1714696012635,"duration":1190}},{"uid":"8132dad2b163eaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1738//#testresult/8132dad2b163eaf","status":"passed","time":{"start":1714609596407,"stop":1714609597550,"duration":1143}},{"uid":"2e7c2486e31428c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1735//#testresult/2e7c2486e31428c2","status":"passed","time":{"start":1714523339562,"stop":1714523340799,"duration":1237}},{"uid":"32ab17ee1ce44cc3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1734//#testresult/32ab17ee1ce44cc3","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1714436774978,"stop":1714436777006,"duration":2028}},{"uid":"7500078e35a64ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1732//#testresult/7500078e35a64ec","status":"passed","time":{"start":1714350487478,"stop":1714350488594,"duration":1116}},{"uid":"6f82351fc9ed27bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1724//#testresult/6f82351fc9ed27bc","status":"passed","time":{"start":1714264247672,"stop":1714264248924,"duration":1252}},{"uid":"6ede528420f54414","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1722//#testresult/6ede528420f54414","status":"passed","time":{"start":1714234154705,"stop":1714234155757,"duration":1052}},{"uid":"8e025c9b3fceccd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1714//#testresult/8e025c9b3fceccd3","status":"passed","time":{"start":1714232712640,"stop":1714232714042,"duration":1402}},{"uid":"e944db686dc9bd49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1713//#testresult/e944db686dc9bd49","status":"passed","time":{"start":1714177661941,"stop":1714177663181,"duration":1240}},{"uid":"16cc4f3866cf2839","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1712//#testresult/16cc4f3866cf2839","status":"passed","time":{"start":1714091224888,"stop":1714091226761,"duration":1873}},{"uid":"449b2cc5e800f38b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1711//#testresult/449b2cc5e800f38b","status":"passed","time":{"start":1714004909019,"stop":1714004909998,"duration":979}},{"uid":"895e73747d3dd4d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1710//#testresult/895e73747d3dd4d5","status":"passed","time":{"start":1713918451757,"stop":1713918452625,"duration":868}},{"uid":"4f8c0b034cd2d90f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1709//#testresult/4f8c0b034cd2d90f","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713832554106,"stop":1713832555139,"duration":1033}},{"uid":"ee3dbb7530c0c0b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1708//#testresult/ee3dbb7530c0c0b7","status":"passed","time":{"start":1713745677481,"stop":1713745679425,"duration":1944}},{"uid":"c90509e2143cf7da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1707//#testresult/c90509e2143cf7da","status":"passed","time":{"start":1713659335497,"stop":1713659336641,"duration":1144}},{"uid":"30157c0d3c8f5d1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1706//#testresult/30157c0d3c8f5d1d","status":"passed","time":{"start":1713572756917,"stop":1713572758001,"duration":1084}},{"uid":"304fb3271409f034","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1702//#testresult/304fb3271409f034","status":"passed","time":{"start":1713486409998,"stop":1713486412282,"duration":2284}}]},"tags":[]},"source":"6024f3538ec29c77.json","parameterValues":["BarnsleyMBCouncil","None","None"]}