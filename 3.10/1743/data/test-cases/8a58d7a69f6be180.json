{"uid":"8a58d7a69f6be180","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1715041684992,"stop":1715041685790,"duration":798},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f66cf7c7130>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f66ce972980>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f66cf7c7130>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f66ce972980>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1715041684993,"stop":1715041684993,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1715041684993,"stop":1715041685790,"duration":797},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-937"},{"name":"thread","value":"2669-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":124,"broken":0,"skipped":0,"passed":143,"unknown":0,"total":267},"items":[{"uid":"7c4320848589a2be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1742//#testresult/7c4320848589a2be","status":"passed","time":{"start":1714955339982,"stop":1714955341493,"duration":1511}},{"uid":"8ccb1976de00302","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1741//#testresult/8ccb1976de00302","status":"passed","time":{"start":1714869057771,"stop":1714869058482,"duration":711}},{"uid":"58cd7788e46a3eb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1740//#testresult/58cd7788e46a3eb8","status":"passed","time":{"start":1714782415458,"stop":1714782416146,"duration":688}},{"uid":"b370961cdabcfe86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1739//#testresult/b370961cdabcfe86","status":"passed","time":{"start":1714696071391,"stop":1714696071991,"duration":600}},{"uid":"d11b72ae72f19b21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1738//#testresult/d11b72ae72f19b21","status":"passed","time":{"start":1714609653859,"stop":1714609654441,"duration":582}},{"uid":"ab43c0e3225e8972","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1735//#testresult/ab43c0e3225e8972","status":"passed","time":{"start":1714523384531,"stop":1714523385520,"duration":989}},{"uid":"52f7ffb55bd03215","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1734//#testresult/52f7ffb55bd03215","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1714436835595,"stop":1714436836612,"duration":1017}},{"uid":"5220c749719c714a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1732//#testresult/5220c749719c714a","status":"passed","time":{"start":1714350592612,"stop":1714350593329,"duration":717}},{"uid":"1d198c45f85c3bfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1724//#testresult/1d198c45f85c3bfb","status":"passed","time":{"start":1714264303071,"stop":1714264303779,"duration":708}},{"uid":"570ad5eef4eb7185","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1722//#testresult/570ad5eef4eb7185","status":"passed","time":{"start":1714234197793,"stop":1714234198374,"duration":581}},{"uid":"f27a68dc2f9e716f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1714//#testresult/f27a68dc2f9e716f","status":"passed","time":{"start":1714232783419,"stop":1714232784419,"duration":1000}},{"uid":"3a859d285ef087bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1713//#testresult/3a859d285ef087bd","status":"passed","time":{"start":1714177678379,"stop":1714177679075,"duration":696}},{"uid":"19b0709f04b0ca6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1712//#testresult/19b0709f04b0ca6d","status":"passed","time":{"start":1714091309778,"stop":1714091310679,"duration":901}},{"uid":"e028a2cccb7769e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1711//#testresult/e028a2cccb7769e","status":"passed","time":{"start":1714004960761,"stop":1714004961901,"duration":1140}},{"uid":"3e630e5850802f7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1710//#testresult/3e630e5850802f7e","status":"passed","time":{"start":1713918532418,"stop":1713918533039,"duration":621}},{"uid":"45fbb536f2c1898c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1709//#testresult/45fbb536f2c1898c","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1713832566459,"stop":1713832567175,"duration":716}},{"uid":"ac70dcf27746fa69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1708//#testresult/ac70dcf27746fa69","status":"passed","time":{"start":1713745732109,"stop":1713745733120,"duration":1011}},{"uid":"4582e0ecd625e63d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1707//#testresult/4582e0ecd625e63d","status":"passed","time":{"start":1713659390468,"stop":1713659391092,"duration":624}},{"uid":"21e4a6df32c74ee6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1706//#testresult/21e4a6df32c74ee6","status":"passed","time":{"start":1713572844933,"stop":1713572846386,"duration":1453}},{"uid":"7bda63c0de99aefc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1702//#testresult/7bda63c0de99aefc","status":"passed","time":{"start":1713486473301,"stop":1713486474311,"duration":1010}}]},"tags":[]},"source":"8a58d7a69f6be180.json","parameterValues":["LiverpoolCityCouncil","None","None"]}