{"uid":"70569845f89ac997","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1698701314733,"stop":1698701316756,"duration":2023},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f931735ab00>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f930ef349a0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f931735ab00>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f930ef349a0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1698701314733,"stop":1698701314734,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1698701314734,"stop":1698701316756,"duration":2022},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az398-309"},{"name":"thread","value":"2254-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":28,"broken":0,"skipped":0,"passed":137,"unknown":0,"total":165},"items":[{"uid":"80810e61fab353fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1073//#testresult/80810e61fab353fa","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698700154763,"stop":1698700156901,"duration":2138}},{"uid":"e464cbbfedd58ef2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1070//#testresult/e464cbbfedd58ef2","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698692700988,"stop":1698692702615,"duration":1627}},{"uid":"b5086abf204ccc65","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/b5086abf204ccc65","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698692663770,"stop":1698692665266,"duration":1496}},{"uid":"c1c1be89cff7ad4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/c1c1be89cff7ad4f","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698646224503,"stop":1698646228742,"duration":4239}},{"uid":"92d987ee69bdeb27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/92d987ee69bdeb27","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698628471086,"stop":1698628473042,"duration":1956}},{"uid":"7c42663407473cf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/7c42663407473cf3","status":"passed","time":{"start":1698615114278,"stop":1698615116098,"duration":1820}},{"uid":"3c01f879c5242b72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1061//#testresult/3c01f879c5242b72","status":"passed","time":{"start":1698615037742,"stop":1698615039828,"duration":2086}},{"uid":"ded811926ddf3b87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/ded811926ddf3b87","status":"passed","time":{"start":1698542279600,"stop":1698542282558,"duration":2958}},{"uid":"43fe8b82c2a0c15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/43fe8b82c2a0c15","status":"passed","time":{"start":1698455469673,"stop":1698455471243,"duration":1570}},{"uid":"f331637d2fff8bb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1051//#testresult/f331637d2fff8bb7","status":"passed","time":{"start":1698369154889,"stop":1698369158094,"duration":3205}},{"uid":"d3fd5d853c0618ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1050//#testresult/d3fd5d853c0618ca","status":"passed","time":{"start":1698282743602,"stop":1698282745700,"duration":2098}},{"uid":"b53627de859eb98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1049//#testresult/b53627de859eb98","status":"passed","time":{"start":1698196413628,"stop":1698196416088,"duration":2460}},{"uid":"f13f6af1012dadbd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1048//#testresult/f13f6af1012dadbd","status":"passed","time":{"start":1698178142694,"stop":1698178145007,"duration":2313}},{"uid":"545e96837f3d7a10","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1047//#testresult/545e96837f3d7a10","status":"passed","time":{"start":1698178105967,"stop":1698178109099,"duration":3132}},{"uid":"63845204b947a244","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1046//#testresult/63845204b947a244","status":"passed","time":{"start":1698110011279,"stop":1698110012843,"duration":1564}},{"uid":"8176167fd7d969e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/8176167fd7d969e2","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698064777629,"stop":1698064779300,"duration":1671}},{"uid":"f334b5a6ad9e14d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/f334b5a6ad9e14d0","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698064817074,"stop":1698064818929,"duration":1855}},{"uid":"2f477ed1b697e27f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/2f477ed1b697e27f","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698023671690,"stop":1698023674796,"duration":3106}},{"uid":"5515d15639044d8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/5515d15639044d8b","status":"passed","time":{"start":1697937534660,"stop":1697937537346,"duration":2686}},{"uid":"d9daf2e1d91f7abf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/d9daf2e1d91f7abf","status":"passed","time":{"start":1697850723415,"stop":1697850725616,"duration":2201}}]},"tags":[]},"source":"70569845f89ac997.json","parameterValues":["CharnwoodBoroughCouncil"]}