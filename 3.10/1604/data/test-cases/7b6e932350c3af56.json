{"uid":"7b6e932350c3af56","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1710452799195,"stop":1710452804704,"duration":5509},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7c62c4143760>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7c62c3c413f0>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7c62c3c40220>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7c62c3c408e0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '7863c42f20f038955d4311a2140f1d81cee7f006', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7c62c4143760>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7c62c3c413f0>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7c62c3c40220>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7c62c3c408e0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '7863c42f20f038955d4311a2140f1d81cee7f006', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1710452799196,"stop":1710452799196,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1710452799196,"stop":1710452804704,"duration":5508},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1385-539"},{"name":"thread","value":"2739-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":124,"broken":0,"skipped":0,"passed":87,"unknown":0,"total":211},"items":[{"uid":"a2dd31874e47b6de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1602//#testresult/a2dd31874e47b6de","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1710375967598,"stop":1710375973523,"duration":5925}},{"uid":"32f9ea7285b0824e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1601//#testresult/32f9ea7285b0824e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1710289516293,"stop":1710289517666,"duration":1373}},{"uid":"a3d30cb1576251bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1600//#testresult/a3d30cb1576251bf","status":"passed","time":{"start":1710203112365,"stop":1710203117821,"duration":5456}},{"uid":"e08b494d58e5582","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1599//#testresult/e08b494d58e5582","status":"passed","time":{"start":1710116816862,"stop":1710116821241,"duration":4379}},{"uid":"2a67c2104ee6436e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1598//#testresult/2a67c2104ee6436e","status":"passed","time":{"start":1710030484229,"stop":1710030488861,"duration":4632}},{"uid":"64fc8f68d9f3901e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1597//#testresult/64fc8f68d9f3901e","status":"passed","time":{"start":1709943882561,"stop":1709943888183,"duration":5622}},{"uid":"4df2766a736542dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1596//#testresult/4df2766a736542dc","status":"passed","time":{"start":1709857540226,"stop":1709857545107,"duration":4881}},{"uid":"b64167a88e5803b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1595//#testresult/b64167a88e5803b2","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1709770841081,"stop":1709770842680,"duration":1599}},{"uid":"28fa7154de15525a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1594//#testresult/28fa7154de15525a","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1709684747485,"stop":1709684748860,"duration":1375}},{"uid":"189dfffe2cc5456e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1593//#testresult/189dfffe2cc5456e","status":"passed","time":{"start":1709598283743,"stop":1709598289585,"duration":5842}},{"uid":"6877f4c1b9250fbc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/6877f4c1b9250fbc","status":"passed","time":{"start":1709511977302,"stop":1709511982599,"duration":5297}},{"uid":"63bf13b31632bea5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/63bf13b31632bea5","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1708561524515,"stop":1708561525728,"duration":1213}},{"uid":"c600c7768c8a7daa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/c600c7768c8a7daa","status":"passed","time":{"start":1708475104853,"stop":1708475109781,"duration":4928}},{"uid":"33c564d4e13370ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/33c564d4e13370ff","status":"passed","time":{"start":1708388697945,"stop":1708388703478,"duration":5533}},{"uid":"1b2d36f7dffe73fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/1b2d36f7dffe73fd","status":"passed","time":{"start":1708302414507,"stop":1708302419098,"duration":4591}},{"uid":"8659fe2bda4216e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/8659fe2bda4216e1","status":"passed","time":{"start":1708216056204,"stop":1708216061599,"duration":5395}},{"uid":"93e4fc9bda4e9722","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/93e4fc9bda4e9722","status":"passed","time":{"start":1708129494342,"stop":1708129498722,"duration":4380}},{"uid":"5973cb0395be6de8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/5973cb0395be6de8","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1708043096932,"stop":1708043098818,"duration":1886}},{"uid":"f8576e7ba59ee4f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/f8576e7ba59ee4f3","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1707956723454,"stop":1707956724885,"duration":1431}},{"uid":"e87b21373b03d9ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/e87b21373b03d9ed","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1707870311971,"stop":1707870313646,"duration":1675}}]},"tags":[]},"source":"7b6e932350c3af56.json","parameterValues":["CroydonCouncil","None","None"]}