{"uid":"2547b15da0872edf","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1697050720363,"stop":1697050721849,"duration":1486},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\n_pytest_bdd_example = {'council': 'KingstonUponThamesCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\n_pytest_bdd_example = {'council': 'KingstonUponThamesCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1697050720363,"stop":1697050720363,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1697050720364,"stop":1697050721849,"duration":1485},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az717-965"},{"name":"thread","value":"2637-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":108,"unknown":0,"total":115},"items":[{"uid":"4ca5658e810b18d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/978//#testresult/4ca5658e810b18d7","status":"passed","time":{"start":1696986877734,"stop":1696986878640,"duration":906}},{"uid":"b7d16b63d939a719","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/977//#testresult/b7d16b63d939a719","status":"passed","time":{"start":1696900442758,"stop":1696900443567,"duration":809}},{"uid":"307460c0066c84b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/976//#testresult/307460c0066c84b4","status":"passed","time":{"start":1696814068937,"stop":1696814069778,"duration":841}},{"uid":"4dadce0b525b7729","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/975//#testresult/4dadce0b525b7729","status":"passed","time":{"start":1696727957134,"stop":1696727957990,"duration":856}},{"uid":"64818e8f8c94a0ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/974//#testresult/64818e8f8c94a0ac","status":"passed","time":{"start":1696641242009,"stop":1696641242910,"duration":901}},{"uid":"a76b92e840b96f94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/973//#testresult/a76b92e840b96f94","status":"passed","time":{"start":1696554883744,"stop":1696554884671,"duration":927}},{"uid":"95f9b03227910e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/972//#testresult/95f9b03227910e45","status":"passed","time":{"start":1696468472085,"stop":1696468472619,"duration":534}},{"uid":"87457237b8c641c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/971//#testresult/87457237b8c641c3","status":"passed","time":{"start":1696382180294,"stop":1696382181113,"duration":819}},{"uid":"e7e8a34210f6bc77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/970//#testresult/e7e8a34210f6bc77","status":"passed","time":{"start":1696366222829,"stop":1696366223264,"duration":435}},{"uid":"da9d495a52cb23f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/969//#testresult/da9d495a52cb23f","status":"passed","time":{"start":1696295711882,"stop":1696295713601,"duration":1719}},{"uid":"2393de20898dc7cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/967//#testresult/2393de20898dc7cf","status":"passed","time":{"start":1696209312399,"stop":1696209313110,"duration":711}},{"uid":"6fd95e533b0c9e5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/966//#testresult/6fd95e533b0c9e5a","status":"passed","time":{"start":1696123413521,"stop":1696123414474,"duration":953}},{"uid":"602deb3328828f1f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/965//#testresult/602deb3328828f1f","status":"passed","time":{"start":1696036369737,"stop":1696036370269,"duration":532}},{"uid":"dce888efa3a80449","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/964//#testresult/dce888efa3a80449","status":"passed","time":{"start":1695950064368,"stop":1695950065225,"duration":857}},{"uid":"1db31ad7fd845c0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/963//#testresult/1db31ad7fd845c0f","status":"passed","time":{"start":1695930386517,"stop":1695930387415,"duration":898}},{"uid":"18b7670168c9a9d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/962//#testresult/18b7670168c9a9d0","status":"passed","time":{"start":1695930294739,"stop":1695930295351,"duration":612}},{"uid":"7bb495a86edbe920","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/960//#testresult/7bb495a86edbe920","status":"passed","time":{"start":1695863674234,"stop":1695863675274,"duration":1040}},{"uid":"32a4661d85ac8093","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/958//#testresult/32a4661d85ac8093","status":"passed","time":{"start":1695852508549,"stop":1695852509443,"duration":894}},{"uid":"deac23a498207549","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/957//#testresult/deac23a498207549","status":"passed","time":{"start":1695852461184,"stop":1695852461696,"duration":512}},{"uid":"7029714045ae67c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/954//#testresult/7029714045ae67c","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 27 September\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","time":{"start":1695841448751,"stop":1695841450126,"duration":1375}}]},"tags":[]},"source":"2547b15da0872edf.json","parameterValues":["KingstonUponThamesCouncil"]}