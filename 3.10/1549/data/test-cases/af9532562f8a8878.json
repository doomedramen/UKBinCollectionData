{"uid":"af9532562f8a8878","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1707179139565,"stop":1707179140631,"duration":1066},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f8d08a37250>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8d07cae7d0>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f8d08a37250>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8d07cae7d0>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1707179139565,"stop":1707179139566,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1707179139566,"stop":1707179140631,"duration":1065},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1393-919"},{"name":"thread","value":"2758-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":123,"unknown":0,"total":136},"items":[{"uid":"cc3848347b2ba344","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/cc3848347b2ba344","status":"passed","time":{"start":1707092905836,"stop":1707092906793,"duration":957}},{"uid":"a2408b75a278be1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/a2408b75a278be1a","status":"passed","time":{"start":1707006506813,"stop":1707006507985,"duration":1172}},{"uid":"e621ee3114c61c09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1545//#testresult/e621ee3114c61c09","status":"passed","time":{"start":1706941877491,"stop":1706941878646,"duration":1155}},{"uid":"5d5d7006bc1283b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1544//#testresult/5d5d7006bc1283b9","status":"passed","time":{"start":1706938955087,"stop":1706938955945,"duration":858}},{"uid":"53a7340ce6eaf3f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1542//#testresult/53a7340ce6eaf3f8","status":"passed","time":{"start":1706938437106,"stop":1706938438037,"duration":931}},{"uid":"40b1d53bad59f826","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1541//#testresult/40b1d53bad59f826","status":"passed","time":{"start":1706919976636,"stop":1706919978593,"duration":1957}},{"uid":"4c85aa965c165044","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1540//#testresult/4c85aa965c165044","status":"passed","time":{"start":1706833530522,"stop":1706833531510,"duration":988}},{"uid":"1dda9b077ade817e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1538//#testresult/1dda9b077ade817e","status":"passed","time":{"start":1706747220001,"stop":1706747221101,"duration":1100}},{"uid":"23b5d2dcaa56dfe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1537//#testresult/23b5d2dcaa56dfe6","status":"passed","time":{"start":1706660815931,"stop":1706660817266,"duration":1335}},{"uid":"561561508bd59b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1535//#testresult/561561508bd59b","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1706574320645,"stop":1706574321737,"duration":1092}},{"uid":"a57cdf148d90cf06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1534//#testresult/a57cdf148d90cf06","status":"passed","time":{"start":1706487983580,"stop":1706487984888,"duration":1308}},{"uid":"7fe96cd184300450","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1531//#testresult/7fe96cd184300450","status":"passed","time":{"start":1706401676874,"stop":1706401678503,"duration":1629}},{"uid":"4ebcb713037e8e77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1529//#testresult/4ebcb713037e8e77","status":"passed","time":{"start":1706315135670,"stop":1706315136784,"duration":1114}},{"uid":"5a929923ad2274d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1528//#testresult/5a929923ad2274d7","status":"passed","time":{"start":1706228764723,"stop":1706228766588,"duration":1865}},{"uid":"7b90a3e364c0ccf4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1523//#testresult/7b90a3e364c0ccf4","status":"passed","time":{"start":1706142463625,"stop":1706142464967,"duration":1342}},{"uid":"374461b6b042f14b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1522//#testresult/374461b6b042f14b","status":"passed","time":{"start":1706056079543,"stop":1706056080791,"duration":1248}},{"uid":"ae8214bc61125adb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1521//#testresult/ae8214bc61125adb","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1705969688485,"stop":1705969690189,"duration":1704}},{"uid":"2288f158b104f1fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1520//#testresult/2288f158b104f1fb","status":"passed","time":{"start":1705883339839,"stop":1705883341394,"duration":1555}},{"uid":"941583685f3e564d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1519//#testresult/941583685f3e564d","status":"passed","time":{"start":1705797003451,"stop":1705797004741,"duration":1290}},{"uid":"8af369c1f2be1a05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1515//#testresult/8af369c1f2be1a05","status":"passed","time":{"start":1705710396471,"stop":1705710397306,"duration":835}}]},"tags":[]},"source":"af9532562f8a8878.json","parameterValues":["BarnsleyMBCouncil","None","None"]}