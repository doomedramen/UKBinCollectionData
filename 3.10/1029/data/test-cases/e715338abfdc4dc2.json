{"uid":"e715338abfdc4dc2","name":"Validate Council Output [GuildfordCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"316f6b3276320661fa68609de6296157","time":{"start":1697702021806,"stop":1697702021807,"duration":1},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","statusTrace":"fixturefunc = <function get_council_step at 0x7f77a550acb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f77a54d85e0>, 'council_name': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:32: in get_council_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:27: in get_council_step\n    council_input_data = file_handler.load_inputs_file(\"input.json\")\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:11: in load_inputs_file\n    data = json.load(f)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:293: in load\n    return loads(fp.read(),\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f77a5f6e6b0>\ns = '{\\n  \"AylesburyValeCouncil\": {\\n    \"SKIP_GET_URL\": \"SKIP_GET_URL\",\\n    \"uprn\": \"766252532\",\\n    \"url\": \"http://avd...ttps://waste-api.york.gov.uk/api/Collections/GetBinCollectionDataForUprn/\",\\n    \"wiki_name\": \"York Council\"\\n  }\\n}\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:353: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","statusTrace":"fixturefunc = <function get_council_step at 0x7f77a550acb0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f77a54d85e0>, 'council_name': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:32: in get_council_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:27: in get_council_step\n    council_input_data = file_handler.load_inputs_file(\"input.json\")\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:11: in load_inputs_file\n    data = json.load(f)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:293: in load\n    return loads(fp.read(),\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f77a5f6e6b0>\ns = '{\\n  \"AylesburyValeCouncil\": {\\n    \"SKIP_GET_URL\": \"SKIP_GET_URL\",\\n    \"uprn\": \"766252532\",\\n    \"url\": \"http://avd...ttps://waste-api.york.gov.uk/api/Collections/GetBinCollectionDataForUprn/\",\\n    \"wiki_name\": \"York Council\"\\n  }\\n}\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:353: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1697702021806,"stop":1697702021807,"duration":1},"status":"failed","statusMessage":"Expecting ',' delimiter: line 181 column 5 (char 9185)","statusTrace":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az713-186"},{"name":"thread","value":"2179-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":85,"unknown":0,"total":106},"items":[{"uid":"7bb5da9e74e239ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/7bb5da9e74e239ec","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697696164181,"stop":1697696165866,"duration":1685}},{"uid":"66faed7874eeb9a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/66faed7874eeb9a0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697678088954,"stop":1697678090353,"duration":1399}},{"uid":"7ad314be12583d0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/7ad314be12583d0a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697666580428,"stop":1697666583176,"duration":2748}},{"uid":"2e453002e199f602","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/2e453002e199f602","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697666530862,"stop":1697666531725,"duration":863}},{"uid":"62668f405348cd21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1020//#testresult/62668f405348cd21","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697656839726,"stop":1697656841290,"duration":1564}},{"uid":"7eaa252c748cee57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1019//#testresult/7eaa252c748cee57","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697656779431,"stop":1697656781201,"duration":1770}},{"uid":"992d7e3b22ee153e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1016//#testresult/992d7e3b22ee153e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697650009085,"stop":1697650010888,"duration":1803}},{"uid":"543500fd99b14d6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1014//#testresult/543500fd99b14d6b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697618263265,"stop":1697618266762,"duration":3497}},{"uid":"76fdfb80d5d60c7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1013//#testresult/76fdfb80d5d60c7f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697618203099,"stop":1697618204247,"duration":1148}},{"uid":"b03c004b14452869","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1010//#testresult/b03c004b14452869","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697591735525,"stop":1697591737930,"duration":2405}},{"uid":"90eafb36b206d3c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1009//#testresult/90eafb36b206d3c8","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697542601454,"stop":1697542603883,"duration":2429}},{"uid":"cce4b991e4238404","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1008//#testresult/cce4b991e4238404","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697505320992,"stop":1697505322471,"duration":1479}},{"uid":"a0d3146c24d70d2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1006//#testresult/a0d3146c24d70d2c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697484622940,"stop":1697484625302,"duration":2362}},{"uid":"40c7de5ec6861cbf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1005//#testresult/40c7de5ec6861cbf","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697484580252,"stop":1697484581076,"duration":824}},{"uid":"7ffe4fc0a51e72a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1004//#testresult/7ffe4fc0a51e72a5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697418962745,"stop":1697418964806,"duration":2061}},{"uid":"a50c09f835c577e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1001//#testresult/a50c09f835c577e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697403145619,"stop":1697403146533,"duration":914}},{"uid":"6cdae3e6bc32d1b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/998//#testresult/6cdae3e6bc32d1b7","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697399702381,"stop":1697399703461,"duration":1080}},{"uid":"3d02733029d2a95e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/994//#testresult/3d02733029d2a95e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697366959363,"stop":1697366960319,"duration":956}},{"uid":"388fbebe503c6da6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/992//#testresult/388fbebe503c6da6","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697332797810,"stop":1697332799910,"duration":2100}},{"uid":"5b0d04392ca975be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/988//#testresult/5b0d04392ca975be","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697245960967,"stop":1697245962918,"duration":1951}}]},"tags":[]},"source":"e715338abfdc4dc2.json","parameterValues":["GuildfordCouncil"]}