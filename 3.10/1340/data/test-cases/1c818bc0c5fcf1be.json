{"uid":"1c818bc0c5fcf1be","name":"Validate Council Output [SouthOxfordshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7f57931d644fea4dd7a0419f9995c47e","time":{"start":1704112388448,"stop":1704112393252,"duration":4804},"status":"failed","statusMessage":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","statusTrace":"self = <SouthOxfordshireCouncil.CouncilClass object at 0x7fd823cef280>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'url': 'https://www.southoxon.gov.uk/south-oxfordshire-district-council/recycling-rubbish-and-waste/when-is-your-collection-day/', ...}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=1427774008\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n>                   datetime.strptime(\n                        bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%A %d %B %Y\",\n                    )\n                ).strftime(date_format)\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Your usual collection day is different this weekTuesday 2 January 2024'\nformat = '%A %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7fd823d7f010>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthOxfordshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd823b64eb0>, 'council': 'SouthOxfordshireCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthOxfordshireCouncil.CouncilClass object at 0x7fd823cef280>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'url': 'https://www.southoxon.gov.uk/south-oxfordshire-district-council/recycling-rubbish-and-waste/when-is-your-collection-day/', ...}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=1427774008\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%A %d %B %Y\",\n                    )\n                ).strftime(date_format)\n                bin_type = str.capitalize(bin_info[1].strip())\n            except Exception as ex:\n>               raise ValueError(f\"Error parsing bin data: {ex}\")\nE               ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:70: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","statusTrace":"self = <SouthOxfordshireCouncil.CouncilClass object at 0x7fd823cef280>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'url': 'https://www.southoxon.gov.uk/south-oxfordshire-district-council/recycling-rubbish-and-waste/when-is-your-collection-day/', ...}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=1427774008\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n>                   datetime.strptime(\n                        bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%A %d %B %Y\",\n                    )\n                ).strftime(date_format)\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Your usual collection day is different this weekTuesday 2 January 2024'\nformat = '%A %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7fd823d7f010>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthOxfordshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd823b64eb0>, 'council': 'SouthOxfordshireCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthOxfordshireCouncil.CouncilClass object at 0x7fd823cef280>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'url': 'https://www.southoxon.gov.uk/south-oxfordshire-district-council/recycling-rubbish-and-waste/when-is-your-collection-day/', ...}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=1427774008\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%A %d %B %Y\",\n                    )\n                ).strftime(date_format)\n                bin_type = str.capitalize(bin_info[1].strip())\n            except Exception as ex:\n>               raise ValueError(f\"Error parsing bin data: {ex}\")\nE               ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:70: ValueError","steps":[{"name":"Given the council: SouthOxfordshireCouncil","time":{"start":1704112388448,"stop":1704112388449,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthOxfordshireCouncil using None and the None is set","time":{"start":1704112388449,"stop":1704112393252,"duration":4803},"status":"failed","statusMessage":"Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","statusTrace":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-302"},{"name":"thread","value":"2699-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthOxfordshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":32,"broken":0,"skipped":0,"passed":79,"unknown":0,"total":111},"items":[{"uid":"c3d0e0947efc2e94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/c3d0e0947efc2e94","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704112310149,"stop":1704112315033,"duration":4884}},{"uid":"fb73651580bc783a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/fb73651580bc783a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112250066,"stop":1704112253676,"duration":3610}},{"uid":"c4a5104d04a94716","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/c4a5104d04a94716","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704111981105,"stop":1704111984795,"duration":3690}},{"uid":"df8314721789ea76","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/df8314721789ea76","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704111689349,"stop":1704111693054,"duration":3705}},{"uid":"4d49e6423525ce0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/4d49e6423525ce0a","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704111631175,"stop":1704111635863,"duration":4688}},{"uid":"49fec0da4a85d4a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/49fec0da4a85d4a4","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704111468187,"stop":1704111471880,"duration":3693}},{"uid":"acf09adf13fe499c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1330//#testresult/acf09adf13fe499c","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704100125805,"stop":1704100133894,"duration":8089}},{"uid":"dc49dfe7afb71aa6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/dc49dfe7afb71aa6","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2024' does not match format '%A %d %B %Y'","time":{"start":1704072403978,"stop":1704072408234,"duration":4256}},{"uid":"3b24f92901f8119a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1327//#testresult/3b24f92901f8119a","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2023' does not match format '%A %d %B %Y'","time":{"start":1704050548746,"stop":1704050553667,"duration":4921}},{"uid":"71167a2e4db5e2bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1325//#testresult/71167a2e4db5e2bc","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2023' does not match format '%A %d %B %Y'","time":{"start":1704044068588,"stop":1704044072983,"duration":4395}},{"uid":"c9ad5f0792e2ae9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/c9ad5f0792e2ae9a","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2023' does not match format '%A %d %B %Y'","time":{"start":1703985971780,"stop":1703985974754,"duration":2974}},{"uid":"9fa81310841a6276","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/9fa81310841a6276","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekTuesday 2 January 2023' does not match format '%A %d %B %Y'","time":{"start":1703899111248,"stop":1703899115475,"duration":4227}},{"uid":"44a4ecf0f5459eb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/44a4ecf0f5459eb2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853636135,"stop":1703853739959,"duration":103824}},{"uid":"94cb0ff511d56382","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/94cb0ff511d56382","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851281768,"stop":1703851385457,"duration":103689}},{"uid":"a983fd18906edfae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/a983fd18906edfae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851267465,"stop":1703851371181,"duration":103716}},{"uid":"fecb24b3880e1aee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/fecb24b3880e1aee","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812157616,"stop":1703812260969,"duration":103353}},{"uid":"eaf580a7aa57fd9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/eaf580a7aa57fd9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756309983,"stop":1703756413599,"duration":103616}},{"uid":"3f934f095f0c0232","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/3f934f095f0c0232","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726276058,"stop":1703726379546,"duration":103488}},{"uid":"dc64d782661eed7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/dc64d782661eed7a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717517715,"stop":1703717621425,"duration":103710}},{"uid":"2743574b30243642","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/2743574b30243642","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717391207,"stop":1703717494524,"duration":103317}}]},"tags":[]},"source":"1c818bc0c5fcf1be.json","parameterValues":["SouthOxfordshireCouncil","None","None"]}