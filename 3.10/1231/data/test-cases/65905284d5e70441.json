{"uid":"65905284d5e70441","name":"Validate Council Output [GuildfordCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7920670628eac2b6a4c154f0eb5095c4","time":{"start":1702343976531,"stop":1702343977904,"duration":1373},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fa4bb00f520>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa4abb0dae0>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa4bbc1a710>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fa4bb00f520>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa4abb0dae0>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa4bbc1a710>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1702343976532,"stop":1702343976532,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GuildfordCouncil using None and the None is set","time":{"start":1702343976532,"stop":1702343977904,"duration":1372},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1251-511"},{"name":"thread","value":"2768-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":65,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":65},"items":[{"uid":"c74a920779f6ba2a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1229//#testresult/c74a920779f6ba2a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1702257575370,"stop":1702257576537,"duration":1167}},{"uid":"fdc15da5e3e6244c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1228//#testresult/fdc15da5e3e6244c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1702171428318,"stop":1702171429732,"duration":1414}},{"uid":"a06775ece143c2d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1227//#testresult/a06775ece143c2d4","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1702084670415,"stop":1702084672042,"duration":1627}},{"uid":"3e72dad0df908aa5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1225//#testresult/3e72dad0df908aa5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1702066749903,"stop":1702066751383,"duration":1480}},{"uid":"1c8f5a23922baa93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1222//#testresult/1c8f5a23922baa93","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1702054383377,"stop":1702054384506,"duration":1129}},{"uid":"dac45dd637ddb383","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1219//#testresult/dac45dd637ddb383","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701998405893,"stop":1701998408739,"duration":2846}},{"uid":"c3f693c751068403","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1218//#testresult/c3f693c751068403","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701990396166,"stop":1701990397569,"duration":1403}},{"uid":"cc8353839d0d6605","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1217//#testresult/cc8353839d0d6605","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701990361625,"stop":1701990363127,"duration":1502}},{"uid":"c7e4fd6b76bf961a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1215//#testresult/c7e4fd6b76bf961a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701942794665,"stop":1701942796632,"duration":1967}},{"uid":"fd09cf9a254a00ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1214//#testresult/fd09cf9a254a00ee","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701936502382,"stop":1701936504850,"duration":2468}},{"uid":"be52336d070fa1f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1213//#testresult/be52336d070fa1f0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701936469736,"stop":1701936471352,"duration":1616}},{"uid":"e2aaf4335d660789","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1211//#testresult/e2aaf4335d660789","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701911963139,"stop":1701911965290,"duration":2151}},{"uid":"5cd21cb42a8c840a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1209//#testresult/5cd21cb42a8c840a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701904859289,"stop":1701904864409,"duration":5120}},{"uid":"cc8905412316bb74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1201//#testresult/cc8905412316bb74","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701882517741,"stop":1701882518910,"duration":1169}},{"uid":"7e0c79cee5100c9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1199//#testresult/7e0c79cee5100c9e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701825546981,"stop":1701825548029,"duration":1048}},{"uid":"a33ffbe67b52492e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1198//#testresult/a33ffbe67b52492e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701795559031,"stop":1701795562516,"duration":3485}},{"uid":"c7f2720354cd7a3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1197//#testresult/c7f2720354cd7a3f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701795494108,"stop":1701795495335,"duration":1227}},{"uid":"7d949d47f50bde9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1193//#testresult/7d949d47f50bde9e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701758511799,"stop":1701758512626,"duration":827}},{"uid":"e9d763868d8d2e3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1192//#testresult/e9d763868d8d2e3e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701758804586,"stop":1701758806259,"duration":1673}},{"uid":"29c5becb5dd32485","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1191//#testresult/29c5becb5dd32485","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701739189571,"stop":1701739192194,"duration":2623}}]},"tags":[]},"source":"65905284d5e70441.json","parameterValues":["GuildfordCouncil","None","None"]}