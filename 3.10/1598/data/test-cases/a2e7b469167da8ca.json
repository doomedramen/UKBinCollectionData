{"uid":"a2e7b469167da8ca","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1710030480180,"stop":1710030483193,"duration":3013},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f2c51512e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2c513d4280>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7f2c513d50c0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f2c51512e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2c513d4280>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7f2c513d50c0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1710030480181,"stop":1710030480182,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1710030480182,"stop":1710030483193,"duration":3011},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az566-506"},{"name":"thread","value":"2706-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":198,"unknown":0,"total":206},"items":[{"uid":"16c14718e9d4d98c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1597//#testresult/16c14718e9d4d98c","status":"passed","time":{"start":1709943875482,"stop":1709943881485,"duration":6003}},{"uid":"20840010f66a0379","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1596//#testresult/20840010f66a0379","status":"passed","time":{"start":1709857537388,"stop":1709857545219,"duration":7831}},{"uid":"90f573dc745bfe9c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1595//#testresult/90f573dc745bfe9c","status":"passed","time":{"start":1709770833930,"stop":1709770835695,"duration":1765}},{"uid":"e3d327ef35d814f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1594//#testresult/e3d327ef35d814f2","status":"passed","time":{"start":1709684738545,"stop":1709684740179,"duration":1634}},{"uid":"c304f12a7964ce38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1593//#testresult/c304f12a7964ce38","status":"passed","time":{"start":1709598279130,"stop":1709598280835,"duration":1705}},{"uid":"7d07b5de8151d2bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/7d07b5de8151d2bb","status":"passed","time":{"start":1709511970694,"stop":1709511977410,"duration":6716}},{"uid":"50e951a828502123","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/50e951a828502123","status":"passed","time":{"start":1708561521865,"stop":1708561522808,"duration":943}},{"uid":"bc98b9d9c5868b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/bc98b9d9c5868b4","status":"passed","time":{"start":1708475102017,"stop":1708475104557,"duration":2540}},{"uid":"f675adae28d8a1da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/f675adae28d8a1da","status":"passed","time":{"start":1708388690679,"stop":1708388696406,"duration":5727}},{"uid":"a67457e49861c8a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/a67457e49861c8a3","status":"passed","time":{"start":1708302406982,"stop":1708302412337,"duration":5355}},{"uid":"4ffbafaf7524d8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/4ffbafaf7524d8b","status":"passed","time":{"start":1708216053709,"stop":1708216054668,"duration":959}},{"uid":"db198a4eed74d5c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/db198a4eed74d5c8","status":"passed","time":{"start":1708129491408,"stop":1708129495346,"duration":3938}},{"uid":"eb4425c6ec8d1126","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/eb4425c6ec8d1126","status":"passed","time":{"start":1708043089809,"stop":1708043090937,"duration":1128}},{"uid":"243decc91892a306","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/243decc91892a306","status":"passed","time":{"start":1707956721456,"stop":1707956722450,"duration":994}},{"uid":"ce3bcd9c7946eb2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/ce3bcd9c7946eb2d","status":"passed","time":{"start":1707870309308,"stop":1707870311222,"duration":1914}},{"uid":"715a9ee7a5ac8091","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1560//#testresult/715a9ee7a5ac8091","status":"passed","time":{"start":1707783963969,"stop":1707783967795,"duration":3826}},{"uid":"e88f4c0ba75cd814","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/e88f4c0ba75cd814","status":"passed","time":{"start":1707697575084,"stop":1707697580868,"duration":5784}},{"uid":"11cc8d5c4eabc1aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/11cc8d5c4eabc1aa","status":"passed","time":{"start":1707611280084,"stop":1707611281277,"duration":1193}},{"uid":"4fa21745d4508f99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/4fa21745d4508f99","status":"failed","statusDetails":"ValueError: No collection data found for provided UPRN.","time":{"start":1707524657133,"stop":1707524660308,"duration":3175}},{"uid":"80eb01385aee8e68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/80eb01385aee8e68","status":"passed","time":{"start":1707438288753,"stop":1707438290158,"duration":1405}}]},"tags":[]},"source":"a2e7b469167da8ca.json","parameterValues":["AylesburyValeCouncil","None","None"]}