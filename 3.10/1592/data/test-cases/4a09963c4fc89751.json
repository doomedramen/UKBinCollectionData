{"uid":"4a09963c4fc89751","name":"Validate Council Output [EnvironmentFirst-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c35cb97df4a88f0e33cc3384394065c9","time":{"start":1709512050042,"stop":1709512051723,"duration":1681},"status":"failed","statusMessage":"ValueError: time data '30 November -0001' does not match format '%d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0c22fc6e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[EnvironmentFirst-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0c22a495a0>, 'council': 'EnvironmentFirst', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/EnvironmentFirst.py:25: in parse_data\n    rubbish_day = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 November -0001', format = '%d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '30 November -0001' does not match format '%d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data '30 November -0001' does not match format '%d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0c22fc6e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[EnvironmentFirst-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0c22a495a0>, 'council': 'EnvironmentFirst', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/EnvironmentFirst.py:25: in parse_data\n    rubbish_day = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 November -0001', format = '%d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '30 November -0001' does not match format '%d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: EnvironmentFirst","time":{"start":1709512050043,"stop":1709512050043,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from EnvironmentFirst using None and the None is set","time":{"start":1709512050043,"stop":1709512051723,"duration":1680},"status":"failed","statusMessage":"time data '30 November -0001' does not match format '%d %B %Y'","statusTrace":"ValueError: time data '30 November -0001' does not match format '%d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az573-660"},{"name":"thread","value":"2736-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"EnvironmentFirst"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":161,"unknown":0,"total":163},"items":[{"uid":"b53a616432e34245","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/b53a616432e34245","status":"passed","time":{"start":1708561575039,"stop":1708561576248,"duration":1209}},{"uid":"f53425d6ab5015cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/f53425d6ab5015cd","status":"passed","time":{"start":1708475163024,"stop":1708475164202,"duration":1178}},{"uid":"5b848c8f5d4fc60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/5b848c8f5d4fc60","status":"passed","time":{"start":1708388785757,"stop":1708388787067,"duration":1310}},{"uid":"78f97fdbf7c0c706","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/78f97fdbf7c0c706","status":"passed","time":{"start":1708302514283,"stop":1708302515733,"duration":1450}},{"uid":"609f2630a195c4e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/609f2630a195c4e1","status":"passed","time":{"start":1708216145283,"stop":1708216146579,"duration":1296}},{"uid":"cc0e625996b9eae2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/cc0e625996b9eae2","status":"passed","time":{"start":1708129571378,"stop":1708129573691,"duration":2313}},{"uid":"257bb2095e5ff23f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/257bb2095e5ff23f","status":"passed","time":{"start":1708043229698,"stop":1708043232273,"duration":2575}},{"uid":"94446305c30451d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/94446305c30451d3","status":"passed","time":{"start":1707956805747,"stop":1707956807076,"duration":1329}},{"uid":"68f26e75b878140","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/68f26e75b878140","status":"passed","time":{"start":1707870371201,"stop":1707870373161,"duration":1960}},{"uid":"c6aeb1ef349cc6cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1560//#testresult/c6aeb1ef349cc6cb","status":"passed","time":{"start":1707784022549,"stop":1707784024839,"duration":2290}},{"uid":"c9bf6e8f0ae924d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/c9bf6e8f0ae924d6","status":"passed","time":{"start":1707697646020,"stop":1707697647640,"duration":1620}},{"uid":"a59e5d974ac18dab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/a59e5d974ac18dab","status":"passed","time":{"start":1707611339616,"stop":1707611341003,"duration":1387}},{"uid":"f6785e35cc2e1873","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/f6785e35cc2e1873","status":"passed","time":{"start":1707524729170,"stop":1707524730829,"duration":1659}},{"uid":"e3e0c2a75b093824","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/e3e0c2a75b093824","status":"passed","time":{"start":1707438347711,"stop":1707438349240,"duration":1529}},{"uid":"8817e2be7856a2ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/8817e2be7856a2ed","status":"passed","time":{"start":1707351968966,"stop":1707351970399,"duration":1433}},{"uid":"b322508f410cedf1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1551//#testresult/b322508f410cedf1","status":"passed","time":{"start":1707265509229,"stop":1707265510890,"duration":1661}},{"uid":"8dd97b3c9cb7fc90","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1549//#testresult/8dd97b3c9cb7fc90","status":"passed","time":{"start":1707179170891,"stop":1707179172038,"duration":1147}},{"uid":"17ce1ec8b0bdeeac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/17ce1ec8b0bdeeac","status":"passed","time":{"start":1707092946159,"stop":1707092947789,"duration":1630}},{"uid":"2cec00b93032bb6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/2cec00b93032bb6e","status":"passed","time":{"start":1707006544653,"stop":1707006545985,"duration":1332}},{"uid":"c99f89c6b66ecc9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1545//#testresult/c99f89c6b66ecc9a","status":"passed","time":{"start":1706941901538,"stop":1706941902735,"duration":1197}}]},"tags":[]},"source":"4a09963c4fc89751.json","parameterValues":["EnvironmentFirst","None","None"]}