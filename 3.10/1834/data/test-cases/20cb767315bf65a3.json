{"uid":"20cb767315bf65a3","name":"Validate Council Output [EastRidingCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f7ffd8878be96220bbaf283f6c48e546","time":{"start":1715973727647,"stop":1715973761684,"duration":34037},"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"accordion closed meta-none  \" id=\"when-and-where-should-i-put-my-bin-out\" data-order-latest=\"2405172022\" data-order-atoz=\"whenandwhereshouldiputmybinout?\">...</div> is not clickable at point (392, 583). Other element would receive the click: <div class=\"toolbar-full-width\">...</div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55f2fa651eca <unknown>\n#1 0x55f2fa33b45c <unknown>\n#2 0x55f2fa38e336 <unknown>\n#3 0x55f2fa38c176 <unknown>\n#4 0x55f2fa389b57 <unknown>\n#5 0x55f2fa38897c <unknown>\n#6 0x55f2fa37c0ff <unknown>\n#7 0x55f2fa3aa4b2 <unknown>\n#8 0x55f2fa37ba79 <unknown>\n#9 0x55f2fa3aa67e <unknown>\n#10 0x55f2fa3c92cc <unknown>\n#11 0x55f2fa3aa253 <unknown>\n#12 0x55f2fa37a1c7 <unknown>\n#13 0x55f2fa37ab3e <unknown>\n#14 0x55f2fa61830b <unknown>\n#15 0x55f2fa61c3b7 <unknown>\n#16 0x55f2fa604e3e <unknown>\n#17 0x55f2fa61ce82 <unknown>\n#18 0x55f2fa5e97df <unknown>\n#19 0x55f2fa6411b8 <unknown>\n#20 0x55f2fa64138b <unknown>\n#21 0x55f2fa650ffc <unknown>\n#22 0x7f8aee596ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f6f9d7cc790>\nrequest = <FixtureRequest for <Function test_scenario_outline[EastRidingCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6f9eaa08b0>, 'council': 'EastRidingCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/EastRidingCouncil.py:60: in parse_data\n    expand_postcode_box.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6f9d88b1f0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55f2fa64138b \\\\u003Cunknown>\\\\n#21 0x55f2fa650ffc \\\\u003Cunknown>\\\\n#22 0x7f8aee596ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"accordion closed meta-none  \" id=\"when-and-where-should-i-put-my-bin-out\" data-order-latest=\"2405172022\" data-order-atoz=\"whenandwhereshouldiputmybinout?\">...</div> is not clickable at point (392, 583). Other element would receive the click: <div class=\"toolbar-full-width\">...</div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x55f2fa651eca <unknown>\nE       #1 0x55f2fa33b45c <unknown>\nE       #2 0x55f2fa38e336 <unknown>\nE       #3 0x55f2fa38c176 <unknown>\nE       #4 0x55f2fa389b57 <unknown>\nE       #5 0x55f2fa38897c <unknown>\nE       #6 0x55f2fa37c0ff <unknown>\nE       #7 0x55f2fa3aa4b2 <unknown>\nE       #8 0x55f2fa37ba79 <unknown>\nE       #9 0x55f2fa3aa67e <unknown>\nE       #10 0x55f2fa3c92cc <unknown>\nE       #11 0x55f2fa3aa253 <unknown>\nE       #12 0x55f2fa37a1c7 <unknown>\nE       #13 0x55f2fa37ab3e <unknown>\nE       #14 0x55f2fa61830b <unknown>\nE       #15 0x55f2fa61c3b7 <unknown>\nE       #16 0x55f2fa604e3e <unknown>\nE       #17 0x55f2fa61ce82 <unknown>\nE       #18 0x55f2fa5e97df <unknown>\nE       #19 0x55f2fa6411b8 <unknown>\nE       #20 0x55f2fa64138b <unknown>\nE       #21 0x55f2fa650ffc <unknown>\nE       #22 0x7f8aee596ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"accordion closed meta-none  \" id=\"when-and-where-should-i-put-my-bin-out\" data-order-latest=\"2405172022\" data-order-atoz=\"whenandwhereshouldiputmybinout?\">...</div> is not clickable at point (392, 583). Other element would receive the click: <div class=\"toolbar-full-width\">...</div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55f2fa651eca <unknown>\n#1 0x55f2fa33b45c <unknown>\n#2 0x55f2fa38e336 <unknown>\n#3 0x55f2fa38c176 <unknown>\n#4 0x55f2fa389b57 <unknown>\n#5 0x55f2fa38897c <unknown>\n#6 0x55f2fa37c0ff <unknown>\n#7 0x55f2fa3aa4b2 <unknown>\n#8 0x55f2fa37ba79 <unknown>\n#9 0x55f2fa3aa67e <unknown>\n#10 0x55f2fa3c92cc <unknown>\n#11 0x55f2fa3aa253 <unknown>\n#12 0x55f2fa37a1c7 <unknown>\n#13 0x55f2fa37ab3e <unknown>\n#14 0x55f2fa61830b <unknown>\n#15 0x55f2fa61c3b7 <unknown>\n#16 0x55f2fa604e3e <unknown>\n#17 0x55f2fa61ce82 <unknown>\n#18 0x55f2fa5e97df <unknown>\n#19 0x55f2fa6411b8 <unknown>\n#20 0x55f2fa64138b <unknown>\n#21 0x55f2fa650ffc <unknown>\n#22 0x7f8aee596ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f6f9d7cc790>\nrequest = <FixtureRequest for <Function test_scenario_outline[EastRidingCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6f9eaa08b0>, 'council': 'EastRidingCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/EastRidingCouncil.py:60: in parse_data\n    expand_postcode_box.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6f9d88b1f0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55f2fa64138b \\\\u003Cunknown>\\\\n#21 0x55f2fa650ffc \\\\u003Cunknown>\\\\n#22 0x7f8aee596ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"accordion closed meta-none  \" id=\"when-and-where-should-i-put-my-bin-out\" data-order-latest=\"2405172022\" data-order-atoz=\"whenandwhereshouldiputmybinout?\">...</div> is not clickable at point (392, 583). Other element would receive the click: <div class=\"toolbar-full-width\">...</div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x55f2fa651eca <unknown>\nE       #1 0x55f2fa33b45c <unknown>\nE       #2 0x55f2fa38e336 <unknown>\nE       #3 0x55f2fa38c176 <unknown>\nE       #4 0x55f2fa389b57 <unknown>\nE       #5 0x55f2fa38897c <unknown>\nE       #6 0x55f2fa37c0ff <unknown>\nE       #7 0x55f2fa3aa4b2 <unknown>\nE       #8 0x55f2fa37ba79 <unknown>\nE       #9 0x55f2fa3aa67e <unknown>\nE       #10 0x55f2fa3c92cc <unknown>\nE       #11 0x55f2fa3aa253 <unknown>\nE       #12 0x55f2fa37a1c7 <unknown>\nE       #13 0x55f2fa37ab3e <unknown>\nE       #14 0x55f2fa61830b <unknown>\nE       #15 0x55f2fa61c3b7 <unknown>\nE       #16 0x55f2fa604e3e <unknown>\nE       #17 0x55f2fa61ce82 <unknown>\nE       #18 0x55f2fa5e97df <unknown>\nE       #19 0x55f2fa6411b8 <unknown>\nE       #20 0x55f2fa64138b <unknown>\nE       #21 0x55f2fa650ffc <unknown>\nE       #22 0x7f8aee596ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Given the council: EastRidingCouncil","time":{"start":1715973727647,"stop":1715973727648,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from EastRidingCouncil","time":{"start":1715973727648,"stop":1715973761684,"duration":34036},"status":"failed","statusMessage":"Message: element click intercepted: Element <div class=\"accordion closed meta-none  \" id=\"when-and-where-should-i-put-my-bin-out\" data-order-latest=\"2405172022\" data-order-atoz=\"whenandwhereshouldiputmybinout?\">...</div> is not clickable at point (392, 583). Other element would receive the click: <div class=\"toolbar-full-width\">...</div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55f2fa651eca <unknown>\n#1 0x55f2fa33b45c <unknown>\n#2 0x55f2fa38e336 <unknown>\n#3 0x55f2fa38c176 <unknown>\n#4 0x55f2fa389b57 <unknown>\n#5 0x55f2fa38897c <unknown>\n#6 0x55f2fa37c0ff <unknown>\n#7 0x55f2fa3aa4b2 <unknown>\n#8 0x55f2fa37ba79 <unknown>\n#9 0x55f2fa3aa67e <unknown>\n#10 0x55f2fa3c92cc <unknown>\n#11 0x55f2fa3aa253 <unknown>\n#12 0x55f2fa37a1c7 <unknown>\n#13 0x55f2fa37ab3e <unknown>\n#14 0x55f2fa61830b <unknown>\n#15 0x55f2fa61c3b7 <unknown>\n#16 0x55f2fa604e3e <unknown>\n#17 0x55f2fa61ce82 <unknown>\n#18 0x55f2fa5e97df <unknown>\n#19 0x55f2fa6411b8 <unknown>\n#20 0x55f2fa64138b <unknown>\n#21 0x55f2fa650ffc <unknown>\n#22 0x7f8aee596ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"accordion closed meta-none  \" id=\"when-and-where-should-i-put-my-bin-out\" data-order-latest=\"2405172022\" data-order-atoz=\"whenandwhereshouldiputmybinout?\">...</div> is not clickable at point (392, 583). Other element would receive the click: <div class=\"toolbar-full-width\">...</div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55f2fa651eca <unknown>\n#1 0x55f2fa33b45c <unknown>\n#2 0x55f2fa38e336 <unknown>\n#3 0x55f2fa38c176 <unknown>\n#4 0x55f2fa389b57 <unknown>\n#5 0x55f2fa38897c <unknown>\n#6 0x55f2fa37c0ff <unknown>\n#7 0x55f2fa3aa4b2 <unknown>\n#8 0x55f2fa37ba79 <unknown>\n#9 0x55f2fa3aa67e <unknown>\n#10 0x55f2fa3c92cc <unknown>\n#11 0x55f2fa3aa253 <unknown>\n#12 0x55f2fa37a1c7 <unknown>\n#13 0x55f2fa37ab3e <unknown>\n#14 0x55f2fa61830b <unknown>\n#15 0x55f2fa61c3b7 <unknown>\n#16 0x55f2fa604e3e <unknown>\n#17 0x55f2fa61ce82 <unknown>\n#18 0x55f2fa5e97df <unknown>\n#19 0x55f2fa6411b8 <unknown>\n#20 0x55f2fa64138b <unknown>\n#21 0x55f2fa650ffc <unknown>\n#22 0x7f8aee596ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1538-295"},{"name":"thread","value":"2712-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"EastRidingCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":175,"unknown":0,"total":179},"items":[{"uid":"c35386d8cfab691d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1110//#testresult/c35386d8cfab691d","status":"passed","time":{"start":1699147223923,"stop":1699147225216,"duration":1293}},{"uid":"1a5b1ea9f0f827bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1107//#testresult/1a5b1ea9f0f827bd","status":"passed","time":{"start":1699101482747,"stop":1699101483631,"duration":884}},{"uid":"fc4d0791c4d06cea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1106//#testresult/fc4d0791c4d06cea","status":"passed","time":{"start":1699060480684,"stop":1699060481835,"duration":1151}},{"uid":"e6266412014a501f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1100//#testresult/e6266412014a501f","status":"passed","time":{"start":1699007605494,"stop":1699007606677,"duration":1183}},{"uid":"ea1e88dd4dd914ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1095//#testresult/ea1e88dd4dd914ac","status":"passed","time":{"start":1698988585012,"stop":1698988590144,"duration":5132}},{"uid":"89e22372e716a87d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1094//#testresult/89e22372e716a87d","status":"passed","time":{"start":1698974158051,"stop":1698974162879,"duration":4828}},{"uid":"824fbc72cf23cbd5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1091//#testresult/824fbc72cf23cbd5","status":"passed","time":{"start":1698887649631,"stop":1698887650689,"duration":1058}},{"uid":"adb1ee816605d45c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1090//#testresult/adb1ee816605d45c","status":"passed","time":{"start":1698878313983,"stop":1698878315211,"duration":1228}},{"uid":"acdcdad0e0dc46d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1086//#testresult/acdcdad0e0dc46d","status":"passed","time":{"start":1698867433839,"stop":1698867435263,"duration":1424}},{"uid":"f877b255072359bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1087//#testresult/f877b255072359bd","status":"passed","time":{"start":1698867442532,"stop":1698867443751,"duration":1219}},{"uid":"48f5d73a28e82751","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1081//#testresult/48f5d73a28e82751","status":"passed","time":{"start":1698801556461,"stop":1698801557652,"duration":1191}},{"uid":"1e6851d598e45b1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1079//#testresult/1e6851d598e45b1a","status":"passed","time":{"start":1698788461044,"stop":1698788461963,"duration":919}},{"uid":"f452cb875346e47d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1077//#testresult/f452cb875346e47d","status":"passed","time":{"start":1698714950671,"stop":1698714952161,"duration":1490}},{"uid":"cd6c3abdebcdc2b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1075//#testresult/cd6c3abdebcdc2b1","status":"passed","time":{"start":1698701323875,"stop":1698701328639,"duration":4764}},{"uid":"e8f89a9c83120627","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1073//#testresult/e8f89a9c83120627","status":"passed","time":{"start":1698700192035,"stop":1698700193440,"duration":1405}},{"uid":"d498ce9557a2b656","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1070//#testresult/d498ce9557a2b656","status":"passed","time":{"start":1698692735181,"stop":1698692740023,"duration":4842}},{"uid":"d69b1d0e9fb5bf8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/d69b1d0e9fb5bf8b","status":"passed","time":{"start":1698692704709,"stop":1698692705963,"duration":1254}},{"uid":"4bbebd603570b2e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/4bbebd603570b2e9","status":"passed","time":{"start":1698646289693,"stop":1698646291134,"duration":1441}},{"uid":"d71c5e5bb1953f13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/d71c5e5bb1953f13","status":"passed","time":{"start":1698628513612,"stop":1698628515054,"duration":1442}},{"uid":"299b8701468c82d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/299b8701468c82d8","status":"passed","time":{"start":1698615161973,"stop":1698615167364,"duration":5391}}]},"tags":[]},"source":"20cb767315bf65a3.json","parameterValues":["EastRidingCouncil"]}