{"uid":"a8f14d21b242e57e","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1715973671119,"stop":1715973676529,"duration":5410},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fcfbe498d30>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcfbf65bd60>, 'council': 'CroydonCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fcfbd532e30>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fcfbd532e90>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'd7d7f97562c6beadbedf60c2bd203842af400783', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fcfbe498d30>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcfbf65bd60>, 'council': 'CroydonCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fcfbd532e30>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fcfbd532e90>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'd7d7f97562c6beadbedf60c2bd203842af400783', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1715973671119,"stop":1715973671119,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil","time":{"start":1715973671119,"stop":1715973676529,"duration":5410},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1538-295"},{"name":"thread","value":"2721-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":116,"broken":0,"skipped":0,"passed":63,"unknown":0,"total":179},"items":[{"uid":"7a2d9b28a8a1a2a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1110//#testresult/7a2d9b28a8a1a2a0","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699147211087,"stop":1699147212979,"duration":1892}},{"uid":"b091a81fa79be7d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1107//#testresult/b091a81fa79be7d6","status":"passed","time":{"start":1699101482112,"stop":1699101486366,"duration":4254}},{"uid":"35bdf83fa84cf106","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1106//#testresult/35bdf83fa84cf106","status":"passed","time":{"start":1699060467667,"stop":1699060472177,"duration":4510}},{"uid":"75e89f072cc72084","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1100//#testresult/75e89f072cc72084","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699007609147,"stop":1699007611131,"duration":1984}},{"uid":"505a3117f6290b00","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1095//#testresult/505a3117f6290b00","status":"passed","time":{"start":1698988558825,"stop":1698988563186,"duration":4361}},{"uid":"ccdc95133e522777","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1094//#testresult/ccdc95133e522777","status":"passed","time":{"start":1698974130493,"stop":1698974136259,"duration":5766}},{"uid":"bdb259b0ef501eec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1091//#testresult/bdb259b0ef501eec","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698887636545,"stop":1698887638105,"duration":1560}},{"uid":"29c01509c08795fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1090//#testresult/29c01509c08795fe","status":"passed","time":{"start":1698878287948,"stop":1698878292183,"duration":4235}},{"uid":"89a037e24e996f4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1086//#testresult/89a037e24e996f4d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698867410269,"stop":1698867412145,"duration":1876}},{"uid":"a96a01a1f20f0ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1087//#testresult/a96a01a1f20f0ec","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698867424110,"stop":1698867425299,"duration":1189}},{"uid":"d6d4cc4588c30b20","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1081//#testresult/d6d4cc4588c30b20","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698801535786,"stop":1698801536967,"duration":1181}},{"uid":"f1928b5432e63e8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1079//#testresult/f1928b5432e63e8a","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698788442762,"stop":1698788444331,"duration":1569}},{"uid":"cd94dee707b39a3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1077//#testresult/cd94dee707b39a3e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698714922469,"stop":1698714924217,"duration":1748}},{"uid":"881a9c6a359cfca4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1075//#testresult/881a9c6a359cfca4","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698701298845,"stop":1698701300698,"duration":1853}},{"uid":"2d73faa65a56bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1073//#testresult/2d73faa65a56bc","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698700171341,"stop":1698700173147,"duration":1806}},{"uid":"bd2b9bc43d11d3ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1070//#testresult/bd2b9bc43d11d3ff","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698692715305,"stop":1698692716537,"duration":1232}},{"uid":"383c54609fc989e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1069//#testresult/383c54609fc989e1","status":"passed","time":{"start":1698692681269,"stop":1698692685622,"duration":4353}},{"uid":"162c2b0d30e1df9c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1066//#testresult/162c2b0d30e1df9c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698646242966,"stop":1698646245582,"duration":2616}},{"uid":"33e7fe4c4ac218cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1064//#testresult/33e7fe4c4ac218cc","status":"passed","time":{"start":1698628483551,"stop":1698628487912,"duration":4361}},{"uid":"44a22a65c73849c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1062//#testresult/44a22a65c73849c3","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698615127032,"stop":1698615129001,"duration":1969}}]},"tags":[]},"source":"a8f14d21b242e57e.json","parameterValues":["CroydonCouncil"]}