{"uid":"d0155c1ee26a429b","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1705364862063,"stop":1705364863712,"duration":1649},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f58760aee60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5875583160>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f58760aee60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5875583160>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1705364862064,"stop":1705364862064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1705364862064,"stop":1705364863712,"duration":1648},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1016-333"},{"name":"thread","value":"2728-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":102,"unknown":0,"total":112},"items":[{"uid":"86fef4bbbfbbc670","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1492//#testresult/86fef4bbbfbbc670","status":"passed","time":{"start":1705295569682,"stop":1705295571100,"duration":1418}},{"uid":"3a1c384f8e82e314","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1491//#testresult/3a1c384f8e82e314","status":"passed","time":{"start":1705295123498,"stop":1705295124643,"duration":1145}},{"uid":"9d10992d2b0c6abf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1490//#testresult/9d10992d2b0c6abf","status":"passed","time":{"start":1705278529248,"stop":1705278530382,"duration":1134}},{"uid":"9c3c7c7932ad8b17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1485//#testresult/9c3c7c7932ad8b17","status":"passed","time":{"start":1705192187210,"stop":1705192188378,"duration":1168}},{"uid":"ed2acf92d9137951","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1484//#testresult/ed2acf92d9137951","status":"passed","time":{"start":1705105618419,"stop":1705105620430,"duration":2011}},{"uid":"886288098497b44c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1482//#testresult/886288098497b44c","status":"passed","time":{"start":1705019227595,"stop":1705019228897,"duration":1302}},{"uid":"9efdc8f846c0023a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1478//#testresult/9efdc8f846c0023a","status":"passed","time":{"start":1704932819487,"stop":1704932820368,"duration":881}},{"uid":"b4a818d96d2eec6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1472//#testresult/b4a818d96d2eec6f","status":"passed","time":{"start":1704846448874,"stop":1704846450769,"duration":1895}},{"uid":"517669130ebc1787","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1456//#testresult/517669130ebc1787","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1704760058403,"stop":1704760059478,"duration":1075}},{"uid":"3e2eff91b428734e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1452//#testresult/3e2eff91b428734e","status":"passed","time":{"start":1704711476979,"stop":1704711477784,"duration":805}},{"uid":"bb8bcef482044791","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1450//#testresult/bb8bcef482044791","status":"passed","time":{"start":1704710687438,"stop":1704710688388,"duration":950}},{"uid":"daeb55073a2e19e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1448//#testresult/daeb55073a2e19e7","status":"passed","time":{"start":1704710067064,"stop":1704710068162,"duration":1098}},{"uid":"e97cceb4cf5758e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1446//#testresult/e97cceb4cf5758e7","status":"passed","time":{"start":1704709536201,"stop":1704709537009,"duration":808}},{"uid":"1924ddcd03e0946c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1443//#testresult/1924ddcd03e0946c","status":"passed","time":{"start":1704704054963,"stop":1704704056055,"duration":1092}},{"uid":"a42f734e91029dc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1441//#testresult/a42f734e91029dc4","status":"passed","time":{"start":1704673696431,"stop":1704673697459,"duration":1028}},{"uid":"cc954ae0b6c65ab1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1426//#testresult/cc954ae0b6c65ab1","status":"passed","time":{"start":1704615388505,"stop":1704615390280,"duration":1775}},{"uid":"74de51b0a79a11f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1423//#testresult/74de51b0a79a11f2","status":"passed","time":{"start":1704614738957,"stop":1704614739850,"duration":893}},{"uid":"2a9e3f3156558fb9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1420//#testresult/2a9e3f3156558fb9","status":"passed","time":{"start":1704587422362,"stop":1704587423482,"duration":1120}},{"uid":"3993a95cf7e8cd37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1413//#testresult/3993a95cf7e8cd37","status":"passed","time":{"start":1704542704573,"stop":1704542706242,"duration":1669}},{"uid":"ed58306590df1792","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1408//#testresult/ed58306590df1792","status":"passed","time":{"start":1704496149821,"stop":1704496151604,"duration":1783}}]},"tags":[]},"source":"d0155c1ee26a429b.json","parameterValues":["BarnsleyMBCouncil","None","None"]}