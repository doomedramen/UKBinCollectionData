{"uid":"797ce1ab7dd83ced","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1698615226052,"stop":1698615227834,"duration":1782},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f6b5810ee60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6b4a8905e0>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f6b5810ee60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6b4a8905e0>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1698615226052,"stop":1698615226053,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1698615226053,"stop":1698615227834,"duration":1781},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az561-408"},{"name":"thread","value":"2232-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":138,"unknown":0,"total":159},"items":[{"uid":"25544284d483389f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1061//#testresult/25544284d483389f","status":"passed","time":{"start":1698615113256,"stop":1698615114252,"duration":996}},{"uid":"30ff2e7cec8a3fea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1054//#testresult/30ff2e7cec8a3fea","status":"passed","time":{"start":1698542376795,"stop":1698542377566,"duration":771}},{"uid":"31cda999c7b35212","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1053//#testresult/31cda999c7b35212","status":"passed","time":{"start":1698455567330,"stop":1698455567865,"duration":535}},{"uid":"63415dbc21ea0fc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1051//#testresult/63415dbc21ea0fc4","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1698369239554,"stop":1698369241187,"duration":1633}},{"uid":"202c5d40b5fdceb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1050//#testresult/202c5d40b5fdceb2","status":"passed","time":{"start":1698282857968,"stop":1698282859046,"duration":1078}},{"uid":"dc0e10be6a777f45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1049//#testresult/dc0e10be6a777f45","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 25 October\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","time":{"start":1698196515476,"stop":1698196517203,"duration":1727}},{"uid":"cbec7e56f44d1bde","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1048//#testresult/cbec7e56f44d1bde","status":"passed","time":{"start":1698178240260,"stop":1698178241273,"duration":1013}},{"uid":"c160dba6805f3ae4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1047//#testresult/c160dba6805f3ae4","status":"passed","time":{"start":1698178220563,"stop":1698178221339,"duration":776}},{"uid":"d97c885e0d2b6d37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1046//#testresult/d97c885e0d2b6d37","status":"passed","time":{"start":1698110106916,"stop":1698110107462,"duration":546}},{"uid":"1c1cea943f37d468","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1044//#testresult/1c1cea943f37d468","status":"passed","time":{"start":1698065170616,"stop":1698065171414,"duration":798}},{"uid":"c8dfb647a0c7445","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1045//#testresult/c8dfb647a0c7445","status":"passed","time":{"start":1698064901455,"stop":1698064902184,"duration":729}},{"uid":"92772ca6e0d0ab85","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1042//#testresult/92772ca6e0d0ab85","status":"passed","time":{"start":1698023761024,"stop":1698023762261,"duration":1237}},{"uid":"9a707f828d8c3e50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/9a707f828d8c3e50","status":"passed","time":{"start":1697937640756,"stop":1697937642101,"duration":1345}},{"uid":"446c8159bb581892","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/446c8159bb581892","status":"passed","time":{"start":1697850806270,"stop":1697850807274,"duration":1004}},{"uid":"aace4843a86c783b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1037//#testresult/aace4843a86c783b","status":"passed","time":{"start":1697790385546,"stop":1697790386123,"duration":577}},{"uid":"b7334c249d29c7d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1036//#testresult/b7334c249d29c7d9","status":"passed","time":{"start":1697790406377,"stop":1697790407271,"duration":894}},{"uid":"e10565d78899fc18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1034//#testresult/e10565d78899fc18","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697764526738,"stop":1697764528653,"duration":1915}},{"uid":"df4181cb74f66815","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/df4181cb74f66815","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697706556872,"stop":1697706558787,"duration":1915}},{"uid":"140b965d79ba45a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/140b965d79ba45a5","status":"passed","time":{"start":1697706514537,"stop":1697706515444,"duration":907}},{"uid":"253fc0f6119ac882","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/253fc0f6119ac882","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702048026,"stop":1697702048027,"duration":1}}]},"tags":[]},"source":"797ce1ab7dd83ced.json","parameterValues":["KingstonUponThamesCouncil"]}