{"uid":"e347791793ed0919","name":"Validate Council Output [NeathPortTalbotCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"6a7795e00df27bb2a2723cbd96dd78a1","time":{"start":1698023961079,"stop":1698023968409,"duration":7330},"status":"failed","statusMessage":"ValueError: time data 'Monday, 23\\xa0October (Today) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2e09606b90>\nrequest = <FixtureRequest for <Function test_scenario_outline[NeathPortTalbotCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2dfcb6d390>, 'council': 'NeathPortTalbotCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NeathPortTalbotCouncil.py:97: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Monday, 23\\xa0October (Today) 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Monday, 23\\xa0October (Today) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Monday, 23\\xa0October (Today) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2e09606b90>\nrequest = <FixtureRequest for <Function test_scenario_outline[NeathPortTalbotCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2dfcb6d390>, 'council': 'NeathPortTalbotCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NeathPortTalbotCouncil.py:97: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Monday, 23\\xa0October (Today) 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Monday, 23\\xa0October (Today) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: NeathPortTalbotCouncil","time":{"start":1698023961079,"stop":1698023961080,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from NeathPortTalbotCouncil","time":{"start":1698023961080,"stop":1698023968409,"duration":7329},"status":"failed","statusMessage":"time data 'Monday, 23\\xa0October (Today) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Monday, 23\\xa0October (Today) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az471-844"},{"name":"thread","value":"2243-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NeathPortTalbotCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":13},"items":[{"uid":"a9b0f8114c54ce0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1040//#testresult/a9b0f8114c54ce0a","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x55751d72ffb3 <unknown>\n#1 0x55751d4034a7 <unknown>\n#2 0x55751d450ecd <unknown>\n#3 0x55751d44f26d <unknown>\n#4 0x55751d44d028 <unknown>\n#5 0x55751d44c097 <unknown>\n#6 0x55751d440d59 <unknown>\n#7 0x55751d46c942 <unknown>\n#8 0x55751d440776 <unknown>\n#9 0x55751d46cb0e <unknown>\n#10 0x55751d485c02 <unknown>\n#11 0x55751d46c713 <unknown>\n#12 0x55751d43f18b <unknown>\n#13 0x55751d43ff7e <unknown>\n#14 0x55751d6f58d8 <unknown>\n#15 0x55751d6f9800 <unknown>\n#16 0x55751d703cfc <unknown>\n#17 0x55751d6fa418 <unknown>\n#18 0x55751d6c742f <unknown>\n#19 0x55751d71e4e8 <unknown>\n#20 0x55751d71e6b4 <unknown>\n#21 0x55751d72f143 <unknown>\n#22 0x7f5197e94ac3 <unknown>","time":{"start":1697937810924,"stop":1697937815819,"duration":4895}},{"uid":"6bde0fa1c08cde8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1039//#testresult/6bde0fa1c08cde8a","status":"passed","time":{"start":1697850980577,"stop":1697850987157,"duration":6580}},{"uid":"a37fe46628fd60cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1037//#testresult/a37fe46628fd60cc","status":"passed","time":{"start":1697790385535,"stop":1697790390692,"duration":5157}},{"uid":"d6e1778b316c718b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1036//#testresult/d6e1778b316c718b","status":"passed","time":{"start":1697790403889,"stop":1697790410336,"duration":6447}},{"uid":"1d84327eec603902","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1034//#testresult/1d84327eec603902","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x555e5ab6cfb3 <unknown>\n#1 0x555e5a8404a7 <unknown>\n#2 0x555e5a88decd <unknown>\n#3 0x555e5a88c26d <unknown>\n#4 0x555e5a88a028 <unknown>\n#5 0x555e5a889097 <unknown>\n#6 0x555e5a87dd59 <unknown>\n#7 0x555e5a8a9942 <unknown>\n#8 0x555e5a87d776 <unknown>\n#9 0x555e5a8a9b0e <unknown>\n#10 0x555e5a8c2c02 <unknown>\n#11 0x555e5a8a9713 <unknown>\n#12 0x555e5a87c18b <unknown>\n#13 0x555e5a87cf7e <unknown>\n#14 0x555e5ab328d8 <unknown>\n#15 0x555e5ab36800 <unknown>\n#16 0x555e5ab40cfc <unknown>\n#17 0x555e5ab37418 <unknown>\n#18 0x555e5ab0442f <unknown>\n#19 0x555e5ab5b4e8 <unknown>\n#20 0x555e5ab5b6b4 <unknown>\n#21 0x555e5ab6c143 <unknown>\n#22 0x7ffb1da94ac3 <unknown>","time":{"start":1697764486196,"stop":1697764491651,"duration":5455}},{"uid":"626ba009f20cac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1033//#testresult/626ba009f20cac9","status":"passed","time":{"start":1697706657669,"stop":1697706665010,"duration":7341}},{"uid":"edb68e8281d486e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1032//#testresult/edb68e8281d486e6","status":"passed","time":{"start":1697706607981,"stop":1697706613980,"duration":5999}},{"uid":"938f67edf2e558d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1030//#testresult/938f67edf2e558d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702048571,"stop":1697702048572,"duration":1}},{"uid":"7936db50370adcda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1027//#testresult/7936db50370adcda","status":"passed","time":{"start":1697696170081,"stop":1697696176406,"duration":6325}},{"uid":"49cd99ad90905eed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1025//#testresult/49cd99ad90905eed","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (589, 618)\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x56356894ffb3 <unknown>\n#1 0x5635686234a7 <unknown>\n#2 0x563568670ecd <unknown>\n#3 0x56356866f26d <unknown>\n#4 0x56356866d028 <unknown>\n#5 0x56356866c097 <unknown>\n#6 0x563568660d59 <unknown>\n#7 0x56356868c942 <unknown>\n#8 0x563568660776 <unknown>\n#9 0x56356868cb0e <unknown>\n#10 0x5635686a5c02 <unknown>\n#11 0x56356868c713 <unknown>\n#12 0x56356865f18b <unknown>\n#13 0x56356865ff7e <unknown>\n#14 0x5635689158d8 <unknown>\n#15 0x563568919800 <unknown>\n#16 0x563568923cfc <unknown>\n#17 0x56356891a418 <unknown>\n#18 0x5635688e742f <unknown>\n#19 0x56356893e4e8 <unknown>\n#20 0x56356893e6b4 <unknown>\n#21 0x56356894f143 <unknown>\n#22 0x7f6923694ac3 <unknown>","time":{"start":1697678094615,"stop":1697678099095,"duration":4480}},{"uid":"7964699214828a86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1023//#testresult/7964699214828a86","status":"passed","time":{"start":1697666583890,"stop":1697666590663,"duration":6773}},{"uid":"e77ec674766df41a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1022//#testresult/e77ec674766df41a","status":"passed","time":{"start":1697666531356,"stop":1697666536645,"duration":5289}}]},"tags":[]},"source":"e347791793ed0919.json","parameterValues":["NeathPortTalbotCouncil"]}