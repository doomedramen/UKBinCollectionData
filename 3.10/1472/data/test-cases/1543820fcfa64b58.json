{"uid":"1543820fcfa64b58","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1704846469634,"stop":1704846470543,"duration":909},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f452883af80>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4527b700a0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f452883af80>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4527b700a0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1704846469635,"stop":1704846469635,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1704846469635,"stop":1704846470543,"duration":908},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1272-858"},{"name":"thread","value":"2759-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":105,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":146},"items":[{"uid":"6fd629f8093c7a14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1456//#testresult/6fd629f8093c7a14","status":"passed","time":{"start":1704760116004,"stop":1704760117211,"duration":1207}},{"uid":"4d3513e9ac369ea8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1452//#testresult/4d3513e9ac369ea8","status":"passed","time":{"start":1704711540026,"stop":1704711541240,"duration":1214}},{"uid":"8ed1964aad302184","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1450//#testresult/8ed1964aad302184","status":"passed","time":{"start":1704710729044,"stop":1704710730199,"duration":1155}},{"uid":"4bde725c0a849710","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1448//#testresult/4bde725c0a849710","status":"passed","time":{"start":1704710125123,"stop":1704710126300,"duration":1177}},{"uid":"2590a2e9105e9c3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1446//#testresult/2590a2e9105e9c3a","status":"passed","time":{"start":1704709660342,"stop":1704709661176,"duration":834}},{"uid":"246cab2e2f47087b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1443//#testresult/246cab2e2f47087b","status":"passed","time":{"start":1704704118566,"stop":1704704119710,"duration":1144}},{"uid":"b076eafe94340321","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1441//#testresult/b076eafe94340321","status":"passed","time":{"start":1704673800502,"stop":1704673801694,"duration":1192}},{"uid":"8dfdfddc26a4f4ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1426//#testresult/8dfdfddc26a4f4ca","status":"passed","time":{"start":1704615467067,"stop":1704615468591,"duration":1524}},{"uid":"497f5b42ef3cae91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1423//#testresult/497f5b42ef3cae91","status":"passed","time":{"start":1704614793299,"stop":1704614794078,"duration":779}},{"uid":"19cd4ce0e0143675","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1420//#testresult/19cd4ce0e0143675","status":"passed","time":{"start":1704587490608,"stop":1704587491613,"duration":1005}},{"uid":"f9bd0100885cbc05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1413//#testresult/f9bd0100885cbc05","status":"passed","time":{"start":1704542764266,"stop":1704542765633,"duration":1367}},{"uid":"20bb43aa803746b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1408//#testresult/20bb43aa803746b1","status":"passed","time":{"start":1704496251486,"stop":1704496252493,"duration":1007}},{"uid":"9c69b2ff9781e6f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1406//#testresult/9c69b2ff9781e6f3","status":"passed","time":{"start":1704453436498,"stop":1704453438032,"duration":1534}},{"uid":"d19138c3e70ffb1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1407//#testresult/d19138c3e70ffb1a","status":"passed","time":{"start":1704453448220,"stop":1704453449212,"duration":992}},{"uid":"b2429f2044518a69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1405//#testresult/b2429f2044518a69","status":"passed","time":{"start":1704452653182,"stop":1704452654072,"duration":890}},{"uid":"315c83454193eb07","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1400//#testresult/315c83454193eb07","status":"passed","time":{"start":1704443789746,"stop":1704443791064,"duration":1318}},{"uid":"1ff99e3be0be0be7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1399//#testresult/1ff99e3be0be0be7","status":"passed","time":{"start":1704443379183,"stop":1704443380395,"duration":1212}},{"uid":"655f92281631b393","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1397//#testresult/655f92281631b393","status":"passed","time":{"start":1704442514812,"stop":1704442516008,"duration":1196}},{"uid":"7b5d20c63a51e12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1390//#testresult/7b5d20c63a51e12","status":"passed","time":{"start":1704417562777,"stop":1704417564177,"duration":1400}},{"uid":"cfad9448b6c85dd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1379//#testresult/cfad9448b6c85dd2","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1704406050624,"stop":1704406051981,"duration":1357}}]},"tags":[]},"source":"1543820fcfa64b58.json","parameterValues":["LiverpoolCityCouncil","None","None"]}