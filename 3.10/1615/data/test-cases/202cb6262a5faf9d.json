{"uid":"202cb6262a5faf9d","name":"Validate Council Output [MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b599a4dd435703dc5f9937f69cb0d25f","time":{"start":1710808092495,"stop":1710808110360,"duration":17865},"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x7f2e1f92f250>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2e1eb73880>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:104: in parse_data\n    date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 Mar(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x7f2e1f92f250>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2e1eb73880>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:104: in parse_data\n    date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 Mar(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:352: ValueError","steps":[{"name":"Given the council: MidAndEastAntrimBoroughCouncil","time":{"start":1710808092496,"stop":1710808092496,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from MidAndEastAntrimBoroughCouncil using local and the http://selenium:4444 is set","time":{"start":1710808092496,"stop":1710808110360,"duration":17864},"status":"failed","statusMessage":"unconverted data remains: (Adjusted","statusTrace":"ValueError: unconverted data remains: (Adjusted\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az881-639"},{"name":"thread","value":"2715-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MidAndEastAntrimBoroughCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":166,"unknown":0,"total":193},"items":[{"uid":"d35223b3bd8ed12c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1609//#testresult/d35223b3bd8ed12c","status":"passed","time":{"start":1710721731394,"stop":1710721748613,"duration":17219}},{"uid":"b421944c0764e58e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1608//#testresult/b421944c0764e58e","status":"passed","time":{"start":1710635391549,"stop":1710635408563,"duration":17014}},{"uid":"354ee1fa981a31ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1607//#testresult/354ee1fa981a31ae","status":"passed","time":{"start":1710548740124,"stop":1710548757125,"duration":17001}},{"uid":"2e07d706278898b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1605//#testresult/2e07d706278898b9","status":"passed","time":{"start":1710462439826,"stop":1710462460200,"duration":20374}},{"uid":"75495fad2c4e8ffa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1604//#testresult/75495fad2c4e8ffa","status":"passed","time":{"start":1710452881313,"stop":1710452902737,"duration":21424}},{"uid":"f0619413d05ffdf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1602//#testresult/f0619413d05ffdf3","status":"passed","time":{"start":1710376099920,"stop":1710376117744,"duration":17824}},{"uid":"914db0c1ee3eb6ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1601//#testresult/914db0c1ee3eb6ec","status":"passed","time":{"start":1710289629597,"stop":1710289646594,"duration":16997}},{"uid":"fafcb4998dfc4ea7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1600//#testresult/fafcb4998dfc4ea7","status":"passed","time":{"start":1710203299445,"stop":1710203316675,"duration":17230}},{"uid":"7f705dc8e3f37492","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1599//#testresult/7f705dc8e3f37492","status":"passed","time":{"start":1710116903353,"stop":1710116921164,"duration":17811}},{"uid":"e0997d1700481dfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1598//#testresult/e0997d1700481dfb","status":"passed","time":{"start":1710030598706,"stop":1710030615918,"duration":17212}},{"uid":"b4def5891b43d37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1597//#testresult/b4def5891b43d37","status":"passed","time":{"start":1709944037787,"stop":1709944055570,"duration":17783}},{"uid":"a64f401e6ed1059d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1596//#testresult/a64f401e6ed1059d","status":"passed","time":{"start":1709857641788,"stop":1709857658769,"duration":16981}},{"uid":"b2aa53fd802b5573","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1595//#testresult/b2aa53fd802b5573","status":"passed","time":{"start":1709770929144,"stop":1709770948099,"duration":18955}},{"uid":"481eb3cc46c089ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1594//#testresult/481eb3cc46c089ff","status":"passed","time":{"start":1709684849621,"stop":1709684866572,"duration":16951}},{"uid":"90d84aacd6c7c37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1593//#testresult/90d84aacd6c7c37","status":"passed","time":{"start":1709598397925,"stop":1709598419828,"duration":21903}},{"uid":"fab830b413dc0736","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/fab830b413dc0736","status":"passed","time":{"start":1709512068568,"stop":1709512085625,"duration":17057}},{"uid":"810a175a2f266eca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/810a175a2f266eca","status":"passed","time":{"start":1708561628714,"stop":1708561645832,"duration":17118}},{"uid":"891345cdd16c6faa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/891345cdd16c6faa","status":"passed","time":{"start":1708475176768,"stop":1708475193503,"duration":16735}},{"uid":"2053b3a2ba50b442","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/2053b3a2ba50b442","status":"passed","time":{"start":1708388749706,"stop":1708388767123,"duration":17417}},{"uid":"3055bc5b5be0ac15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/3055bc5b5be0ac15","status":"passed","time":{"start":1708302487866,"stop":1708302504996,"duration":17130}}]},"tags":[]},"source":"202cb6262a5faf9d.json","parameterValues":["MidAndEastAntrimBoroughCouncil","local","http://selenium:4444"]}