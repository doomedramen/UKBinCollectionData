{"uid":"add05422d7ae1213","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1710807943471,"stop":1710807944488,"duration":1017},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdfa7a62e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdfa6b40ee0>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdfa7a62e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdfa6b40ee0>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1710807943471,"stop":1710807943471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1710807943472,"stop":1710807944488,"duration":1016},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az881-639"},{"name":"thread","value":"2712-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":151,"unknown":0,"total":169},"items":[{"uid":"ae11de0d0950b7f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1609//#testresult/ae11de0d0950b7f4","status":"passed","time":{"start":1710721665096,"stop":1710721666272,"duration":1176}},{"uid":"861d5a4284d0687f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1608//#testresult/861d5a4284d0687f","status":"passed","time":{"start":1710635329155,"stop":1710635330112,"duration":957}},{"uid":"90631ddc1801b79c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1607//#testresult/90631ddc1801b79c","status":"passed","time":{"start":1710548649274,"stop":1710548650380,"duration":1106}},{"uid":"595e00a43dc1c75b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1605//#testresult/595e00a43dc1c75b","status":"passed","time":{"start":1710462320210,"stop":1710462321747,"duration":1537}},{"uid":"8434f8de497f6eea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1604//#testresult/8434f8de497f6eea","status":"passed","time":{"start":1710452799586,"stop":1710452800812,"duration":1226}},{"uid":"3132c2771753ddf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1602//#testresult/3132c2771753ddf8","status":"passed","time":{"start":1710376009657,"stop":1710376010967,"duration":1310}},{"uid":"744869986119f108","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1601//#testresult/744869986119f108","status":"passed","time":{"start":1710289528208,"stop":1710289529230,"duration":1022}},{"uid":"e93a77792c3c6e17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1600//#testresult/e93a77792c3c6e17","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1710203124331,"stop":1710203125753,"duration":1422}},{"uid":"fd06ba821b7ac2d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1599//#testresult/fd06ba821b7ac2d1","status":"passed","time":{"start":1710116816479,"stop":1710116817516,"duration":1037}},{"uid":"1aaf0cee814c7771","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1598//#testresult/1aaf0cee814c7771","status":"passed","time":{"start":1710030504342,"stop":1710030505610,"duration":1268}},{"uid":"f0e194dee52b6fb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1597//#testresult/f0e194dee52b6fb8","status":"passed","time":{"start":1709943889922,"stop":1709943891100,"duration":1178}},{"uid":"a7ebc7bf583ec484","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1596//#testresult/a7ebc7bf583ec484","status":"passed","time":{"start":1709857550568,"stop":1709857551447,"duration":879}},{"uid":"9114ebff479b17db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1595//#testresult/9114ebff479b17db","status":"passed","time":{"start":1709770842251,"stop":1709770843612,"duration":1361}},{"uid":"ac4f6e269c900e4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1594//#testresult/ac4f6e269c900e4d","status":"passed","time":{"start":1709684748808,"stop":1709684750110,"duration":1302}},{"uid":"a31ea87651fbc91d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1593//#testresult/a31ea87651fbc91d","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1709598288680,"stop":1709598290067,"duration":1387}},{"uid":"a36129cb9da512bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/a36129cb9da512bd","status":"passed","time":{"start":1709511984103,"stop":1709511985110,"duration":1007}},{"uid":"344e23c2003eca6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/344e23c2003eca6f","status":"passed","time":{"start":1708561547383,"stop":1708561548558,"duration":1175}},{"uid":"514c1dc4113ce310","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/514c1dc4113ce310","status":"passed","time":{"start":1708475125854,"stop":1708475127018,"duration":1164}},{"uid":"ed2b80b8884c0d46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/ed2b80b8884c0d46","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1708388715598,"stop":1708388716560,"duration":962}},{"uid":"181fc194b9da9447","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/181fc194b9da9447","status":"passed","time":{"start":1708302438803,"stop":1708302439889,"duration":1086}}]},"tags":[]},"source":"add05422d7ae1213.json","parameterValues":["BarnsleyMBCouncil","None","None"]}