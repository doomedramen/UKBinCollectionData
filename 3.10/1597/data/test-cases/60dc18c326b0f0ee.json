{"uid":"60dc18c326b0f0ee","name":"Validate Council Output [DorsetCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9fa7d7cb5c863d45fe9f4c51c5fb024f","time":{"start":1709943894937,"stop":1709944105441,"duration":210504},"status":"failed","statusMessage":"UnboundLocalError: local variable 'ordered_data' referenced before assignment","statusTrace":"fixturefunc = <function scrape_step at 0x7f1a862e72e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1a85e3ce80>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7f1a86117f70>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: local variable 'ordered_data' referenced before assignment\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: local variable 'ordered_data' referenced before assignment","statusTrace":"fixturefunc = <function scrape_step at 0x7f1a862e72e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1a85e3ce80>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7f1a86117f70>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: local variable 'ordered_data' referenced before assignment\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","steps":[{"name":"Given the council: DorsetCouncil","time":{"start":1709943894937,"stop":1709943894938,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DorsetCouncil using None and the None is set","time":{"start":1709943894938,"stop":1709944105441,"duration":210503},"status":"failed","statusMessage":"local variable 'ordered_data' referenced before assignment","statusTrace":"UnboundLocalError: local variable 'ordered_data' referenced before assignment\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az564-124"},{"name":"thread","value":"3017-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DorsetCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":156,"unknown":0,"total":159},"items":[{"uid":"e5471406c70bdf70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1596//#testresult/e5471406c70bdf70","status":"passed","time":{"start":1709857552308,"stop":1709857553511,"duration":1203}},{"uid":"ba443c2d88f36456","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1595//#testresult/ba443c2d88f36456","status":"passed","time":{"start":1709770849644,"stop":1709770850916,"duration":1272}},{"uid":"58f5696d0c24307f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1594//#testresult/58f5696d0c24307f","status":"passed","time":{"start":1709684756103,"stop":1709684757119,"duration":1016}},{"uid":"ec2653564cec1f69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1593//#testresult/ec2653564cec1f69","status":"passed","time":{"start":1709598297012,"stop":1709598299147,"duration":2135}},{"uid":"bad8fa7d52cd6026","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/bad8fa7d52cd6026","status":"passed","time":{"start":1709511988634,"stop":1709511990422,"duration":1788}},{"uid":"dae4b05871210aee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/dae4b05871210aee","status":"passed","time":{"start":1708561536739,"stop":1708561537749,"duration":1010}},{"uid":"d366afb2c9b15697","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/d366afb2c9b15697","status":"passed","time":{"start":1708475115144,"stop":1708475117043,"duration":1899}},{"uid":"660f28cc49765fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/660f28cc49765fe","status":"passed","time":{"start":1708388738762,"stop":1708388740801,"duration":2039}},{"uid":"c621c6e8f029fb09","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/c621c6e8f029fb09","status":"passed","time":{"start":1708302428379,"stop":1708302450439,"duration":22060}},{"uid":"14fb69909048ef18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/14fb69909048ef18","status":"passed","time":{"start":1708216067103,"stop":1708216089245,"duration":22142}},{"uid":"80f24af4c9ed013a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/80f24af4c9ed013a","status":"passed","time":{"start":1708129504673,"stop":1708129526735,"duration":22062}},{"uid":"a480cb47079a7ef3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/a480cb47079a7ef3","status":"passed","time":{"start":1708043106202,"stop":1708043128696,"duration":22494}},{"uid":"1ef6c17379ffd8e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/1ef6c17379ffd8e1","status":"passed","time":{"start":1707956734313,"stop":1707956756328,"duration":22015}},{"uid":"a17373b326815193","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/a17373b326815193","status":"passed","time":{"start":1707870326038,"stop":1707870327480,"duration":1442}},{"uid":"37e8a559ff71a688","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1560//#testresult/37e8a559ff71a688","status":"passed","time":{"start":1707783980410,"stop":1707783982517,"duration":2107}},{"uid":"392aae57683a1487","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/392aae57683a1487","status":"passed","time":{"start":1707697600786,"stop":1707697602605,"duration":1819}},{"uid":"d2f50eb64ae4250a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/d2f50eb64ae4250a","status":"passed","time":{"start":1707611295765,"stop":1707611296832,"duration":1067}},{"uid":"787fc4fc4997a903","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/787fc4fc4997a903","status":"passed","time":{"start":1707524674885,"stop":1707524676174,"duration":1289}},{"uid":"707a9c11ac094977","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/707a9c11ac094977","status":"passed","time":{"start":1707438304260,"stop":1707438305544,"duration":1284}},{"uid":"bcaa4ecad82ad5a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/bcaa4ecad82ad5a3","status":"passed","time":{"start":1707351930762,"stop":1707351931880,"duration":1118}}]},"tags":[]},"source":"60dc18c326b0f0ee.json","parameterValues":["DorsetCouncil","None","None"]}