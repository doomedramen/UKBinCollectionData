{"uid":"15ca9ad18dc2f25f","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1704111826217,"stop":1704111827968,"duration":1751},"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f6719d2bd90>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f670859e470>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f6719d2bd90>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f670859e470>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1704111826218,"stop":1704111826218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1704111826218,"stop":1704111827968,"duration":1750},"status":"failed","statusMessage":"time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1382-721"},{"name":"thread","value":"2731-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":95,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":108},"items":[{"uid":"278d6683fbe4fbe1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/278d6683fbe4fbe1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111520113,"stop":1704111520696,"duration":583}},{"uid":"45ffc55357fdcb08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/45ffc55357fdcb08","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111475055,"stop":1704111476018,"duration":963}},{"uid":"fc3a761a6a1990b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/fc3a761a6a1990b0","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704111328983,"stop":1704111330595,"duration":1612}},{"uid":"13cadfcff2744fb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1330//#testresult/13cadfcff2744fb3","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704100020282,"stop":1704100021887,"duration":1605}},{"uid":"2cbb5ee15a40a52c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/2cbb5ee15a40a52c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704072590169,"stop":1704072590744,"duration":575}},{"uid":"32c968bd2b073f39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1327//#testresult/32c968bd2b073f39","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704050389264,"stop":1704050390165,"duration":901}},{"uid":"1e4284d3c0ccba03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1325//#testresult/1e4284d3c0ccba03","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704043928605,"stop":1704043929414,"duration":809}},{"uid":"be5baa19209b43e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/be5baa19209b43e3","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703985760323,"stop":1703985761780,"duration":1457}},{"uid":"1ed4551399e56adb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/1ed4551399e56adb","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703898957971,"stop":1703898959411,"duration":1440}},{"uid":"cbe9267fc8b2fe2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/cbe9267fc8b2fe2c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853488245,"stop":1703853489192,"duration":947}},{"uid":"33d314a01ca1e7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/33d314a01ca1e7a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851403999,"stop":1703851404996,"duration":997}},{"uid":"d4a5123608f167a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/d4a5123608f167a6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851138755,"stop":1703851140170,"duration":1415}},{"uid":"3e30173c9d160c94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/3e30173c9d160c94","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703812037156,"stop":1703812038574,"duration":1418}},{"uid":"71d6376d56137947","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/71d6376d56137947","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703756191487,"stop":1703756193461,"duration":1974}},{"uid":"7e640bd9c33804be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/7e640bd9c33804be","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726156432,"stop":1703726157031,"duration":599}},{"uid":"bfb7afb4750c5a81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/bfb7afb4750c5a81","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717640202,"stop":1703717641049,"duration":847}},{"uid":"d88c3ae261f1439d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/d88c3ae261f1439d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717290371,"stop":1703717290939,"duration":568}},{"uid":"652c56c1cc3e6925","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/652c56c1cc3e6925","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639745060,"stop":1703639745801,"duration":741}},{"uid":"f8dc653af3d1f7f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/f8dc653af3d1f7f8","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703553334139,"stop":1703553335734,"duration":1595}},{"uid":"6d3b9d20c4e36806","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/6d3b9d20c4e36806","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541433629,"stop":1703541434439,"duration":810}}]},"tags":[]},"source":"15ca9ad18dc2f25f.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}