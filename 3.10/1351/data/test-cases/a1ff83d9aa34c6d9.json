{"uid":"a1ff83d9aa34c6d9","name":"Validate Council Output [GlasgowCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"afbda54786d9dbd764f92d2f8c30a5fd","time":{"start":1704301356509,"stop":1704301357453,"duration":944},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f57a2730160>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f578ec0d5a0>, 'council': 'GlasgowCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f578ed81510>\npage = <Response [500]>\nkwargs = {'paon': None, 'postcode': None, 'uprn': None, 'url': 'https://www.glasgow.gov.uk/forms/refuseandrecyclingcalendar/PrintCalendar.aspx?UPRN=906700034497', ...}\nsoup = <!DOCTYPE html>\n\n<html>\n<head>\n<title>The given key was not present in the dictionary.</title>\n<meta content=\"width=de...onsider using &lt;customErrors mode=\"On\"/&gt; or &lt;customErrors mode=\"RemoteOnly\"/&gt; in production environments.-->\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f57a2730160>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f578ec0d5a0>, 'council': 'GlasgowCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f578ed81510>\npage = <Response [500]>\nkwargs = {'paon': None, 'postcode': None, 'uprn': None, 'url': 'https://www.glasgow.gov.uk/forms/refuseandrecyclingcalendar/PrintCalendar.aspx?UPRN=906700034497', ...}\nsoup = <!DOCTYPE html>\n\n<html>\n<head>\n<title>The given key was not present in the dictionary.</title>\n<meta content=\"width=de...onsider using &lt;customErrors mode=\"On\"/&gt; or &lt;customErrors mode=\"RemoteOnly\"/&gt; in production environments.-->\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council: GlasgowCityCouncil","time":{"start":1704301356509,"stop":1704301356509,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GlasgowCityCouncil using None and the None is set","time":{"start":1704301356509,"stop":1704301357453,"duration":944},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az661-160"},{"name":"thread","value":"2680-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":103,"unknown":0,"total":117},"items":[{"uid":"d2008ebe236b9261","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1349//#testresult/d2008ebe236b9261","status":"passed","time":{"start":1704244709840,"stop":1704244712134,"duration":2294}},{"uid":"4dae3aa0868e06a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1348//#testresult/4dae3aa0868e06a0","status":"passed","time":{"start":1704180288485,"stop":1704180291197,"duration":2712}},{"uid":"acbe23d7697f5597","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1346//#testresult/acbe23d7697f5597","status":"passed","time":{"start":1704158313038,"stop":1704158315586,"duration":2548}},{"uid":"7cda84b2df302fe4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1345//#testresult/7cda84b2df302fe4","status":"passed","time":{"start":1704114683463,"stop":1704114685686,"duration":2223}},{"uid":"8a494babd0cbe6b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1343//#testresult/8a494babd0cbe6b1","status":"passed","time":{"start":1704113775297,"stop":1704113777504,"duration":2207}},{"uid":"605ac67c6da00b8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1341//#testresult/605ac67c6da00b8f","status":"passed","time":{"start":1704112316539,"stop":1704112318821,"duration":2282}},{"uid":"2660ecec88d28f31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1339//#testresult/2660ecec88d28f31","status":"passed","time":{"start":1704112455214,"stop":1704112457366,"duration":2152}},{"uid":"d9ae3c98a3792d12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1338//#testresult/d9ae3c98a3792d12","status":"passed","time":{"start":1704112063167,"stop":1704112065488,"duration":2321}},{"uid":"2a486e46903b72c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1336//#testresult/2a486e46903b72c3","status":"passed","time":{"start":1704111882136,"stop":1704111884197,"duration":2061}},{"uid":"915c769d3111d7ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1335//#testresult/915c769d3111d7ab","status":"passed","time":{"start":1704111574536,"stop":1704111576567,"duration":2031}},{"uid":"8e75ca2086515ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1334//#testresult/8e75ca2086515ab","status":"passed","time":{"start":1704111529796,"stop":1704111532218,"duration":2422}},{"uid":"a34d6718062a9fd5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1332//#testresult/a34d6718062a9fd5","status":"passed","time":{"start":1704111328365,"stop":1704111330493,"duration":2128}},{"uid":"45e1867041a6620a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1330//#testresult/45e1867041a6620a","status":"passed","time":{"start":1704099940920,"stop":1704099943125,"duration":2205}},{"uid":"c62ee08a97781f22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1329//#testresult/c62ee08a97781f22","status":"passed","time":{"start":1704072265227,"stop":1704072267303,"duration":2076}},{"uid":"e14b160c1a9c400e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1327//#testresult/e14b160c1a9c400e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704050393781,"stop":1704050396217,"duration":2436}},{"uid":"44f79adfee05c32d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1325//#testresult/44f79adfee05c32d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704043942386,"stop":1704043944837,"duration":2451}},{"uid":"f1e3a80902a8bda6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/f1e3a80902a8bda6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703985745191,"stop":1703985747224,"duration":2033}},{"uid":"a72cc78a456f5626","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/a72cc78a456f5626","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703898909341,"stop":1703898911524,"duration":2183}},{"uid":"3ff3f7b861d026b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/3ff3f7b861d026b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853464474,"stop":1703853467155,"duration":2681}},{"uid":"c7f73e8e19f69371","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/c7f73e8e19f69371","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851377040,"stop":1703851379618,"duration":2578}}]},"tags":[]},"source":"a1ff83d9aa34c6d9.json","parameterValues":["GlasgowCityCouncil","None","None"]}