{"uid":"9bd6fb9c516dc389","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1704043914876,"stop":1704043916055,"duration":1179},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8f7cf38700>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8f6a2a8460>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8f6a2a8460>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8f7cf38700>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8f6a2a8460>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8f6a2a8460>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1704043914877,"stop":1704043914877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1704043914877,"stop":1704043916053,"duration":1176},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704043916053,"stop":1704043916054,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704043916054,"stop":1704043916055,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az840-413"},{"name":"thread","value":"2738-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":101,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":101},"items":[{"uid":"2e2aeff0e4fc84a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1320//#testresult/2e2aeff0e4fc84a0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703985767288,"stop":1703985769343,"duration":2055}},{"uid":"a309ca45d338ac4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1316//#testresult/a309ca45d338ac4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703898956336,"stop":1703898957946,"duration":1610}},{"uid":"15fe8bd4f9cacb8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1314//#testresult/15fe8bd4f9cacb8e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853491494,"stop":1703853493054,"duration":1560}},{"uid":"277e811a583f68ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1311//#testresult/277e811a583f68ce","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851402335,"stop":1703851403971,"duration":1636}},{"uid":"f92ad2c9266696a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1312//#testresult/f92ad2c9266696a8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851137061,"stop":1703851138710,"duration":1649}},{"uid":"c1080a15072f94d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/c1080a15072f94d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812035894,"stop":1703812037043,"duration":1149}},{"uid":"4a1e3c69ce7699ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/4a1e3c69ce7699ef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756190250,"stop":1703756191461,"duration":1211}},{"uid":"23583ce2b1ad2aa5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/23583ce2b1ad2aa5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726155002,"stop":1703726156406,"duration":1404}},{"uid":"4d4ce06d701fa2af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/4d4ce06d701fa2af","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717638583,"stop":1703717640177,"duration":1594}},{"uid":"e0ddb6845e03d903","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/e0ddb6845e03d903","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717289256,"stop":1703717290254,"duration":998}},{"uid":"e797a95ad1001f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/e797a95ad1001f0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639743773,"stop":1703639745035,"duration":1262}},{"uid":"8f7c0b13eac084c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/8f7c0b13eac084c7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553332862,"stop":1703553334014,"duration":1152}},{"uid":"2a7e4a6b91dfb8c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/2a7e4a6b91dfb8c2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541430785,"stop":1703541433456,"duration":2671}},{"uid":"e7b21225dec08669","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/e7b21225dec08669","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467421626,"stop":1703467422720,"duration":1094}},{"uid":"a4bd2047d5ad4878","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/a4bd2047d5ad4878","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416410327,"stop":1703416411825,"duration":1498}},{"uid":"4468b7dbc9da1cdc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/4468b7dbc9da1cdc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416369775,"stop":1703416370881,"duration":1106}},{"uid":"50093045144c0caa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/50093045144c0caa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703381286070,"stop":1703381287712,"duration":1642}},{"uid":"b1a777a5df4f57d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1287//#testresult/b1a777a5df4f57d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294135212,"stop":1703294136752,"duration":1540}},{"uid":"2af78257a04bd26e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1282//#testresult/2af78257a04bd26e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207885968,"stop":1703207887715,"duration":1747}},{"uid":"ee6d092b14f9a769","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1281//#testresult/ee6d092b14f9a769","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121512998,"stop":1703121514171,"duration":1173}}]},"tags":[]},"source":"9bd6fb9c516dc389.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}