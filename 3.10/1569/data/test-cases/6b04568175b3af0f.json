{"uid":"6b04568175b3af0f","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1708388707920,"stop":1708388738660,"duration":30740},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fac1b903ac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fac1b5cb670>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fac1b961030>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1708388707, four_weeks = 1710807907\nparams = {'End': '1710807907', 'Start': '1708388707', 'UPRN': '100050768956'}\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fac1b903ac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fac1b5cb670>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fac1b961030>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1708388707, four_weeks = 1710807907\nparams = {'End': '1710807907', 'Start': '1708388707', 'UPRN': '100050768956'}\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1708388707920,"stop":1708388707920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1708388707920,"stop":1708388738660,"duration":30740},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1205-316"},{"name":"thread","value":"2756-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":195,"unknown":0,"total":197},"items":[{"uid":"6abdfda42bfb191b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/6abdfda42bfb191b","status":"passed","time":{"start":1708302426959,"stop":1708302428376,"duration":1417}},{"uid":"8bce6e5a02d5d654","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/8bce6e5a02d5d654","status":"passed","time":{"start":1708216065850,"stop":1708216067100,"duration":1250}},{"uid":"80515ac4ea20421b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/80515ac4ea20421b","status":"passed","time":{"start":1708129503001,"stop":1708129504670,"duration":1669}},{"uid":"fb51e2fc861187f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/fb51e2fc861187f3","status":"passed","time":{"start":1708043103974,"stop":1708043106200,"duration":2226}},{"uid":"f776630a743291a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/f776630a743291a6","status":"passed","time":{"start":1707956732601,"stop":1707956734311,"duration":1710}},{"uid":"4467541d6cde25bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/4467541d6cde25bc","status":"passed","time":{"start":1707870324101,"stop":1707870326036,"duration":1935}},{"uid":"2170d10b4f790f45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1560//#testresult/2170d10b4f790f45","status":"passed","time":{"start":1707783978353,"stop":1707783980408,"duration":2055}},{"uid":"7e5f772066ebae02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/7e5f772066ebae02","status":"passed","time":{"start":1707697599022,"stop":1707697600783,"duration":1761}},{"uid":"6a3df85496e72919","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/6a3df85496e72919","status":"passed","time":{"start":1707611294088,"stop":1707611295762,"duration":1674}},{"uid":"3298f9123b265120","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/3298f9123b265120","status":"passed","time":{"start":1707524672267,"stop":1707524674882,"duration":2615}},{"uid":"7e4f43a1cbbf36af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/7e4f43a1cbbf36af","status":"passed","time":{"start":1707438302216,"stop":1707438304255,"duration":2039}},{"uid":"12a3886e887b152a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/12a3886e887b152a","status":"passed","time":{"start":1707351929043,"stop":1707351930760,"duration":1717}},{"uid":"2f081c982ec1e4c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1551//#testresult/2f081c982ec1e4c8","status":"passed","time":{"start":1707265458116,"stop":1707265459611,"duration":1495}},{"uid":"95c40ffd8e98fa35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1549//#testresult/95c40ffd8e98fa35","status":"passed","time":{"start":1707179127657,"stop":1707179129302,"duration":1645}},{"uid":"3509ae823d9430ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/3509ae823d9430ef","status":"passed","time":{"start":1707092905602,"stop":1707092907335,"duration":1733}},{"uid":"b5daf8c1835d2663","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/b5daf8c1835d2663","status":"passed","time":{"start":1707006493751,"stop":1707006496348,"duration":2597}},{"uid":"c53cf4b39d05e19c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1545//#testresult/c53cf4b39d05e19c","status":"passed","time":{"start":1706941866189,"stop":1706941868088,"duration":1899}},{"uid":"fc08502861b31b45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1544//#testresult/fc08502861b31b45","status":"passed","time":{"start":1706938945167,"stop":1706938946583,"duration":1416}},{"uid":"92688ed27b974d20","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1542//#testresult/92688ed27b974d20","status":"passed","time":{"start":1706938432460,"stop":1706938433871,"duration":1411}},{"uid":"a3fe856f3304da6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1541//#testresult/a3fe856f3304da6d","status":"passed","time":{"start":1706919964501,"stop":1706919966222,"duration":1721}}]},"tags":[]},"source":"6b04568175b3af0f.json","parameterValues":["DoncasterCouncil","None","None"]}