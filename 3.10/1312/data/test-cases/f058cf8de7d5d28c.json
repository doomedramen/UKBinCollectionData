{"uid":"f058cf8de7d5d28c","name":"Validate Council Output [NorthWestLeicestershire-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"636da600d3c2f6211f4c406b74efac78","time":{"start":1703851201577,"stop":1703851206563,"duration":4986},"status":"failed","statusMessage":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4043c1b5b0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4033fff9d0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:70: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tue 2nd Jan', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4043c1b5b0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4033fff9d0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:70: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tue 2nd Jan', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: NorthWestLeicestershire","time":{"start":1703851201577,"stop":1703851201577,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NorthWestLeicestershire using local and the http://selenium:4444 is set","time":{"start":1703851201578,"stop":1703851206563,"duration":4985},"status":"failed","statusMessage":"time data 'Tue 2nd Jan' does not match format '%a %dth %b'","statusTrace":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1493-787"},{"name":"thread","value":"2687-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthWestLeicestershire"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":44,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":46},"items":[{"uid":"520683a12b56bfe0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1309//#testresult/520683a12b56bfe0","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703812114331,"stop":1703812118277,"duration":3946}},{"uid":"e9bff248580e929a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1306//#testresult/e9bff248580e929a","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703756313388,"stop":1703756317520,"duration":4132}},{"uid":"2921f33fb7a24d04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1305//#testresult/2921f33fb7a24d04","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703726299970,"stop":1703726304035,"duration":4065}},{"uid":"fa76077576a2c213","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1304//#testresult/fa76077576a2c213","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703717468421,"stop":1703717473666,"duration":5245}},{"uid":"687dcdd1e8cb6737","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1303//#testresult/687dcdd1e8cb6737","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703717342895,"stop":1703717346614,"duration":3719}},{"uid":"e74f4da19da3478e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1301//#testresult/e74f4da19da3478e","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703639826240,"stop":1703639830478,"duration":4238}},{"uid":"8b26c7b95ef9bbe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1300//#testresult/8b26c7b95ef9bbe","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703553476429,"stop":1703553480467,"duration":4038}},{"uid":"d5f186a77095eb74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1298//#testresult/d5f186a77095eb74","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703541232844,"stop":1703541236550,"duration":3706}},{"uid":"e7c5460dfc0c710f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1295//#testresult/e7c5460dfc0c710f","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703467272132,"stop":1703467276171,"duration":4039}},{"uid":"1fd903a6a682a1b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1292//#testresult/1fd903a6a682a1b3","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703416476607,"stop":1703416481616,"duration":5009}},{"uid":"333dc8992239a4cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1291//#testresult/333dc8992239a4cf","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703416424958,"stop":1703416428637,"duration":3679}},{"uid":"b071fcdff5e27322","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1289//#testresult/b071fcdff5e27322","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703381070411,"stop":1703381074905,"duration":4494}},{"uid":"dff7bc1d70e86897","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1287//#testresult/dff7bc1d70e86897","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703294111908,"stop":1703294115887,"duration":3979}},{"uid":"f4d0a55be52ef522","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1282//#testresult/f4d0a55be52ef522","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703207864969,"stop":1703207869464,"duration":4495}},{"uid":"8b430e3bf2a34f80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1281//#testresult/8b430e3bf2a34f80","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121531325,"stop":1703121534918,"duration":3593}},{"uid":"1c1f3474656a8892","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1280//#testresult/1c1f3474656a8892","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034366558,"stop":1703034371543,"duration":4985}},{"uid":"cebf46c169c33665","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1279//#testresult/cebf46c169c33665","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%a %dth %b'","time":{"start":1703024962572,"stop":1703024966273,"duration":3701}},{"uid":"18e1e0872a169e5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1276//#testresult/18e1e0872a169e5b","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%a %dth %b'","time":{"start":1702948780920,"stop":1702948785370,"duration":4450}},{"uid":"d880b5ed82b5cecf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1275//#testresult/d880b5ed82b5cecf","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1702862418932,"stop":1702862422845,"duration":3913}},{"uid":"ae0684c382a63010","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1274//#testresult/ae0684c382a63010","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1702860048932,"stop":1702860052690,"duration":3758}}]},"tags":[]},"source":"f058cf8de7d5d28c.json","parameterValues":["NorthWestLeicestershire","local","http://selenium:4444"]}