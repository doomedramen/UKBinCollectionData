{"uid":"bc4678630df9cb9e","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1709598347596,"stop":1709598349199,"duration":1603},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f92bf4b3400>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f92befd2560>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f92bf4b3400>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f92befd2560>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1709598347596,"stop":1709598347596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1709598347597,"stop":1709598349199,"duration":1602},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1148-702"},{"name":"thread","value":"2703-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":113,"broken":0,"skipped":0,"passed":83,"unknown":0,"total":196},"items":[{"uid":"ada48939c82b6c69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1592//#testresult/ada48939c82b6c69","status":"passed","time":{"start":1709512044480,"stop":1709512045085,"duration":605}},{"uid":"8ebbc96a2825706","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1572//#testresult/8ebbc96a2825706","status":"passed","time":{"start":1708561587413,"stop":1708561588108,"duration":695}},{"uid":"ca5e98a42565f860","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1570//#testresult/ca5e98a42565f860","status":"passed","time":{"start":1708475162143,"stop":1708475162896,"duration":753}},{"uid":"3b400f7521b18b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1569//#testresult/3b400f7521b18b6","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1708388755213,"stop":1708388756064,"duration":851}},{"uid":"cc8391853d796e25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1568//#testresult/cc8391853d796e25","status":"passed","time":{"start":1708302477954,"stop":1708302478559,"duration":605}},{"uid":"d55cfeb62e0addd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1567//#testresult/d55cfeb62e0addd2","status":"passed","time":{"start":1708216135628,"stop":1708216136266,"duration":638}},{"uid":"e3b9bed79176543","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1566//#testresult/e3b9bed79176543","status":"passed","time":{"start":1708129555875,"stop":1708129556455,"duration":580}},{"uid":"86786fb064d27c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1563//#testresult/86786fb064d27c0","status":"passed","time":{"start":1708043164744,"stop":1708043165767,"duration":1023}},{"uid":"994608df3da1f77a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1562//#testresult/994608df3da1f77a","status":"passed","time":{"start":1707956782879,"stop":1707956783506,"duration":627}},{"uid":"759b6ae1a9b4f798","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1561//#testresult/759b6ae1a9b4f798","status":"passed","time":{"start":1707870383587,"stop":1707870384543,"duration":956}},{"uid":"40ae12dd03f3a0c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1560//#testresult/40ae12dd03f3a0c5","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1707784034395,"stop":1707784035308,"duration":913}},{"uid":"701ee70907754e56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1559//#testresult/701ee70907754e56","status":"passed","time":{"start":1707697630721,"stop":1707697631341,"duration":620}},{"uid":"570aebdc066ec06c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1556//#testresult/570aebdc066ec06c","status":"passed","time":{"start":1707611341595,"stop":1707611343072,"duration":1477}},{"uid":"69a5a576bedbbabe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1554//#testresult/69a5a576bedbbabe","status":"passed","time":{"start":1707524742270,"stop":1707524743263,"duration":993}},{"uid":"5f08083ccc20b9db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1553//#testresult/5f08083ccc20b9db","status":"passed","time":{"start":1707438360142,"stop":1707438361661,"duration":1519}},{"uid":"f7f3e43cefb071","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1552//#testresult/f7f3e43cefb071","status":"passed","time":{"start":1707351997515,"stop":1707351999235,"duration":1720}},{"uid":"7f311b02ce30d2ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1551//#testresult/7f311b02ce30d2ac","status":"passed","time":{"start":1707265516358,"stop":1707265517421,"duration":1063}},{"uid":"16b76c5d2e2fdaeb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1549//#testresult/16b76c5d2e2fdaeb","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1707179198075,"stop":1707179199523,"duration":1448}},{"uid":"aa54a1525ada6bd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1548//#testresult/aa54a1525ada6bd1","status":"passed","time":{"start":1707092941636,"stop":1707092942664,"duration":1028}},{"uid":"1d7aa0143ba2cdb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/1547//#testresult/1d7aa0143ba2cdb3","status":"passed","time":{"start":1707006551324,"stop":1707006552527,"duration":1203}}]},"tags":[]},"source":"bc4678630df9cb9e.json","parameterValues":["LiverpoolCityCouncil","None","None"]}