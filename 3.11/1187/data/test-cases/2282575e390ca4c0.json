{"uid":"2282575e390ca4c0","name":"Validate Council Output [GuildfordCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7920670628eac2b6a4c154f0eb5095c4","time":{"start":1701714341465,"stop":1701714342562,"duration":1097},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fce4e73b240>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fce3ac31550>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fce4f4dbd10>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fce4e73b240>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fce3ac31550>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fce4f4dbd10>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1701714341466,"stop":1701714341466,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GuildfordCouncil using None and the None is set","time":{"start":1701714341466,"stop":1701714342562,"duration":1096},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az529-31"},{"name":"thread","value":"2963-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":48,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":48},"items":[{"uid":"e4e102fa4b43fe68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1184//#testresult/e4e102fa4b43fe68","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701652747576,"stop":1701652748755,"duration":1179}},{"uid":"858feecf857706d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1183//#testresult/858feecf857706d8","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701566740699,"stop":1701566743559,"duration":2860}},{"uid":"4a3f9e4e80a0d332","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1182//#testresult/4a3f9e4e80a0d332","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701479722519,"stop":1701479723878,"duration":1359}},{"uid":"d66e2fa420edca7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1179//#testresult/d66e2fa420edca7c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701418966317,"stop":1701418968503,"duration":2186}},{"uid":"322b82a0c8d3c304","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1181//#testresult/322b82a0c8d3c304","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701419086589,"stop":1701419089798,"duration":3209}},{"uid":"ac03ac8b80a514b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1180//#testresult/ac03ac8b80a514b2","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701419034302,"stop":1701419035492,"duration":1190}},{"uid":"78e34510b83acebe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1176//#testresult/78e34510b83acebe","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701419178583,"stop":1701419179693,"duration":1110}},{"uid":"c8dcaf7ea254f727","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1177//#testresult/c8dcaf7ea254f727","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701418929835,"stop":1701418931713,"duration":1878}},{"uid":"b64d3d22e9d129c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1175//#testresult/b64d3d22e9d129c5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701414343132,"stop":1701414345303,"duration":2171}},{"uid":"e81717ce057d44d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/e81717ce057d44d9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701394092551,"stop":1701394095778,"duration":3227}},{"uid":"27b828c2f6e8acb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/27b828c2f6e8acb8","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701353343345,"stop":1701353345837,"duration":2492}},{"uid":"4bcbadba99fdfa37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1170//#testresult/4bcbadba99fdfa37","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701353375272,"stop":1701353377241,"duration":1969}},{"uid":"1193b8e077c335b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1163//#testresult/1193b8e077c335b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701307103394,"stop":1701307105859,"duration":2465}},{"uid":"7d168721d7108a15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1161//#testresult/7d168721d7108a15","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701279330954,"stop":1701279335254,"duration":4300}},{"uid":"899d6808a1d4f6e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1156//#testresult/899d6808a1d4f6e9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701220751421,"stop":1701220753828,"duration":2407}},{"uid":"78151a425c657d72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1155//#testresult/78151a425c657d72","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701134374812,"stop":1701134376324,"duration":1512}},{"uid":"656b17bd2ad291f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1152//#testresult/656b17bd2ad291f2","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701048206457,"stop":1701048208694,"duration":2237}},{"uid":"aa61456c79d5e191","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/aa61456c79d5e191","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701036470168,"stop":1701036471424,"duration":1256}},{"uid":"650f2be9b1ebb436","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/650f2be9b1ebb436","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701036125218,"stop":1701036127546,"duration":2328}},{"uid":"17ccafb5feb73162","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/17ccafb5feb73162","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700961916533,"stop":1700961917849,"duration":1316}}]},"tags":[]},"source":"2282575e390ca4c0.json","parameterValues":["GuildfordCouncil","None","None"]}