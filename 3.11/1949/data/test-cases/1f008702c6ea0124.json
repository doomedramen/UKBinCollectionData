{"uid":"1f008702c6ea0124","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1718930783867,"stop":1718930804235,"duration":20368},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55af5576ee9a <unknown>\n#1 0x55af554582a1 <unknown>\n#2 0x55af554a570f <unknown>\n#3 0x55af554990ff <unknown>\n#4 0x55af554c74b2 <unknown>\n#5 0x55af55498a79 <unknown>\n#6 0x55af554c767e <unknown>\n#7 0x55af554e62cc <unknown>\n#8 0x55af554c7253 <unknown>\n#9 0x55af554971c7 <unknown>\n#10 0x55af55497b3e <unknown>\n#11 0x55af557352db <unknown>\n#12 0x55af55739387 <unknown>\n#13 0x55af55721e0e <unknown>\n#14 0x55af55739e52 <unknown>\n#15 0x55af557067af <unknown>\n#16 0x55af5575e188 <unknown>\n#17 0x55af5575e35b <unknown>\n#18 0x55af5576dfcc <unknown>\n#19 0x7fa754992ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f98c3432d40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f98c32b2690>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:64: in parse_data\n    dropdown_search.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98c2b51cd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55af5575e35b \\\\u003Cunknown>\\\\n#18 0x55af5576dfcc \\\\u003Cunknown>\\\\n#19 0x7fa754992ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.76)\nE       Stacktrace:\nE       #0 0x55af5576ee9a <unknown>\nE       #1 0x55af554582a1 <unknown>\nE       #2 0x55af554a570f <unknown>\nE       #3 0x55af554990ff <unknown>\nE       #4 0x55af554c74b2 <unknown>\nE       #5 0x55af55498a79 <unknown>\nE       #6 0x55af554c767e <unknown>\nE       #7 0x55af554e62cc <unknown>\nE       #8 0x55af554c7253 <unknown>\nE       #9 0x55af554971c7 <unknown>\nE       #10 0x55af55497b3e <unknown>\nE       #11 0x55af557352db <unknown>\nE       #12 0x55af55739387 <unknown>\nE       #13 0x55af55721e0e <unknown>\nE       #14 0x55af55739e52 <unknown>\nE       #15 0x55af557067af <unknown>\nE       #16 0x55af5575e188 <unknown>\nE       #17 0x55af5575e35b <unknown>\nE       #18 0x55af5576dfcc <unknown>\nE       #19 0x7fa754992ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55af5576ee9a <unknown>\n#1 0x55af554582a1 <unknown>\n#2 0x55af554a570f <unknown>\n#3 0x55af554990ff <unknown>\n#4 0x55af554c74b2 <unknown>\n#5 0x55af55498a79 <unknown>\n#6 0x55af554c767e <unknown>\n#7 0x55af554e62cc <unknown>\n#8 0x55af554c7253 <unknown>\n#9 0x55af554971c7 <unknown>\n#10 0x55af55497b3e <unknown>\n#11 0x55af557352db <unknown>\n#12 0x55af55739387 <unknown>\n#13 0x55af55721e0e <unknown>\n#14 0x55af55739e52 <unknown>\n#15 0x55af557067af <unknown>\n#16 0x55af5575e188 <unknown>\n#17 0x55af5575e35b <unknown>\n#18 0x55af5576dfcc <unknown>\n#19 0x7fa754992ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f98c3432d40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f98c32b2690>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:64: in parse_data\n    dropdown_search.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98c2b51cd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55af5575e35b \\\\u003Cunknown>\\\\n#18 0x55af5576dfcc \\\\u003Cunknown>\\\\n#19 0x7fa754992ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.76)\nE       Stacktrace:\nE       #0 0x55af5576ee9a <unknown>\nE       #1 0x55af554582a1 <unknown>\nE       #2 0x55af554a570f <unknown>\nE       #3 0x55af554990ff <unknown>\nE       #4 0x55af554c74b2 <unknown>\nE       #5 0x55af55498a79 <unknown>\nE       #6 0x55af554c767e <unknown>\nE       #7 0x55af554e62cc <unknown>\nE       #8 0x55af554c7253 <unknown>\nE       #9 0x55af554971c7 <unknown>\nE       #10 0x55af55497b3e <unknown>\nE       #11 0x55af557352db <unknown>\nE       #12 0x55af55739387 <unknown>\nE       #13 0x55af55721e0e <unknown>\nE       #14 0x55af55739e52 <unknown>\nE       #15 0x55af557067af <unknown>\nE       #16 0x55af5575e188 <unknown>\nE       #17 0x55af5575e35b <unknown>\nE       #18 0x55af5576dfcc <unknown>\nE       #19 0x7fa754992ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council","time":{"start":1718930783867,"stop":1718930783868,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1718930783868,"stop":1718930804235,"duration":20367},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55af5576ee9a <unknown>\n#1 0x55af554582a1 <unknown>\n#2 0x55af554a570f <unknown>\n#3 0x55af554990ff <unknown>\n#4 0x55af554c74b2 <unknown>\n#5 0x55af55498a79 <unknown>\n#6 0x55af554c767e <unknown>\n#7 0x55af554e62cc <unknown>\n#8 0x55af554c7253 <unknown>\n#9 0x55af554971c7 <unknown>\n#10 0x55af55497b3e <unknown>\n#11 0x55af557352db <unknown>\n#12 0x55af55739387 <unknown>\n#13 0x55af55721e0e <unknown>\n#14 0x55af55739e52 <unknown>\n#15 0x55af557067af <unknown>\n#16 0x55af5575e188 <unknown>\n#17 0x55af5575e35b <unknown>\n#18 0x55af5576dfcc <unknown>\n#19 0x7fa754992ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55af5576ee9a <unknown>\n#1 0x55af554582a1 <unknown>\n#2 0x55af554a570f <unknown>\n#3 0x55af554990ff <unknown>\n#4 0x55af554c74b2 <unknown>\n#5 0x55af55498a79 <unknown>\n#6 0x55af554c767e <unknown>\n#7 0x55af554e62cc <unknown>\n#8 0x55af554c7253 <unknown>\n#9 0x55af554971c7 <unknown>\n#10 0x55af55497b3e <unknown>\n#11 0x55af557352db <unknown>\n#12 0x55af55739387 <unknown>\n#13 0x55af55721e0e <unknown>\n#14 0x55af55739e52 <unknown>\n#15 0x55af557067af <unknown>\n#16 0x55af5575e188 <unknown>\n#17 0x55af5575e35b <unknown>\n#18 0x55af5576dfcc <unknown>\n#19 0x7fa754992ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2f8fc59d9b34a39e","name":"stdout","source":"2f8fc59d9b34a39e.txt","type":"text/plain","size":730}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1382-383"},{"name":"thread","value":"2727-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":24,"unknown":0,"total":26},"items":[{"uid":"8975bd29e7634d4e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/8975bd29e7634d4e","status":"passed","time":{"start":1718844252346,"stop":1718844272141,"duration":19795}},{"uid":"43e089976b2cad7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/43e089976b2cad7f","status":"passed","time":{"start":1718758025460,"stop":1718758081030,"duration":55570}},{"uid":"3e1c7602da520081","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/3e1c7602da520081","status":"passed","time":{"start":1718671546760,"stop":1718671575409,"duration":28649}},{"uid":"90c3033cdb42a55d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1945//#testresult/90c3033cdb42a55d","status":"passed","time":{"start":1718585327202,"stop":1718585353064,"duration":25862}},{"uid":"61902f62fd77a08d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/61902f62fd77a08d","status":"passed","time":{"start":1718498777613,"stop":1718498831183,"duration":53570}},{"uid":"5651f5f5a4d5564c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/5651f5f5a4d5564c","status":"passed","time":{"start":1718412399316,"stop":1718412444740,"duration":45424}},{"uid":"b9c234f72f01c299","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/b9c234f72f01c299","status":"passed","time":{"start":1718325861125,"stop":1718325892429,"duration":31304}},{"uid":"f5b919994267420b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1939//#testresult/f5b919994267420b","status":"passed","time":{"start":1718239515829,"stop":1718239550581,"duration":34752}},{"uid":"89f0b89885f928b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1938//#testresult/89f0b89885f928b2","status":"passed","time":{"start":1718153170075,"stop":1718153194693,"duration":24618}},{"uid":"6c07c7034a912234","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1937//#testresult/6c07c7034a912234","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x557a176cbe9a <unknown>\n#1 0x557a173b545c <unknown>\n#2 0x557a174015b5 <unknown>\n#3 0x557a17401671 <unknown>\n#4 0x557a17445f14 <unknown>\n#5 0x557a174244dd <unknown>\n#6 0x557a174432cc <unknown>\n#7 0x557a17424253 <unknown>\n#8 0x557a173f41c7 <unknown>\n#9 0x557a173f4b3e <unknown>\n#10 0x557a176922db <unknown>\n#11 0x557a17696387 <unknown>\n#12 0x557a1767ee0e <unknown>\n#13 0x557a17696e52 <unknown>\n#14 0x557a176637af <unknown>\n#15 0x557a176bb188 <unknown>\n#16 0x557a176bb35b <unknown>\n#17 0x557a176cafcc <unknown>\n#18 0x7f9f419b4ac3 <unknown>","time":{"start":1718066912413,"stop":1718067017933,"duration":105520}},{"uid":"ccb719f079c7ecd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1936//#testresult/ccb719f079c7ecd1","status":"passed","time":{"start":1717980313824,"stop":1717980360953,"duration":47129}},{"uid":"4a37bec0f5469bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1934//#testresult/4a37bec0f5469bc","status":"passed","time":{"start":1717893956256,"stop":1717893994296,"duration":38040}},{"uid":"bf339f5f0068998f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1933//#testresult/bf339f5f0068998f","status":"passed","time":{"start":1717807671661,"stop":1717807707208,"duration":35547}},{"uid":"b843406afb766a8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1932//#testresult/b843406afb766a8d","status":"passed","time":{"start":1717721164606,"stop":1717721199770,"duration":35164}},{"uid":"b26f72f78939bdf0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1927//#testresult/b26f72f78939bdf0","status":"passed","time":{"start":1717634630252,"stop":1717634682591,"duration":52339}},{"uid":"f39c32ab8d26251e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1924//#testresult/f39c32ab8d26251e","status":"passed","time":{"start":1717548224349,"stop":1717548252650,"duration":28301}},{"uid":"787f4c08b6343ac0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1923//#testresult/787f4c08b6343ac0","status":"passed","time":{"start":1717461879970,"stop":1717461948485,"duration":68515}},{"uid":"2d25781aaa7287b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1921//#testresult/2d25781aaa7287b5","status":"passed","time":{"start":1717375613619,"stop":1717375645452,"duration":31833}},{"uid":"3cefafa4540176c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1911//#testresult/3cefafa4540176c4","status":"passed","time":{"start":1717316975350,"stop":1717317006425,"duration":31075}},{"uid":"905b70564e3d25b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1908//#testresult/905b70564e3d25b5","status":"passed","time":{"start":1717289065243,"stop":1717289093718,"duration":28475}}]},"tags":[]},"source":"1f008702c6ea0124.json","parameterValues":["WalthamForest"]}