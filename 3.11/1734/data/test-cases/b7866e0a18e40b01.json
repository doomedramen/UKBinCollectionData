{"uid":"b7866e0a18e40b01","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1714436764081,"stop":1714436764695,"duration":614},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f22f50f4860>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f22f442ae10>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7f22f439e8d0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1714436764, four_weeks = 1716855964\nparams = {'End': '1716855964', 'Start': '1714436764', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f22f50f4860>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f22f442ae10>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7f22f439e8d0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1714436764, four_weeks = 1716855964\nparams = {'End': '1716855964', 'Start': '1714436764', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1714436764081,"stop":1714436764082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1714436764082,"stop":1714436764695,"duration":613},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az985-53"},{"name":"thread","value":"2643-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":266,"unknown":0,"total":269},"items":[{"uid":"946c9ccba3b4691b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1732//#testresult/946c9ccba3b4691b","status":"passed","time":{"start":1714350498972,"stop":1714350500476,"duration":1504}},{"uid":"7fef2011d4400873","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1724//#testresult/7fef2011d4400873","status":"passed","time":{"start":1714264197967,"stop":1714264199621,"duration":1654}},{"uid":"4679781907dfe755","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1722//#testresult/4679781907dfe755","status":"passed","time":{"start":1714234187208,"stop":1714234188763,"duration":1555}},{"uid":"24ecdd0457f52872","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1714//#testresult/24ecdd0457f52872","status":"passed","time":{"start":1714232703908,"stop":1714232705386,"duration":1478}},{"uid":"7af0f24a09fbd75b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1713//#testresult/7af0f24a09fbd75b","status":"passed","time":{"start":1714177581209,"stop":1714177582769,"duration":1560}},{"uid":"fd981d122acf23a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1712//#testresult/fd981d122acf23a6","status":"passed","time":{"start":1714091194185,"stop":1714091195974,"duration":1789}},{"uid":"dcdac2ec005e9bd5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1711//#testresult/dcdac2ec005e9bd5","status":"passed","time":{"start":1714006436864,"stop":1714006438376,"duration":1512}},{"uid":"bf88d14b0825fb67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1710//#testresult/bf88d14b0825fb67","status":"passed","time":{"start":1713918413719,"stop":1713918415161,"duration":1442}},{"uid":"8b8502ee6e042848","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1709//#testresult/8b8502ee6e042848","status":"passed","time":{"start":1713832079936,"stop":1713832081658,"duration":1722}},{"uid":"2bb0f14cc9adc333","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1708//#testresult/2bb0f14cc9adc333","status":"passed","time":{"start":1713745674749,"stop":1713745676401,"duration":1652}},{"uid":"f19caa0390291188","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1707//#testresult/f19caa0390291188","status":"passed","time":{"start":1713659333244,"stop":1713659334751,"duration":1507}},{"uid":"5c6baee897a54af1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1706//#testresult/5c6baee897a54af1","status":"passed","time":{"start":1713572751191,"stop":1713572753016,"duration":1825}},{"uid":"b337739e45d5ce72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1702//#testresult/b337739e45d5ce72","status":"passed","time":{"start":1713486398527,"stop":1713486400669,"duration":2142}},{"uid":"f36164c8e5399e8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1698//#testresult/f36164c8e5399e8b","status":"passed","time":{"start":1713399963865,"stop":1713399965982,"duration":2117}},{"uid":"cc7d58940c42226e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1697//#testresult/cc7d58940c42226e","status":"passed","time":{"start":1713313611181,"stop":1713313612326,"duration":1145}},{"uid":"ea4ac82b185b2e99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1696//#testresult/ea4ac82b185b2e99","status":"passed","time":{"start":1713252712776,"stop":1713252714270,"duration":1494}},{"uid":"87dfc08527990e87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1695//#testresult/87dfc08527990e87","status":"passed","time":{"start":1713227146052,"stop":1713227148789,"duration":2737}},{"uid":"20fa035fd868b634","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1692//#testresult/20fa035fd868b634","status":"passed","time":{"start":1713207735099,"stop":1713207736943,"duration":1844}},{"uid":"2e702401a05cefc7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1683//#testresult/2e702401a05cefc7","status":"passed","time":{"start":1713188280045,"stop":1713188281395,"duration":1350}},{"uid":"a4bb4f01d39b7e25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1682//#testresult/a4bb4f01d39b7e25","status":"passed","time":{"start":1713149755872,"stop":1713149757457,"duration":1585}}]},"tags":[]},"source":"b7866e0a18e40b01.json","parameterValues":["DoncasterCouncil","None","None"]}