{"uid":"a8833afe753668a9","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1714436752444,"stop":1714436753527,"duration":1083},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fea76b6cf40>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fea76141a90>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fea76b6cf40>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fea76141a90>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1714436752444,"stop":1714436752445,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1714436752445,"stop":1714436753527,"duration":1082},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az985-53"},{"name":"thread","value":"2634-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":191,"unknown":0,"total":218},"items":[{"uid":"328fc078503e112c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1732//#testresult/328fc078503e112c","status":"passed","time":{"start":1714350489258,"stop":1714350490192,"duration":934}},{"uid":"ff14734e5a9d13ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1724//#testresult/ff14734e5a9d13ec","status":"passed","time":{"start":1714264180037,"stop":1714264181904,"duration":1867}},{"uid":"ff2b892642d00c88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1722//#testresult/ff2b892642d00c88","status":"passed","time":{"start":1714234178353,"stop":1714234179269,"duration":916}},{"uid":"fd3ee1fae49853e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1714//#testresult/fd3ee1fae49853e8","status":"passed","time":{"start":1714232710685,"stop":1714232711880,"duration":1195}},{"uid":"11077805c07d9060","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1713//#testresult/11077805c07d9060","status":"passed","time":{"start":1714177682585,"stop":1714177683713,"duration":1128}},{"uid":"2e56394c2374999","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1712//#testresult/2e56394c2374999","status":"passed","time":{"start":1714091196309,"stop":1714091197383,"duration":1074}},{"uid":"64c24801c9b0f946","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1711//#testresult/64c24801c9b0f946","status":"passed","time":{"start":1714006452051,"stop":1714006453141,"duration":1090}},{"uid":"b2e5455f97a4f4aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1710//#testresult/b2e5455f97a4f4aa","status":"passed","time":{"start":1713918424196,"stop":1713918425392,"duration":1196}},{"uid":"f7d01df2c7993461","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1709//#testresult/f7d01df2c7993461","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713832093119,"stop":1713832094541,"duration":1422}},{"uid":"850d68aadbbb6303","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1708//#testresult/850d68aadbbb6303","status":"passed","time":{"start":1713745687960,"stop":1713745689218,"duration":1258}},{"uid":"45bad8f744b4e07c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1707//#testresult/45bad8f744b4e07c","status":"passed","time":{"start":1713659332209,"stop":1713659333211,"duration":1002}},{"uid":"e0e2b103e241f993","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1706//#testresult/e0e2b103e241f993","status":"passed","time":{"start":1713572752002,"stop":1713572753489,"duration":1487}},{"uid":"389cdadaf2befe6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1702//#testresult/389cdadaf2befe6d","status":"passed","time":{"start":1713486410146,"stop":1713486412191,"duration":2045}},{"uid":"25f1d5a93f0747b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1698//#testresult/25f1d5a93f0747b","status":"passed","time":{"start":1713399970219,"stop":1713399971728,"duration":1509}},{"uid":"ee41bf78112f7db2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1697//#testresult/ee41bf78112f7db2","status":"passed","time":{"start":1713313620130,"stop":1713313620988,"duration":858}},{"uid":"f87129fb355d1999","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1696//#testresult/f87129fb355d1999","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713252724225,"stop":1713252725338,"duration":1113}},{"uid":"2e2633e961032c27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1695//#testresult/2e2633e961032c27","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1713227148852,"stop":1713227149827,"duration":975}},{"uid":"2d929941c052c051","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1692//#testresult/2d929941c052c051","status":"passed","time":{"start":1713207745323,"stop":1713207746242,"duration":919}},{"uid":"7cca6c30992115d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1683//#testresult/7cca6c30992115d7","status":"passed","time":{"start":1713188272643,"stop":1713188273577,"duration":934}},{"uid":"f70098aeb7dbb41a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1682//#testresult/f70098aeb7dbb41a","status":"passed","time":{"start":1713149759606,"stop":1713149760722,"duration":1116}}]},"tags":[]},"source":"a8833afe753668a9.json","parameterValues":["BarnsleyMBCouncil","None","None"]}