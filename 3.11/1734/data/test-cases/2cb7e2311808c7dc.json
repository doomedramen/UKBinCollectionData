{"uid":"2cb7e2311808c7dc","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1714436804062,"stop":1714436805579,"duration":1517},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc7c64a4900>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc7c57b11d0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc7c64a4900>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc7c57b11d0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1714436804063,"stop":1714436804063,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1714436804063,"stop":1714436805579,"duration":1516},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az985-53"},{"name":"thread","value":"2637-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":127,"broken":0,"skipped":0,"passed":136,"unknown":0,"total":263},"items":[{"uid":"a5e4c199eed6d626","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1732//#testresult/a5e4c199eed6d626","status":"passed","time":{"start":1714350597869,"stop":1714350598575,"duration":706}},{"uid":"c809a8189997d4e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1724//#testresult/c809a8189997d4e4","status":"passed","time":{"start":1714264300985,"stop":1714264302007,"duration":1022}},{"uid":"9c82c29c4771ffed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1722//#testresult/9c82c29c4771ffed","status":"passed","time":{"start":1714234220986,"stop":1714234221557,"duration":571}},{"uid":"9a93fb1233a5430","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1714//#testresult/9a93fb1233a5430","status":"passed","time":{"start":1714232754798,"stop":1714232755532,"duration":734}},{"uid":"240d821130011959","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1713//#testresult/240d821130011959","status":"passed","time":{"start":1714177701697,"stop":1714177702291,"duration":594}},{"uid":"56959e06362f648c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1712//#testresult/56959e06362f648c","status":"passed","time":{"start":1714091276131,"stop":1714091276744,"duration":613}},{"uid":"403f616915adb3b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1711//#testresult/403f616915adb3b4","status":"passed","time":{"start":1714006513746,"stop":1714006514469,"duration":723}},{"uid":"88c2f4e3a6d6f2f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1710//#testresult/88c2f4e3a6d6f2f9","status":"passed","time":{"start":1713918506096,"stop":1713918506725,"duration":629}},{"uid":"258d4762dc5c4736","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1709//#testresult/258d4762dc5c4736","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1713832141784,"stop":1713832142529,"duration":745}},{"uid":"c9acbf6e98786c2b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1708//#testresult/c9acbf6e98786c2b","status":"passed","time":{"start":1713745748517,"stop":1713745749392,"duration":875}},{"uid":"e6c3be6edc40db4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1707//#testresult/e6c3be6edc40db4c","status":"passed","time":{"start":1713659395203,"stop":1713659395816,"duration":613}},{"uid":"5e3d3a308ebed076","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1706//#testresult/5e3d3a308ebed076","status":"passed","time":{"start":1713572860347,"stop":1713572861829,"duration":1482}},{"uid":"ddec02857ecdb9a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1702//#testresult/ddec02857ecdb9a2","status":"passed","time":{"start":1713486508729,"stop":1713486509721,"duration":992}},{"uid":"3dbd799e1b82673c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1698//#testresult/3dbd799e1b82673c","status":"passed","time":{"start":1713400055314,"stop":1713400056230,"duration":916}},{"uid":"fa3219e819ca34e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1697//#testresult/fa3219e819ca34e2","status":"passed","time":{"start":1713313674771,"stop":1713313675452,"duration":681}},{"uid":"25067a8b67390ea0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1696//#testresult/25067a8b67390ea0","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1713252784178,"stop":1713252785080,"duration":902}},{"uid":"c74d0cb643d26978","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1695//#testresult/c74d0cb643d26978","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1713227205694,"stop":1713227206299,"duration":605}},{"uid":"56c0505000e149e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1692//#testresult/56c0505000e149e9","status":"passed","time":{"start":1713207801127,"stop":1713207801764,"duration":637}},{"uid":"9a31e1759862c34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1683//#testresult/9a31e1759862c34","status":"passed","time":{"start":1713188336035,"stop":1713188336683,"duration":648}},{"uid":"9909273c0cee6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1682//#testresult/9909273c0cee6b","status":"passed","time":{"start":1713149811872,"stop":1713149812816,"duration":944}}]},"tags":[]},"source":"2cb7e2311808c7dc.json","parameterValues":["LiverpoolCityCouncil","None","None"]}