{"uid":"5d06cddd4efa25aa","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1715732913034,"stop":1715732922152,"duration":9118},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fefb8b58cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fefb7f20d10>, 'council': 'KingstonUponThamesCouncil', 'headless_mode': 'True', 'selenium_mode': 'None', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:68: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:60: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fefb8b58cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fefb7f20d10>, 'council': 'KingstonUponThamesCouncil', 'headless_mode': 'True', 'selenium_mode': 'None', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:68: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:60: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1715732913034,"stop":1715732913035,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1715732913035,"stop":1715732922152,"duration":9117},"status":"failed","statusMessage":"time data 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 15 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1242-422"},{"name":"thread","value":"2673-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":160,"broken":0,"skipped":0,"passed":128,"unknown":0,"total":288},"items":[{"uid":"64d4d253fc356c55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1776//#testresult/64d4d253fc356c55","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x563be8b48dc3 <unknown>\n#1 0x563be88374e7 <unknown>\n#2 0x563be888235d <unknown>\n#3 0x563be8882411 <unknown>\n#4 0x563be88c5774 <unknown>\n#5 0x563be88a447d <unknown>\n#6 0x563be88c2c29 <unknown>\n#7 0x563be88a41f3 <unknown>\n#8 0x563be887528a <unknown>\n#9 0x563be8875c5e <unknown>\n#10 0x563be8b0d0eb <unknown>\n#11 0x563be8b1103b <unknown>\n#12 0x563be8af9201 <unknown>\n#13 0x563be8b11ba2 <unknown>\n#14 0x563be8ade0bf <unknown>\n#15 0x563be8b37f18 <unknown>\n#16 0x563be8b380f0 <unknown>\n#17 0x563be8b47f14 <unknown>\n#18 0x7f2247694ac3 <unknown>","time":{"start":1715720041737,"stop":1715720060559,"duration":18822}},{"uid":"f94e727c9c619710","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1766//#testresult/f94e727c9c619710","status":"passed","time":{"start":1715646520615,"stop":1715646529309,"duration":8694}},{"uid":"c7cb6b31fd85e34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1765//#testresult/c7cb6b31fd85e34","status":"passed","time":{"start":1715560186436,"stop":1715560197310,"duration":10874}},{"uid":"6f3817bc9d1a5661","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1764//#testresult/6f3817bc9d1a5661","status":"passed","time":{"start":1715473852284,"stop":1715473859072,"duration":6788}},{"uid":"59e56eb272456510","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1763//#testresult/59e56eb272456510","status":"passed","time":{"start":1715387292948,"stop":1715387300408,"duration":7460}},{"uid":"8115343395089674","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1762//#testresult/8115343395089674","status":"passed","time":{"start":1715300891946,"stop":1715300901028,"duration":9082}},{"uid":"913a335443a1b3f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1760//#testresult/913a335443a1b3f8","status":"passed","time":{"start":1715285173554,"stop":1715285182703,"duration":9149}},{"uid":"aed107026db4a4cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1756//#testresult/aed107026db4a4cd","status":"passed","time":{"start":1715214788052,"stop":1715214794719,"duration":6667}},{"uid":"77035b014cda51f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1743//#testresult/77035b014cda51f3","status":"passed","time":{"start":1715041676188,"stop":1715041692398,"duration":16210}},{"uid":"e4ddeb4c32003c0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1742//#testresult/e4ddeb4c32003c0e","status":"passed","time":{"start":1714955330430,"stop":1714955337911,"duration":7481}},{"uid":"640705f89ca6d7f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1741//#testresult/640705f89ca6d7f5","status":"passed","time":{"start":1714869002746,"stop":1714869009746,"duration":7000}},{"uid":"4146211a28535896","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1740//#testresult/4146211a28535896","status":"passed","time":{"start":1714782442062,"stop":1714782453913,"duration":11851}},{"uid":"176a5756b778a5d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1739//#testresult/176a5756b778a5d4","status":"passed","time":{"start":1714696072671,"stop":1714696085473,"duration":12802}},{"uid":"beb740be4d460e52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1738//#testresult/beb740be4d460e52","status":"passed","time":{"start":1714609656086,"stop":1714609670834,"duration":14748}},{"uid":"4c6a24570b51d828","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1735//#testresult/4c6a24570b51d828","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 1 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1714523381280,"stop":1714523390170,"duration":8890}},{"uid":"ca1bdc98ae9e4b23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1734//#testresult/ca1bdc98ae9e4b23","status":"passed","time":{"start":1714436808689,"stop":1714436816281,"duration":7592}},{"uid":"370662f001f1d459","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1732//#testresult/370662f001f1d459","status":"passed","time":{"start":1714350546232,"stop":1714350559925,"duration":13693}},{"uid":"d31699c343cad20b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1724//#testresult/d31699c343cad20b","status":"passed","time":{"start":1714264249055,"stop":1714264258582,"duration":9527}},{"uid":"b51059a71b159b77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1722//#testresult/b51059a71b159b77","status":"passed","time":{"start":1714234225020,"stop":1714234233845,"duration":8825}},{"uid":"280245d1d17614de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1714//#testresult/280245d1d17614de","status":"passed","time":{"start":1714232764130,"stop":1714232771151,"duration":7021}}]},"tags":[]},"source":"5d06cddd4efa25aa.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}