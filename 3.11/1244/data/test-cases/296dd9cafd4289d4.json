{"uid":"296dd9cafd4289d4","name":"Validate Council Output [LondonBoroughHounslow-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2d5d41f2f80a2dfc213e6858543e98d5","time":{"start":1702603325983,"stop":1702603328891,"duration":2908},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f680ca42340>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f680a0c7210>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f680a0c7210>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f680ca42340>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f680a0c7210>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f680a0c7210>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: LondonBoroughHounslow","time":{"start":1702603325983,"stop":1702603325983,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from LondonBoroughHounslow using None and the None is set","time":{"start":1702603325984,"stop":1702603328888,"duration":2904},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"Then the result is valid json","time":{"start":1702603328889,"stop":1702603328889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"And the output should validate against the schema","time":{"start":1702603328889,"stop":1702603328891,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az569-231"},{"name":"thread","value":"2940-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LondonBoroughHounslow"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":77,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":77},"items":[{"uid":"cb53a3b6894b7a7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/cb53a3b6894b7a7b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540163165,"stop":1702540165913,"duration":2748}},{"uid":"1ba277248969ee8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/1ba277248969ee8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516826047,"stop":1702516828978,"duration":2931}},{"uid":"df1ae80ccebaa7ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/df1ae80ccebaa7ef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447721461,"stop":1702447723755,"duration":2294}},{"uid":"8db26ca01b0e7d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/8db26ca01b0e7d6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430338325,"stop":1702430341113,"duration":2788}},{"uid":"c43c1bfaf1d245bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/c43c1bfaf1d245bd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366490502,"stop":1702366493602,"duration":3100}},{"uid":"bc817558026c3242","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/bc817558026c3242","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343968806,"stop":1702343971171,"duration":2365}},{"uid":"6ad0460f58850b77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/6ad0460f58850b77","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257546452,"stop":1702257549037,"duration":2585}},{"uid":"dfe1a25f80c8f47e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/dfe1a25f80c8f47e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171440182,"stop":1702171442843,"duration":2661}},{"uid":"e67230b0ba79f38b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/e67230b0ba79f38b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084637904,"stop":1702084670363,"duration":32459}},{"uid":"8be2510c66183c3c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/8be2510c66183c3c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066734072,"stop":1702066736981,"duration":2909}},{"uid":"c2a7272a3ef63503","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/c2a7272a3ef63503","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054377816,"stop":1702054380803,"duration":2987}},{"uid":"b89f4308eb30ba69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/b89f4308eb30ba69","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054413429,"stop":1702054415888,"duration":2459}},{"uid":"208b6564fb239c8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/208b6564fb239c8a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998381965,"stop":1701998384921,"duration":2956}},{"uid":"345152ee45c98738","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/345152ee45c98738","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990379474,"stop":1701990382271,"duration":2797}},{"uid":"cab8d2332bca6dd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/cab8d2332bca6dd7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990341051,"stop":1701990343616,"duration":2565}},{"uid":"b3db3379c489916a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/b3db3379c489916a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701943129911,"stop":1701943133732,"duration":3821}},{"uid":"f3fbdc80ba4f4b67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/f3fbdc80ba4f4b67","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936681571,"stop":1701936685846,"duration":4275}},{"uid":"3d656c9a5b7fd206","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/3d656c9a5b7fd206","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936588834,"stop":1701936591451,"duration":2617}},{"uid":"a18eda90b845b1d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/a18eda90b845b1d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701912159608,"stop":1701912163243,"duration":3635}},{"uid":"a3e007404731e273","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/a3e007404731e273","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904990720,"stop":1701904993204,"duration":2484}}]},"tags":[]},"source":"296dd9cafd4289d4.json","parameterValues":["LondonBoroughHounslow","None","None"]}