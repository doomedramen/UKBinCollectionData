{"uid":"bfb697debb6e47a4","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1699579040934,"stop":1699579045537,"duration":4603},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8dcef005e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8dbb286550>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8dbb286550>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8dcef005e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8dbb286550>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8dbb286550>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1699579040935,"stop":1699579040935,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1699579040935,"stop":1699579045535,"duration":4600},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1699579045535,"stop":1699579045535,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1699579045535,"stop":1699579045537,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1210-362"},{"name":"thread","value":"2706-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"f3261f7beea3060b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/f3261f7beea3060b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492820819,"stop":1699492823127,"duration":2308}},{"uid":"61c67be183135477","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/61c67be183135477","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481621819,"stop":1699481626276,"duration":4457}},{"uid":"8032c93c134d903","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/8032c93c134d903","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481581566,"stop":1699481584048,"duration":2482}},{"uid":"14021b0a31880236","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/14021b0a31880236","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445252936,"stop":1699445255171,"duration":2235}},{"uid":"c76df450ab042702","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/c76df450ab042702","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406325723,"stop":1699406331270,"duration":5547}},{"uid":"364efb73ce1d5594","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1114//#testresult/364efb73ce1d5594","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699320178447,"stop":1699320181309,"duration":2862}},{"uid":"7154274b547559b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1113//#testresult/7154274b547559b9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233809679,"stop":1699233816732,"duration":7053}},{"uid":"a32ce905302193ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1111//#testresult/a32ce905302193ed","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699171263819,"stop":1699171268051,"duration":4232}},{"uid":"567b956c03d449c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1112//#testresult/567b956c03d449c4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699170978027,"stop":1699170980009,"duration":1982}}]},"tags":[]},"source":"bfb697debb6e47a4.json","parameterValues":["WiltshireCouncil","None","None"]}