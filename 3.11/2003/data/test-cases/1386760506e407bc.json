{"uid":"1386760506e407bc","name":"Validate Council Output [BuckinghamshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d3931a358fdfe26e1ace17c1805a29ca","time":{"start":1722556881284,"stop":1722557017217,"duration":135933},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x557990dac6ba <unknown>\n#1 0x557990a7c730 <unknown>\n#2 0x557990a74761 <unknown>\n#3 0x557990a648f9 <unknown>\n#4 0x557990a66684 <unknown>\n#5 0x557990a64bc5 <unknown>\n#6 0x557990a64426 <unknown>\n#7 0x557990a6431e <unknown>\n#8 0x557990a6264c <unknown>\n#9 0x557990a629ca <unknown>\n#10 0x557990a7f051 <unknown>\n#11 0x557990b0dcc5 <unknown>\n#12 0x557990aeea52 <unknown>\n#13 0x557990b0d1ca <unknown>\n#14 0x557990aee7f3 <unknown>\n#15 0x557990abeec9 <unknown>\n#16 0x557990abf91e <unknown>\n#17 0x557990d729eb <unknown>\n#18 0x557990d76972 <unknown>\n#19 0x557990d5fe15 <unknown>\n#20 0x557990d77502 <unknown>\n#21 0x557990d44d2f <unknown>\n#22 0x557990d9b578 <unknown>\n#23 0x557990d9b750 <unknown>\n#24 0x557990dab48c <unknown>\n#25 0x7fa11f736a94 <unknown>\n#26 0x7fa11f7c3a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fc2b352a340>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuckinghamshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc2b33a1610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/BuckinghamshireCouncil.py:47: in parse_data\n    driver.get(page)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc2b33a1a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x557990dab48c \\\\u003Cunknown>\\\\n#25 0x7fa11f736a94 \\\\u003Cunknown>\\\\n#26 0x7fa11f7c3a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.72)\nE       Stacktrace:\nE       #0 0x557990dac6ba <unknown>\nE       #1 0x557990a7c730 <unknown>\nE       #2 0x557990a74761 <unknown>\nE       #3 0x557990a648f9 <unknown>\nE       #4 0x557990a66684 <unknown>\nE       #5 0x557990a64bc5 <unknown>\nE       #6 0x557990a64426 <unknown>\nE       #7 0x557990a6431e <unknown>\nE       #8 0x557990a6264c <unknown>\nE       #9 0x557990a629ca <unknown>\nE       #10 0x557990a7f051 <unknown>\nE       #11 0x557990b0dcc5 <unknown>\nE       #12 0x557990aeea52 <unknown>\nE       #13 0x557990b0d1ca <unknown>\nE       #14 0x557990aee7f3 <unknown>\nE       #15 0x557990abeec9 <unknown>\nE       #16 0x557990abf91e <unknown>\nE       #17 0x557990d729eb <unknown>\nE       #18 0x557990d76972 <unknown>\nE       #19 0x557990d5fe15 <unknown>\nE       #20 0x557990d77502 <unknown>\nE       #21 0x557990d44d2f <unknown>\nE       #22 0x557990d9b578 <unknown>\nE       #23 0x557990d9b750 <unknown>\nE       #24 0x557990dab48c <unknown>\nE       #25 0x7fa11f736a94 <unknown>\nE       #26 0x7fa11f7c3a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x557990dac6ba <unknown>\n#1 0x557990a7c730 <unknown>\n#2 0x557990a74761 <unknown>\n#3 0x557990a648f9 <unknown>\n#4 0x557990a66684 <unknown>\n#5 0x557990a64bc5 <unknown>\n#6 0x557990a64426 <unknown>\n#7 0x557990a6431e <unknown>\n#8 0x557990a6264c <unknown>\n#9 0x557990a629ca <unknown>\n#10 0x557990a7f051 <unknown>\n#11 0x557990b0dcc5 <unknown>\n#12 0x557990aeea52 <unknown>\n#13 0x557990b0d1ca <unknown>\n#14 0x557990aee7f3 <unknown>\n#15 0x557990abeec9 <unknown>\n#16 0x557990abf91e <unknown>\n#17 0x557990d729eb <unknown>\n#18 0x557990d76972 <unknown>\n#19 0x557990d5fe15 <unknown>\n#20 0x557990d77502 <unknown>\n#21 0x557990d44d2f <unknown>\n#22 0x557990d9b578 <unknown>\n#23 0x557990d9b750 <unknown>\n#24 0x557990dab48c <unknown>\n#25 0x7fa11f736a94 <unknown>\n#26 0x7fa11f7c3a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fc2b352a340>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuckinghamshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fc2b33a1610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/BuckinghamshireCouncil.py:47: in parse_data\n    driver.get(page)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc2b33a1a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x557990dab48c \\\\u003Cunknown>\\\\n#25 0x7fa11f736a94 \\\\u003Cunknown>\\\\n#26 0x7fa11f7c3a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.72)\nE       Stacktrace:\nE       #0 0x557990dac6ba <unknown>\nE       #1 0x557990a7c730 <unknown>\nE       #2 0x557990a74761 <unknown>\nE       #3 0x557990a648f9 <unknown>\nE       #4 0x557990a66684 <unknown>\nE       #5 0x557990a64bc5 <unknown>\nE       #6 0x557990a64426 <unknown>\nE       #7 0x557990a6431e <unknown>\nE       #8 0x557990a6264c <unknown>\nE       #9 0x557990a629ca <unknown>\nE       #10 0x557990a7f051 <unknown>\nE       #11 0x557990b0dcc5 <unknown>\nE       #12 0x557990aeea52 <unknown>\nE       #13 0x557990b0d1ca <unknown>\nE       #14 0x557990aee7f3 <unknown>\nE       #15 0x557990abeec9 <unknown>\nE       #16 0x557990abf91e <unknown>\nE       #17 0x557990d729eb <unknown>\nE       #18 0x557990d76972 <unknown>\nE       #19 0x557990d5fe15 <unknown>\nE       #20 0x557990d77502 <unknown>\nE       #21 0x557990d44d2f <unknown>\nE       #22 0x557990d9b578 <unknown>\nE       #23 0x557990d9b750 <unknown>\nE       #24 0x557990dab48c <unknown>\nE       #25 0x7fa11f736a94 <unknown>\nE       #26 0x7fa11f7c3a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1722556881284,"stop":1722556881285,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722556881285,"stop":1722557017217,"duration":135932},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x557990dac6ba <unknown>\n#1 0x557990a7c730 <unknown>\n#2 0x557990a74761 <unknown>\n#3 0x557990a648f9 <unknown>\n#4 0x557990a66684 <unknown>\n#5 0x557990a64bc5 <unknown>\n#6 0x557990a64426 <unknown>\n#7 0x557990a6431e <unknown>\n#8 0x557990a6264c <unknown>\n#9 0x557990a629ca <unknown>\n#10 0x557990a7f051 <unknown>\n#11 0x557990b0dcc5 <unknown>\n#12 0x557990aeea52 <unknown>\n#13 0x557990b0d1ca <unknown>\n#14 0x557990aee7f3 <unknown>\n#15 0x557990abeec9 <unknown>\n#16 0x557990abf91e <unknown>\n#17 0x557990d729eb <unknown>\n#18 0x557990d76972 <unknown>\n#19 0x557990d5fe15 <unknown>\n#20 0x557990d77502 <unknown>\n#21 0x557990d44d2f <unknown>\n#22 0x557990d9b578 <unknown>\n#23 0x557990d9b750 <unknown>\n#24 0x557990dab48c <unknown>\n#25 0x7fa11f736a94 <unknown>\n#26 0x7fa11f7c3a34 __clone\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x557990dac6ba <unknown>\n#1 0x557990a7c730 <unknown>\n#2 0x557990a74761 <unknown>\n#3 0x557990a648f9 <unknown>\n#4 0x557990a66684 <unknown>\n#5 0x557990a64bc5 <unknown>\n#6 0x557990a64426 <unknown>\n#7 0x557990a6431e <unknown>\n#8 0x557990a6264c <unknown>\n#9 0x557990a629ca <unknown>\n#10 0x557990a7f051 <unknown>\n#11 0x557990b0dcc5 <unknown>\n#12 0x557990aeea52 <unknown>\n#13 0x557990b0d1ca <unknown>\n#14 0x557990aee7f3 <unknown>\n#15 0x557990abeec9 <unknown>\n#16 0x557990abf91e <unknown>\n#17 0x557990d729eb <unknown>\n#18 0x557990d76972 <unknown>\n#19 0x557990d5fe15 <unknown>\n#20 0x557990d77502 <unknown>\n#21 0x557990d44d2f <unknown>\n#22 0x557990d9b578 <unknown>\n#23 0x557990d9b750 <unknown>\n#24 0x557990dab48c <unknown>\n#25 0x7fa11f736a94 <unknown>\n#26 0x7fa11f7c3a34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ec76f8dad0db91ab","name":"stdout","source":"ec76f8dad0db91ab.txt","type":"text/plain","size":960}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1144-461"},{"name":"thread","value":"2854-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BuckinghamshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":123,"unknown":0,"total":133},"items":[{"uid":"28272c74d4faea7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/28272c74d4faea7","status":"passed","time":{"start":1722470477527,"stop":1722470496898,"duration":19371}},{"uid":"7d57ccd8eaa1903b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/7d57ccd8eaa1903b","status":"passed","time":{"start":1722384090251,"stop":1722384111304,"duration":21053}},{"uid":"3d7f101b813676b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/3d7f101b813676b1","status":"passed","time":{"start":1722297681408,"stop":1722297704415,"duration":23007}},{"uid":"34ea6028bc1a0edd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/34ea6028bc1a0edd","status":"passed","time":{"start":1722211272612,"stop":1722211294870,"duration":22258}},{"uid":"47e0dc4ecd4f9029","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/47e0dc4ecd4f9029","status":"passed","time":{"start":1722124874270,"stop":1722124905382,"duration":31112}},{"uid":"23b69ee8f08162ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/23b69ee8f08162ef","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1722038477764,"stop":1722038503851,"duration":26087}},{"uid":"c1023775a8d35fd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/c1023775a8d35fd8","status":"passed","time":{"start":1721952075298,"stop":1721952096901,"duration":21603}},{"uid":"498229d5e09f8600","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/498229d5e09f8600","status":"passed","time":{"start":1721865670985,"stop":1721865689718,"duration":18733}},{"uid":"20bff4fdfc9d9243","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/20bff4fdfc9d9243","status":"passed","time":{"start":1721779270827,"stop":1721779292615,"duration":21788}},{"uid":"40e03b94f9d9cea7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/40e03b94f9d9cea7","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1721692877370,"stop":1721692904219,"duration":26849}},{"uid":"9328f2fb11fed85e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/9328f2fb11fed85e","status":"passed","time":{"start":1721606492290,"stop":1721606511786,"duration":19496}},{"uid":"8d9f22dbd21428cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/8d9f22dbd21428cf","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1721520084933,"stop":1721520109214,"duration":24281}},{"uid":"1f3e299238ad0212","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/1f3e299238ad0212","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1721433687183,"stop":1721433712158,"duration":24975}},{"uid":"713e921324eca046","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/713e921324eca046","status":"passed","time":{"start":1721371794345,"stop":1721371812980,"duration":18635}},{"uid":"25b351a4d37e1514","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/25b351a4d37e1514","status":"passed","time":{"start":1721262549152,"stop":1721262566647,"duration":17495}},{"uid":"d61b97b18acd8f2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/d61b97b18acd8f2d","status":"passed","time":{"start":1721176193191,"stop":1721176212555,"duration":19364}},{"uid":"7dc2023eef1e4e21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/7dc2023eef1e4e21","status":"passed","time":{"start":1721089771723,"stop":1721089793753,"duration":22030}},{"uid":"8dbb228e6220107f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1982//#testresult/8dbb228e6220107f","status":"passed","time":{"start":1721003455572,"stop":1721003473973,"duration":18401}},{"uid":"707350a4d2f957e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/707350a4d2f957e6","status":"passed","time":{"start":1720917180687,"stop":1720917199673,"duration":18986}},{"uid":"3ec8aa55e6366bba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/3ec8aa55e6366bba","status":"passed","time":{"start":1720830566767,"stop":1720830584078,"duration":17311}}]},"tags":[]},"source":"1386760506e407bc.json","parameterValues":["BuckinghamshireCouncil"]}