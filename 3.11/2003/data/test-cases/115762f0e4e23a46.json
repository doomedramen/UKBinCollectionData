{"uid":"115762f0e4e23a46","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1722558372316,"stop":1722558377511,"duration":5195},"status":"failed","statusMessage":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f879afc2480>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f879ae453d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 22nd August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f879afc2480>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f879ae453d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 22nd August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1722558372316,"stop":1722558372316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722558372317,"stop":1722558377511,"duration":5194},"status":"failed","statusMessage":"time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"5fcb9add38bb61f0","name":"log","source":"5fcb9add38bb61f0.txt","type":"text/plain","size":133},{"uid":"dfba7eb67ce602a7","name":"stdout","source":"dfba7eb67ce602a7.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1144-461"},{"name":"thread","value":"2851-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":42,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":61},"items":[{"uid":"6c056a50f2b17cb1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/6c056a50f2b17cb1","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722471833211,"stop":1722471835365,"duration":2154}},{"uid":"ad94e3adca3f998b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/ad94e3adca3f998b","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722385503542,"stop":1722385512995,"duration":9453}},{"uid":"87000a600976e4b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/87000a600976e4b3","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722299045451,"stop":1722299056292,"duration":10841}},{"uid":"a5be7c8f412bd583","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/a5be7c8f412bd583","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722212635153,"stop":1722212647116,"duration":11963}},{"uid":"49728648030b00ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/49728648030b00ca","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722126162353,"stop":1722126167999,"duration":5646}},{"uid":"c3c2a7699c173f1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/c3c2a7699c173f1e","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722039920112,"stop":1722039936560,"duration":16448}},{"uid":"10b6ec7d125fef0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/10b6ec7d125fef0f","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721953480038,"stop":1721953493346,"duration":13308}},{"uid":"4633912caf059a56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/4633912caf059a56","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721867099773,"stop":1721867120014,"duration":20241}},{"uid":"979e8334357f171f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/979e8334357f171f","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721780665568,"stop":1721780682567,"duration":16999}},{"uid":"bb4f4fb8be190dad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/bb4f4fb8be190dad","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721694194476,"stop":1721694203511,"duration":9035}},{"uid":"2cb96d086f465c7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/2cb96d086f465c7e","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721607775341,"stop":1721607800106,"duration":24765}},{"uid":"7bb6f39dbb974ad2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/7bb6f39dbb974ad2","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721521388095,"stop":1721521394765,"duration":6670}},{"uid":"bfd1a38decec3965","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/bfd1a38decec3965","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721435008002,"stop":1721435156364,"duration":148362}},{"uid":"c7540fea93fec302","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/c7540fea93fec302","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721373074397,"stop":1721373090776,"duration":16379}},{"uid":"8ea0319445335df2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/8ea0319445335df2","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721264059909,"stop":1721264075113,"duration":15204}},{"uid":"ceed2863ddd0da99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/ceed2863ddd0da99","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721177525557,"stop":1721177536593,"duration":11036}},{"uid":"21203f9bcfca55ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/21203f9bcfca55ed","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721091093454,"stop":1721091111308,"duration":17854}},{"uid":"e7339bfd0a8f7168","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1982//#testresult/e7339bfd0a8f7168","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1721004833217,"stop":1721004840315,"duration":7098}},{"uid":"5515542f0b724173","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/5515542f0b724173","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720918502801,"stop":1720918524931,"duration":22130}},{"uid":"9de4735a0ed487cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/9de4735a0ed487cc","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720831781726,"stop":1720831923709,"duration":141983}}]},"tags":[]},"source":"115762f0e4e23a46.json","parameterValues":["UttlesfordDistrictCouncil"]}