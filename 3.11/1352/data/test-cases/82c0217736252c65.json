{"uid":"82c0217736252c65","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1704301406266,"stop":1704301408013,"duration":1747},"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f3903b3bf60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3903275f90>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f3903b3bf60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3903275f90>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1704301406266,"stop":1704301406266,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1704301406266,"stop":1704301408013,"duration":1747},"status":"failed","statusMessage":"time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1385-635"},{"name":"thread","value":"2682-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":106,"broken":0,"skipped":0,"passed":17,"unknown":0,"total":123},"items":[{"uid":"affde424658a4327","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/affde424658a4327","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244733351,"stop":1704244734118,"duration":767}},{"uid":"f4bb82c714e33436","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/f4bb82c714e33436","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704180250291,"stop":1704180251207,"duration":916}},{"uid":"c89fad94e32c9aa6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1346//#testresult/c89fad94e32c9aa6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704158286112,"stop":1704158286956,"duration":844}},{"uid":"c7269f7e5bbde079","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1345//#testresult/c7269f7e5bbde079","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704114623352,"stop":1704114624689,"duration":1337}},{"uid":"d98961f046fd9190","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1343//#testresult/d98961f046fd9190","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704113735832,"stop":1704113736736,"duration":904}},{"uid":"831d3b0ac1b23363","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/831d3b0ac1b23363","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704113672450,"stop":1704113674227,"duration":1777}},{"uid":"c73ee57fdd2ab46d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/c73ee57fdd2ab46d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112249892,"stop":1704112250514,"duration":622}},{"uid":"cf3dbfa1043763a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/cf3dbfa1043763a4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112106679,"stop":1704112107554,"duration":875}},{"uid":"918f259deea0772","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/918f259deea0772","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111868787,"stop":1704111869660,"duration":873}},{"uid":"19d4475d4bf074c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/19d4475d4bf074c1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111868289,"stop":1704111869363,"duration":1074}},{"uid":"27abaaca5fe9d2a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/27abaaca5fe9d2a1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111503251,"stop":1704111504028,"duration":777}},{"uid":"945a93f471c4e029","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/945a93f471c4e029","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111352749,"stop":1704111353831,"duration":1082}},{"uid":"175490fa9fe95a9d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/175490fa9fe95a9d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704100021696,"stop":1704100022548,"duration":852}},{"uid":"25fa637c5a63d9a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/25fa637c5a63d9a5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704072281168,"stop":1704072282093,"duration":925}},{"uid":"fbed0a44570c03db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/fbed0a44570c03db","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1704050418081,"stop":1704050419849,"duration":1768}},{"uid":"5a76b2c2f5186bd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/5a76b2c2f5186bd3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704043922713,"stop":1704043923436,"duration":723}},{"uid":"232c2eca00ac1803","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/232c2eca00ac1803","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703985771901,"stop":1703985772765,"duration":864}},{"uid":"fa892fc30d0f54bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/fa892fc30d0f54bb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703898958102,"stop":1703898958627,"duration":525}},{"uid":"87c63caaa016cb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/87c63caaa016cb7","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703853469840,"stop":1703853471662,"duration":1822}},{"uid":"faec57c754a5779","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/faec57c754a5779","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703851101786,"stop":1703851103388,"duration":1602}}]},"tags":[]},"source":"82c0217736252c65.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}