{"uid":"a91127926f5e3daa","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1705537607624,"stop":1705537609184,"duration":1560},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fba8a4a0cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fba8a8190d0>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7fba8a434bd0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fba8a4a0cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fba8a8190d0>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7fba8a434bd0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1705537607624,"stop":1705537607625,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1705537607626,"stop":1705537609184,"duration":1558},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1024-70"},{"name":"thread","value":"2736-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":161,"unknown":0,"total":165},"items":[{"uid":"aa2f9c044d293462","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1500//#testresult/aa2f9c044d293462","status":"passed","time":{"start":1705451217037,"stop":1705451221550,"duration":4513}},{"uid":"57c07ffddcb2ae55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1499//#testresult/57c07ffddcb2ae55","status":"passed","time":{"start":1705364811504,"stop":1705364815576,"duration":4072}},{"uid":"4051b032768d5aad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1492//#testresult/4051b032768d5aad","status":"passed","time":{"start":1705295551593,"stop":1705295552791,"duration":1198}},{"uid":"da1038343db1e660","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1491//#testresult/da1038343db1e660","status":"passed","time":{"start":1705295117287,"stop":1705295120676,"duration":3389}},{"uid":"38d8659a49b2f7b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1490//#testresult/38d8659a49b2f7b2","status":"passed","time":{"start":1705278518618,"stop":1705278522789,"duration":4171}},{"uid":"79bf4c84f50f53eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1485//#testresult/79bf4c84f50f53eb","status":"passed","time":{"start":1705192186383,"stop":1705192187491,"duration":1108}},{"uid":"1f6f05932cc643b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1484//#testresult/1f6f05932cc643b5","status":"passed","time":{"start":1705105649688,"stop":1705105651725,"duration":2037}},{"uid":"9a5ca7c417b929cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1482//#testresult/9a5ca7c417b929cd","status":"passed","time":{"start":1705019225228,"stop":1705019226542,"duration":1314}},{"uid":"a3a6014cff268732","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1478//#testresult/a3a6014cff268732","status":"passed","time":{"start":1704932816023,"stop":1704932817347,"duration":1324}},{"uid":"d88c23d2ad84890e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1472//#testresult/d88c23d2ad84890e","status":"passed","time":{"start":1704846427235,"stop":1704846428610,"duration":1375}},{"uid":"597f1e1bb1d5a4e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1456//#testresult/597f1e1bb1d5a4e7","status":"passed","time":{"start":1704760053708,"stop":1704760054677,"duration":969}},{"uid":"3988bb50d37cbcb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1452//#testresult/3988bb50d37cbcb7","status":"passed","time":{"start":1704711464742,"stop":1704711466136,"duration":1394}},{"uid":"bec1c9d76cf2800e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1450//#testresult/bec1c9d76cf2800e","status":"passed","time":{"start":1704710670528,"stop":1704710672219,"duration":1691}},{"uid":"3445d6d395aa06c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1448//#testresult/3445d6d395aa06c6","status":"passed","time":{"start":1704710051118,"stop":1704710052941,"duration":1823}},{"uid":"466adb68b25a9e35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1446//#testresult/466adb68b25a9e35","status":"passed","time":{"start":1704709528185,"stop":1704709529843,"duration":1658}},{"uid":"b500ff8ab07127b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1443//#testresult/b500ff8ab07127b4","status":"passed","time":{"start":1704704039485,"stop":1704704041127,"duration":1642}},{"uid":"fa1404497b281b6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1441//#testresult/fa1404497b281b6c","status":"passed","time":{"start":1704673674518,"stop":1704673675697,"duration":1179}},{"uid":"33eed43786e3750a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1426//#testresult/33eed43786e3750a","status":"passed","time":{"start":1704615371602,"stop":1704615372488,"duration":886}},{"uid":"40cb10a8006f040e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1423//#testresult/40cb10a8006f040e","status":"passed","time":{"start":1704614758968,"stop":1704614760085,"duration":1117}},{"uid":"d5d82e98fb94d6da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1420//#testresult/d5d82e98fb94d6da","status":"passed","time":{"start":1704587393539,"stop":1704587394631,"duration":1092}}]},"tags":[]},"source":"a91127926f5e3daa.json","parameterValues":["AylesburyValeCouncil","None","None"]}