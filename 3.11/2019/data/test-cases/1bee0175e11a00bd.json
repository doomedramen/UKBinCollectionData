{"uid":"1bee0175e11a00bd","name":"Validate Council Output [SouthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"efde6c2c8e15955ad5fa48845f3c2c06","time":{"start":1723163047544,"stop":1723163049447,"duration":1903},"status":"failed","statusMessage":"KeyError: 'result'","statusTrace":"fixturefunc = <function scrape_step at 0x7f63c214a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f63c1fbded0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f63c149eb10>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n>       json_result = json.loads(response.text)[\"result\"]\nE       KeyError: 'result'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:85: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"KeyError: 'result'","statusTrace":"fixturefunc = <function scrape_step at 0x7f63c214a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f63c1fbded0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f63c149eb10>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n>       json_result = json.loads(response.text)[\"result\"]\nE       KeyError: 'result'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:85: KeyError","steps":[{"name":"Given the council","time":{"start":1723163047544,"stop":1723163047545,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723163047545,"stop":1723163049447,"duration":1902},"status":"failed","statusMessage":"'result'","statusTrace":"KeyError: 'result'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f1b8db5df6b1ebcf","name":"stdout","source":"f1b8db5df6b1ebcf.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az2022-775"},{"name":"thread","value":"2766-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthTynesideCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":160,"broken":0,"skipped":0,"passed":111,"unknown":0,"total":271},"items":[{"uid":"d356b42265f6f3b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2014//#testresult/d356b42265f6f3b4","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1723076580858,"stop":1723076582116,"duration":1258}},{"uid":"8a13e67e29ba8baf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/8a13e67e29ba8baf","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722990001741,"stop":1722990003052,"duration":1311}},{"uid":"aee6766ae2d594dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/aee6766ae2d594dd","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722903748800,"stop":1722903749339,"duration":539}},{"uid":"24e6fe3654632021","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/24e6fe3654632021","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722817503933,"stop":1722817505331,"duration":1398}},{"uid":"43162ebdfdc7a23d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/43162ebdfdc7a23d","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722730979937,"stop":1722730981506,"duration":1569}},{"uid":"16a373def21cbeb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/16a373def21cbeb5","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722644469839,"stop":1722644470196,"duration":357}},{"uid":"c20fe416495bd3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/c20fe416495bd3f","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1722558089277,"stop":1722558090771,"duration":1494}},{"uid":"fd3ee6b5188a1a9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/fd3ee6b5188a1a9a","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722471578284,"stop":1722471579331,"duration":1047}},{"uid":"757df4058b2e97c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/757df4058b2e97c2","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722385191318,"stop":1722385192420,"duration":1102}},{"uid":"b54ddd08f8e4f3ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/b54ddd08f8e4f3ec","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722298916189,"stop":1722298916690,"duration":501}},{"uid":"9dcd2097efdba04e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/9dcd2097efdba04e","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722212471115,"stop":1722212471534,"duration":419}},{"uid":"a1b7f8374b67628d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/a1b7f8374b67628d","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722126018628,"stop":1722126019050,"duration":422}},{"uid":"9ebe5d67013a2025","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/9ebe5d67013a2025","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722039761719,"stop":1722039762214,"duration":495}},{"uid":"d711a688737fdec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/d711a688737fdec","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721953325203,"stop":1721953325769,"duration":566}},{"uid":"5b34c5de848cb071","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/5b34c5de848cb071","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721866802703,"stop":1721866804051,"duration":1348}},{"uid":"2a3d286a59b6c054","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/2a3d286a59b6c054","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721780498422,"stop":1721780498936,"duration":514}},{"uid":"b3b4d4dfe13f1c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/b3b4d4dfe13f1c5","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721694042890,"stop":1721694043305,"duration":415}},{"uid":"b75fcfa6e582f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/b75fcfa6e582f6","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721607466626,"stop":1721607467183,"duration":557}},{"uid":"324986f93542e1b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/324986f93542e1b6","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721521236325,"stop":1721521236781,"duration":456}},{"uid":"959ac462b5b3a46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/959ac462b5b3a46","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1721434724033,"stop":1721434724424,"duration":391}}]},"tags":[]},"source":"1bee0175e11a00bd.json","parameterValues":["SouthTynesideCouncil"]}