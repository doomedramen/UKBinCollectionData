{"uid":"a4aeba75c75f4d7e","name":"Validate Council Output [GlasgowCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"afbda54786d9dbd764f92d2f8c30a5fd","time":{"start":1704301369766,"stop":1704301370817,"duration":1051},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f715e0f13a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f715d4c7e90>, 'council': 'GlasgowCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f715e47afd0>\npage = <Response [500]>\nkwargs = {'paon': None, 'postcode': None, 'uprn': None, 'url': 'https://www.glasgow.gov.uk/forms/refuseandrecyclingcalendar/PrintCalendar.aspx?UPRN=906700034497', ...}\nsoup = <!DOCTYPE html>\n\n<html>\n<head>\n<title>The given key was not present in the dictionary.</title>\n<meta content=\"width=de...onsider using &lt;customErrors mode=\"On\"/&gt; or &lt;customErrors mode=\"RemoteOnly\"/&gt; in production environments.-->\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f715e0f13a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f715d4c7e90>, 'council': 'GlasgowCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f715e47afd0>\npage = <Response [500]>\nkwargs = {'paon': None, 'postcode': None, 'uprn': None, 'url': 'https://www.glasgow.gov.uk/forms/refuseandrecyclingcalendar/PrintCalendar.aspx?UPRN=906700034497', ...}\nsoup = <!DOCTYPE html>\n\n<html>\n<head>\n<title>The given key was not present in the dictionary.</title>\n<meta content=\"width=de...onsider using &lt;customErrors mode=\"On\"/&gt; or &lt;customErrors mode=\"RemoteOnly\"/&gt; in production environments.-->\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council: GlasgowCityCouncil","time":{"start":1704301369766,"stop":1704301369766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GlasgowCityCouncil using None and the None is set","time":{"start":1704301369766,"stop":1704301370817,"duration":1051},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1385-635"},{"name":"thread","value":"2671-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":110,"unknown":0,"total":123},"items":[{"uid":"5c87aa02dfbf60e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/5c87aa02dfbf60e4","status":"passed","time":{"start":1704245004670,"stop":1704245006826,"duration":2156}},{"uid":"5085c1025f4ee669","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/5085c1025f4ee669","status":"passed","time":{"start":1704180530080,"stop":1704180532446,"duration":2366}},{"uid":"f23a3d5969ffbba8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1346//#testresult/f23a3d5969ffbba8","status":"passed","time":{"start":1704158310696,"stop":1704158312822,"duration":2126}},{"uid":"398e6864fe3a4e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1345//#testresult/398e6864fe3a4e45","status":"passed","time":{"start":1704114627070,"stop":1704114629343,"duration":2273}},{"uid":"e90a6b2b67daa8c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1343//#testresult/e90a6b2b67daa8c3","status":"passed","time":{"start":1704114077824,"stop":1704114080282,"duration":2458}},{"uid":"745034c50cb077d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/745034c50cb077d1","status":"passed","time":{"start":1704113677192,"stop":1704113679213,"duration":2021}},{"uid":"b62ab3a6f9110702","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/b62ab3a6f9110702","status":"passed","time":{"start":1704112250174,"stop":1704112252392,"duration":2218}},{"uid":"cb93c88b265429cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/cb93c88b265429cc","status":"passed","time":{"start":1704112102530,"stop":1704112104890,"duration":2360}},{"uid":"dceeaf517b61c39b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/dceeaf517b61c39b","status":"passed","time":{"start":1704112217003,"stop":1704112219345,"duration":2342}},{"uid":"3a337c9e3ae5765f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/3a337c9e3ae5765f","status":"passed","time":{"start":1704111922285,"stop":1704111924584,"duration":2299}},{"uid":"33c8df450167d3c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/33c8df450167d3c9","status":"passed","time":{"start":1704111523639,"stop":1704111525816,"duration":2177}},{"uid":"8320ce917f8e8232","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/8320ce917f8e8232","status":"passed","time":{"start":1704111350584,"stop":1704111352949,"duration":2365}},{"uid":"f0366ed8d93aa1db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/f0366ed8d93aa1db","status":"passed","time":{"start":1704099962581,"stop":1704099965032,"duration":2451}},{"uid":"f9ecaa153d8b82d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/f9ecaa153d8b82d1","status":"passed","time":{"start":1704072307650,"stop":1704072309555,"duration":1905}},{"uid":"94ebacd689961f72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/94ebacd689961f72","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704050748469,"stop":1704050750817,"duration":2348}},{"uid":"b5fc69db642ef7ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/b5fc69db642ef7ec","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704043873762,"stop":1704043875859,"duration":2097}},{"uid":"54bec7b03b3302ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/54bec7b03b3302ff","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703985749987,"stop":1703985752362,"duration":2375}},{"uid":"efdd4f586d868689","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/efdd4f586d868689","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703898908476,"stop":1703898910502,"duration":2026}},{"uid":"14f1032ae97de0d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/14f1032ae97de0d9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853461970,"stop":1703853464849,"duration":2879}},{"uid":"674e36c59fa56673","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/674e36c59fa56673","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851080207,"stop":1703851082621,"duration":2414}}]},"tags":[]},"source":"a4aeba75c75f4d7e.json","parameterValues":["GlasgowCityCouncil","None","None"]}