{"uid":"dd727c55b959a3ca","name":"Validate Council Output [HighPeakCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f014a970b405df22a91c3a1e6926ba51","time":{"start":1697937607479,"stop":1697937614260,"duration":6781},"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f88793c0b80>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f886b09f710>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f886b09f710>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f88793c0b80>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f886b09f710>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f886b09f710>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","steps":[{"name":"Given the council: HighPeakCouncil","time":{"start":1697937607479,"stop":1697937607479,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from HighPeakCouncil","time":{"start":1697937607480,"stop":1697937614257,"duration":6777},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1697937614257,"stop":1697937614258,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1697937614258,"stop":1697937614260,"duration":2},"status":"failed","statusMessage":"assert False is True","statusTrace":"AssertionError: assert False is True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az173-634"},{"name":"thread","value":"2204-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HighPeakCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":37,"broken":0,"skipped":0,"passed":109,"unknown":0,"total":146},"items":[{"uid":"6cb4c6fed5836ddc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/6cb4c6fed5836ddc","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697850791800,"stop":1697850798754,"duration":6954}},{"uid":"e4b717a13fde14d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1037//#testresult/e4b717a13fde14d4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697790410528,"stop":1697790421239,"duration":10711}},{"uid":"ad6618bd7c04b7f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/ad6618bd7c04b7f7","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697764519973,"stop":1697764527922,"duration":7949}},{"uid":"ef9936c0261f2d52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/ef9936c0261f2d52","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706527829,"stop":1697706537101,"duration":9272}},{"uid":"aba5c85c00db3e0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/aba5c85c00db3e0","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706488297,"stop":1697706495127,"duration":6830}},{"uid":"c0d765d73c64e0fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/c0d765d73c64e0fd","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702044767,"stop":1697702044769,"duration":2}},{"uid":"291d12473c9d357f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1027//#testresult/291d12473c9d357f","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697696168908,"stop":1697696179851,"duration":10943}},{"uid":"8cdedfcc09b619dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1025//#testresult/8cdedfcc09b619dc","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697678099381,"stop":1697678109372,"duration":9991}},{"uid":"c19756d7a3bb4010","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1023//#testresult/c19756d7a3bb4010","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697666576049,"stop":1697666582726,"duration":6677}},{"uid":"804a6599af5175aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1020//#testresult/804a6599af5175aa","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697656839901,"stop":1697656847834,"duration":7933}},{"uid":"938165d56ad31794","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1016//#testresult/938165d56ad31794","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697650032709,"stop":1697650039764,"duration":7055}},{"uid":"73e6430a28114c70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1014//#testresult/73e6430a28114c70","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697618266463,"stop":1697618275878,"duration":9415}},{"uid":"a97af4bd92d9c18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1010//#testresult/a97af4bd92d9c18","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697591720765,"stop":1697591728571,"duration":7806}},{"uid":"1dbf56af08cea2e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1009//#testresult/1dbf56af08cea2e","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697542572962,"stop":1697542581313,"duration":8351}},{"uid":"d00bda35d74f2e35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1008//#testresult/d00bda35d74f2e35","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697505329960,"stop":1697505339036,"duration":9076}},{"uid":"2c8f35b9b968afee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1006//#testresult/2c8f35b9b968afee","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697484641097,"stop":1697484648890,"duration":7793}},{"uid":"9d09a285fe17154c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1005//#testresult/9d09a285fe17154c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697484579791,"stop":1697484586465,"duration":6674}},{"uid":"4d5c086c606f6fea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1004//#testresult/4d5c086c606f6fea","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697418964033,"stop":1697418971342,"duration":7309}},{"uid":"9338b924c72fdad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/9338b924c72fdad6","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697403150569,"stop":1697403157418,"duration":6849}},{"uid":"c9bf42e54e369c28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/c9bf42e54e369c28","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697399718169,"stop":1697399726972,"duration":8803}}]},"tags":[]},"source":"dd727c55b959a3ca.json","parameterValues":["HighPeakCouncil"]}