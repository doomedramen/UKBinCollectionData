{"uid":"3d1ba08d2c85fab7","name":"Validate Council Output [BradfordMDC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e3f4ac517a489f09b3e68d80e88d1d63","time":{"start":1717720219904,"stop":1717720220728,"duration":824},"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fd055115e40>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd054db7fd0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7fd05431e290>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100052235823', ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:86: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fd055115e40>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd054db7fd0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7fd05431e290>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100052235823', ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:86: IndexError","steps":[{"name":"Given the council","time":{"start":1717720219904,"stop":1717720219904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1717720219905,"stop":1717720220728,"duration":823},"status":"failed","statusMessage":"string index out of range","statusTrace":"IndexError: string index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2aed4f0e798f6a78","name":"stdout","source":"2aed4f0e798f6a78.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1538-553"},{"name":"thread","value":"2705-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BradfordMDC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":30,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":30},"items":[{"uid":"39052ad7a19c1181","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1927//#testresult/39052ad7a19c1181","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717633817807,"stop":1717633818780,"duration":973}},{"uid":"f7ff5bb9785ace90","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1924//#testresult/f7ff5bb9785ace90","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717547388319,"stop":1717547389282,"duration":963}},{"uid":"8b5e68f11edccfbe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1923//#testresult/8b5e68f11edccfbe","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717460947817,"stop":1717460948816,"duration":999}},{"uid":"51543072f75cb344","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1921//#testresult/51543072f75cb344","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717374671462,"stop":1717374672914,"duration":1452}},{"uid":"1af55b186bc65644","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1911//#testresult/1af55b186bc65644","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717316335054,"stop":1717316336125,"duration":1071}},{"uid":"d8cb50835b227f03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1908//#testresult/d8cb50835b227f03","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717288303928,"stop":1717288304891,"duration":963}},{"uid":"322a9c0ac0988d1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1905//#testresult/322a9c0ac0988d1d","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717201918467,"stop":1717201919443,"duration":976}},{"uid":"b380cbc7a647bb31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1904//#testresult/b380cbc7a647bb31","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717115309469,"stop":1717115310478,"duration":1009}},{"uid":"89fa2a4828d5934e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1903//#testresult/89fa2a4828d5934e","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1717028973947,"stop":1717028974959,"duration":1012}},{"uid":"e9395bc1aaf2cf22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1898//#testresult/e9395bc1aaf2cf22","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716942697652,"stop":1716942698632,"duration":980}},{"uid":"f7ce4195f9573bac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1893//#testresult/f7ce4195f9573bac","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716856135430,"stop":1716856136762,"duration":1332}},{"uid":"273fab5035e4eaed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1883//#testresult/273fab5035e4eaed","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716769837214,"stop":1716769838633,"duration":1419}},{"uid":"1a398b7a24e79d7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1881//#testresult/1a398b7a24e79d7c","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716753174530,"stop":1716753175478,"duration":948}},{"uid":"6ed0c7c001d99338","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1877//#testresult/6ed0c7c001d99338","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716743316792,"stop":1716743317807,"duration":1015}},{"uid":"774ab24eb1833411","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1871//#testresult/774ab24eb1833411","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716709878105,"stop":1716709879078,"duration":973}},{"uid":"75d124ff7233cd60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1866//#testresult/75d124ff7233cd60","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716705180836,"stop":1716705181872,"duration":1036}},{"uid":"5e0c08a2c1b31920","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1865//#testresult/5e0c08a2c1b31920","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716683537983,"stop":1716683539102,"duration":1119}},{"uid":"37ce270c891722cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1863//#testresult/37ce270c891722cf","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716624905480,"stop":1716624906428,"duration":948}},{"uid":"dd9fad59926b2c53","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1862//#testresult/dd9fad59926b2c53","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716596918683,"stop":1716596919881,"duration":1198}},{"uid":"d6e09930a4ac20ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1856//#testresult/d6e09930a4ac20ca","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1716510578927,"stop":1716510580015,"duration":1088}}]},"tags":[]},"source":"3d1ba08d2c85fab7.json","parameterValues":["BradfordMDC"]}