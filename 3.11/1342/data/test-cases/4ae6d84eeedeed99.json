{"uid":"4ae6d84eeedeed99","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1704113657872,"stop":1704113658525,"duration":653},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7ff0888f42c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff087e16990>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7ff087d639d0>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '100050768956', 'url': 'https://www.doncaster.gov.uk/Compass/Entity/Launch/D3/', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1704113657, four_weeks = 1706532857\nparams = {'End': '1706532857', 'Start': '1704113657', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7ff0888f42c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff087e16990>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7ff087d639d0>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '100050768956', 'url': 'https://www.doncaster.gov.uk/Compass/Entity/Launch/D3/', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1704113657, four_weeks = 1706532857\nparams = {'End': '1706532857', 'Start': '1704113657', 'UPRN': '100050768956'}\nresponse = <Response [503]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1704113657872,"stop":1704113657873,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1704113657873,"stop":1704113658525,"duration":652},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1536-308"},{"name":"thread","value":"2730-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":116,"unknown":0,"total":117},"items":[{"uid":"cef67bb414735c9c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/cef67bb414735c9c","status":"passed","time":{"start":1704112227661,"stop":1704112229030,"duration":1369}},{"uid":"7d2058c1a7355fe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/7d2058c1a7355fe6","status":"passed","time":{"start":1704112076934,"stop":1704112078388,"duration":1454}},{"uid":"bc67dc5b7dde1ed8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/bc67dc5b7dde1ed8","status":"passed","time":{"start":1704111839478,"stop":1704111841248,"duration":1770}},{"uid":"5f167a897ab2f567","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/5f167a897ab2f567","status":"passed","time":{"start":1704111842195,"stop":1704111843910,"duration":1715}},{"uid":"30aa8a2c663c89de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/30aa8a2c663c89de","status":"passed","time":{"start":1704111489827,"stop":1704111491287,"duration":1460}},{"uid":"e6cdb0bafc58bcd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/e6cdb0bafc58bcd3","status":"passed","time":{"start":1704111323648,"stop":1704111325334,"duration":1686}},{"uid":"333015da3854ad67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/333015da3854ad67","status":"passed","time":{"start":1704099918722,"stop":1704099920555,"duration":1833}},{"uid":"4df1e248e0cb5ec0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/4df1e248e0cb5ec0","status":"passed","time":{"start":1704072229955,"stop":1704072231422,"duration":1467}},{"uid":"b6bc3c885f186c93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/b6bc3c885f186c93","status":"passed","time":{"start":1704050371280,"stop":1704050373126,"duration":1846}},{"uid":"9fe6a16a3a4ff673","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/9fe6a16a3a4ff673","status":"passed","time":{"start":1704043851651,"stop":1704043853022,"duration":1371}},{"uid":"f1b2c0836bb95bd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/f1b2c0836bb95bd4","status":"passed","time":{"start":1703985732980,"stop":1703985734711,"duration":1731}},{"uid":"b66dab9e34a58a22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/b66dab9e34a58a22","status":"passed","time":{"start":1703898887871,"stop":1703898889351,"duration":1480}},{"uid":"5b2360e5e12c1dba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/5b2360e5e12c1dba","status":"passed","time":{"start":1703853442976,"stop":1703853444249,"duration":1273}},{"uid":"48f6d0fcbf58164d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/48f6d0fcbf58164d","status":"passed","time":{"start":1703851065167,"stop":1703851066727,"duration":1560}},{"uid":"43aceca823d99d3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/43aceca823d99d3e","status":"passed","time":{"start":1703812008025,"stop":1703812009446,"duration":1421}},{"uid":"49aff8e6c61029f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/49aff8e6c61029f6","status":"passed","time":{"start":1703756136064,"stop":1703756137296,"duration":1232}},{"uid":"4c336bff9707696e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/4c336bff9707696e","status":"passed","time":{"start":1703726116537,"stop":1703726118156,"duration":1619}},{"uid":"dabe5cbf0f8b3a42","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/dabe5cbf0f8b3a42","status":"passed","time":{"start":1703717292462,"stop":1703717293888,"duration":1426}},{"uid":"d4549fd0550ef55a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/d4549fd0550ef55a","status":"passed","time":{"start":1703717255388,"stop":1703717256868,"duration":1480}},{"uid":"49bc59f7b4bcf7e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/49bc59f7b4bcf7e2","status":"passed","time":{"start":1703639710073,"stop":1703639711965,"duration":1892}}]},"tags":[]},"source":"4ae6d84eeedeed99.json","parameterValues":["DoncasterCouncil","None","None"]}