{"uid":"45709529492dabd8","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1724890406363,"stop":1724890407717,"duration":1354},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f5147f263e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5147da9790>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f51475f0950>\npage = <Response [404]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head> <script>\r\n\t\t\t\twindow[\"ga-disable-G-1M8G5BKKHG\"] = true;\r\n\t\t\t</script>\n<scrip...f-service and web content management provided by GOSS\">Powered by GOSS</a>\n</div>\n</div>\n</div>\n</footer></body></html>\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f5147f263e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5147da9790>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f51475f0950>\npage = <Response [404]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head> <script>\r\n\t\t\t\twindow[\"ga-disable-G-1M8G5BKKHG\"] = true;\r\n\t\t\t</script>\n<scrip...f-service and web content management provided by GOSS\">Powered by GOSS</a>\n</div>\n</div>\n</div>\n</footer></body></html>\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1724890406363,"stop":1724890406364,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724890406364,"stop":1724890407717,"duration":1353},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"606634de6ebc0877","name":"stdout","source":"606634de6ebc0877.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-999"},{"name":"thread","value":"2829-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":115,"broken":0,"skipped":0,"passed":176,"unknown":0,"total":291},"items":[{"uid":"f5eb00fe46dd2335","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2048//#testresult/f5eb00fe46dd2335","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724804013465,"stop":1724804014174,"duration":709}},{"uid":"1371c1327aa3fade","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2043//#testresult/1371c1327aa3fade","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724717718027,"stop":1724717719038,"duration":1011}},{"uid":"77d8d2b2c592aaf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2039//#testresult/77d8d2b2c592aaf3","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724631285841,"stop":1724631286982,"duration":1141}},{"uid":"587066e4cfc2e241","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2038//#testresult/587066e4cfc2e241","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724544704899,"stop":1724544706102,"duration":1203}},{"uid":"11c5e1e421475bd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2037//#testresult/11c5e1e421475bd1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724458364836,"stop":1724458365724,"duration":888}},{"uid":"a55364c0fe61de4e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2036//#testresult/a55364c0fe61de4e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724371950953,"stop":1724371952105,"duration":1152}},{"uid":"95bb92d3ab742735","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2034//#testresult/95bb92d3ab742735","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724285616579,"stop":1724285621817,"duration":5238}},{"uid":"63d0d3d8d0623e74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2033//#testresult/63d0d3d8d0623e74","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724199170275,"stop":1724199170923,"duration":648}},{"uid":"7ef87386cf972a4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2032//#testresult/7ef87386cf972a4a","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724112763997,"stop":1724112764742,"duration":745}},{"uid":"193c0dfe1cb6c544","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2031//#testresult/193c0dfe1cb6c544","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724026371865,"stop":1724026372532,"duration":667}},{"uid":"b31b1fadddb0d35b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2030//#testresult/b31b1fadddb0d35b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723939961195,"stop":1723939962084,"duration":889}},{"uid":"20873b0715d17b5f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2029//#testresult/20873b0715d17b5f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723853644780,"stop":1723853645616,"duration":836}},{"uid":"b39d9eb374e74968","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2028//#testresult/b39d9eb374e74968","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723767142594,"stop":1723767143340,"duration":746}},{"uid":"7f12068e7a5bd41f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/7f12068e7a5bd41f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723680363956,"stop":1723680364621,"duration":665}},{"uid":"f7c859b288c4e060","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/f7c859b288c4e060","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723594389520,"stop":1723594390261,"duration":741}},{"uid":"5832ab4e430eaf7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/5832ab4e430eaf7","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723508219896,"stop":1723508220741,"duration":845}},{"uid":"4eaafaff08e12aea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/4eaafaff08e12aea","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723421718406,"stop":1723421719100,"duration":694}},{"uid":"659c990f4cd6716e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2022//#testresult/659c990f4cd6716e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723335303518,"stop":1723335304540,"duration":1022}},{"uid":"d27ca5015b2050a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2020//#testresult/d27ca5015b2050a8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723248904802,"stop":1723248905534,"duration":732}},{"uid":"4f6a1fc8546496b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2019//#testresult/4f6a1fc8546496b9","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723162623117,"stop":1723162624206,"duration":1089}}]},"tags":[]},"source":"45709529492dabd8.json","parameterValues":["GlasgowCityCouncil"]}