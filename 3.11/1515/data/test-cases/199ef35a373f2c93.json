{"uid":"199ef35a373f2c93","name":"Validate Council Output [DorsetCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9fa7d7cb5c863d45fe9f4c51c5fb024f","time":{"start":1705710395952,"stop":1705710520441,"duration":124489},"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7fccc15f00e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fccc1433ad0>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7fccc0ba3490>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7fccc15f00e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fccc1433ad0>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7fccc0ba3490>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","steps":[{"name":"Given the council: DorsetCouncil","time":{"start":1705710395952,"stop":1705710395952,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DorsetCouncil using None and the None is set","time":{"start":1705710395952,"stop":1705710520441,"duration":124489},"status":"failed","statusMessage":"cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1022-11"},{"name":"thread","value":"2812-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DorsetCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":116,"unknown":0,"total":117},"items":[{"uid":"8a0d3406164bba60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1511//#testresult/8a0d3406164bba60","status":"passed","time":{"start":1705624045887,"stop":1705624047693,"duration":1806}},{"uid":"8867206bdc2b21f1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1505//#testresult/8867206bdc2b21f1","status":"passed","time":{"start":1705537623344,"stop":1705537624374,"duration":1030}},{"uid":"178f992bc836a2f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1500//#testresult/178f992bc836a2f8","status":"passed","time":{"start":1705451228994,"stop":1705451230958,"duration":1964}},{"uid":"b65c39d470e8c9d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1499//#testresult/b65c39d470e8c9d6","status":"passed","time":{"start":1705364827112,"stop":1705364829006,"duration":1894}},{"uid":"669e130ad6bf4ef1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1492//#testresult/669e130ad6bf4ef1","status":"passed","time":{"start":1705295598169,"stop":1705295600066,"duration":1897}},{"uid":"6b5719b06cbfb3d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1491//#testresult/6b5719b06cbfb3d3","status":"passed","time":{"start":1705295156677,"stop":1705295158639,"duration":1962}},{"uid":"66a3c453733dd1e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1490//#testresult/66a3c453733dd1e8","status":"passed","time":{"start":1705278529750,"stop":1705278531868,"duration":2118}},{"uid":"fe71105bb931385a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1485//#testresult/fe71105bb931385a","status":"passed","time":{"start":1705192192268,"stop":1705192194070,"duration":1802}},{"uid":"e37269a30e91eaa2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1484//#testresult/e37269a30e91eaa2","status":"passed","time":{"start":1705105656149,"stop":1705105657739,"duration":1590}},{"uid":"84e1ee335abf1f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1482//#testresult/84e1ee335abf1f9","status":"passed","time":{"start":1705019240900,"stop":1705019242532,"duration":1632}},{"uid":"ced3cdd21fecf65c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1478//#testresult/ced3cdd21fecf65c","status":"passed","time":{"start":1704932830104,"stop":1704932831021,"duration":917}},{"uid":"4f332bae990f88de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1472//#testresult/4f332bae990f88de","status":"passed","time":{"start":1704846435898,"stop":1704846437846,"duration":1948}},{"uid":"299fb7babbdb749f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1456//#testresult/299fb7babbdb749f","status":"passed","time":{"start":1704760088627,"stop":1704760089619,"duration":992}},{"uid":"f67374f4f21e427f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1452//#testresult/f67374f4f21e427f","status":"passed","time":{"start":1704711486448,"stop":1704711487877,"duration":1429}},{"uid":"7199333559bac237","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1450//#testresult/7199333559bac237","status":"passed","time":{"start":1704710697549,"stop":1704710698959,"duration":1410}},{"uid":"5666df9506f956cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1448//#testresult/5666df9506f956cc","status":"passed","time":{"start":1704710082831,"stop":1704710084452,"duration":1621}},{"uid":"e1b8e077d5a47d55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1446//#testresult/e1b8e077d5a47d55","status":"passed","time":{"start":1704709561291,"stop":1704709563189,"duration":1898}},{"uid":"8b3fd91f4ae0db6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1443//#testresult/8b3fd91f4ae0db6","status":"passed","time":{"start":1704704069321,"stop":1704704071189,"duration":1868}},{"uid":"503bad3aecb5126d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1441//#testresult/503bad3aecb5126d","status":"passed","time":{"start":1704673703516,"stop":1704673705441,"duration":1925}},{"uid":"bb0234c0f87d8db2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1426//#testresult/bb0234c0f87d8db2","status":"passed","time":{"start":1704615379122,"stop":1704615380422,"duration":1300}}]},"tags":[]},"source":"199ef35a373f2c93.json","parameterValues":["DorsetCouncil","None","None"]}