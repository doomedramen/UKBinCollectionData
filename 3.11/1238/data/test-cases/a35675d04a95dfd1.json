{"uid":"a35675d04a95dfd1","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1702447456569,"stop":1702447465867,"duration":9298},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f25abddd080>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f25ab1e6510>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f25ab1e6510>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f25abddd080>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f25ab1e6510>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f25ab1e6510>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1702447456569,"stop":1702447456570,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1702447456570,"stop":1702447465865,"duration":9295},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702447465865,"stop":1702447465865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702447465865,"stop":1702447465867,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az777-825"},{"name":"thread","value":"2872-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":74,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":74},"items":[{"uid":"9ee88bb299d88ba3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/9ee88bb299d88ba3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430312078,"stop":1702430321375,"duration":9297}},{"uid":"ecede32e34b40648","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/ecede32e34b40648","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366468070,"stop":1702366477476,"duration":9406}},{"uid":"4dda9e504e20fd47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/4dda9e504e20fd47","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343933502,"stop":1702343960509,"duration":27007}},{"uid":"717fb9561a78b990","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/717fb9561a78b990","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257522350,"stop":1702257531620,"duration":9270}},{"uid":"4819e301fc7e3d33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/4819e301fc7e3d33","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171374165,"stop":1702171574917,"duration":200752}},{"uid":"192574c43466234a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/192574c43466234a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084603139,"stop":1702084612596,"duration":9457}},{"uid":"2e9809b908b4b9dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/2e9809b908b4b9dc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066702504,"stop":1702066711945,"duration":9441}},{"uid":"4f2471c7137545ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/4f2471c7137545ec","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054347683,"stop":1702054357759,"duration":10076}},{"uid":"e814a68cc03d147","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/e814a68cc03d147","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054377696,"stop":1702054386969,"duration":9273}},{"uid":"f69a5bf4a55728a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/f69a5bf4a55728a1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998344867,"stop":1701998369983,"duration":25116}},{"uid":"d4e85fe86381999b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/d4e85fe86381999b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990350830,"stop":1701990359966,"duration":9136}},{"uid":"aedf8df5790336f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/aedf8df5790336f7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990318375,"stop":1701990327139,"duration":8764}},{"uid":"fa4328a55eea4eb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/fa4328a55eea4eb3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942764179,"stop":1701942773439,"duration":9260}},{"uid":"e4c3b28ca1ddd24f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/e4c3b28ca1ddd24f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936464460,"stop":1701936474538,"duration":10078}},{"uid":"7170d0ef63bb72b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/7170d0ef63bb72b6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936423825,"stop":1701936434501,"duration":10676}},{"uid":"4c0e4157674a42e0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/4c0e4157674a42e0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911903600,"stop":1701911929149,"duration":25549}},{"uid":"eccaf47074683b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/eccaf47074683b8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904834382,"stop":1701904843320,"duration":8938}},{"uid":"8e824ce8a73e3240","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/8e824ce8a73e3240","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882496509,"stop":1701882508199,"duration":11690}},{"uid":"4ddc6cb5a36491b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/4ddc6cb5a36491b4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882527469,"stop":1701882539573,"duration":12104}},{"uid":"1bedf4d35b865a94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/1bedf4d35b865a94","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825518086,"stop":1701825545474,"duration":27388}}]},"tags":[]},"source":"a35675d04a95dfd1.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}