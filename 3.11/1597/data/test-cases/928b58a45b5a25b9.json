{"uid":"928b58a45b5a25b9","name":"Validate Council Output [DorsetCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9fa7d7cb5c863d45fe9f4c51c5fb024f","time":{"start":1709943897015,"stop":1709944105446,"duration":208431},"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7faba54907c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7faba492f2d0>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7faba7b0da10>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7faba54907c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7faba492f2d0>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7faba7b0da10>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","steps":[{"name":"Given the council: DorsetCouncil","time":{"start":1709943897015,"stop":1709943897016,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DorsetCouncil using None and the None is set","time":{"start":1709943897016,"stop":1709944105446,"duration":208430},"status":"failed","statusMessage":"cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az915-834"},{"name":"thread","value":"2839-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DorsetCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":156,"unknown":0,"total":159},"items":[{"uid":"b91ccf28cac2f59d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1596//#testresult/b91ccf28cac2f59d","status":"passed","time":{"start":1709857562289,"stop":1709857563869,"duration":1580}},{"uid":"9bdcebc0a1638438","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1595//#testresult/9bdcebc0a1638438","status":"passed","time":{"start":1709770848473,"stop":1709770850071,"duration":1598}},{"uid":"a4af1914ed0a665e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1594//#testresult/a4af1914ed0a665e","status":"passed","time":{"start":1709684756112,"stop":1709684757121,"duration":1009}},{"uid":"5bd40dee65f23d48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1593//#testresult/5bd40dee65f23d48","status":"passed","time":{"start":1709598307797,"stop":1709598309133,"duration":1336}},{"uid":"602bd27e44622b4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1592//#testresult/602bd27e44622b4d","status":"passed","time":{"start":1709511988612,"stop":1709511990421,"duration":1809}},{"uid":"c0bf0fa3ae21b480","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/c0bf0fa3ae21b480","status":"passed","time":{"start":1708561529754,"stop":1708561531558,"duration":1804}},{"uid":"56f4e19ffa2279c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/56f4e19ffa2279c8","status":"passed","time":{"start":1708475124089,"stop":1708475125165,"duration":1076}},{"uid":"aec183f6de25b7c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/aec183f6de25b7c2","status":"passed","time":{"start":1708388754073,"stop":1708388754970,"duration":897}},{"uid":"1cae9945277c3316","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1568//#testresult/1cae9945277c3316","status":"passed","time":{"start":1708302471229,"stop":1708302493861,"duration":22632}},{"uid":"b7100aa45f2af207","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1567//#testresult/b7100aa45f2af207","status":"passed","time":{"start":1708216063776,"stop":1708216085848,"duration":22072}},{"uid":"245c614641ea96fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1566//#testresult/245c614641ea96fd","status":"passed","time":{"start":1708129510586,"stop":1708129532917,"duration":22331}},{"uid":"556e9d3a07f2152","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1563//#testresult/556e9d3a07f2152","status":"passed","time":{"start":1708043095959,"stop":1708043118929,"duration":22970}},{"uid":"2e9f01fdc4525021","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1562//#testresult/2e9f01fdc4525021","status":"passed","time":{"start":1707956728768,"stop":1707956751828,"duration":23060}},{"uid":"4e5690c695c0ff8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1561//#testresult/4e5690c695c0ff8f","status":"passed","time":{"start":1707870313437,"stop":1707870315368,"duration":1931}},{"uid":"f5327f40b9df973b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1560//#testresult/f5327f40b9df973b","status":"passed","time":{"start":1707783983086,"stop":1707783984368,"duration":1282}},{"uid":"97c95c5d0d8ab636","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1559//#testresult/97c95c5d0d8ab636","status":"passed","time":{"start":1707697614965,"stop":1707697616288,"duration":1323}},{"uid":"77fb98a0515ae554","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1556//#testresult/77fb98a0515ae554","status":"passed","time":{"start":1707611290863,"stop":1707611292650,"duration":1787}},{"uid":"58d1fadd0db700c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1554//#testresult/58d1fadd0db700c9","status":"passed","time":{"start":1707524671803,"stop":1707524673832,"duration":2029}},{"uid":"9e6c9b1a9f25aeaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1553//#testresult/9e6c9b1a9f25aeaf","status":"passed","time":{"start":1707438300657,"stop":1707438302707,"duration":2050}},{"uid":"48d5e2953f354c48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1552//#testresult/48d5e2953f354c48","status":"passed","time":{"start":1707351927845,"stop":1707351930265,"duration":2420}}]},"tags":[]},"source":"928b58a45b5a25b9.json","parameterValues":["DorsetCouncil","None","None"]}