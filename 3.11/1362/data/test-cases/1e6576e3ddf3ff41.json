{"uid":"1e6576e3ddf3ff41","name":"Validate Council Output [NorthWestLeicestershire-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"636da600d3c2f6211f4c406b74efac78","time":{"start":1704356782036,"stop":1704356785988,"duration":3952},"status":"failed","statusMessage":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdb8afc60c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdb8a398150>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:75: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tue 23rd Jan', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdb8afc60c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdb8a398150>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:75: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tue 23rd Jan', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: NorthWestLeicestershire","time":{"start":1704356782036,"stop":1704356782036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NorthWestLeicestershire using local and the http://selenium:4444 is set","time":{"start":1704356782036,"stop":1704356785988,"duration":3952},"status":"failed","statusMessage":"time data 'Tue 23rd Jan' does not match format '%a %dth %b'","statusTrace":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az738-229"},{"name":"thread","value":"2679-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthWestLeicestershire"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":71,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":73},"items":[{"uid":"a3bf444cbacabb29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/a3bf444cbacabb29","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704355995417,"stop":1704355999748,"duration":4331}},{"uid":"5f016c630bcdaa73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/5f016c630bcdaa73","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704331151332,"stop":1704331155197,"duration":3865}},{"uid":"932db07b299b228e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1355//#testresult/932db07b299b228e","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704303779896,"stop":1704303784544,"duration":4648}},{"uid":"68872405f17cf4c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1352//#testresult/68872405f17cf4c3","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704301468089,"stop":1704301472899,"duration":4810}},{"uid":"b5666a9e06da27d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/b5666a9e06da27d5","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704244764359,"stop":1704244768189,"duration":3830}},{"uid":"85e5a640acc52ba9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/85e5a640acc52ba9","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%a %dth %b'","time":{"start":1704180348260,"stop":1704180352698,"duration":4438}},{"uid":"6c7df92ebfd15a3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1346//#testresult/6c7df92ebfd15a3d","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%a %dth %b'","time":{"start":1704158366037,"stop":1704158369916,"duration":3879}},{"uid":"9fca7ec808561db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1345//#testresult/9fca7ec808561db","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704114708702,"stop":1704114713745,"duration":5043}},{"uid":"f3315018e38adc23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1343//#testresult/f3315018e38adc23","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704113838019,"stop":1704113843042,"duration":5023}},{"uid":"5b1ba3de5bef851f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/5b1ba3de5bef851f","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704113745761,"stop":1704113749522,"duration":3761}},{"uid":"51d9f342a2c2d907","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/51d9f342a2c2d907","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704112335378,"stop":1704112339618,"duration":4240}},{"uid":"563ff3b57c0f9dc0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/563ff3b57c0f9dc0","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704112187571,"stop":1704112192048,"duration":4477}},{"uid":"11b4df71cf0d6bcb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/11b4df71cf0d6bcb","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704111984318,"stop":1704111988981,"duration":4663}},{"uid":"bba7f48fc2f17b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/bba7f48fc2f17b2","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704111979205,"stop":1704111983619,"duration":4414}},{"uid":"89d02a1dd2f8d6d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/89d02a1dd2f8d6d6","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704111581768,"stop":1704111585855,"duration":4087}},{"uid":"be01353b6c3dcb61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/be01353b6c3dcb61","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704111439033,"stop":1704111443674,"duration":4641}},{"uid":"c6745cbdfcfa9cd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/c6745cbdfcfa9cd4","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704100026029,"stop":1704100031354,"duration":5325}},{"uid":"93fd57b73e6eba32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/93fd57b73e6eba32","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704072367458,"stop":1704072371487,"duration":4029}},{"uid":"850ed8e1271c5b81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/850ed8e1271c5b81","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1704050525017,"stop":1704050530225,"duration":5208}},{"uid":"d59a7e5beb17d621","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/d59a7e5beb17d621","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1704043952450,"stop":1704043956554,"duration":4104}}]},"tags":[]},"source":"1e6576e3ddf3ff41.json","parameterValues":["NorthWestLeicestershire","local","http://selenium:4444"]}