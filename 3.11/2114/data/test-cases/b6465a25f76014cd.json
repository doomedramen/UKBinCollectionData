{"uid":"b6465a25f76014cd","name":"Validate Council Output [SouthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"efde6c2c8e15955ad5fa48845f3c2c06","time":{"start":1726273352066,"stop":1726273446250,"duration":94184},"status":"failed","statusMessage":"KeyError: 'SortedCollections'","statusTrace":"fixturefunc = <function scrape_step at 0x7f43c5871c60>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f43c56e0e50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f43c4a32010>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n        json_result = json.loads(response.text)[\"result\"]\n>       months = json_result[\"SortedCollections\"]\nE       KeyError: 'SortedCollections'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:86: KeyError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"KeyError: 'SortedCollections'","statusTrace":"fixturefunc = <function scrape_step at 0x7f43c5871c60>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f43c56e0e50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthTynesideCouncil.CouncilClass object at 0x7f43c4a32010>, page = ''\nkwargs = {'council_module_str': 'SouthTynesideCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\nuser_postcode = 'NE33 3JW', user_paon = '1', data = {'bins': []}\nuprn = 'S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW'\npayload = '{\"jsonrpc\": \"2.0\", \"id\": \"1689431609779\", \"method\": \"stc.waste.collections.getDates\", \"params\": {\"addresscode\": \"S100000325977|1 CANDLISH STREET, SOUTH SHIELDS, SOUTH TYNESIDE, TYNE AND WEAR, NE33 3JW\"}}'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        api_url = \"https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/\"\n        user_postcode = kwargs.get(\"postcode\")\n        user_paon = kwargs.get(\"paon\")\n        data = {\"bins\": []}\n    \n        check_postcode(user_postcode)\n        check_paon(user_paon)\n    \n        try:\n            if user_paon is None:\n                raise ValueError(\"Invalid house number\")\n        except Exception as ex:\n            print(f\"Exception encountered: {ex}\")\n            print(\n                \"Please check the provided house number. If this error continues, please first trying setting the \"\n                \"house number manually on line 25 before raising an issue.\"\n            )\n            exit(1)\n    \n        # Get the \"UPRN\" (actually the UPRN + address)\n        uprn = get_address_uprn(user_postcode, user_paon, api_url)\n    \n        # Set up payload and headers, then post to API to get schedule\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1689431609779\",\n                \"method\": \"stc.waste.collections.getDates\",\n                \"params\": {\"addresscode\": uprn},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.request(\"POST\", api_url, headers=headers, data=payload)\n    \n        # Break down the resulting JSON and load into dictionary\n        json_result = json.loads(response.text)[\"result\"]\n>       months = json_result[\"SortedCollections\"]\nE       KeyError: 'SortedCollections'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:86: KeyError","steps":[{"name":"Given the council","time":{"start":1726273352066,"stop":1726273352066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726273352066,"stop":1726273446250,"duration":94184},"status":"failed","statusMessage":"'SortedCollections'","statusTrace":"KeyError: 'SortedCollections'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3ab03411d16ec89","name":"stdout","source":"3ab03411d16ec89.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1487-913"},{"name":"thread","value":"2779-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthTynesideCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":181,"broken":0,"skipped":0,"passed":137,"unknown":0,"total":318},"items":[{"uid":"afb9205f74797ab8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/afb9205f74797ab8","status":"passed","time":{"start":1726186862620,"stop":1726186865609,"duration":2989}},{"uid":"359e3e5f2c6a4913","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2112//#testresult/359e3e5f2c6a4913","status":"passed","time":{"start":1726100395754,"stop":1726100403204,"duration":7450}},{"uid":"7e50e1a62b39aa87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2111//#testresult/7e50e1a62b39aa87","status":"passed","time":{"start":1726014093006,"stop":1726014097514,"duration":4508}},{"uid":"ea6d2695808f93fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2109//#testresult/ea6d2695808f93fd","status":"passed","time":{"start":1725956134809,"stop":1725956137084,"duration":2275}},{"uid":"954f34f4622788d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2107//#testresult/954f34f4622788d7","status":"passed","time":{"start":1725927846431,"stop":1725927849278,"duration":2847}},{"uid":"cb5706aee01722f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2095//#testresult/cb5706aee01722f8","status":"passed","time":{"start":1725841836385,"stop":1725841838467,"duration":2082}},{"uid":"36d3c0b5b1467f06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/36d3c0b5b1467f06","status":"passed","time":{"start":1725755033267,"stop":1725755037398,"duration":4131}},{"uid":"e71ade976fabc47a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/e71ade976fabc47a","status":"passed","time":{"start":1725668748521,"stop":1725668781185,"duration":32664}},{"uid":"b1f7968f832b570c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/b1f7968f832b570c","status":"passed","time":{"start":1725582028993,"stop":1725582031512,"duration":2519}},{"uid":"c9725c4954bb8d4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/c9725c4954bb8d4f","status":"passed","time":{"start":1725569860740,"stop":1725569862507,"duration":1767}},{"uid":"c18d24f37962a93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/c18d24f37962a93","status":"passed","time":{"start":1725495692852,"stop":1725495696905,"duration":4053}},{"uid":"b7ca044df8a48823","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/b7ca044df8a48823","status":"passed","time":{"start":1725431007098,"stop":1725431008804,"duration":1706}},{"uid":"17ddf77adf49cd03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/17ddf77adf49cd03","status":"passed","time":{"start":1725409640010,"stop":1725409642117,"duration":2107}},{"uid":"7ebc5381353c7dd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/7ebc5381353c7dd4","status":"passed","time":{"start":1725404564008,"stop":1725404565594,"duration":1586}},{"uid":"4b7594ad1ba2a4cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/4b7594ad1ba2a4cb","status":"passed","time":{"start":1725385568972,"stop":1725385570860,"duration":1888}},{"uid":"f10eb82ca0481f47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/f10eb82ca0481f47","status":"passed","time":{"start":1725347808654,"stop":1725347810262,"duration":1608}},{"uid":"5430ba4e8c03f295","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/5430ba4e8c03f295","status":"passed","time":{"start":1725322827853,"stop":1725322830858,"duration":3005}},{"uid":"bba9a51b1fe3bf64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/bba9a51b1fe3bf64","status":"passed","time":{"start":1725316921942,"stop":1725316923597,"duration":1655}},{"uid":"86463870b5067899","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/86463870b5067899","status":"passed","time":{"start":1725313631227,"stop":1725313632927,"duration":1700}},{"uid":"b6864e4a77a905ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/b6864e4a77a905ca","status":"passed","time":{"start":1725311203970,"stop":1725311213223,"duration":9253}}]},"tags":[]},"source":"b6465a25f76014cd.json","parameterValues":["SouthTynesideCouncil"]}