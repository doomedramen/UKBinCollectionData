{"uid":"c0ee8be6efa463d1","name":"Validate Council Output [MertonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a067692419696058d026d9aab0da27d0","time":{"start":1701418978734,"stop":1701418980527,"duration":1793},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f4cdef88360>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4ccf51d950>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f4ccf51d950>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f4cdef88360>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4ccf51d950>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f4ccf51d950>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1701418978734,"stop":1701418978735,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from MertonCouncil using None and the None is set","time":{"start":1701418978735,"stop":1701418980524,"duration":1789},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701418980525,"stop":1701418980525,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701418980525,"stop":1701418980527,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1200-958"},{"name":"thread","value":"2699-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":44,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":44},"items":[{"uid":"ac8f0880edab5d7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1181//#testresult/ac8f0880edab5d7b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419098065,"stop":1701419099669,"duration":1604}},{"uid":"ebfb215d8060aeef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1180//#testresult/ebfb215d8060aeef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419053086,"stop":1701419058003,"duration":4917}},{"uid":"6fdd7edb56f03c89","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1176//#testresult/6fdd7edb56f03c89","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418892776,"stop":1701418894441,"duration":1665}},{"uid":"cf73d6afc80776f1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1177//#testresult/cf73d6afc80776f1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418941394,"stop":1701418943592,"duration":2198}},{"uid":"dad07227788806d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1175//#testresult/dad07227788806d4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414365072,"stop":1701414366807,"duration":1735}},{"uid":"91172bb1b11ce849","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/91172bb1b11ce849","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701393919322,"stop":1701393920798,"duration":1476}},{"uid":"2ac903e0b8200ac6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/2ac903e0b8200ac6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353364521,"stop":1701353365855,"duration":1334}},{"uid":"2b5a5c663472703","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1170//#testresult/2b5a5c663472703","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353388051,"stop":1701353389441,"duration":1390}},{"uid":"79df44f7d734b0b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1163//#testresult/79df44f7d734b0b2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307118279,"stop":1701307119749,"duration":1470}},{"uid":"d1fd96bf433eb697","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1161//#testresult/d1fd96bf433eb697","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279337302,"stop":1701279339249,"duration":1947}},{"uid":"6e8f55aedf06f7cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1156//#testresult/6e8f55aedf06f7cd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220765639,"stop":1701220771526,"duration":5887}},{"uid":"26bdcb0a6c37a82a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1155//#testresult/26bdcb0a6c37a82a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134377686,"stop":1701134379953,"duration":2267}},{"uid":"60fb1d263c4341ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1152//#testresult/60fb1d263c4341ae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701047930345,"stop":1701047932473,"duration":2128}},{"uid":"33bd1c671be14eff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/33bd1c671be14eff","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036208696,"stop":1701036210092,"duration":1396}},{"uid":"215f8bd703fbdacc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/215f8bd703fbdacc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036175686,"stop":1701036177567,"duration":1881}},{"uid":"96dda609d151c833","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/96dda609d151c833","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961748770,"stop":1700961750207,"duration":1437}},{"uid":"c1cb000dea065cba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1147//#testresult/c1cb000dea065cba","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874962232,"stop":1700875019981,"duration":57749}},{"uid":"3f81a37ec1b36f8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/3f81a37ec1b36f8b","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1700788576318,"stop":1700788620544,"duration":44226}},{"uid":"d360ae7fa4318c99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1145//#testresult/d360ae7fa4318c99","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702296180,"stop":1700702301309,"duration":5129}},{"uid":"635d7cff743a2d83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/635d7cff743a2d83","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646379277,"stop":1700646385289,"duration":6012}}]},"tags":[]},"source":"c0ee8be6efa463d1.json","parameterValues":["MertonCouncil","None","None"]}