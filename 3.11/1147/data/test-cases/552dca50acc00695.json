{"uid":"552dca50acc00695","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1700875069376,"stop":1700875071196,"duration":1820},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f290d11b100>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f28f941fa10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f28f941fa10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f290d11b100>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f28f941fa10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f28f941fa10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1700875069376,"stop":1700875069376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1700875069377,"stop":1700875071194,"duration":1817},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700875071195,"stop":1700875071195,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700875071195,"stop":1700875071196,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1543-991"},{"name":"thread","value":"2836-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":27},"items":[{"uid":"501b7afff772c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/501b7afff772c4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788676740,"stop":1700788678592,"duration":1852}},{"uid":"ce34d8c89529124b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1145//#testresult/ce34d8c89529124b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702403652,"stop":1700702408463,"duration":4811}},{"uid":"82a8b86da96e2ffb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/82a8b86da96e2ffb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646514714,"stop":1700646518095,"duration":3381}},{"uid":"6813e0e5db52aa68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/6813e0e5db52aa68","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646573740,"stop":1700646580447,"duration":6707}},{"uid":"784814bfb359adc3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/784814bfb359adc3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616152492,"stop":1700616157854,"duration":5362}},{"uid":"a3837125e2ac675f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/a3837125e2ac675f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529894684,"stop":1700529897337,"duration":2653}},{"uid":"4d16cc1df9cfa817","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/4d16cc1df9cfa817","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443330297,"stop":1700443331885,"duration":1588}},{"uid":"231ad58ac92d6fe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/231ad58ac92d6fe6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357089303,"stop":1700357099595,"duration":10292}},{"uid":"a7749482c8ec02e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/a7749482c8ec02e3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270411039,"stop":1700270413115,"duration":2076}},{"uid":"184e4ff8c4e992b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/184e4ff8c4e992b0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700184078535,"stop":1700184081925,"duration":3390}},{"uid":"cee3443f46e60b14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/cee3443f46e60b14","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097736819,"stop":1700097739005,"duration":2186}},{"uid":"5edfc08037fe666","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/5edfc08037fe666","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011202055,"stop":1700011205474,"duration":3419}},{"uid":"4a5dfe691380256b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/4a5dfe691380256b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924979671,"stop":1699924982961,"duration":3290}},{"uid":"ee6d39b940226b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/ee6d39b940226b1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838399188,"stop":1699838402019,"duration":2831}},{"uid":"ccec4425c259bda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/ccec4425c259bda","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752273097,"stop":1699752275401,"duration":2304}},{"uid":"8400ba9749bdd182","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/8400ba9749bdd182","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699669322307,"stop":1699669326247,"duration":3940}},{"uid":"bfb697debb6e47a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1124//#testresult/bfb697debb6e47a4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699579040934,"stop":1699579045537,"duration":4603}},{"uid":"f3261f7beea3060b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/f3261f7beea3060b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492820819,"stop":1699492823127,"duration":2308}},{"uid":"61c67be183135477","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/61c67be183135477","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481621819,"stop":1699481626276,"duration":4457}},{"uid":"8032c93c134d903","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/8032c93c134d903","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481581566,"stop":1699481584048,"duration":2482}}]},"tags":[]},"source":"552dca50acc00695.json","parameterValues":["WiltshireCouncil","None","None"]}