{"uid":"25067a8b67390ea0","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1713252784178,"stop":1713252785080,"duration":902},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe4ff4d4860>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe4fe8c6810>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe4ff4d4860>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe4fe8c6810>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1713252784178,"stop":1713252784179,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1713252784179,"stop":1713252785080,"duration":901},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1052-544"},{"name":"thread","value":"2745-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":125,"broken":0,"skipped":0,"passed":122,"unknown":0,"total":247},"items":[{"uid":"c74d0cb643d26978","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1695//#testresult/c74d0cb643d26978","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1713227205694,"stop":1713227206299,"duration":605}},{"uid":"56c0505000e149e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1692//#testresult/56c0505000e149e9","status":"passed","time":{"start":1713207801127,"stop":1713207801764,"duration":637}},{"uid":"9a31e1759862c34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1683//#testresult/9a31e1759862c34","status":"passed","time":{"start":1713188336035,"stop":1713188336683,"duration":648}},{"uid":"9909273c0cee6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1682//#testresult/9909273c0cee6b","status":"passed","time":{"start":1713149811872,"stop":1713149812816,"duration":944}},{"uid":"d0aa69e23932dbfc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1681//#testresult/d0aa69e23932dbfc","status":"passed","time":{"start":1713053325448,"stop":1713053326927,"duration":1479}},{"uid":"d06ce178fe12894","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1677//#testresult/d06ce178fe12894","status":"passed","time":{"start":1712967839854,"stop":1712967840764,"duration":910}},{"uid":"2ce3c87158926383","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1675//#testresult/2ce3c87158926383","status":"passed","time":{"start":1712881686496,"stop":1712881687218,"duration":722}},{"uid":"c5b63d8ecf44ae1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1674//#testresult/c5b63d8ecf44ae1c","status":"passed","time":{"start":1712795401982,"stop":1712795402716,"duration":734}},{"uid":"1b29e490545b05c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1673//#testresult/1b29e490545b05c6","status":"passed","time":{"start":1712710402669,"stop":1712710403404,"duration":735}},{"uid":"2ba7f61ffffc778e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1671//#testresult/2ba7f61ffffc778e","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1712700395051,"stop":1712700396964,"duration":1913}},{"uid":"93fdf4cd50c43022","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1668//#testresult/93fdf4cd50c43022","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1712622468533,"stop":1712622469530,"duration":997}},{"uid":"e1423c7b251747e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1667//#testresult/e1423c7b251747e3","status":"passed","time":{"start":1712536110913,"stop":1712536111580,"duration":667}},{"uid":"b9b6f32699f5a7f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1666//#testresult/b9b6f32699f5a7f9","status":"passed","time":{"start":1712449851608,"stop":1712449852836,"duration":1228}},{"uid":"a9860c0fc1e3e410","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1665//#testresult/a9860c0fc1e3e410","status":"passed","time":{"start":1712363230079,"stop":1712363230967,"duration":888}},{"uid":"6715b91d8a7ecfdf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1664//#testresult/6715b91d8a7ecfdf","status":"passed","time":{"start":1712276853601,"stop":1712276854769,"duration":1168}},{"uid":"386e00726564ffd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1660//#testresult/386e00726564ffd4","status":"passed","time":{"start":1712190486202,"stop":1712190487030,"duration":828}},{"uid":"20e5b8cd7af554b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1657//#testresult/20e5b8cd7af554b8","status":"passed","time":{"start":1712136932965,"stop":1712136933645,"duration":680}},{"uid":"38841688301efd0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1655//#testresult/38841688301efd0c","status":"passed","time":{"start":1712104023430,"stop":1712104024062,"duration":632}},{"uid":"bc02997686f048e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1654//#testresult/bc02997686f048e5","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1712017659889,"stop":1712017660495,"duration":606}},{"uid":"f5c0010fc372bf58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1653//#testresult/f5c0010fc372bf58","status":"passed","time":{"start":1711931444297,"stop":1711931445196,"duration":899}}]},"tags":[]},"source":"25067a8b67390ea0.json","parameterValues":["LiverpoolCityCouncil","None","None"]}