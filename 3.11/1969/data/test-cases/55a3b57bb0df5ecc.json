{"uid":"55a3b57bb0df5ecc","name":"Validate Council Output [WychavonDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"ab4be59a4392f5fb1301e38bba96913a","time":{"start":1720140172761,"stop":1720140331477,"duration":158716},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x563b2a3b969a <unknown>\n#1 0x563b2a09c0dc <unknown>\n#2 0x563b2a093c70 <unknown>\n#3 0x563b2a083772 <unknown>\n#4 0x563b2a084df2 <unknown>\n#5 0x563b2a083a2d <unknown>\n#6 0x563b2a083143 <unknown>\n#7 0x563b2a083035 <unknown>\n#8 0x563b2a080f76 <unknown>\n#9 0x563b2a08147a <unknown>\n#10 0x563b2a09eb27 <unknown>\n#11 0x563b2a12b1f5 <unknown>\n#12 0x563b2a10b872 <unknown>\n#13 0x563b2a12a5c3 <unknown>\n#14 0x563b2a10b613 <unknown>\n#15 0x563b2a0db4f7 <unknown>\n#16 0x563b2a0dbe4e <unknown>\n#17 0x563b2a37f86b <unknown>\n#18 0x563b2a383911 <unknown>\n#19 0x563b2a36b35e <unknown>\n#20 0x563b2a384472 <unknown>\n#21 0x563b2a34fcbf <unknown>\n#22 0x563b2a3a9098 <unknown>\n#23 0x563b2a3a9270 <unknown>\n#24 0x563b2a3b87cc <unknown>\n#25 0x7f6cec304ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f7d65532c00>\nrequest = <FixtureRequest for <Function test_scenario_outline[WychavonDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7d781fd1d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WychavonDistrictCouncil.py:48: in parse_data\n    driver.get(url)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7d64456c90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x563b2a3a9270 \\\\u003Cunknown>\\\\n#24 0x563b2a3b87cc \\\\u003Cunknown>\\\\n#25 0x7f6cec304ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x563b2a3b969a <unknown>\nE       #1 0x563b2a09c0dc <unknown>\nE       #2 0x563b2a093c70 <unknown>\nE       #3 0x563b2a083772 <unknown>\nE       #4 0x563b2a084df2 <unknown>\nE       #5 0x563b2a083a2d <unknown>\nE       #6 0x563b2a083143 <unknown>\nE       #7 0x563b2a083035 <unknown>\nE       #8 0x563b2a080f76 <unknown>\nE       #9 0x563b2a08147a <unknown>\nE       #10 0x563b2a09eb27 <unknown>\nE       #11 0x563b2a12b1f5 <unknown>\nE       #12 0x563b2a10b872 <unknown>\nE       #13 0x563b2a12a5c3 <unknown>\nE       #14 0x563b2a10b613 <unknown>\nE       #15 0x563b2a0db4f7 <unknown>\nE       #16 0x563b2a0dbe4e <unknown>\nE       #17 0x563b2a37f86b <unknown>\nE       #18 0x563b2a383911 <unknown>\nE       #19 0x563b2a36b35e <unknown>\nE       #20 0x563b2a384472 <unknown>\nE       #21 0x563b2a34fcbf <unknown>\nE       #22 0x563b2a3a9098 <unknown>\nE       #23 0x563b2a3a9270 <unknown>\nE       #24 0x563b2a3b87cc <unknown>\nE       #25 0x7f6cec304ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x563b2a3b969a <unknown>\n#1 0x563b2a09c0dc <unknown>\n#2 0x563b2a093c70 <unknown>\n#3 0x563b2a083772 <unknown>\n#4 0x563b2a084df2 <unknown>\n#5 0x563b2a083a2d <unknown>\n#6 0x563b2a083143 <unknown>\n#7 0x563b2a083035 <unknown>\n#8 0x563b2a080f76 <unknown>\n#9 0x563b2a08147a <unknown>\n#10 0x563b2a09eb27 <unknown>\n#11 0x563b2a12b1f5 <unknown>\n#12 0x563b2a10b872 <unknown>\n#13 0x563b2a12a5c3 <unknown>\n#14 0x563b2a10b613 <unknown>\n#15 0x563b2a0db4f7 <unknown>\n#16 0x563b2a0dbe4e <unknown>\n#17 0x563b2a37f86b <unknown>\n#18 0x563b2a383911 <unknown>\n#19 0x563b2a36b35e <unknown>\n#20 0x563b2a384472 <unknown>\n#21 0x563b2a34fcbf <unknown>\n#22 0x563b2a3a9098 <unknown>\n#23 0x563b2a3a9270 <unknown>\n#24 0x563b2a3b87cc <unknown>\n#25 0x7f6cec304ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f7d65532c00>\nrequest = <FixtureRequest for <Function test_scenario_outline[WychavonDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7d781fd1d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WychavonDistrictCouncil.py:48: in parse_data\n    driver.get(url)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7d64456c90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x563b2a3a9270 \\\\u003Cunknown>\\\\n#24 0x563b2a3b87cc \\\\u003Cunknown>\\\\n#25 0x7f6cec304ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x563b2a3b969a <unknown>\nE       #1 0x563b2a09c0dc <unknown>\nE       #2 0x563b2a093c70 <unknown>\nE       #3 0x563b2a083772 <unknown>\nE       #4 0x563b2a084df2 <unknown>\nE       #5 0x563b2a083a2d <unknown>\nE       #6 0x563b2a083143 <unknown>\nE       #7 0x563b2a083035 <unknown>\nE       #8 0x563b2a080f76 <unknown>\nE       #9 0x563b2a08147a <unknown>\nE       #10 0x563b2a09eb27 <unknown>\nE       #11 0x563b2a12b1f5 <unknown>\nE       #12 0x563b2a10b872 <unknown>\nE       #13 0x563b2a12a5c3 <unknown>\nE       #14 0x563b2a10b613 <unknown>\nE       #15 0x563b2a0db4f7 <unknown>\nE       #16 0x563b2a0dbe4e <unknown>\nE       #17 0x563b2a37f86b <unknown>\nE       #18 0x563b2a383911 <unknown>\nE       #19 0x563b2a36b35e <unknown>\nE       #20 0x563b2a384472 <unknown>\nE       #21 0x563b2a34fcbf <unknown>\nE       #22 0x563b2a3a9098 <unknown>\nE       #23 0x563b2a3a9270 <unknown>\nE       #24 0x563b2a3b87cc <unknown>\nE       #25 0x7f6cec304ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1720140172761,"stop":1720140172762,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720140172762,"stop":1720140331477,"duration":158715},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x563b2a3b969a <unknown>\n#1 0x563b2a09c0dc <unknown>\n#2 0x563b2a093c70 <unknown>\n#3 0x563b2a083772 <unknown>\n#4 0x563b2a084df2 <unknown>\n#5 0x563b2a083a2d <unknown>\n#6 0x563b2a083143 <unknown>\n#7 0x563b2a083035 <unknown>\n#8 0x563b2a080f76 <unknown>\n#9 0x563b2a08147a <unknown>\n#10 0x563b2a09eb27 <unknown>\n#11 0x563b2a12b1f5 <unknown>\n#12 0x563b2a10b872 <unknown>\n#13 0x563b2a12a5c3 <unknown>\n#14 0x563b2a10b613 <unknown>\n#15 0x563b2a0db4f7 <unknown>\n#16 0x563b2a0dbe4e <unknown>\n#17 0x563b2a37f86b <unknown>\n#18 0x563b2a383911 <unknown>\n#19 0x563b2a36b35e <unknown>\n#20 0x563b2a384472 <unknown>\n#21 0x563b2a34fcbf <unknown>\n#22 0x563b2a3a9098 <unknown>\n#23 0x563b2a3a9270 <unknown>\n#24 0x563b2a3b87cc <unknown>\n#25 0x7f6cec304ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x563b2a3b969a <unknown>\n#1 0x563b2a09c0dc <unknown>\n#2 0x563b2a093c70 <unknown>\n#3 0x563b2a083772 <unknown>\n#4 0x563b2a084df2 <unknown>\n#5 0x563b2a083a2d <unknown>\n#6 0x563b2a083143 <unknown>\n#7 0x563b2a083035 <unknown>\n#8 0x563b2a080f76 <unknown>\n#9 0x563b2a08147a <unknown>\n#10 0x563b2a09eb27 <unknown>\n#11 0x563b2a12b1f5 <unknown>\n#12 0x563b2a10b872 <unknown>\n#13 0x563b2a12a5c3 <unknown>\n#14 0x563b2a10b613 <unknown>\n#15 0x563b2a0db4f7 <unknown>\n#16 0x563b2a0dbe4e <unknown>\n#17 0x563b2a37f86b <unknown>\n#18 0x563b2a383911 <unknown>\n#19 0x563b2a36b35e <unknown>\n#20 0x563b2a384472 <unknown>\n#21 0x563b2a34fcbf <unknown>\n#22 0x563b2a3a9098 <unknown>\n#23 0x563b2a3a9270 <unknown>\n#24 0x563b2a3b87cc <unknown>\n#25 0x7f6cec304ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f8e401749dc08c3e","name":"log","source":"f8e401749dc08c3e.txt","type":"text/plain","size":928},{"uid":"dbda584bd3004382","name":"stdout","source":"dbda584bd3004382.txt","type":"text/plain","size":50}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az700-513"},{"name":"thread","value":"2695-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WychavonDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"1c37d3c472a5eb55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/1c37d3c472a5eb55","status":"passed","time":{"start":1720053838731,"stop":1720053866736,"duration":28005}},{"uid":"77d8182bc6f2f5f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/77d8182bc6f2f5f5","status":"passed","time":{"start":1719967399366,"stop":1719967430299,"duration":30933}},{"uid":"fec64bde874cbf7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1966//#testresult/fec64bde874cbf7f","status":"passed","time":{"start":1719881041158,"stop":1719881058567,"duration":17409}},{"uid":"aa3260708714c907","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1965//#testresult/aa3260708714c907","status":"passed","time":{"start":1719795085240,"stop":1719795091359,"duration":6119}},{"uid":"5ce86400bfc565c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1964//#testresult/5ce86400bfc565c3","status":"passed","time":{"start":1719708600246,"stop":1719708606113,"duration":5867}},{"uid":"7b4b3d92eeb8e4c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1962//#testresult/7b4b3d92eeb8e4c1","status":"passed","time":{"start":1719621936551,"stop":1719621969794,"duration":33243}},{"uid":"d3ea67713c6e202e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1958//#testresult/d3ea67713c6e202e","status":"passed","time":{"start":1719535380490,"stop":1719535410222,"duration":29732}},{"uid":"5ae699822af019cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1954//#testresult/5ae699822af019cd","status":"passed","time":{"start":1719362802676,"stop":1719362812023,"duration":9347}},{"uid":"3bfb259c4b712ac8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/3bfb259c4b712ac8","status":"passed","time":{"start":1719276362835,"stop":1719276368383,"duration":5548}},{"uid":"da3def8e96637b19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/da3def8e96637b19","status":"passed","time":{"start":1719190063244,"stop":1719190069472,"duration":6228}},{"uid":"ae87a6b6bf2d3131","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/ae87a6b6bf2d3131","status":"passed","time":{"start":1719103607707,"stop":1719103619336,"duration":11629}},{"uid":"74836ac5d27eccd9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/74836ac5d27eccd9","status":"passed","time":{"start":1719017179597,"stop":1719017210706,"duration":31109}},{"uid":"3818d145d4da99fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/3818d145d4da99fd","status":"passed","time":{"start":1718930832832,"stop":1718930841984,"duration":9152}},{"uid":"27911c65774d5b1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/27911c65774d5b1d","status":"passed","time":{"start":1718844304639,"stop":1718844310942,"duration":6303}},{"uid":"77e345dd8e1633a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/77e345dd8e1633a1","status":"passed","time":{"start":1718758045267,"stop":1718758087872,"duration":42605}},{"uid":"936eacd09d794de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/936eacd09d794de","status":"passed","time":{"start":1718671596506,"stop":1718671602068,"duration":5562}},{"uid":"8d0ff5dd8162e275","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1945//#testresult/8d0ff5dd8162e275","status":"passed","time":{"start":1718585394012,"stop":1718585401265,"duration":7253}},{"uid":"85387befdf804bad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/85387befdf804bad","status":"passed","time":{"start":1718498815418,"stop":1718498837685,"duration":22267}},{"uid":"232badad69d76001","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/232badad69d76001","status":"passed","time":{"start":1718412402295,"stop":1718412450952,"duration":48657}},{"uid":"582a8129d69ecbf6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/582a8129d69ecbf6","status":"passed","time":{"start":1718325879303,"stop":1718325902564,"duration":23261}}]},"tags":[]},"source":"55a3b57bb0df5ecc.json","parameterValues":["WychavonDistrictCouncil"]}