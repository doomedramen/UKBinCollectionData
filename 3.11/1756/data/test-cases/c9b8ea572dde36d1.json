{"uid":"c9b8ea572dde36d1","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1715214420422,"stop":1715214425499,"duration":5077},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc997874900>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc996e67fd0>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fc996eb9f50>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fc996eba790>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'c51bf5de491ca737d027b835e68754301759dd08', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc997874900>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc996e67fd0>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fc996eb9f50>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7fc996eba790>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'c51bf5de491ca737d027b835e68754301759dd08', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1715214420422,"stop":1715214420423,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1715214420423,"stop":1715214425499,"duration":5076},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1249-395"},{"name":"thread","value":"2752-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":180,"broken":0,"skipped":0,"passed":97,"unknown":0,"total":277},"items":[{"uid":"8e7472b33d012208","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1743//#testresult/8e7472b33d012208","status":"passed","time":{"start":1715041614377,"stop":1715041619397,"duration":5020}},{"uid":"8faeaa33e8f1448e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1742//#testresult/8faeaa33e8f1448e","status":"passed","time":{"start":1714955278436,"stop":1714955283601,"duration":5165}},{"uid":"251a82ee14b3b490","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1741//#testresult/251a82ee14b3b490","status":"passed","time":{"start":1714868948477,"stop":1714868953108,"duration":4631}},{"uid":"f78540c9b8ff5924","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1740//#testresult/f78540c9b8ff5924","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1714782386251,"stop":1714782388116,"duration":1865}},{"uid":"941fe49d09271b96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1739//#testresult/941fe49d09271b96","status":"passed","time":{"start":1714696016706,"stop":1714696021188,"duration":4482}},{"uid":"f22a374049d9f116","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1738//#testresult/f22a374049d9f116","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1714609604319,"stop":1714609609111,"duration":4792}},{"uid":"bef29f0e7694a827","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1735//#testresult/bef29f0e7694a827","status":"passed","time":{"start":1714523317559,"stop":1714523322299,"duration":4740}},{"uid":"270704779f56adb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1734//#testresult/270704779f56adb8","status":"passed","time":{"start":1714436754949,"stop":1714436759483,"duration":4534}},{"uid":"c730bb0b06db0e1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1732//#testresult/c730bb0b06db0e1c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1714350492645,"stop":1714350494099,"duration":1454}},{"uid":"887c5665f549423b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1724//#testresult/887c5665f549423b","status":"passed","time":{"start":1714264187445,"stop":1714264192803,"duration":5358}},{"uid":"6b1ccb3499321e96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1722//#testresult/6b1ccb3499321e96","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1714234182114,"stop":1714234183290,"duration":1176}},{"uid":"5a340579a2e7baf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1714//#testresult/5a340579a2e7baf3","status":"passed","time":{"start":1714232695197,"stop":1714232699614,"duration":4417}},{"uid":"dc203b888c6627e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1713//#testresult/dc203b888c6627e4","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1714177560028,"stop":1714177561298,"duration":1270}},{"uid":"fe6a4c9fa830804d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1712//#testresult/fe6a4c9fa830804d","status":"passed","time":{"start":1714091184058,"stop":1714091189037,"duration":4979}},{"uid":"4ad90fbc9efbb269","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1711//#testresult/4ad90fbc9efbb269","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1714006425183,"stop":1714006430313,"duration":5130}},{"uid":"32e0f1d751380c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1710//#testresult/32e0f1d751380c6","status":"passed","time":{"start":1713918390950,"stop":1713918396503,"duration":5553}},{"uid":"74fab24d2a52c332","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1709//#testresult/74fab24d2a52c332","status":"passed","time":{"start":1713832040822,"stop":1713832046048,"duration":5226}},{"uid":"9d271a3e25d81302","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1708//#testresult/9d271a3e25d81302","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1713745665863,"stop":1713745667505,"duration":1642}},{"uid":"26e8024fc50c25ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1707//#testresult/26e8024fc50c25ce","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1713659326304,"stop":1713659327415,"duration":1111}},{"uid":"a5c9f9e23472f482","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1706//#testresult/a5c9f9e23472f482","status":"passed","time":{"start":1713572740215,"stop":1713572745604,"duration":5389}}]},"tags":[]},"source":"c9b8ea572dde36d1.json","parameterValues":["CroydonCouncil","None","None"]}