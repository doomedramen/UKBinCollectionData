{"uid":"89eb94fc9c389963","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1702366467210,"stop":1702366468340,"duration":1130},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc80adb2020>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc80aceac50>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:62: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc80adb2020>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc80aceac50>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:62: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1702366467210,"stop":1702366467211,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1702366467211,"stop":1702366468340,"duration":1129},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az665-620"},{"name":"thread","value":"2841-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":17,"unknown":0,"total":21},"items":[{"uid":"d8e7ffe90e12881f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/d8e7ffe90e12881f","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1702343932999,"stop":1702343934054,"duration":1055}},{"uid":"96efa530e68bccd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/96efa530e68bccd6","status":"passed","time":{"start":1702257521868,"stop":1702257523232,"duration":1364}},{"uid":"e873987152f30cb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/e873987152f30cb3","status":"passed","time":{"start":1702171374057,"stop":1702171375320,"duration":1263}},{"uid":"9d28c087ba2e939e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/9d28c087ba2e939e","status":"passed","time":{"start":1702084612007,"stop":1702084613086,"duration":1079}},{"uid":"7119cfed1e0f594c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/7119cfed1e0f594c","status":"passed","time":{"start":1702066701785,"stop":1702066702903,"duration":1118}},{"uid":"ab1646e7f00ff411","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/ab1646e7f00ff411","status":"passed","time":{"start":1702054346560,"stop":1702054348433,"duration":1873}},{"uid":"405dfa0568573f19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/405dfa0568573f19","status":"passed","time":{"start":1702054377290,"stop":1702054378294,"duration":1004}},{"uid":"ce58f0e93cbea59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/ce58f0e93cbea59","status":"passed","time":{"start":1701998344443,"stop":1701998345692,"duration":1249}},{"uid":"e16828d73d10851b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/e16828d73d10851b","status":"passed","time":{"start":1701990349644,"stop":1701990351058,"duration":1414}},{"uid":"4674f4c13e02936","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/4674f4c13e02936","status":"passed","time":{"start":1701990317385,"stop":1701990318752,"duration":1367}},{"uid":"116733b54e574741","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/116733b54e574741","status":"passed","time":{"start":1701942766149,"stop":1701942767330,"duration":1181}},{"uid":"37ea591e3b631e85","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/37ea591e3b631e85","status":"passed","time":{"start":1701936595068,"stop":1701936596254,"duration":1186}},{"uid":"716e08d8902522f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/716e08d8902522f5","status":"passed","time":{"start":1701936555084,"stop":1701936555992,"duration":908}},{"uid":"2cd96afa1d88d91e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/2cd96afa1d88d91e","status":"passed","time":{"start":1701912035065,"stop":1701912036768,"duration":1703}},{"uid":"a44fdaebf3962033","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/a44fdaebf3962033","status":"passed","time":{"start":1701904835684,"stop":1701904836573,"duration":889}},{"uid":"2350d23d4f17235f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/2350d23d4f17235f","status":"passed","time":{"start":1701882500135,"stop":1701882502114,"duration":1979}},{"uid":"c1862076ba84a669","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/c1862076ba84a669","status":"passed","time":{"start":1701882531368,"stop":1701882532813,"duration":1445}},{"uid":"fe26af7dfd3da2e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/fe26af7dfd3da2e1","status":"passed","time":{"start":1701825521774,"stop":1701825522904,"duration":1130}},{"uid":"4c7a3bc85b91bb1b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/4c7a3bc85b91bb1b","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1701795506432,"stop":1701795507499,"duration":1067}},{"uid":"527965325c52beab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/527965325c52beab","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1701795482402,"stop":1701795483523,"duration":1121}}]},"tags":[]},"source":"89eb94fc9c389963.json","parameterValues":["BarnsleyMBCouncil","None","None"]}