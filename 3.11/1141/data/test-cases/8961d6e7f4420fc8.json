{"uid":"8961d6e7f4420fc8","name":"Validate Council Output [BasingstokeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"0d6549c1d81ad728472392d1bde7fbc5","time":{"start":1700616011147,"stop":1700616012145,"duration":998},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa352643100>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa3508b2a10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa3508b2a10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fa352643100>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa3508b2a10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fa3508b2a10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: BasingstokeCouncil","time":{"start":1700616011147,"stop":1700616011148,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from BasingstokeCouncil using None and the None is set","time":{"start":1700616011148,"stop":1700616012143,"duration":995},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700616012143,"stop":1700616012143,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700616012143,"stop":1700616012145,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1535-262"},{"name":"thread","value":"2698-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BasingstokeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":22},"items":[{"uid":"8eea8237365ae8d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/8eea8237365ae8d0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529648240,"stop":1700529649270,"duration":1030}},{"uid":"56af9de2644513ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/56af9de2644513ee","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443135123,"stop":1700443135998,"duration":875}},{"uid":"4f763eee077daffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/4f763eee077daffc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700356960636,"stop":1700356961271,"duration":635}},{"uid":"5936e98c10b3a5f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/5936e98c10b3a5f2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270222693,"stop":1700270223591,"duration":898}},{"uid":"ad184f400a7d9957","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/ad184f400a7d9957","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700183875928,"stop":1700183876889,"duration":961}},{"uid":"d29ea835fd131315","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/d29ea835fd131315","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097518977,"stop":1700097519647,"duration":670}},{"uid":"127cf58af65ef313","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/127cf58af65ef313","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011032467,"stop":1700011033035,"duration":568}},{"uid":"2a735f2e4a03dab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/2a735f2e4a03dab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924563982,"stop":1699924565248,"duration":1266}},{"uid":"14af4ceac1714958","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/14af4ceac1714958","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838242224,"stop":1699838243068,"duration":844}},{"uid":"4dca1285ba64b1b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/4dca1285ba64b1b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752016083,"stop":1699752017044,"duration":961}},{"uid":"aeeeba08d18cf101","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/aeeeba08d18cf101","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699668883061,"stop":1699668883812,"duration":751}},{"uid":"650d6f16878de14e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1124//#testresult/650d6f16878de14e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699578912347,"stop":1699578912934,"duration":587}},{"uid":"1751f242606ace7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/1751f242606ace7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492582156,"stop":1699492583031,"duration":875}},{"uid":"ca6281e9ab054645","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/ca6281e9ab054645","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481254918,"stop":1699481255916,"duration":998}},{"uid":"43f2b2afc5235f02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/43f2b2afc5235f02","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481280020,"stop":1699481280602,"duration":582}},{"uid":"6badbf515b47322d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/6badbf515b47322d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445054282,"stop":1699445054977,"duration":695}},{"uid":"24857822401a7142","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/24857822401a7142","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406121211,"stop":1699406121831,"duration":620}},{"uid":"92db5ccc8eb7a791","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1114//#testresult/92db5ccc8eb7a791","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699319780438,"stop":1699319781041,"duration":603}},{"uid":"ebd43597064d8966","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1113//#testresult/ebd43597064d8966","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233443556,"stop":1699233444328,"duration":772}},{"uid":"7a01bddca4d39e19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1111//#testresult/7a01bddca4d39e19","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699170654818,"stop":1699170655815,"duration":997}}]},"tags":[]},"source":"8961d6e7f4420fc8.json","parameterValues":["BasingstokeCouncil","None","None"]}