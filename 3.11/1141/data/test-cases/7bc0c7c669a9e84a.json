{"uid":"7bc0c7c669a9e84a","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1700616096497,"stop":1700616099000,"duration":2503},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f140f7e04a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f13ffe6b750>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f13ffe6b750>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f140f7e04a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f13ffe6b750>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f13ffe6b750>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1700616096497,"stop":1700616096498,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1700616096498,"stop":1700616098997,"duration":2499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700616098997,"stop":1700616098998,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700616098998,"stop":1700616099000,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1535-262"},{"name":"thread","value":"2704-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":14,"unknown":0,"total":22},"items":[{"uid":"c5e44cfb85396d03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/c5e44cfb85396d03","status":"passed","time":{"start":1700529762152,"stop":1700529763620,"duration":1468}},{"uid":"ca36cacab836c624","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/ca36cacab836c624","status":"passed","time":{"start":1700443248481,"stop":1700443249638,"duration":1157}},{"uid":"455b7d4173c98cab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/455b7d4173c98cab","status":"passed","time":{"start":1700357038314,"stop":1700357040253,"duration":1939}},{"uid":"352a995a93e34fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/352a995a93e34fb","status":"passed","time":{"start":1700270330253,"stop":1700270333537,"duration":3284}},{"uid":"ec9b22c568ebe27b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/ec9b22c568ebe27b","status":"passed","time":{"start":1700183973669,"stop":1700183977294,"duration":3625}},{"uid":"b94b160000e1571b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/b94b160000e1571b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097610258,"stop":1700097614922,"duration":4664}},{"uid":"5985446d56d2b002","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/5985446d56d2b002","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011141640,"stop":1700011144133,"duration":2493}},{"uid":"dc4a1dd8b449a3b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/dc4a1dd8b449a3b2","status":"passed","time":{"start":1699924929038,"stop":1699924931231,"duration":2193}},{"uid":"ca95fc61377032e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/ca95fc61377032e9","status":"passed","time":{"start":1699838338912,"stop":1699838341718,"duration":2806}},{"uid":"292d4b0647b851f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/292d4b0647b851f0","status":"passed","time":{"start":1699752141034,"stop":1699752143208,"duration":2174}},{"uid":"50afd90fca97c739","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/50afd90fca97c739","status":"passed","time":{"start":1699669269360,"stop":1699669271329,"duration":1969}},{"uid":"49e7993bd79a7dde","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1124//#testresult/49e7993bd79a7dde","status":"passed","time":{"start":1699578989801,"stop":1699578993985,"duration":4184}},{"uid":"226d94b4ecca197d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/226d94b4ecca197d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492690937,"stop":1699492695339,"duration":4402}},{"uid":"f39e4db29c6fb6b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/f39e4db29c6fb6b7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481579346,"stop":1699481580951,"duration":1605}},{"uid":"acef47b42d064ae8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/acef47b42d064ae8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481502400,"stop":1699481503693,"duration":1293}},{"uid":"3201f144f27dd69e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/3201f144f27dd69e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445132797,"stop":1699445136337,"duration":3540}},{"uid":"5c382c63206a0698","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/5c382c63206a0698","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699406224830,"stop":1699406228699,"duration":3869}},{"uid":"61e8369b578f373d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1114//#testresult/61e8369b578f373d","status":"passed","time":{"start":1699320000162,"stop":1699320001946,"duration":1784}},{"uid":"24d625c9037f605a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1113//#testresult/24d625c9037f605a","status":"passed","time":{"start":1699233706356,"stop":1699233707927,"duration":1571}},{"uid":"526de3b99170d443","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1111//#testresult/526de3b99170d443","status":"passed","time":{"start":1699171104887,"stop":1699171106963,"duration":2076}}]},"tags":[]},"source":"7bc0c7c669a9e84a.json","parameterValues":["SouthNorfolkCouncil","None","None"]}