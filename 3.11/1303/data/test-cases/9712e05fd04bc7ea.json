{"uid":"9712e05fd04bc7ea","name":"Validate Council Output [TorridgeDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"da903249529007ec357275ac5f075b6c","time":{"start":1703717446022,"stop":1703717448428,"duration":2406},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fd8e3354540>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd8e2aa85d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fd8e2aa85d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fd8e3354540>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fd8e2aa85d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fd8e2aa85d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: TorridgeDistrictCouncil","time":{"start":1703717446023,"stop":1703717446023,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from TorridgeDistrictCouncil using None and the None is set","time":{"start":1703717446023,"stop":1703717448427,"duration":2404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703717448427,"stop":1703717448427,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703717448427,"stop":1703717448428,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az777-743"},{"name":"thread","value":"2776-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TorridgeDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":23,"broken":0,"skipped":0,"passed":75,"unknown":0,"total":98},"items":[{"uid":"afddafd3500d5a16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/afddafd3500d5a16","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639876768,"stop":1703639879294,"duration":2526}},{"uid":"bd77a1ab0f507eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/bd77a1ab0f507eb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553602614,"stop":1703553606368,"duration":3754}},{"uid":"502b59d34f1cb6b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/502b59d34f1cb6b7","status":"passed","time":{"start":1703541248222,"stop":1703541251204,"duration":2982}},{"uid":"b5028c6df27ef38b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/b5028c6df27ef38b","status":"passed","time":{"start":1703467256362,"stop":1703467259724,"duration":3362}},{"uid":"370cb2e73b4bbade","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/370cb2e73b4bbade","status":"passed","time":{"start":1703416562719,"stop":1703416565948,"duration":3229}},{"uid":"b83ac846dff10167","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/b83ac846dff10167","status":"passed","time":{"start":1703416505444,"stop":1703416508565,"duration":3121}},{"uid":"9cb34afb28eec9c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/9cb34afb28eec9c1","status":"passed","time":{"start":1703381208578,"stop":1703381212617,"duration":4039}},{"uid":"620de9b7c02c35fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/620de9b7c02c35fc","status":"passed","time":{"start":1703294203153,"stop":1703294206330,"duration":3177}},{"uid":"e8be768c9688546c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/e8be768c9688546c","status":"passed","time":{"start":1703207944546,"stop":1703207947983,"duration":3437}},{"uid":"9dacd44fb0bcff85","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/9dacd44fb0bcff85","status":"passed","time":{"start":1703121596704,"stop":1703121599552,"duration":2848}},{"uid":"99b2f9bd18a4ad31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/99b2f9bd18a4ad31","status":"passed","time":{"start":1703034443281,"stop":1703034446375,"duration":3094}},{"uid":"fd637daa9cba81dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/fd637daa9cba81dd","status":"passed","time":{"start":1703025065927,"stop":1703025068680,"duration":2753}},{"uid":"e75cdda13405705f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/e75cdda13405705f","status":"passed","time":{"start":1703025017889,"stop":1703025020515,"duration":2626}},{"uid":"f56e1a7a3a826293","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/f56e1a7a3a826293","status":"passed","time":{"start":1702948840972,"stop":1702948844159,"duration":3187}},{"uid":"1a2e6dc07bd64ad9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/1a2e6dc07bd64ad9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862463124,"stop":1702862465982,"duration":2858}},{"uid":"ee5dfe379cb6fc6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/ee5dfe379cb6fc6b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702860230242,"stop":1702860232946,"duration":2704}},{"uid":"63d951ef2381826","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/63d951ef2381826","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843674186,"stop":1702843677139,"duration":2953}},{"uid":"aab3aaf562ebb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/aab3aaf562ebb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809629389,"stop":1702809632146,"duration":2757}},{"uid":"a126276e27544be3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/a126276e27544be3","status":"passed","time":{"start":1702657358131,"stop":1702657361116,"duration":2985}},{"uid":"4d7b1f8a41642119","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/4d7b1f8a41642119","status":"passed","time":{"start":1702657556728,"stop":1702657559519,"duration":2791}}]},"tags":[]},"source":"9712e05fd04bc7ea.json","parameterValues":["TorridgeDistrictCouncil","None","None"]}