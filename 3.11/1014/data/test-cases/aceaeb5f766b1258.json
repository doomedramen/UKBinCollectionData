{"uid":"aceaeb5f766b1258","name":"Validate Council Output [GuildfordCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"316f6b3276320661fa68609de6296157","time":{"start":1697618261003,"stop":1697618263458,"duration":2455},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f4b1cafb740>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4b0f386010>, 'council': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4b1da68b50>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f4b1cafb740>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4b0f386010>, 'council': 'GuildfordCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4b1da68b50>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1697618261003,"stop":1697618261003,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GuildfordCouncil","time":{"start":1697618261003,"stop":1697618263458,"duration":2455},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az397-954"},{"name":"thread","value":"2120-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":84,"unknown":0,"total":97},"items":[{"uid":"3bb15c2445a42af0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1010//#testresult/3bb15c2445a42af0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697591715509,"stop":1697591718011,"duration":2502}},{"uid":"f0eb4ed1eed05809","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1009//#testresult/f0eb4ed1eed05809","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697542566027,"stop":1697542567070,"duration":1043}},{"uid":"68df17cce89c5069","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1008//#testresult/68df17cce89c5069","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697505324784,"stop":1697505326025,"duration":1241}},{"uid":"90d61174ab84df68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1006//#testresult/90d61174ab84df68","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697484635078,"stop":1697484636517,"duration":1439}},{"uid":"9cfcc3251c8c44bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1005//#testresult/9cfcc3251c8c44bc","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697484575781,"stop":1697484577426,"duration":1645}},{"uid":"b77726be072cc97a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1004//#testresult/b77726be072cc97a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697418959591,"stop":1697418961368,"duration":1777}},{"uid":"7c39b1b0defa4b24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/7c39b1b0defa4b24","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697403147101,"stop":1697403148383,"duration":1282}},{"uid":"a723b2438ed8a477","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/a723b2438ed8a477","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697399713303,"stop":1697399714803,"duration":1500}},{"uid":"5bff68bdf0d8fb49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/994//#testresult/5bff68bdf0d8fb49","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697366972848,"stop":1697366975467,"duration":2619}},{"uid":"80b264ac38efb934","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/993//#testresult/80b264ac38efb934","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697366914048,"stop":1697366915275,"duration":1227}},{"uid":"837795b08258ea38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/992//#testresult/837795b08258ea38","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697332795782,"stop":1697332797498,"duration":1716}},{"uid":"86fff29d4d0771c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/988//#testresult/86fff29d4d0771c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1697245958341,"stop":1697245959769,"duration":1428}},{"uid":"c988e2c9fc9b5971","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/986//#testresult/c988e2c9fc9b5971","status":"passed","time":{"start":1697159801980,"stop":1697159805941,"duration":3961}},{"uid":"7f26ff909d7dd77a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/985//#testresult/7f26ff909d7dd77a","status":"passed","time":{"start":1697073152630,"stop":1697073154984,"duration":2354}},{"uid":"843086cd38a8f29f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/984//#testresult/843086cd38a8f29f","status":"passed","time":{"start":1697052878775,"stop":1697052881168,"duration":2393}},{"uid":"52edd277923b56ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/981//#testresult/52edd277923b56ed","status":"passed","time":{"start":1697050730096,"stop":1697050732141,"duration":2045}},{"uid":"1adb32e2b855f822","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/978//#testresult/1adb32e2b855f822","status":"passed","time":{"start":1696986830019,"stop":1696986835860,"duration":5841}},{"uid":"25b5c9ab923cdf20","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/977//#testresult/25b5c9ab923cdf20","status":"passed","time":{"start":1696900427079,"stop":1696900430555,"duration":3476}},{"uid":"58e22e04f8895daf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/976//#testresult/58e22e04f8895daf","status":"passed","time":{"start":1696814071370,"stop":1696814073509,"duration":2139}},{"uid":"995b27fce3ceb8b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/975//#testresult/995b27fce3ceb8b9","status":"passed","time":{"start":1696727946598,"stop":1696727949522,"duration":2924}}]},"tags":[]},"source":"aceaeb5f766b1258.json","parameterValues":["GuildfordCouncil"]}