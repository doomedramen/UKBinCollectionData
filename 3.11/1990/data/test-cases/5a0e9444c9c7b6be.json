{"uid":"5a0e9444c9c7b6be","name":"Validate Council Output [BexleyCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b14d94c00a7a02b15ede5862fe9627b6","time":{"start":1721692877370,"stop":1721692933519,"duration":56149},"status":"failed","statusMessage":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa5eca98360>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa5ecafba90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:120: in parse_data\n    parsed_date = datetime.strptime(date_text, \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Being collected today', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Being collected today' does not match format '%A %d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa5eca98360>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa5ecafba90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:120: in parse_data\n    parsed_date = datetime.strptime(date_text, \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Being collected today', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Being collected today' does not match format '%A %d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1721692877371,"stop":1721692877372,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1721692877372,"stop":1721692933519,"duration":56147},"status":"failed","statusMessage":"time data 'Being collected today' does not match format '%A %d %B'","statusTrace":"ValueError: time data 'Being collected today' does not match format '%A %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d1c90f89cc63002e","name":"stdout","source":"d1c90f89cc63002e.txt","type":"text/plain","size":126}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az891-206"},{"name":"thread","value":"2762-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BexleyCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":147,"broken":0,"skipped":0,"passed":108,"unknown":0,"total":255},"items":[{"uid":"761b97f4ccfddf34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/761b97f4ccfddf34","status":"passed","time":{"start":1721606492290,"stop":1721606530673,"duration":38383}},{"uid":"f84bb100000e81de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/f84bb100000e81de","status":"passed","time":{"start":1721520084917,"stop":1721520124532,"duration":39615}},{"uid":"bf88ad934f8089b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/bf88ad934f8089b0","status":"passed","time":{"start":1721433687192,"stop":1721433733349,"duration":46157}},{"uid":"f0007936352d4117","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/f0007936352d4117","status":"passed","time":{"start":1721371794345,"stop":1721371829990,"duration":35645}},{"uid":"f459667605d28465","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/f459667605d28465","status":"passed","time":{"start":1721262549152,"stop":1721262592446,"duration":43294}},{"uid":"464d70bffbb4f6d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/464d70bffbb4f6d2","status":"passed","time":{"start":1721176193191,"stop":1721176229721,"duration":36530}},{"uid":"77e4da4af5fcff16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/77e4da4af5fcff16","status":"failed","statusDetails":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","time":{"start":1721089771723,"stop":1721089808338,"duration":36615}},{"uid":"d219fcfdf8938c28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1982//#testresult/d219fcfdf8938c28","status":"passed","time":{"start":1721003455561,"stop":1721003492080,"duration":36519}},{"uid":"735bb059e921a3df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/735bb059e921a3df","status":"passed","time":{"start":1720917180687,"stop":1720917227110,"duration":46423}},{"uid":"20c8b48e5efcaa06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/20c8b48e5efcaa06","status":"passed","time":{"start":1720830566753,"stop":1720830599836,"duration":33083}},{"uid":"1da436c70003eea3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1979//#testresult/1da436c70003eea3","status":"passed","time":{"start":1720744138728,"stop":1720744177884,"duration":39156}},{"uid":"58621f49aebfa17a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1978//#testresult/58621f49aebfa17a","status":"passed","time":{"start":1720657789381,"stop":1720657835532,"duration":46151}},{"uid":"1691baa4146ccbce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1977//#testresult/1691baa4146ccbce","status":"passed","time":{"start":1720571410059,"stop":1720571444429,"duration":34370}},{"uid":"2150bc82d6d3711c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1976//#testresult/2150bc82d6d3711c","status":"failed","statusDetails":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","time":{"start":1720484941412,"stop":1720485138664,"duration":197252}},{"uid":"af03f0619552d973","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1975//#testresult/af03f0619552d973","status":"passed","time":{"start":1720398637855,"stop":1720398678469,"duration":40614}},{"uid":"d1c1b91c1a51f2c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1971//#testresult/d1c1b91c1a51f2c6","status":"failed","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x561ae326569a <unknown>\n#1 0x561ae2f47f21 <unknown>\n#2 0x561ae2f8e6d8 <unknown>\n#3 0x561ae2f8cabf <unknown>\n#4 0x561ae2fb7872 <unknown>\n#5 0x561ae2f88d89 <unknown>\n#6 0x561ae2fb7a3e <unknown>\n#7 0x561ae2fd65c3 <unknown>\n#8 0x561ae2fb7613 <unknown>\n#9 0x561ae2f874f7 <unknown>\n#10 0x561ae2f87e4e <unknown>\n#11 0x561ae322b86b <unknown>\n#12 0x561ae322f911 <unknown>\n#13 0x561ae321735e <unknown>\n#14 0x561ae3230472 <unknown>\n#15 0x561ae31fbcbf <unknown>\n#16 0x561ae3255098 <unknown>\n#17 0x561ae3255270 <unknown>\n#18 0x561ae32647cc <unknown>\n#19 0x7f3011e36ac3 <unknown>","time":{"start":1720312315352,"stop":1720312343914,"duration":28562}},{"uid":"2fc4e6fc9895c95a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1970//#testresult/2fc4e6fc9895c95a","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x563e7cb4269a <unknown>\n#1 0x563e7c8250dc <unknown>\n#2 0x563e7c871931 <unknown>\n#3 0x563e7c871a21 <unknown>\n#4 0x563e7c8b6234 <unknown>\n#5 0x563e7c89489d <unknown>\n#6 0x563e7c8b35c3 <unknown>\n#7 0x563e7c894613 <unknown>\n#8 0x563e7c8644f7 <unknown>\n#9 0x563e7c864e4e <unknown>\n#10 0x563e7cb0886b <unknown>\n#11 0x563e7cb0c911 <unknown>\n#12 0x563e7caf435e <unknown>\n#13 0x563e7cb0d472 <unknown>\n#14 0x563e7cad8cbf <unknown>\n#15 0x563e7cb32098 <unknown>\n#16 0x563e7cb32270 <unknown>\n#17 0x563e7cb417cc <unknown>\n#18 0x7ffa72c1fac3 <unknown>","time":{"start":1720225676746,"stop":1720225780568,"duration":103822}},{"uid":"605830bd044e2907","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1969//#testresult/605830bd044e2907","status":"passed","time":{"start":1720139300341,"stop":1720139343981,"duration":43640}},{"uid":"971a3c132aa0029d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/971a3c132aa0029d","status":"passed","time":{"start":1720052920959,"stop":1720052967540,"duration":46581}},{"uid":"3e43764b4af528f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/3e43764b4af528f2","status":"passed","time":{"start":1719966529473,"stop":1719966573094,"duration":43621}}]},"tags":[]},"source":"5a0e9444c9c7b6be.json","parameterValues":["BexleyCouncil"]}