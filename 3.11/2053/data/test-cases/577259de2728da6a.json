{"uid":"577259de2728da6a","name":"Validate Council Output [BradfordMDC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e3f4ac517a489f09b3e68d80e88d1d63","time":{"start":1725149589796,"stop":1725149590707,"duration":911},"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7f536255d3a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f53623dd410>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7f5362274490>, page = ''\nkwargs = {'council_module_str': 'BradfordMDC', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n<html lang=\"EN...rror: Cannot read property \"length\" from null (RECY_NEW/Scripts/GETCOLLECTIONDATES#27)\r\n</div>\n</p></p></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n    \n        # Build data dict for each entry\n        dict_data = {\n>           \"type\": bin_type,\n            \"collectionDate\": bin_date,\n            \"colour\": bin_colour,\n        }\nE       UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:93: UnboundLocalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7f536255d3a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f53623dd410>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7f5362274490>, page = ''\nkwargs = {'council_module_str': 'BradfordMDC', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n<html lang=\"EN...rror: Cannot read property \"length\" from null (RECY_NEW/Scripts/GETCOLLECTIONDATES#27)\r\n</div>\n</p></p></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n            if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                bin_type = \"General Waste\"\n                bin_colour = \"Green\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n            elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                bin_type = \"Recycling Waste\"\n                bin_colour = \"Grey\"\n                bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n            else:\n                raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n            # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n            # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n            bin_date_info = bin_date_text[29:50].lstrip(\" \")\n    \n            if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,  # + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                # print(bin_date_info)\n                # print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n            else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n    \n        # Build data dict for each entry\n        dict_data = {\n>           \"type\": bin_type,\n            \"collectionDate\": bin_date,\n            \"colour\": bin_colour,\n        }\nE       UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:93: UnboundLocalError","steps":[{"name":"Given the council","time":{"start":1725149589796,"stop":1725149589796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725149589797,"stop":1725149590707,"duration":910},"status":"failed","statusMessage":"cannot access local variable 'bin_type' where it is not associated with a value","statusTrace":"UnboundLocalError: cannot access local variable 'bin_type' where it is not associated with a value\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e6ce211753dd027b","name":"stdout","source":"e6ce211753dd027b.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az564-505"},{"name":"thread","value":"2750-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BradfordMDC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":115,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":115},"items":[{"uid":"d7da4902a3016694","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2052//#testresult/d7da4902a3016694","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1725062840884,"stop":1725062849086,"duration":8202}},{"uid":"c046d1f780087756","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2051//#testresult/c046d1f780087756","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724976463356,"stop":1724976464468,"duration":1112}},{"uid":"fa4420b7eb27e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2049//#testresult/fa4420b7eb27e45","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724890350331,"stop":1724890351304,"duration":973}},{"uid":"75fb97f780b38f77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2048//#testresult/75fb97f780b38f77","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724803630729,"stop":1724803631664,"duration":935}},{"uid":"2d4063de3de463fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2043//#testresult/2d4063de3de463fb","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724717253729,"stop":1724717254948,"duration":1219}},{"uid":"806e4a32bb9eb828","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2039//#testresult/806e4a32bb9eb828","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724630896856,"stop":1724630898057,"duration":1201}},{"uid":"17db0f33a8e2c0e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2038//#testresult/17db0f33a8e2c0e9","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724544684044,"stop":1724544685171,"duration":1127}},{"uid":"d9a3071e634f01b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2037//#testresult/d9a3071e634f01b","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724458343680,"stop":1724458346202,"duration":2522}},{"uid":"761e14563e23f9c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2036//#testresult/761e14563e23f9c1","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724371885150,"stop":1724371886443,"duration":1293}},{"uid":"34b4940bb1165027","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2034//#testresult/34b4940bb1165027","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724285236925,"stop":1724285237963,"duration":1038}},{"uid":"8603823ca0dced0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2033//#testresult/8603823ca0dced0f","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724199138821,"stop":1724199139822,"duration":1001}},{"uid":"2476124a5d9a3746","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2032//#testresult/2476124a5d9a3746","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724112744001,"stop":1724112744936,"duration":935}},{"uid":"9abe84d33665b22f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2031//#testresult/9abe84d33665b22f","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1724026311347,"stop":1724026312502,"duration":1155}},{"uid":"b77a356f6605250d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2030//#testresult/b77a356f6605250d","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723939942746,"stop":1723939943803,"duration":1057}},{"uid":"527187011c4a6632","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2029//#testresult/527187011c4a6632","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723853470601,"stop":1723853471591,"duration":990}},{"uid":"6f8e69fddc17f173","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2028//#testresult/6f8e69fddc17f173","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723767090551,"stop":1723767091766,"duration":1215}},{"uid":"7e9e38c014dc3ec1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/7e9e38c014dc3ec1","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723680171054,"stop":1723680172012,"duration":958}},{"uid":"98fe6c2a581c0531","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/98fe6c2a581c0531","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723594343974,"stop":1723594344997,"duration":1023}},{"uid":"33ab0f066bac1a3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/33ab0f066bac1a3f","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723507863887,"stop":1723507865096,"duration":1209}},{"uid":"795aab2787b5d492","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/795aab2787b5d492","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1723421655686,"stop":1723421656623,"duration":937}}]},"tags":[]},"source":"577259de2728da6a.json","parameterValues":["BradfordMDC"]}