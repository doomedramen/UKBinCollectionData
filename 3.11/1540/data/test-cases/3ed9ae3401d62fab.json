{"uid":"3ed9ae3401d62fab","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1706833510008,"stop":1706833511548,"duration":1540},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7faba9e68d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7faba9ee1510>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7faba9c88c10>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7faba9e68d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7faba9ee1510>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7faba9c88c10>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1706833510008,"stop":1706833510009,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1706833510009,"stop":1706833511548,"duration":1539},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1498-79"},{"name":"thread","value":"2702-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":175,"unknown":0,"total":180},"items":[{"uid":"70fffae1f9d47819","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1538//#testresult/70fffae1f9d47819","status":"passed","time":{"start":1706747207150,"stop":1706747208156,"duration":1006}},{"uid":"75b054e59873c925","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1537//#testresult/75b054e59873c925","status":"passed","time":{"start":1706660743184,"stop":1706660747528,"duration":4344}},{"uid":"8e361e0f9185027e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1535//#testresult/8e361e0f9185027e","status":"passed","time":{"start":1706574303904,"stop":1706574305010,"duration":1106}},{"uid":"6c42cc191c1651a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1534//#testresult/6c42cc191c1651a4","status":"passed","time":{"start":1706487966025,"stop":1706487966941,"duration":916}},{"uid":"72ffb105e706a40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1531//#testresult/72ffb105e706a40","status":"passed","time":{"start":1706401650619,"stop":1706401653949,"duration":3330}},{"uid":"dd728fa0dbd1e31c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1529//#testresult/dd728fa0dbd1e31c","status":"passed","time":{"start":1706315111409,"stop":1706315114896,"duration":3487}},{"uid":"7a53888ce841bb90","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1528//#testresult/7a53888ce841bb90","status":"passed","time":{"start":1706228742363,"stop":1706228743971,"duration":1608}},{"uid":"4f435872378e2d16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1523//#testresult/4f435872378e2d16","status":"passed","time":{"start":1706142444072,"stop":1706142446179,"duration":2107}},{"uid":"d7b938f4ccc2b4c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1522//#testresult/d7b938f4ccc2b4c2","status":"passed","time":{"start":1706056052585,"stop":1706056054281,"duration":1696}},{"uid":"5877b2a4debf7672","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1521//#testresult/5877b2a4debf7672","status":"passed","time":{"start":1705969648946,"stop":1705969652806,"duration":3860}},{"uid":"b31ac78b3a55c00e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1520//#testresult/b31ac78b3a55c00e","status":"passed","time":{"start":1705883314237,"stop":1705883315502,"duration":1265}},{"uid":"d6a9d1a9d87d8be0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1519//#testresult/d6a9d1a9d87d8be0","status":"passed","time":{"start":1705796990982,"stop":1705796992039,"duration":1057}},{"uid":"836647e69dad943b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1515//#testresult/836647e69dad943b","status":"passed","time":{"start":1705710376845,"stop":1705710379750,"duration":2905}},{"uid":"1cc3f5511ab90e21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1511//#testresult/1cc3f5511ab90e21","status":"passed","time":{"start":1705624035038,"stop":1705624038248,"duration":3210}},{"uid":"a91127926f5e3daa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1505//#testresult/a91127926f5e3daa","status":"failed","statusDetails":"ValueError: No collection data found for provided UPRN.","time":{"start":1705537607624,"stop":1705537609184,"duration":1560}},{"uid":"aa2f9c044d293462","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1500//#testresult/aa2f9c044d293462","status":"passed","time":{"start":1705451217037,"stop":1705451221550,"duration":4513}},{"uid":"57c07ffddcb2ae55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1499//#testresult/57c07ffddcb2ae55","status":"passed","time":{"start":1705364811504,"stop":1705364815576,"duration":4072}},{"uid":"4051b032768d5aad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1492//#testresult/4051b032768d5aad","status":"passed","time":{"start":1705295551593,"stop":1705295552791,"duration":1198}},{"uid":"da1038343db1e660","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1491//#testresult/da1038343db1e660","status":"passed","time":{"start":1705295117287,"stop":1705295120676,"duration":3389}},{"uid":"38d8659a49b2f7b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1490//#testresult/38d8659a49b2f7b2","status":"passed","time":{"start":1705278518618,"stop":1705278522789,"duration":4171}}]},"tags":[]},"source":"3ed9ae3401d62fab.json","parameterValues":["AylesburyValeCouncil","None","None"]}