{"uid":"bc02997686f048e5","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1712017659889,"stop":1712017660495,"duration":606},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa66639c360>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa66580a010>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa66639c360>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa66580a010>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1712017659889,"stop":1712017659889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1712017659890,"stop":1712017660495,"duration":605},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az575-835"},{"name":"thread","value":"2798-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":121,"broken":0,"skipped":0,"passed":107,"unknown":0,"total":228},"items":[{"uid":"f5c0010fc372bf58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1653//#testresult/f5c0010fc372bf58","status":"passed","time":{"start":1711931444297,"stop":1711931445196,"duration":899}},{"uid":"1855c44341b65853","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1652//#testresult/1855c44341b65853","status":"passed","time":{"start":1711845048061,"stop":1711845049072,"duration":1011}},{"uid":"50fccadf3ab6f2c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1649//#testresult/50fccadf3ab6f2c5","status":"passed","time":{"start":1711672033252,"stop":1711672033867,"duration":615}},{"uid":"a1aeb25004740553","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1648//#testresult/a1aeb25004740553","status":"passed","time":{"start":1711585690725,"stop":1711585691350,"duration":625}},{"uid":"bf3a8ef853e7c85f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1646//#testresult/bf3a8ef853e7c85f","status":"passed","time":{"start":1711499210602,"stop":1711499211510,"duration":908}},{"uid":"9164733f988c462e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1645//#testresult/9164733f988c462e","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1711412791489,"stop":1711412792108,"duration":619}},{"uid":"36ee36177cf21a7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1641//#testresult/36ee36177cf21a7c","status":"passed","time":{"start":1711326506657,"stop":1711326507240,"duration":583}},{"uid":"1ac464e923d85924","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1634//#testresult/1ac464e923d85924","status":"passed","time":{"start":1711240205056,"stop":1711240205647,"duration":591}},{"uid":"dc0499825351efc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1626//#testresult/dc0499825351efc5","status":"passed","time":{"start":1711153571092,"stop":1711153572138,"duration":1046}},{"uid":"306983ccde8f12f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1625//#testresult/306983ccde8f12f","status":"passed","time":{"start":1711067201031,"stop":1711067202183,"duration":1152}},{"uid":"947543bdf346b1dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1624//#testresult/947543bdf346b1dd","status":"passed","time":{"start":1710980881854,"stop":1710980883218,"duration":1364}},{"uid":"265959ff39e209e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1621//#testresult/265959ff39e209e9","status":"passed","time":{"start":1710970959010,"stop":1710970959616,"duration":606}},{"uid":"c4fa073860c82cb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1619//#testresult/c4fa073860c82cb2","status":"passed","time":{"start":1710894371000,"stop":1710894371868,"duration":868}},{"uid":"4c98725a12c7ebed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1615//#testresult/4c98725a12c7ebed","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1710808041892,"stop":1710808042799,"duration":907}},{"uid":"7790e1732577d425","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1609//#testresult/7790e1732577d425","status":"passed","time":{"start":1710721718818,"stop":1710721719514,"duration":696}},{"uid":"4cf0d886a66eef72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1608//#testresult/4cf0d886a66eef72","status":"passed","time":{"start":1710635343746,"stop":1710635344340,"duration":594}},{"uid":"4278f024addb8a88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1607//#testresult/4278f024addb8a88","status":"passed","time":{"start":1710548714827,"stop":1710548716458,"duration":1631}},{"uid":"dd2dea0d87fc0017","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1605//#testresult/dd2dea0d87fc0017","status":"passed","time":{"start":1710462387510,"stop":1710462388455,"duration":945}},{"uid":"62e1e23f6a2a2612","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1604//#testresult/62e1e23f6a2a2612","status":"passed","time":{"start":1710452855337,"stop":1710452856333,"duration":996}},{"uid":"639f95756f3a1549","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1602//#testresult/639f95756f3a1549","status":"passed","time":{"start":1710375975960,"stop":1710375977550,"duration":1590}}]},"tags":[]},"source":"bc02997686f048e5.json","parameterValues":["LiverpoolCityCouncil","None","None"]}