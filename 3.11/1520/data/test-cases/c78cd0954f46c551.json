{"uid":"c78cd0954f46c551","name":"Validate Council Output [GuildfordCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e46674f50d553b47bc9413db8fed7350","time":{"start":1705883372458,"stop":1705883378694,"duration":6236},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.216)\nStacktrace:\n#0 0x56118cf04f83 <unknown>\n#1 0x56118cbbdb2b <unknown>\n#2 0x56118cc06eff <unknown>\n#3 0x56118cc051a0 <unknown>\n#4 0x56118cc370b2 <unknown>\n#5 0x56118cc00b49 <unknown>\n#6 0x56118cc374ce <unknown>\n#7 0x56118cc56006 <unknown>\n#8 0x56118cc36e53 <unknown>\n#9 0x56118cbfedd4 <unknown>\n#10 0x56118cc001de <unknown>\n#11 0x56118cec9531 <unknown>\n#12 0x56118cecd455 <unknown>\n#13 0x56118ceb5f55 <unknown>\n#14 0x56118cece0ef <unknown>\n#15 0x56118ce9999f <unknown>\n#16 0x56118cef2008 <unknown>\n#17 0x56118cef21d7 <unknown>\n#18 0x56118cf04124 <unknown>\n#19 0x7fcff6e94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fb82555c7c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb824a79b10>, 'council': 'GuildfordCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:73: in parse_data\n    radio_button.send_keys(Keys.SPACE)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb824599310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x56118cef21d7 \\\\u003Cunknown>\\\\n#18 0x56118cf04124 \\\\u003Cunknown>\\\\n#19 0x7fcff6e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=120.0.6099.216)\nE       Stacktrace:\nE       #0 0x56118cf04f83 <unknown>\nE       #1 0x56118cbbdb2b <unknown>\nE       #2 0x56118cc06eff <unknown>\nE       #3 0x56118cc051a0 <unknown>\nE       #4 0x56118cc370b2 <unknown>\nE       #5 0x56118cc00b49 <unknown>\nE       #6 0x56118cc374ce <unknown>\nE       #7 0x56118cc56006 <unknown>\nE       #8 0x56118cc36e53 <unknown>\nE       #9 0x56118cbfedd4 <unknown>\nE       #10 0x56118cc001de <unknown>\nE       #11 0x56118cec9531 <unknown>\nE       #12 0x56118cecd455 <unknown>\nE       #13 0x56118ceb5f55 <unknown>\nE       #14 0x56118cece0ef <unknown>\nE       #15 0x56118ce9999f <unknown>\nE       #16 0x56118cef2008 <unknown>\nE       #17 0x56118cef21d7 <unknown>\nE       #18 0x56118cf04124 <unknown>\nE       #19 0x7fcff6e94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.216)\nStacktrace:\n#0 0x56118cf04f83 <unknown>\n#1 0x56118cbbdb2b <unknown>\n#2 0x56118cc06eff <unknown>\n#3 0x56118cc051a0 <unknown>\n#4 0x56118cc370b2 <unknown>\n#5 0x56118cc00b49 <unknown>\n#6 0x56118cc374ce <unknown>\n#7 0x56118cc56006 <unknown>\n#8 0x56118cc36e53 <unknown>\n#9 0x56118cbfedd4 <unknown>\n#10 0x56118cc001de <unknown>\n#11 0x56118cec9531 <unknown>\n#12 0x56118cecd455 <unknown>\n#13 0x56118ceb5f55 <unknown>\n#14 0x56118cece0ef <unknown>\n#15 0x56118ce9999f <unknown>\n#16 0x56118cef2008 <unknown>\n#17 0x56118cef21d7 <unknown>\n#18 0x56118cf04124 <unknown>\n#19 0x7fcff6e94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fb82555c7c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb824a79b10>, 'council': 'GuildfordCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:73: in parse_data\n    radio_button.send_keys(Keys.SPACE)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb824599310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x56118cef21d7 \\\\u003Cunknown>\\\\n#18 0x56118cf04124 \\\\u003Cunknown>\\\\n#19 0x7fcff6e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=120.0.6099.216)\nE       Stacktrace:\nE       #0 0x56118cf04f83 <unknown>\nE       #1 0x56118cbbdb2b <unknown>\nE       #2 0x56118cc06eff <unknown>\nE       #3 0x56118cc051a0 <unknown>\nE       #4 0x56118cc370b2 <unknown>\nE       #5 0x56118cc00b49 <unknown>\nE       #6 0x56118cc374ce <unknown>\nE       #7 0x56118cc56006 <unknown>\nE       #8 0x56118cc36e53 <unknown>\nE       #9 0x56118cbfedd4 <unknown>\nE       #10 0x56118cc001de <unknown>\nE       #11 0x56118cec9531 <unknown>\nE       #12 0x56118cecd455 <unknown>\nE       #13 0x56118ceb5f55 <unknown>\nE       #14 0x56118cece0ef <unknown>\nE       #15 0x56118ce9999f <unknown>\nE       #16 0x56118cef2008 <unknown>\nE       #17 0x56118cef21d7 <unknown>\nE       #18 0x56118cf04124 <unknown>\nE       #19 0x7fcff6e94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1705883372459,"stop":1705883372459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GuildfordCouncil using local and the http://selenium:4444 is set","time":{"start":1705883372459,"stop":1705883378694,"duration":6235},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.216)\nStacktrace:\n#0 0x56118cf04f83 <unknown>\n#1 0x56118cbbdb2b <unknown>\n#2 0x56118cc06eff <unknown>\n#3 0x56118cc051a0 <unknown>\n#4 0x56118cc370b2 <unknown>\n#5 0x56118cc00b49 <unknown>\n#6 0x56118cc374ce <unknown>\n#7 0x56118cc56006 <unknown>\n#8 0x56118cc36e53 <unknown>\n#9 0x56118cbfedd4 <unknown>\n#10 0x56118cc001de <unknown>\n#11 0x56118cec9531 <unknown>\n#12 0x56118cecd455 <unknown>\n#13 0x56118ceb5f55 <unknown>\n#14 0x56118cece0ef <unknown>\n#15 0x56118ce9999f <unknown>\n#16 0x56118cef2008 <unknown>\n#17 0x56118cef21d7 <unknown>\n#18 0x56118cf04124 <unknown>\n#19 0x7fcff6e94ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.216)\nStacktrace:\n#0 0x56118cf04f83 <unknown>\n#1 0x56118cbbdb2b <unknown>\n#2 0x56118cc06eff <unknown>\n#3 0x56118cc051a0 <unknown>\n#4 0x56118cc370b2 <unknown>\n#5 0x56118cc00b49 <unknown>\n#6 0x56118cc374ce <unknown>\n#7 0x56118cc56006 <unknown>\n#8 0x56118cc36e53 <unknown>\n#9 0x56118cbfedd4 <unknown>\n#10 0x56118cc001de <unknown>\n#11 0x56118cec9531 <unknown>\n#12 0x56118cecd455 <unknown>\n#13 0x56118ceb5f55 <unknown>\n#14 0x56118cece0ef <unknown>\n#15 0x56118ce9999f <unknown>\n#16 0x56118cef2008 <unknown>\n#17 0x56118cef21d7 <unknown>\n#18 0x56118cf04124 <unknown>\n#19 0x7fcff6e94ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1152-598"},{"name":"thread","value":"2808-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":56,"unknown":0,"total":64},"items":[{"uid":"c80a06bc0030104b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1519//#testresult/c80a06bc0030104b","status":"passed","time":{"start":1705797093679,"stop":1705797112909,"duration":19230}},{"uid":"d3c96927018d07be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1515//#testresult/d3c96927018d07be","status":"passed","time":{"start":1705710443188,"stop":1705710454962,"duration":11774}},{"uid":"2f17a5fea05f9e45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1511//#testresult/2f17a5fea05f9e45","status":"passed","time":{"start":1705624078070,"stop":1705624089633,"duration":11563}},{"uid":"7d4a03a5c4a15ed5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1505//#testresult/7d4a03a5c4a15ed5","status":"passed","time":{"start":1705537657971,"stop":1705537669146,"duration":11175}},{"uid":"60172704afef14f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1500//#testresult/60172704afef14f3","status":"passed","time":{"start":1705451265245,"stop":1705451275255,"duration":10010}},{"uid":"e08064265bdb3329","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1499//#testresult/e08064265bdb3329","status":"passed","time":{"start":1705364882805,"stop":1705364893548,"duration":10743}},{"uid":"9197da874c0dfd72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1492//#testresult/9197da874c0dfd72","status":"passed","time":{"start":1705295607611,"stop":1705295618164,"duration":10553}},{"uid":"a6fad30d21a58549","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1491//#testresult/a6fad30d21a58549","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705295142497,"stop":1705295142500,"duration":3}},{"uid":"94fc7866e7e76bd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1490//#testresult/94fc7866e7e76bd2","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705278548550,"stop":1705278548554,"duration":4}},{"uid":"3a3af118e4eee204","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1485//#testresult/3a3af118e4eee204","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705192221333,"stop":1705192221336,"duration":3}},{"uid":"c67210b9f84f9053","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1484//#testresult/c67210b9f84f9053","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705105669428,"stop":1705105669430,"duration":2}},{"uid":"64e6165a48a7f653","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1482//#testresult/64e6165a48a7f653","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705019255374,"stop":1705019255377,"duration":3}},{"uid":"ab64502197be520f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1478//#testresult/ab64502197be520f","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1704932841812,"stop":1704932841814,"duration":2}},{"uid":"67f8e8d0733ac2d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1472//#testresult/67f8e8d0733ac2d4","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1704846444840,"stop":1704846444843,"duration":3}},{"uid":"20d1cf7958410b06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1456//#testresult/20d1cf7958410b06","status":"passed","time":{"start":1704760188881,"stop":1704760199153,"duration":10272}},{"uid":"93a5e7c0541f30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1452//#testresult/93a5e7c0541f30","status":"passed","time":{"start":1704711583873,"stop":1704711591263,"duration":7390}},{"uid":"a5956d21dad6be6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1450//#testresult/a5956d21dad6be6b","status":"passed","time":{"start":1704711084008,"stop":1704711095243,"duration":11235}},{"uid":"20d6de37df527212","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1448//#testresult/20d6de37df527212","status":"passed","time":{"start":1704710185389,"stop":1704710192960,"duration":7571}},{"uid":"adb91f755edbcfe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1446//#testresult/adb91f755edbcfe","status":"passed","time":{"start":1704709655523,"stop":1704709664723,"duration":9200}},{"uid":"6283e39a0bd2ef0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1443//#testresult/6283e39a0bd2ef0b","status":"passed","time":{"start":1704704167028,"stop":1704704177305,"duration":10277}}]},"tags":[]},"source":"c78cd0954f46c551.json","parameterValues":["GuildfordCouncil","local","http://selenium:4444"]}