{"uid":"d82710eb7183be64","name":"Validate Council Output [MertonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a067692419696058d026d9aab0da27d0","time":{"start":1699481453253,"stop":1699481454799,"duration":1546},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f90823531a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f9074875750>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f9074875750>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f90823531a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f9074875750>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f9074875750>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1699481453253,"stop":1699481453254,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from MertonCouncil using None and the None is set","time":{"start":1699481453254,"stop":1699481454795,"duration":1541},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false},{"name":"Then the result is valid json","time":{"start":1699481454795,"stop":1699481454796,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false},{"name":"And the output should validate against the schema","time":{"start":1699481454796,"stop":1699481454799,"duration":3},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az887-503"},{"name":"thread","value":"2565-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"271344ae9034b60c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/271344ae9034b60c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445093280,"stop":1699445094775,"duration":1495}},{"uid":"b6e8f008064f6c56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/b6e8f008064f6c56","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1699406174928,"stop":1699406221375,"duration":46447}},{"uid":"4f4364f2056eb7fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1114//#testresult/4f4364f2056eb7fb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699319981087,"stop":1699319982566,"duration":1479}},{"uid":"9a901393030b0649","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1113//#testresult/9a901393030b0649","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233686021,"stop":1699233687532,"duration":1511}},{"uid":"47ed915a14f21fd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1111//#testresult/47ed915a14f21fd4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699171026089,"stop":1699171027701,"duration":1612}},{"uid":"94f477073fd93d38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1112//#testresult/94f477073fd93d38","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699170885399,"stop":1699170886695,"duration":1296}}]},"tags":[]},"source":"d82710eb7183be64.json","parameterValues":["MertonCouncil","None","None"]}