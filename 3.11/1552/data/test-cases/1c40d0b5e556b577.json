{"uid":"1c40d0b5e556b577","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1707351914189,"stop":1707351919925,"duration":5736},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f8fd0dcc7c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8fd0c8e510>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f8fd0bad050>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f8fd0d41610>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '38ee57a64e68ed67c66d5c710dd350b46f735b2b', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f8fd0dcc7c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8fd0c8e510>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f8fd0bad050>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f8fd0d41610>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '38ee57a64e68ed67c66d5c710dd350b46f735b2b', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1707351914189,"stop":1707351914190,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1707351914190,"stop":1707351919925,"duration":5735},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az979-501"},{"name":"thread","value":"2721-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":125,"broken":0,"skipped":0,"passed":64,"unknown":0,"total":189},"items":[{"uid":"451189f8f15b035","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1551//#testresult/451189f8f15b035","status":"passed","time":{"start":1707265441382,"stop":1707265446517,"duration":5135}},{"uid":"c8356208bb23f49d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1549//#testresult/c8356208bb23f49d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1707179115080,"stop":1707179116327,"duration":1247}},{"uid":"56c1d9941744b218","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/56c1d9941744b218","status":"passed","time":{"start":1707092805663,"stop":1707092811466,"duration":5803}},{"uid":"eb76b6ed666e6648","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/eb76b6ed666e6648","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1707006490737,"stop":1707006492368,"duration":1631}},{"uid":"8c484953be33ec00","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1545//#testresult/8c484953be33ec00","status":"passed","time":{"start":1706941848920,"stop":1706941853795,"duration":4875}},{"uid":"10ce630477e0edfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1544//#testresult/10ce630477e0edfb","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706938938179,"stop":1706938939687,"duration":1508}},{"uid":"523380656c235f6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1542//#testresult/523380656c235f6e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706938415478,"stop":1706938417874,"duration":2396}},{"uid":"1e2379f3d3ed633d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1541//#testresult/1e2379f3d3ed633d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706919954722,"stop":1706919956618,"duration":1896}},{"uid":"2a831cb5a9ee2735","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1540//#testresult/2a831cb5a9ee2735","status":"passed","time":{"start":1706833512739,"stop":1706833517512,"duration":4773}},{"uid":"6e3572af232e5588","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1538//#testresult/6e3572af232e5588","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706747213124,"stop":1706747215078,"duration":1954}},{"uid":"e9766ce68900eef0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1537//#testresult/e9766ce68900eef0","status":"passed","time":{"start":1706660747405,"stop":1706660752908,"duration":5503}},{"uid":"4c4fa0e28361ed57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1535//#testresult/4c4fa0e28361ed57","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706574310617,"stop":1706574312897,"duration":2280}},{"uid":"9609836f8b457558","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1534//#testresult/9609836f8b457558","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706487968646,"stop":1706487970261,"duration":1615}},{"uid":"36aab5c69baee387","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1531//#testresult/36aab5c69baee387","status":"passed","time":{"start":1706401656328,"stop":1706401661382,"duration":5054}},{"uid":"daf137868eb2de7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1529//#testresult/daf137868eb2de7e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706315117914,"stop":1706315119619,"duration":1705}},{"uid":"20e3d77a2c6c5b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1528//#testresult/20e3d77a2c6c5b9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706228749777,"stop":1706228751706,"duration":1929}},{"uid":"aeed2a8ff3d1aee0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1523//#testresult/aeed2a8ff3d1aee0","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706142448514,"stop":1706142450308,"duration":1794}},{"uid":"7827b751ed939464","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1522//#testresult/7827b751ed939464","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1706056055699,"stop":1706056057654,"duration":1955}},{"uid":"93a7de79b885acf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1521//#testresult/93a7de79b885acf","status":"passed","time":{"start":1705969660009,"stop":1705969665788,"duration":5779}},{"uid":"d8df2a1662290e04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1520//#testresult/d8df2a1662290e04","status":"passed","time":{"start":1705883320802,"stop":1705883326458,"duration":5656}}]},"tags":[]},"source":"1c40d0b5e556b577.json","parameterValues":["CroydonCouncil","None","None"]}