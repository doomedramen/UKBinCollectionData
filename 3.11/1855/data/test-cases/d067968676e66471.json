{"uid":"d067968676e66471","name":"Validate Council Output [LondonBoroughHounslow]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e674cebf616dd1178743c85688db8654","time":{"start":1716424368476,"stop":1716424429252,"duration":60776},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'find_all'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0f589f53a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0f57daec10>, 'council': 'LondonBoroughHounslow', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LondonBoroughHounslow.CouncilClass object at 0x7f0f67e53b50>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100021577765', ...}\napi_url = 'https://www.hounslow.gov.uk/homepage/86/recycling_and_waste_collection_day_finder'\nuser_uprn = '100021577765', form_data = {'UPRN': '100021577765'}\nresponse = <Response [504]>\nsoup = <html>\n<head><title>504 Gateway Time-out</title></head>\n<body>\n<center><h1>504 Gateway Time-out</h1></center>\n</body>\n</html>\n\ndata = {'bins': []}, div_element = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        api_url = \"https://www.hounslow.gov.uk/homepage/86/recycling_and_waste_collection_day_finder\"\n        user_uprn = kwargs.get(\"uprn\")\n    \n        # Check the UPRN is valid\n        check_uprn(user_uprn)\n    \n        # Create the form data\n        form_data = {\n            \"UPRN\": user_uprn,\n        }\n    \n        # Make a request to the API\n        requests.packages.urllib3.disable_warnings()\n        response = requests.post(api_url, data=form_data)\n    \n        # Make a BS4 object\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Get the div element\n        div_element = soup.find(\"div\", {\"class\": \"bin_day_main_wrapper\"})\n    \n        # Get all bins with their corresponding dates using list comprehension\n        # This creates a list of tuples, where each tuple contains the bin type and collection date\n        bins_with_dates = [\n            (\n                bin.get_text().strip(),\n                h4.get_text().replace(\"This \", \"\").replace(\"Next \", \"\"),\n            )\n            # This first for loop iterates over each h4 element\n>           for h4 in div_element.find_all(\"h4\")\n            # This nested for loop iterates over each li element within the corresponding ul element\n            for bin in h4.find_next_sibling(\"ul\").find_all(\"li\")\n        ]\nE       AttributeError: 'NoneType' object has no attribute 'find_all'\n\nuk_bin_collection/uk_bin_collection/councils/LondonBoroughHounslow.py:47: AttributeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'find_all'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0f589f53a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0f57daec10>, 'council': 'LondonBoroughHounslow', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LondonBoroughHounslow.CouncilClass object at 0x7f0f67e53b50>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100021577765', ...}\napi_url = 'https://www.hounslow.gov.uk/homepage/86/recycling_and_waste_collection_day_finder'\nuser_uprn = '100021577765', form_data = {'UPRN': '100021577765'}\nresponse = <Response [504]>\nsoup = <html>\n<head><title>504 Gateway Time-out</title></head>\n<body>\n<center><h1>504 Gateway Time-out</h1></center>\n</body>\n</html>\n\ndata = {'bins': []}, div_element = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        api_url = \"https://www.hounslow.gov.uk/homepage/86/recycling_and_waste_collection_day_finder\"\n        user_uprn = kwargs.get(\"uprn\")\n    \n        # Check the UPRN is valid\n        check_uprn(user_uprn)\n    \n        # Create the form data\n        form_data = {\n            \"UPRN\": user_uprn,\n        }\n    \n        # Make a request to the API\n        requests.packages.urllib3.disable_warnings()\n        response = requests.post(api_url, data=form_data)\n    \n        # Make a BS4 object\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Get the div element\n        div_element = soup.find(\"div\", {\"class\": \"bin_day_main_wrapper\"})\n    \n        # Get all bins with their corresponding dates using list comprehension\n        # This creates a list of tuples, where each tuple contains the bin type and collection date\n        bins_with_dates = [\n            (\n                bin.get_text().strip(),\n                h4.get_text().replace(\"This \", \"\").replace(\"Next \", \"\"),\n            )\n            # This first for loop iterates over each h4 element\n>           for h4 in div_element.find_all(\"h4\")\n            # This nested for loop iterates over each li element within the corresponding ul element\n            for bin in h4.find_next_sibling(\"ul\").find_all(\"li\")\n        ]\nE       AttributeError: 'NoneType' object has no attribute 'find_all'\n\nuk_bin_collection/uk_bin_collection/councils/LondonBoroughHounslow.py:47: AttributeError","steps":[{"name":"Given the council: LondonBoroughHounslow","time":{"start":1716424368476,"stop":1716424368476,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LondonBoroughHounslow","time":{"start":1716424368477,"stop":1716424429252,"duration":60775},"status":"failed","statusMessage":"'NoneType' object has no attribute 'find_all'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'find_all'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-693"},{"name":"thread","value":"2885-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LondonBoroughHounslow"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":17,"broken":0,"skipped":0,"passed":171,"unknown":0,"total":188},"items":[{"uid":"c56d512c540d7bc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1854//#testresult/c56d512c540d7bc9","status":"passed","time":{"start":1716338003052,"stop":1716338005385,"duration":2333}},{"uid":"64011465d86bbce8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1853//#testresult/64011465d86bbce8","status":"passed","time":{"start":1716251590710,"stop":1716251594088,"duration":3378}},{"uid":"bdfcbd7940f7afa8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1852//#testresult/bdfcbd7940f7afa8","status":"passed","time":{"start":1716165054980,"stop":1716165057445,"duration":2465}},{"uid":"68e0918ef448dd8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1851//#testresult/68e0918ef448dd8f","status":"passed","time":{"start":1716155101191,"stop":1716155104145,"duration":2954}},{"uid":"e40785e54e86a68a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1846//#testresult/e40785e54e86a68a","status":"passed","time":{"start":1716079185760,"stop":1716079188757,"duration":2997}},{"uid":"684fca0db5e3f1fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1842//#testresult/684fca0db5e3f1fc","status":"passed","time":{"start":1715992193984,"stop":1715992205913,"duration":11929}},{"uid":"a535ed2c5abcfedf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1839//#testresult/a535ed2c5abcfedf","status":"passed","time":{"start":1715983506575,"stop":1715983509564,"duration":2989}},{"uid":"c2c490a5a1d5815","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1834//#testresult/c2c490a5a1d5815","status":"passed","time":{"start":1715973814577,"stop":1715973817037,"duration":2460}},{"uid":"f33e9b5cc07e062","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1110//#testresult/f33e9b5cc07e062","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699147451287,"stop":1699147454438,"duration":3151}},{"uid":"23b9309fb3eab9e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1107//#testresult/23b9309fb3eab9e4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699101653923,"stop":1699101656569,"duration":2646}},{"uid":"f8789b1331ce4e3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/f8789b1331ce4e3e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699060638020,"stop":1699060674889,"duration":36869}},{"uid":"a65955fb5cb7ebca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/a65955fb5cb7ebca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699007795577,"stop":1699007798952,"duration":3375}},{"uid":"b8a53824256eed38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1095//#testresult/b8a53824256eed38","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698988749802,"stop":1698988752182,"duration":2380}},{"uid":"1e0d8c33499e9960","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1094//#testresult/1e0d8c33499e9960","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698974351393,"stop":1698974354558,"duration":3165}},{"uid":"8f59de6192f8c80c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1091//#testresult/8f59de6192f8c80c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698887773030,"stop":1698887775496,"duration":2466}},{"uid":"e53e303738f79477","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/e53e303738f79477","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878450205,"stop":1698878456561,"duration":6356}},{"uid":"9a7d27e8f0e0da95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/9a7d27e8f0e0da95","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878366714,"stop":1698878372564,"duration":5850}},{"uid":"6b4138e84d472d0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/6b4138e84d472d0c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698867604851,"stop":1698867607962,"duration":3111}},{"uid":"78a749add36bc0c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/78a749add36bc0c4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698801655623,"stop":1698801673894,"duration":18271}},{"uid":"e046b09a1c09fe77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/e046b09a1c09fe77","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698788693212,"stop":1698788696908,"duration":3696}}]},"tags":[]},"source":"d067968676e66471.json","parameterValues":["LondonBoroughHounslow"]}