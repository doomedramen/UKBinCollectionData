{"uid":"9400e80becf89ca6","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1716424235168,"stop":1716424257049,"duration":21881},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4c60d19e40>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4c60853d50>, 'council': 'CroydonCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f4c60812b90>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f4c60954490>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '6f600f08bea632b56df0116aaed15d6fbdef75a5', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4c60d19e40>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4c60853d50>, 'council': 'CroydonCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f4c60812b90>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f4c60954490>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '6f600f08bea632b56df0116aaed15d6fbdef75a5', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:274: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1716424235168,"stop":1716424235168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil","time":{"start":1716424235169,"stop":1716424257049,"duration":21880},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az770-693"},{"name":"thread","value":"2891-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":112,"broken":0,"skipped":0,"passed":76,"unknown":0,"total":188},"items":[{"uid":"4246aefd79b7be33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1854//#testresult/4246aefd79b7be33","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1716337691248,"stop":1716337692334,"duration":1086}},{"uid":"a22c62633f0df9e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1853//#testresult/a22c62633f0df9e4","status":"passed","time":{"start":1716251402413,"stop":1716251407984,"duration":5571}},{"uid":"17a35dfa0e63c47d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1852//#testresult/17a35dfa0e63c47d","status":"passed","time":{"start":1716164944402,"stop":1716164949030,"duration":4628}},{"uid":"d64cee6af38b0ab4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1851//#testresult/d64cee6af38b0ab4","status":"passed","time":{"start":1716154917713,"stop":1716154922934,"duration":5221}},{"uid":"7c967859f626e7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1846//#testresult/7c967859f626e7f","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1716078737122,"stop":1716078739046,"duration":1924}},{"uid":"3fb36f8491af07e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1842//#testresult/3fb36f8491af07e9","status":"passed","time":{"start":1715992106403,"stop":1715992111280,"duration":4877}},{"uid":"c303c2c576aabe87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1839//#testresult/c303c2c576aabe87","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1715983257411,"stop":1715983259066,"duration":1655}},{"uid":"8fd77d98766e2bc8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1834//#testresult/8fd77d98766e2bc8","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1715973672716,"stop":1715973673884,"duration":1168}},{"uid":"d984567e51c65fe5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1110//#testresult/d984567e51c65fe5","status":"passed","time":{"start":1699147202298,"stop":1699147207341,"duration":5043}},{"uid":"da324c4e0bd2390a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1107//#testresult/da324c4e0bd2390a","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699101505020,"stop":1699101506522,"duration":1502}},{"uid":"aefe601e735867e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/aefe601e735867e1","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699060468775,"stop":1699060470150,"duration":1375}},{"uid":"605d2b0def1e010","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/605d2b0def1e010","status":"passed","time":{"start":1699007606819,"stop":1699007613059,"duration":6240}},{"uid":"3c41f07bec8746a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1095//#testresult/3c41f07bec8746a3","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698988588418,"stop":1698988589715,"duration":1297}},{"uid":"baf09a279d50ef29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1094//#testresult/baf09a279d50ef29","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698974131101,"stop":1698974133039,"duration":1938}},{"uid":"7468db1f78683bb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1091//#testresult/7468db1f78683bb5","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1698887626865,"stop":1698887631144,"duration":4279}},{"uid":"e5e92517ec75d1a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/e5e92517ec75d1a5","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698878277716,"stop":1698878278937,"duration":1221}},{"uid":"e75b83c9b296b431","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/e75b83c9b296b431","status":"passed","time":{"start":1698878220749,"stop":1698878224914,"duration":4165}},{"uid":"f5bc660ed06ea80e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/f5bc660ed06ea80e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698867408597,"stop":1698867410076,"duration":1479}},{"uid":"5c3ece3df40c3e6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/5c3ece3df40c3e6b","status":"passed","time":{"start":1698801501482,"stop":1698801505848,"duration":4366}},{"uid":"734224c54e088e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/734224c54e088e78","status":"passed","time":{"start":1698788441170,"stop":1698788446094,"duration":4924}}]},"tags":[]},"source":"9400e80becf89ca6.json","parameterValues":["CroydonCouncil"]}