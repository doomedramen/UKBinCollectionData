{"uid":"50567572de9a93d8","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1703898982665,"stop":1703898991958,"duration":9293},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff51e289120>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff51d9c4a50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff51d9c4a50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff51e289120>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff51d9c4a50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff51d9c4a50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1703898982665,"stop":1703898982665,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1703898982665,"stop":1703898991956,"duration":9291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703898991956,"stop":1703898991956,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703898991957,"stop":1703898991958,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1393-110"},{"name":"thread","value":"2662-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":105,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":105},"items":[{"uid":"a885f1d9b95dcbb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/a885f1d9b95dcbb4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853457779,"stop":1703853466995,"duration":9216}},{"uid":"35564548c248c3f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/35564548c248c3f6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851065984,"stop":1703851074933,"duration":8949}},{"uid":"88a559f19535dcfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/88a559f19535dcfb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812022414,"stop":1703812031163,"duration":8749}},{"uid":"d29779df9d8979","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/d29779df9d8979","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756141176,"stop":1703756154395,"duration":13219}},{"uid":"c00e2a00dd569e12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/c00e2a00dd569e12","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726122659,"stop":1703726131370,"duration":8711}},{"uid":"7f40b5a18e025a85","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/7f40b5a18e025a85","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717301286,"stop":1703717310111,"duration":8825}},{"uid":"540d43c4e98c32c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/540d43c4e98c32c2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717291348,"stop":1703717300179,"duration":8831}},{"uid":"db211ec63449ebd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/db211ec63449ebd8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639716184,"stop":1703639724972,"duration":8788}},{"uid":"3a1caa37e13f4eae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/3a1caa37e13f4eae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553311223,"stop":1703553320762,"duration":9539}},{"uid":"90ec42119277138","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/90ec42119277138","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541102834,"stop":1703541112435,"duration":9601}},{"uid":"40f7b5333a3329f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/40f7b5333a3329f0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467085151,"stop":1703467094778,"duration":9627}},{"uid":"bfed47268e317c2f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/bfed47268e317c2f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416385344,"stop":1703416395276,"duration":9932}},{"uid":"f99394dea905c3e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/f99394dea905c3e6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416349760,"stop":1703416359724,"duration":9964}},{"uid":"6a74cd1a492534fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/6a74cd1a492534fc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703380903015,"stop":1703381104163,"duration":201148}},{"uid":"981105bc515e544b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/981105bc515e544b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294043919,"stop":1703294072375,"duration":28456}},{"uid":"82c6d30d753ec64c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/82c6d30d753ec64c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207780024,"stop":1703207789876,"duration":9852}},{"uid":"12224cb566def492","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/12224cb566def492","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121417169,"stop":1703121426764,"duration":9595}},{"uid":"c289b679a7768ad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/c289b679a7768ad6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034241219,"stop":1703034269014,"duration":27795}},{"uid":"9b6453c0f42bdf50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/9b6453c0f42bdf50","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024888424,"stop":1703024906725,"duration":18301}},{"uid":"53d62194f6573722","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/53d62194f6573722","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024856305,"stop":1703024865809,"duration":9504}}]},"tags":[]},"source":"50567572de9a93d8.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}