{"uid":"6e01e1aac0733296","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1703898875148,"stop":1703898879569,"duration":4421},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f6c393684a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6c39189b90>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f6c391576d0>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7f6c3918bc50>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '219616a35b08cab7fd3ebb77c230b1280f53d905', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f6c393684a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6c39189b90>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f6c391576d0>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7f6c3918bc50>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '219616a35b08cab7fd3ebb77c230b1280f53d905', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1703898875148,"stop":1703898875149,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1703898875149,"stop":1703898879569,"duration":4420},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1393-110"},{"name":"thread","value":"2665-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":67,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":105},"items":[{"uid":"59669ab6053449e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/59669ab6053449e5","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703853434065,"stop":1703853435847,"duration":1782}},{"uid":"1af393424b934a73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/1af393424b934a73","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703851059357,"stop":1703851060774,"duration":1417}},{"uid":"dd233db0cba79f79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/dd233db0cba79f79","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703811996092,"stop":1703811997175,"duration":1083}},{"uid":"ff68f6c816cf5855","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/ff68f6c816cf5855","status":"passed","time":{"start":1703756124735,"stop":1703756130833,"duration":6098}},{"uid":"697381833d7b5345","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/697381833d7b5345","status":"passed","time":{"start":1703726105685,"stop":1703726110958,"duration":5273}},{"uid":"d68c4aa769f81670","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/d68c4aa769f81670","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703717286819,"stop":1703717288195,"duration":1376}},{"uid":"4f084e4306fafedc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/4f084e4306fafedc","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703717249859,"stop":1703717251033,"duration":1174}},{"uid":"54b0f3da67025c3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/54b0f3da67025c3e","status":"passed","time":{"start":1703639699959,"stop":1703639704431,"duration":4472}},{"uid":"ce28423cb45b289a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/ce28423cb45b289a","status":"passed","time":{"start":1703553291715,"stop":1703553296450,"duration":4735}},{"uid":"faa97b8d17ae5adf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/faa97b8d17ae5adf","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703541091748,"stop":1703541093322,"duration":1574}},{"uid":"20be8d68b9651c58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/20be8d68b9651c58","status":"passed","time":{"start":1703467067095,"stop":1703467072068,"duration":4973}},{"uid":"b3f31d07a9b5a009","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/b3f31d07a9b5a009","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703416367747,"stop":1703416369049,"duration":1302}},{"uid":"271f714b45343a60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/271f714b45343a60","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703416330478,"stop":1703416332243,"duration":1765}},{"uid":"5a553dcc7bbd8fab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/5a553dcc7bbd8fab","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703380897476,"stop":1703380899225,"duration":1749}},{"uid":"7cde5c9069a3d35d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/7cde5c9069a3d35d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703294038566,"stop":1703294040221,"duration":1655}},{"uid":"6aeb790722a73a1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/6aeb790722a73a1c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703207773711,"stop":1703207775516,"duration":1805}},{"uid":"212fdb71f0920bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/212fdb71f0920bf","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703121415430,"stop":1703121416604,"duration":1174}},{"uid":"d1850d4e2ffa66a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/d1850d4e2ffa66a2","status":"passed","time":{"start":1703034235437,"stop":1703034240541,"duration":5104}},{"uid":"dd0ab0a7d0f763e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/dd0ab0a7d0f763e1","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1703024884580,"stop":1703024885895,"duration":1315}},{"uid":"c5e16bf2905f8fef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/c5e16bf2905f8fef","status":"passed","time":{"start":1703024851114,"stop":1703024856347,"duration":5233}}]},"tags":[]},"source":"6e01e1aac0733296.json","parameterValues":["CroydonCouncil","None","None"]}