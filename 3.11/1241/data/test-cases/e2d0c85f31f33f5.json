{"uid":"e2d0c85f31f33f5","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1702516952302,"stop":1702516954407,"duration":2105},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f4e1b43d1c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4e1a570650>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f4e1a570650>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f4e1b43d1c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4e1a570650>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f4e1a570650>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1702516952302,"stop":1702516952303,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1702516952303,"stop":1702516954405,"duration":2102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702516954405,"stop":1702516954406,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702516954406,"stop":1702516954407,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1242-990"},{"name":"thread","value":"2774-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":75,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":75},"items":[{"uid":"e35009d444e990ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/e35009d444e990ca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447688449,"stop":1702447690292,"duration":1843}},{"uid":"1830fe2893389102","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/1830fe2893389102","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430480764,"stop":1702430485171,"duration":4407}},{"uid":"a1c851fe728020d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/a1c851fe728020d7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366635347,"stop":1702366638465,"duration":3118}},{"uid":"a957343250ab5a85","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/a957343250ab5a85","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702344090102,"stop":1702344096054,"duration":5952}},{"uid":"73cdde2d42d7259c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/73cdde2d42d7259c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257665737,"stop":1702257675349,"duration":9612}},{"uid":"47190b94fab1812d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/47190b94fab1812d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171630248,"stop":1702171637053,"duration":6805}},{"uid":"9574ab57c289be0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/9574ab57c289be0a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084801025,"stop":1702084803913,"duration":2888}},{"uid":"14bd1f1989794cd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/14bd1f1989794cd8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066987827,"stop":1702066989591,"duration":1764}},{"uid":"d1c3c17f34620157","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/d1c3c17f34620157","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054524667,"stop":1702054531849,"duration":7182}},{"uid":"48dcadfb0af910e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/48dcadfb0af910e5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054545037,"stop":1702054550202,"duration":5165}},{"uid":"5b856f4c7964c619","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/5b856f4c7964c619","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998546774,"stop":1701998548674,"duration":1900}},{"uid":"ba5a9fc1245d82ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/ba5a9fc1245d82ba","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990504723,"stop":1701990510336,"duration":5613}},{"uid":"ff23a3eb38b8afce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/ff23a3eb38b8afce","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990474878,"stop":1701990478933,"duration":4055}},{"uid":"1048005df8337f3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/1048005df8337f3f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942927801,"stop":1701942930405,"duration":2604}},{"uid":"992d88cc8c0872c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/992d88cc8c0872c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936672118,"stop":1701936675439,"duration":3321}},{"uid":"c5ac7e81a0c26418","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/c5ac7e81a0c26418","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936605422,"stop":1701936607309,"duration":1887}},{"uid":"659cde69919dbc7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/659cde69919dbc7e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701912126961,"stop":1701912129516,"duration":2555}},{"uid":"b5c7b0a0dd90b59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/b5c7b0a0dd90b59","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904980979,"stop":1701904982788,"duration":1809}},{"uid":"a98b60fe3ffdf1ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/a98b60fe3ffdf1ea","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882737694,"stop":1701882740070,"duration":2376}},{"uid":"54d6e83bf0a7050f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/54d6e83bf0a7050f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882713892,"stop":1701882716385,"duration":2493}}]},"tags":[]},"source":"e2d0c85f31f33f5.json","parameterValues":["WiltshireCouncil","None","None"]}