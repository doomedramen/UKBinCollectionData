{"uid":"3785f0d0900fc86e","name":"Validate Council Output [MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b599a4dd435703dc5f9937f69cb0d25f","time":{"start":1702516695598,"stop":1702516712573,"duration":16975},"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x7fcdf24f13a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcdf1e4e950>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:102: in parse_data\n    date = datetime.strptime(' '.join(binDict[bin][1:]), \"%d %b\").replace(year=datetime.today().year)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '23 Dec(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x7fcdf24f13a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcdf1e4e950>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:102: in parse_data\n    date = datetime.strptime(' '.join(binDict[bin][1:]), \"%d %b\").replace(year=datetime.today().year)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '23 Dec(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: MidAndEastAntrimBoroughCouncil","time":{"start":1702516695598,"stop":1702516695598,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from MidAndEastAntrimBoroughCouncil using local and the http://selenium:4444 is set","time":{"start":1702516695598,"stop":1702516712573,"duration":16975},"status":"failed","statusMessage":"unconverted data remains: (Adjusted","statusTrace":"ValueError: unconverted data remains: (Adjusted\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1242-990"},{"name":"thread","value":"2771-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MidAndEastAntrimBoroughCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":47},"items":[{"uid":"b11fae0ef57cc9af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/b11fae0ef57cc9af","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702447487181,"stop":1702447503780,"duration":16599}},{"uid":"cb4b750b8c607874","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/cb4b750b8c607874","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702430351351,"stop":1702430368540,"duration":17189}},{"uid":"bb652de47185345","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/bb652de47185345","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702366503291,"stop":1702366520323,"duration":17032}},{"uid":"274ebd66630e7bb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/274ebd66630e7bb4","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702343978158,"stop":1702343995825,"duration":17667}},{"uid":"ca040e4ebdc05802","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/ca040e4ebdc05802","status":"passed","time":{"start":1702257554988,"stop":1702257571851,"duration":16863}},{"uid":"c5b4f4bce239bc70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/c5b4f4bce239bc70","status":"passed","time":{"start":1702171449778,"stop":1702171466773,"duration":16995}},{"uid":"2cf3865b0a73886a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/2cf3865b0a73886a","status":"passed","time":{"start":1702084677631,"stop":1702084695075,"duration":17444}},{"uid":"34c560691ec4e4ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/34c560691ec4e4ca","status":"passed","time":{"start":1702066748200,"stop":1702066764941,"duration":16741}},{"uid":"6d374e672063a2c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/6d374e672063a2c6","status":"passed","time":{"start":1702054392062,"stop":1702054410095,"duration":18033}},{"uid":"3b45a232bc672c0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/3b45a232bc672c0f","status":"passed","time":{"start":1702054425501,"stop":1702054442287,"duration":16786}},{"uid":"846536f2e5f2e853","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/846536f2e5f2e853","status":"passed","time":{"start":1701998395433,"stop":1701998413657,"duration":18224}},{"uid":"1dedaf5108691c3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/1dedaf5108691c3d","status":"passed","time":{"start":1701990389582,"stop":1701990407527,"duration":17945}},{"uid":"4a74f9367c92550d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/4a74f9367c92550d","status":"passed","time":{"start":1701990357059,"stop":1701990373923,"duration":16864}},{"uid":"2c6806c377f7c930","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/2c6806c377f7c930","status":"passed","time":{"start":1701942796786,"stop":1701942815044,"duration":18258}},{"uid":"2cb5aab0514dd11b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/2cb5aab0514dd11b","status":"passed","time":{"start":1701936527057,"stop":1701936545066,"duration":18009}},{"uid":"bb9b09ff6a7b0478","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/bb9b09ff6a7b0478","status":"passed","time":{"start":1701936478511,"stop":1701936495287,"duration":16776}},{"uid":"ff1e0d3faa7c31d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/ff1e0d3faa7c31d1","status":"passed","time":{"start":1701911966538,"stop":1701911984420,"duration":17882}},{"uid":"e7450cfeae4694dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/e7450cfeae4694dd","status":"passed","time":{"start":1701904891137,"stop":1701904908108,"duration":16971}},{"uid":"ccc6acd771eeea6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/ccc6acd771eeea6c","status":"passed","time":{"start":1701882527387,"stop":1701882546097,"duration":18710}},{"uid":"73b4b07a5283e882","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/73b4b07a5283e882","status":"passed","time":{"start":1701882562506,"stop":1701882580364,"duration":17858}}]},"tags":[]},"source":"3785f0d0900fc86e.json","parameterValues":["MidAndEastAntrimBoroughCouncil","local","http://selenium:4444"]}