{"uid":"33fde221279b238e","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1702516806707,"stop":1702516808289,"duration":1582},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcdf24f1800>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcdf1ed7190>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcdf1ed7190>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fcdf24f1800>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcdf1ed7190>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fcdf1ed7190>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1702516806707,"stop":1702516806707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1702516806707,"stop":1702516808287,"duration":1580},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702516808288,"stop":1702516808288,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702516808288,"stop":1702516808289,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1242-990"},{"name":"thread","value":"2771-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":29,"broken":0,"skipped":0,"passed":46,"unknown":0,"total":75},"items":[{"uid":"8989bf244369f939","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/8989bf244369f939","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447538235,"stop":1702447539591,"duration":1356}},{"uid":"309a44825a3d0d98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/309a44825a3d0d98","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430419252,"stop":1702430422017,"duration":2765}},{"uid":"61e9b50676dae338","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/61e9b50676dae338","status":"passed","time":{"start":1702366549642,"stop":1702366551521,"duration":1879}},{"uid":"3e8f193fc959cca0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/3e8f193fc959cca0","status":"passed","time":{"start":1702344028525,"stop":1702344030492,"duration":1967}},{"uid":"f703a51b338c0e5c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/f703a51b338c0e5c","status":"passed","time":{"start":1702257603526,"stop":1702257605052,"duration":1526}},{"uid":"bfa6d51739a1f4eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/bfa6d51739a1f4eb","status":"passed","time":{"start":1702171673300,"stop":1702171675840,"duration":2540}},{"uid":"3b6b2dd79327d553","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/3b6b2dd79327d553","status":"passed","time":{"start":1702084732675,"stop":1702084736245,"duration":3570}},{"uid":"9701da86d653e748","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/9701da86d653e748","status":"passed","time":{"start":1702066798827,"stop":1702066800517,"duration":1690}},{"uid":"475d6093f1b257ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/475d6093f1b257ac","status":"passed","time":{"start":1702054458773,"stop":1702054460525,"duration":1752}},{"uid":"e5acbd9131e4fe5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/e5acbd9131e4fe5a","status":"passed","time":{"start":1702054492427,"stop":1702054494023,"duration":1596}},{"uid":"e1906a6241c75083","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/e1906a6241c75083","status":"passed","time":{"start":1701998473883,"stop":1701998475842,"duration":1959}},{"uid":"ec7471fcfc390a84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/ec7471fcfc390a84","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990441544,"stop":1701990443137,"duration":1593}},{"uid":"2824bdac42736988","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/2824bdac42736988","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990405423,"stop":1701990406897,"duration":1474}},{"uid":"d6e5b5d83c34da70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/d6e5b5d83c34da70","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942861266,"stop":1701942867762,"duration":6496}},{"uid":"5ca71f21add68fe4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/5ca71f21add68fe4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936601200,"stop":1701936603808,"duration":2608}},{"uid":"33c195edec62199d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/33c195edec62199d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936559869,"stop":1701936564993,"duration":5124}},{"uid":"42cdca0d7e0b5ea1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/42cdca0d7e0b5ea1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701912053112,"stop":1701912055630,"duration":2518}},{"uid":"781e4b0de9868266","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/781e4b0de9868266","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904925193,"stop":1701904926691,"duration":1498}},{"uid":"134e1be7adb2e33b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/134e1be7adb2e33b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882638719,"stop":1701882640215,"duration":1496}},{"uid":"f74467d295ed4e16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/f74467d295ed4e16","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882615689,"stop":1701882617491,"duration":1802}}]},"tags":[]},"source":"33fde221279b238e.json","parameterValues":["SouthNorfolkCouncil","None","None"]}