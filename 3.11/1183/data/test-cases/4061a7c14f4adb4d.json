{"uid":"4061a7c14f4adb4d","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1701566515072,"stop":1701566716120,"duration":201048},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f65ca23c400>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f65b674c810>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f65b674c810>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f65ca23c400>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f65b674c810>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f65b674c810>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1701566515072,"stop":1701566515072,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1701566515072,"stop":1701566716118,"duration":201046},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701566716118,"stop":1701566716118,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701566716118,"stop":1701566716120,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1198-369"},{"name":"thread","value":"2726-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":46,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":46},"items":[{"uid":"8288ad06deddbb5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1182//#testresult/8288ad06deddbb5b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479692847,"stop":1701479718166,"duration":25319}},{"uid":"cd9304fa3b528c0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1179//#testresult/cd9304fa3b528c0f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418943551,"stop":1701418953047,"duration":9496}},{"uid":"6c1957bb4e303d4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1181//#testresult/6c1957bb4e303d4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419061389,"stop":1701419071162,"duration":9773}},{"uid":"2635a3433ea73ab9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1180//#testresult/2635a3433ea73ab9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419019435,"stop":1701419028837,"duration":9402}},{"uid":"5a0e237968474f33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1176//#testresult/5a0e237968474f33","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418859385,"stop":1701418868869,"duration":9484}},{"uid":"14de29218fabfb34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1177//#testresult/14de29218fabfb34","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701418902769,"stop":1701418912645,"duration":9876}},{"uid":"9e808d7c958407aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1175//#testresult/9e808d7c958407aa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414321895,"stop":1701414331349,"duration":9454}},{"uid":"49e159fa27f9f582","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/49e159fa27f9f582","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701393878813,"stop":1701394079841,"duration":201028}},{"uid":"7a54b4693c91729c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/7a54b4693c91729c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353320782,"stop":1701353330223,"duration":9441}},{"uid":"b8817e327505493e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1170//#testresult/b8817e327505493e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353355090,"stop":1701353364552,"duration":9462}},{"uid":"dfbe6e963bd9e506","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1163//#testresult/dfbe6e963bd9e506","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307067096,"stop":1701307091937,"duration":24841}},{"uid":"892290530dae28ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1161//#testresult/892290530dae28ce","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279301872,"stop":1701279318276,"duration":16404}},{"uid":"a4896878fa2dc258","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1156//#testresult/a4896878fa2dc258","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701220729168,"stop":1701220752964,"duration":23796}},{"uid":"96737cd26c788ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1155//#testresult/96737cd26c788ad","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134336891,"stop":1701134361033,"duration":24142}},{"uid":"6c4c733557ad5e38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1152//#testresult/6c4c733557ad5e38","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701047887855,"stop":1701047897501,"duration":9646}},{"uid":"ef078fc0299992d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/ef078fc0299992d6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036151139,"stop":1701036160612,"duration":9473}},{"uid":"88ba02aa1133d430","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/88ba02aa1133d430","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036091809,"stop":1701036101270,"duration":9461}},{"uid":"3f1614dbb02cc98b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/3f1614dbb02cc98b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961704137,"stop":1700961905051,"duration":200914}},{"uid":"6b21a66711d620d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1147//#testresult/6b21a66711d620d5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874892287,"stop":1700874916282,"duration":23995}},{"uid":"5d2f1b846d26922f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/5d2f1b846d26922f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788553110,"stop":1700788561871,"duration":8761}}]},"tags":[]},"source":"4061a7c14f4adb4d.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}