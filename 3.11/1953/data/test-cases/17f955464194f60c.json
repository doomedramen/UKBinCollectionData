{"uid":"17f955464194f60c","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1719276268565,"stop":1719276281508,"duration":12943},"status":"failed","statusMessage":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f778eda7420>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7790d56e10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 1st August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f778eda7420>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f7790d56e10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 1st August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1719276268565,"stop":1719276268565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719276268566,"stop":1719276281508,"duration":12942},"status":"failed","statusMessage":"time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"dfe98c39321ea0cb","name":"log","source":"dfe98c39321ea0cb.txt","type":"text/plain","size":132},{"uid":"cdc2f7ef26e97ca0","name":"stdout","source":"cdc2f7ef26e97ca0.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1788-901"},{"name":"thread","value":"2674-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":24},"items":[{"uid":"70e084afde4be5f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/70e084afde4be5f2","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719189989222,"stop":1719190001742,"duration":12520}},{"uid":"d0c0f6ffb6649190","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/d0c0f6ffb6649190","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719103558591,"stop":1719103576104,"duration":17513}},{"uid":"a21798fdfd7fa94f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/a21798fdfd7fa94f","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719017127021,"stop":1719017147104,"duration":20083}},{"uid":"53097d313d5d9c26","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/53097d313d5d9c26","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1718930775909,"stop":1718930783812,"duration":7903}},{"uid":"851228d6641c17fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/851228d6641c17fb","status":"passed","time":{"start":1718844229576,"stop":1718844249130,"duration":19554}},{"uid":"8eea5a9aae82dbdb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/8eea5a9aae82dbdb","status":"passed","time":{"start":1718757956130,"stop":1718758015870,"duration":59740}},{"uid":"ac7883c92d151646","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/ac7883c92d151646","status":"passed","time":{"start":1718671512649,"stop":1718671536976,"duration":24327}},{"uid":"5f559f14f62c772e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1945//#testresult/5f559f14f62c772e","status":"passed","time":{"start":1718585321929,"stop":1718585330055,"duration":8126}},{"uid":"b20ce679727d0384","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/b20ce679727d0384","status":"passed","time":{"start":1718498749810,"stop":1718498760842,"duration":11032}},{"uid":"efbc917afda7d532","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/efbc917afda7d532","status":"passed","time":{"start":1718412233920,"stop":1718412249537,"duration":15617}},{"uid":"c78161c1783c7f6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/c78161c1783c7f6e","status":"passed","time":{"start":1718325837680,"stop":1718325852684,"duration":15004}},{"uid":"d1520e92d8299074","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1939//#testresult/d1520e92d8299074","status":"passed","time":{"start":1718239501243,"stop":1718239505168,"duration":3925}},{"uid":"7c6d4eb50dae2a54","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1938//#testresult/7c6d4eb50dae2a54","status":"passed","time":{"start":1718153125113,"stop":1718153163739,"duration":38626}},{"uid":"6260e08db8503144","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1937//#testresult/6260e08db8503144","status":"passed","time":{"start":1718066760293,"stop":1718066904498,"duration":144205}},{"uid":"8c5c4119490eab32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1936//#testresult/8c5c4119490eab32","status":"passed","time":{"start":1717980292906,"stop":1717980303454,"duration":10548}},{"uid":"a94093c14a645eae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1934//#testresult/a94093c14a645eae","status":"passed","time":{"start":1717893804433,"stop":1717893946870,"duration":142437}},{"uid":"5eb4a0c3c8ec0d8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1933//#testresult/5eb4a0c3c8ec0d8e","status":"passed","time":{"start":1717807633560,"stop":1717807642939,"duration":9379}},{"uid":"9094c7eeb7c0985","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1932//#testresult/9094c7eeb7c0985","status":"passed","time":{"start":1717720979774,"stop":1717721148432,"duration":168658}},{"uid":"13f3ae826455b8b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1927//#testresult/13f3ae826455b8b2","status":"passed","time":{"start":1717634599545,"stop":1717634619880,"duration":20335}},{"uid":"fb53b9c8ccb9cf03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1924//#testresult/fb53b9c8ccb9cf03","status":"passed","time":{"start":1717548205113,"stop":1717548215239,"duration":10126}}]},"tags":[]},"source":"17f955464194f60c.json","parameterValues":["UttlesfordDistrictCouncil"]}