{"uid":"88a2a61fd99acb45","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1711844953095,"stop":1711844955556,"duration":2461},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fcb097d49a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcb0964c910>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7fcb1c17dc90>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fcb097d49a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcb0964c910>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7fcb1c17dc90>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1711844953095,"stop":1711844953096,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1711844953096,"stop":1711844955556,"duration":2460},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az887-81"},{"name":"thread","value":"2801-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":226,"unknown":0,"total":232},"items":[{"uid":"60c5cf5c385a47b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1649//#testresult/60c5cf5c385a47b2","status":"passed","time":{"start":1711671942741,"stop":1711671943907,"duration":1166}},{"uid":"c21b33bfc73019e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1648//#testresult/c21b33bfc73019e1","status":"passed","time":{"start":1711585588746,"stop":1711585589652,"duration":906}},{"uid":"96eb478aee764c7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1646//#testresult/96eb478aee764c7a","status":"passed","time":{"start":1711499122869,"stop":1711499123925,"duration":1056}},{"uid":"f542a74d1dad917d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1645//#testresult/f542a74d1dad917d","status":"passed","time":{"start":1711412707654,"stop":1711412708969,"duration":1315}},{"uid":"2ffc415ab8495b54","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1641//#testresult/2ffc415ab8495b54","status":"passed","time":{"start":1711326422690,"stop":1711326423972,"duration":1282}},{"uid":"964fd51f295de726","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1634//#testresult/964fd51f295de726","status":"passed","time":{"start":1711240107447,"stop":1711240109104,"duration":1657}},{"uid":"8cbf855eae644c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1626//#testresult/8cbf855eae644c7","status":"passed","time":{"start":1711153494765,"stop":1711153497655,"duration":2890}},{"uid":"cef657a9bc8bded2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1625//#testresult/cef657a9bc8bded2","status":"passed","time":{"start":1711067115832,"stop":1711067117101,"duration":1269}},{"uid":"a78d9f7672033906","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1624//#testresult/a78d9f7672033906","status":"passed","time":{"start":1710980798889,"stop":1710980799923,"duration":1034}},{"uid":"4bb107e6a9213873","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1621//#testresult/4bb107e6a9213873","status":"passed","time":{"start":1710970889209,"stop":1710970890953,"duration":1744}},{"uid":"cdbdb8312e2c79d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1619//#testresult/cdbdb8312e2c79d3","status":"passed","time":{"start":1710894310755,"stop":1710894312296,"duration":1541}},{"uid":"cc9d2ff339dfa1ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1615//#testresult/cc9d2ff339dfa1ce","status":"passed","time":{"start":1710807932001,"stop":1710807933297,"duration":1296}},{"uid":"5542b6eff40f2737","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1609//#testresult/5542b6eff40f2737","status":"passed","time":{"start":1710721637484,"stop":1710721638523,"duration":1039}},{"uid":"a5fe1cc44cb18911","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1608//#testresult/a5fe1cc44cb18911","status":"passed","time":{"start":1710635288726,"stop":1710635290179,"duration":1453}},{"uid":"18711c2f383d2650","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1607//#testresult/18711c2f383d2650","status":"passed","time":{"start":1710548646144,"stop":1710548648378,"duration":2234}},{"uid":"902235dcaa519e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1605//#testresult/902235dcaa519e","status":"passed","time":{"start":1710462311297,"stop":1710462312830,"duration":1533}},{"uid":"a05434177d89d9e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1604//#testresult/a05434177d89d9e4","status":"passed","time":{"start":1710452790886,"stop":1710452792308,"duration":1422}},{"uid":"ee6066a6cc54e7a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1602//#testresult/ee6066a6cc54e7a9","status":"passed","time":{"start":1710375897751,"stop":1710375903564,"duration":5813}},{"uid":"e484e3868a3fcc32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1601//#testresult/e484e3868a3fcc32","status":"passed","time":{"start":1710289499422,"stop":1710289501217,"duration":1795}},{"uid":"d677c110058e5f21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1600//#testresult/d677c110058e5f21","status":"passed","time":{"start":1710203111414,"stop":1710203112803,"duration":1389}}]},"tags":[]},"source":"88a2a61fd99acb45.json","parameterValues":["AylesburyValeCouncil","None","None"]}