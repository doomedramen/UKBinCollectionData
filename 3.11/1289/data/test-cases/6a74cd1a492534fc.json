{"uid":"6a74cd1a492534fc","name":"Validate Council Output [ChelmsfordCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a36e1942544dc83c86694d4dbc2f9ff3","time":{"start":1703380903015,"stop":1703381104163,"duration":201148},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f13592f1a80>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f13586219d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f13586219d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f13592f1a80>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f13586219d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f13586219d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1703380903015,"stop":1703380903016,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ChelmsfordCityCouncil using None and the None is set","time":{"start":1703380903016,"stop":1703381104162,"duration":201146},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703381104162,"stop":1703381104162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703381104162,"stop":1703381104163,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1110-626"},{"name":"thread","value":"2699-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":91,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":91},"items":[{"uid":"981105bc515e544b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/981105bc515e544b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294043919,"stop":1703294072375,"duration":28456}},{"uid":"82c6d30d753ec64c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/82c6d30d753ec64c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207780024,"stop":1703207789876,"duration":9852}},{"uid":"12224cb566def492","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/12224cb566def492","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121417169,"stop":1703121426764,"duration":9595}},{"uid":"c289b679a7768ad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/c289b679a7768ad6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034241219,"stop":1703034269014,"duration":27795}},{"uid":"9b6453c0f42bdf50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/9b6453c0f42bdf50","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024888424,"stop":1703024906725,"duration":18301}},{"uid":"53d62194f6573722","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/53d62194f6573722","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024856305,"stop":1703024865809,"duration":9504}},{"uid":"2cef38fc7c68dee7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/2cef38fc7c68dee7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948669997,"stop":1702948679749,"duration":9752}},{"uid":"a7599349db3bc4f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/a7599349db3bc4f4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862334561,"stop":1702862344195,"duration":9634}},{"uid":"8598dd515d31d3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/8598dd515d31d3e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702859985467,"stop":1702859994836,"duration":9369}},{"uid":"39139c6eb0cc04a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/39139c6eb0cc04a5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843548069,"stop":1702843557986,"duration":9917}},{"uid":"508a5495fe095e67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/508a5495fe095e67","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809357936,"stop":1702809367917,"duration":9981}},{"uid":"82bbc83610b6e8aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/82bbc83610b6e8aa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657117462,"stop":1702657127321,"duration":9859}},{"uid":"dea54ffe398b286a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/dea54ffe398b286a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657145686,"stop":1702657155053,"duration":9367}},{"uid":"db49589f9fdf8b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/db49589f9fdf8b6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603165901,"stop":1702603192580,"duration":26679}},{"uid":"e10323f4be1c5f82","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/e10323f4be1c5f82","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540026843,"stop":1702540035663,"duration":8820}},{"uid":"99fc3b59fc7b87bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/99fc3b59fc7b87bb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516658397,"stop":1702516667204,"duration":8807}},{"uid":"a35675d04a95dfd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/a35675d04a95dfd1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447456569,"stop":1702447465867,"duration":9298}},{"uid":"9ee88bb299d88ba3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/9ee88bb299d88ba3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430312078,"stop":1702430321375,"duration":9297}},{"uid":"ecede32e34b40648","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/ecede32e34b40648","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366468070,"stop":1702366477476,"duration":9406}},{"uid":"4dda9e504e20fd47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/4dda9e504e20fd47","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343933502,"stop":1702343960509,"duration":27007}}]},"tags":[]},"source":"6a74cd1a492534fc.json","parameterValues":["ChelmsfordCityCouncil","None","None"]}