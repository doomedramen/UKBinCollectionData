{"uid":"6f4d271b8acbf0df","name":"Validate Council Output [CornwallCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"20fb6c486e377aee58980a6c6932d1ba","time":{"start":1725403952427,"stop":1725403953078,"duration":651},"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f4b5dadcf40>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4b5d96a110>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '9 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f4b5dadcf40>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4b5d96a110>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '9 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council","time":{"start":1725403952428,"stop":1725403952428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725403952428,"stop":1725403953078,"duration":650},"status":"failed","statusMessage":"unconverted data remains: t","statusTrace":"ValueError: unconverted data remains: t\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8089cf043cbc0b6d","name":"stdout","source":"8089cf043cbc0b6d.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az702-936"},{"name":"thread","value":"2827-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CornwallCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":23,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":43},"items":[{"uid":"cbb8ad38f8a95c3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/cbb8ad38f8a95c3a","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725384898065,"stop":1725384899015,"duration":950}},{"uid":"3a67243b0eb80596","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/3a67243b0eb80596","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725347143272,"stop":1725347144015,"duration":743}},{"uid":"d992f8cbb694d081","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/d992f8cbb694d081","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725322345167,"stop":1725322346130,"duration":963}},{"uid":"4c512d671c72a96b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/4c512d671c72a96b","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725316305566,"stop":1725316306271,"duration":705}},{"uid":"e3b87164dd7c404f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/e3b87164dd7c404f","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725312996047,"stop":1725312996923,"duration":876}},{"uid":"59c9908c489ea8c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/59c9908c489ea8c3","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725310842730,"stop":1725310843450,"duration":720}},{"uid":"f0cfc479505e6e93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2060//#testresult/f0cfc479505e6e93","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725308085412,"stop":1725308085939,"duration":527}},{"uid":"3f8583c4efe870f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2059//#testresult/3f8583c4efe870f8","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725307963834,"stop":1725307964620,"duration":786}},{"uid":"df8cefdc5e50bfd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2054//#testresult/df8cefdc5e50bfd2","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725235979106,"stop":1725235979743,"duration":637}},{"uid":"665e070792763d1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2053//#testresult/665e070792763d1c","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725149666338,"stop":1725149667097,"duration":759}},{"uid":"12a5029a47f0d9cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2052//#testresult/12a5029a47f0d9cc","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725063127415,"stop":1725063128494,"duration":1079}},{"uid":"a98a01c12cfe8df1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2051//#testresult/a98a01c12cfe8df1","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724976753389,"stop":1724976754023,"duration":634}},{"uid":"1186550e53f05fb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2049//#testresult/1186550e53f05fb8","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724890347550,"stop":1724890348234,"duration":684}},{"uid":"9eaab831a5ee45b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2048//#testresult/9eaab831a5ee45b8","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724803872111,"stop":1724803873117,"duration":1006}},{"uid":"23f0526dbc7a2641","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2043//#testresult/23f0526dbc7a2641","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724717498675,"stop":1724717499767,"duration":1092}},{"uid":"65c1bd6ae238a82a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2039//#testresult/65c1bd6ae238a82a","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724631140729,"stop":1724631141524,"duration":795}},{"uid":"b10da09e077eb963","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2038//#testresult/b10da09e077eb963","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724544680450,"stop":1724544681739,"duration":1289}},{"uid":"492fa031cb67248d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2037//#testresult/492fa031cb67248d","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724458340471,"stop":1724458341344,"duration":873}},{"uid":"6817a590e170b437","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2036//#testresult/6817a590e170b437","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724371881062,"stop":1724371883298,"duration":2236}},{"uid":"2281e4bc3b57d40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2034//#testresult/2281e4bc3b57d40","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1724285479902,"stop":1724285480988,"duration":1086}}]},"tags":[]},"source":"6f4d271b8acbf0df.json","parameterValues":["CornwallCouncil"]}