{"uid":"cc79c3b592675ba7","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1712622391517,"stop":1712622392893,"duration":1376},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f864bde09a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f864ba69e10>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f864bde09a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f864ba69e10>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1712622391517,"stop":1712622391517,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1712622391518,"stop":1712622392893,"duration":1375},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1245-397"},{"name":"thread","value":"2815-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":169,"unknown":0,"total":191},"items":[{"uid":"853116fa679892dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1667//#testresult/853116fa679892dd","status":"passed","time":{"start":1712536040800,"stop":1712536041839,"duration":1039}},{"uid":"7aee58eb935fddd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1666//#testresult/7aee58eb935fddd2","status":"passed","time":{"start":1712449778370,"stop":1712449779822,"duration":1452}},{"uid":"3d27b9d3b3ec4b45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1665//#testresult/3d27b9d3b3ec4b45","status":"passed","time":{"start":1712363213242,"stop":1712363214396,"duration":1154}},{"uid":"2433ffa22c63f229","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1664//#testresult/2433ffa22c63f229","status":"passed","time":{"start":1712276788183,"stop":1712276789459,"duration":1276}},{"uid":"f105836604e98ab7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1660//#testresult/f105836604e98ab7","status":"passed","time":{"start":1712190411237,"stop":1712190412479,"duration":1242}},{"uid":"ef8d6a93bcad87b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1657//#testresult/ef8d6a93bcad87b7","status":"passed","time":{"start":1712136894124,"stop":1712136895114,"duration":990}},{"uid":"cf31f41e17be9072","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1655//#testresult/cf31f41e17be9072","status":"passed","time":{"start":1712103954824,"stop":1712103955669,"duration":845}},{"uid":"eb5e03dbb139fc64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1654//#testresult/eb5e03dbb139fc64","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1712017598291,"stop":1712017599655,"duration":1364}},{"uid":"ef4017f98f8157d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1653//#testresult/ef4017f98f8157d0","status":"passed","time":{"start":1711931375434,"stop":1711931383998,"duration":8564}},{"uid":"62d440e6f9faf168","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1652//#testresult/62d440e6f9faf168","status":"passed","time":{"start":1711844979121,"stop":1711844979982,"duration":861}},{"uid":"dba503c1db08ce97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1649//#testresult/dba503c1db08ce97","status":"passed","time":{"start":1711671967828,"stop":1711671969008,"duration":1180}},{"uid":"33aa69dfefde4a8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1648//#testresult/33aa69dfefde4a8b","status":"passed","time":{"start":1711585626608,"stop":1711585627718,"duration":1110}},{"uid":"51873c8252a879f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1646//#testresult/51873c8252a879f3","status":"passed","time":{"start":1711499139273,"stop":1711499140585,"duration":1312}},{"uid":"84f9003c76a457c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1645//#testresult/84f9003c76a457c6","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1711412721347,"stop":1711412722189,"duration":842}},{"uid":"4cf156f0dc1137c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1641//#testresult/4cf156f0dc1137c7","status":"passed","time":{"start":1711326434163,"stop":1711326435104,"duration":941}},{"uid":"da9762d7c4aba433","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1634//#testresult/da9762d7c4aba433","status":"passed","time":{"start":1711240114666,"stop":1711240115983,"duration":1317}},{"uid":"601f3b895b931132","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1626//#testresult/601f3b895b931132","status":"passed","time":{"start":1711153508072,"stop":1711153508995,"duration":923}},{"uid":"7f46117ead4564df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1625//#testresult/7f46117ead4564df","status":"passed","time":{"start":1711067130277,"stop":1711067131264,"duration":987}},{"uid":"9aa86a11d34afde2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1624//#testresult/9aa86a11d34afde2","status":"passed","time":{"start":1710980819337,"stop":1710980820415,"duration":1078}},{"uid":"bc619438d15c86af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1621//#testresult/bc619438d15c86af","status":"passed","time":{"start":1710970908541,"stop":1710970909333,"duration":792}}]},"tags":[]},"source":"cc79c3b592675ba7.json","parameterValues":["BarnsleyMBCouncil","None","None"]}