{"uid":"26e2d205d72765fc","name":"Validate Council Output [LondonBoroughHounslow-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2d5d41f2f80a2dfc213e6858543e98d5","time":{"start":1703025045601,"stop":1703025047995,"duration":2394},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f68293e1260>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6828723550>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f6828723550>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f68293e1260>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6828723550>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f6828723550>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: LondonBoroughHounslow","time":{"start":1703025045601,"stop":1703025045601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LondonBoroughHounslow using None and the None is set","time":{"start":1703025045601,"stop":1703025047993,"duration":2392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703025047993,"stop":1703025047993,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703025047993,"stop":1703025047995,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az842-373"},{"name":"thread","value":"2707-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LondonBoroughHounslow"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":86,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":86},"items":[{"uid":"11f7bea2ae470d22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/11f7bea2ae470d22","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703025015037,"stop":1703025017442,"duration":2405}},{"uid":"98f9f5f626d49e17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/98f9f5f626d49e17","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948833357,"stop":1702948836684,"duration":3327}},{"uid":"cebb6dea6480c7d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/cebb6dea6480c7d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862367622,"stop":1702862370341,"duration":2719}},{"uid":"c3c31c3df02f0a39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/c3c31c3df02f0a39","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702860012258,"stop":1702860016285,"duration":4027}},{"uid":"29cc8b5a7d1164fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/29cc8b5a7d1164fc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843578552,"stop":1702843582002,"duration":3450}},{"uid":"d6954e0ed4c07962","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/d6954e0ed4c07962","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809391979,"stop":1702809394839,"duration":2860}},{"uid":"3692ec126160a23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/3692ec126160a23","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657343643,"stop":1702657346370,"duration":2727}},{"uid":"6a1a557fa617cb79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/6a1a557fa617cb79","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657282069,"stop":1702657284855,"duration":2786}},{"uid":"296dd9cafd4289d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/296dd9cafd4289d4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603325983,"stop":1702603328891,"duration":2908}},{"uid":"cb53a3b6894b7a7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/cb53a3b6894b7a7b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540163165,"stop":1702540165913,"duration":2748}},{"uid":"1ba277248969ee8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/1ba277248969ee8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516826047,"stop":1702516828978,"duration":2931}},{"uid":"df1ae80ccebaa7ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/df1ae80ccebaa7ef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447721461,"stop":1702447723755,"duration":2294}},{"uid":"8db26ca01b0e7d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/8db26ca01b0e7d6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702430338325,"stop":1702430341113,"duration":2788}},{"uid":"c43c1bfaf1d245bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/c43c1bfaf1d245bd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366490502,"stop":1702366493602,"duration":3100}},{"uid":"bc817558026c3242","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/bc817558026c3242","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343968806,"stop":1702343971171,"duration":2365}},{"uid":"6ad0460f58850b77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/6ad0460f58850b77","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257546452,"stop":1702257549037,"duration":2585}},{"uid":"dfe1a25f80c8f47e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/dfe1a25f80c8f47e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171440182,"stop":1702171442843,"duration":2661}},{"uid":"e67230b0ba79f38b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/e67230b0ba79f38b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084637904,"stop":1702084670363,"duration":32459}},{"uid":"8be2510c66183c3c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/8be2510c66183c3c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066734072,"stop":1702066736981,"duration":2909}},{"uid":"c2a7272a3ef63503","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/c2a7272a3ef63503","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054377816,"stop":1702054380803,"duration":2987}}]},"tags":[]},"source":"26e2d205d72765fc.json","parameterValues":["LondonBoroughHounslow","None","None"]}