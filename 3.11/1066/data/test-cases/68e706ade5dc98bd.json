{"uid":"68e706ade5dc98bd","name":"Validate Council Output [HighPeakCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f014a970b405df22a91c3a1e6926ba51","time":{"start":1698646336846,"stop":1698646347866,"duration":11020},"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff60d43a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff5ff0e6f90>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff5ff0e6f90>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff60d43a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff5ff0e6f90>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff5ff0e6f90>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","steps":[{"name":"Given the council: HighPeakCouncil","time":{"start":1698646336847,"stop":1698646336847,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from HighPeakCouncil","time":{"start":1698646336848,"stop":1698646347861,"duration":11013},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1698646347862,"stop":1698646347862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1698646347862,"stop":1698646347866,"duration":4},"status":"failed","statusMessage":"assert False is True","statusTrace":"AssertionError: assert False is True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az454-168"},{"name":"thread","value":"2187-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HighPeakCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":53,"broken":0,"skipped":0,"passed":109,"unknown":0,"total":162},"items":[{"uid":"408995bab1ea5fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/408995bab1ea5fb","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698646346059,"stop":1698646354414,"duration":8355}},{"uid":"8cbd119a63ff336c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/8cbd119a63ff336c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698628566051,"stop":1698628573545,"duration":7494}},{"uid":"a51ef4d8729a2912","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/a51ef4d8729a2912","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698615483345,"stop":1698615491448,"duration":8103}},{"uid":"a99311e2d630448c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/a99311e2d630448c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698615248411,"stop":1698615255679,"duration":7268}},{"uid":"d12bc582b490d53c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1061//#testresult/d12bc582b490d53c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698615125609,"stop":1698615134706,"duration":9097}},{"uid":"bd49bd87e3f92563","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1054//#testresult/bd49bd87e3f92563","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698542366391,"stop":1698542374299,"duration":7908}},{"uid":"5012eb901ab8050b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1053//#testresult/5012eb901ab8050b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698455553149,"stop":1698455561748,"duration":8599}},{"uid":"b3ab764cd767ccc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1051//#testresult/b3ab764cd767ccc","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698369242808,"stop":1698369251803,"duration":8995}},{"uid":"77a61b2ea9affaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1050//#testresult/77a61b2ea9affaa","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698282846775,"stop":1698282856330,"duration":9555}},{"uid":"18f3f4b4d20f08d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1049//#testresult/18f3f4b4d20f08d7","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698196523960,"stop":1698196531635,"duration":7675}},{"uid":"71b4ae87742e068d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1048//#testresult/71b4ae87742e068d","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698178221467,"stop":1698178230510,"duration":9043}},{"uid":"1862e7e4ca3d107c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1047//#testresult/1862e7e4ca3d107c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698178209313,"stop":1698178218084,"duration":8771}},{"uid":"210e82ef8a41d5f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1046//#testresult/210e82ef8a41d5f8","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698110096376,"stop":1698110104293,"duration":7917}},{"uid":"50c4adfdd3708a30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1044//#testresult/50c4adfdd3708a30","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698064876628,"stop":1698064886718,"duration":10090}},{"uid":"61f48d5b041799dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1042//#testresult/61f48d5b041799dc","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698023743059,"stop":1698023752189,"duration":9130}},{"uid":"dd727c55b959a3ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1040//#testresult/dd727c55b959a3ca","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697937607479,"stop":1697937614260,"duration":6781}},{"uid":"6cb4c6fed5836ddc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/6cb4c6fed5836ddc","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697850791800,"stop":1697850798754,"duration":6954}},{"uid":"e4b717a13fde14d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1037//#testresult/e4b717a13fde14d4","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697790410528,"stop":1697790421239,"duration":10711}},{"uid":"ad6618bd7c04b7f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/ad6618bd7c04b7f7","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697764519973,"stop":1697764527922,"duration":7949}},{"uid":"ef9936c0261f2d52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/ef9936c0261f2d52","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697706527829,"stop":1697706537101,"duration":9272}}]},"tags":[]},"source":"68e706ade5dc98bd.json","parameterValues":["HighPeakCouncil"]}