{"uid":"27d551f5cb7b084f","name":"Validate Council Output [NorthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5f199ed7bccd24a997d0abd44066cd21","time":{"start":1698867626835,"stop":1698867628538,"duration":1703},"status":"failed","statusMessage":"NotImplementedError: Country GB does not have subdivision Eng","statusTrace":"fixturefunc = <function scrape_step at 0x7fb3585a54e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb34a8ed250>, 'council': 'NorthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:63: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthTynesideCouncil.py:184: in parse_data\n    if is_holiday(item_as_date, Region.ENG):\nuk_bin_collection/uk_bin_collection/common.py:149: in is_holiday\n    uk_holidays = holidays.country_holidays(\"GB\", subdiv=subdiv)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/utils.py:187: in country_holidays\n    return getattr(holidays, country)(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/registry.py:197: in __call__\n    return cls(*args, **kwargs)  # type: ignore[misc, operator]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/countries/united_kingdom.py:53: in __init__\n    super().__init__(observed_rule=SAT_SUN_TO_NEXT_MON, *args, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/observed_holiday_base.py:100: in __init__\n    super().__init__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = holidays.country_holidays('GB', subdiv='Eng'), years = None\nexpand = True, observed = True, subdiv = 'Eng', prov = None, state = None\nlanguage = None, categories = None\n\n    def __init__(\n        self,\n        years: Optional[Union[int, Iterable[int]]] = None,\n        expand: bool = True,\n        observed: bool = True,\n        subdiv: Optional[str] = None,\n        prov: Optional[str] = None,  # Deprecated.\n        state: Optional[str] = None,  # Deprecated.\n        language: Optional[str] = None,\n        categories: Optional[Tuple[str]] = None,\n    ) -> None:\n        \"\"\"\n        :param years:\n            The year(s) to pre-calculate public holidays for at instantiation.\n    \n        :param expand:\n            Whether the entire year is calculated when one date from that year\n            is requested.\n    \n        :param observed:\n            Whether to include the dates when public holiday are observed\n            (e.g. a holiday falling on a Sunday being observed the\n            following Monday). This doesn't work for all countries.\n    \n        :param subdiv:\n            The subdivision (e.g. state or province); not implemented for all\n            countries (see documentation).\n    \n        :param prov:\n            *deprecated* use subdiv instead.\n    \n        :param state:\n            *deprecated* use subdiv instead.\n    \n        :param language:\n            The language which the returned holiday names will be translated\n            into. It must be an ISO 639-1 (2-letter) language code. If the\n            language translation is not supported the original holiday names\n            will be used.\n    \n        :param categories:\n            Requested holiday categories.\n    \n        :return:\n            A :class:`HolidayBase` object matching the **country**.\n        \"\"\"\n        super().__init__()\n    \n        self.expand = expand\n        self.language = language.lower() if language else None\n        self.observed = observed\n        self.subdiv = subdiv or prov or state\n        self.categories = set(categories) if categories else {PUBLIC}\n    \n        self.tr = gettext  # Default translation method.\n    \n        if prov or state:\n            warnings.warn(\n                f\"Arguments prov and state are deprecated, use subdiv='{prov or state}' instead.\",\n                DeprecationWarning,\n            )\n    \n        if isinstance(self.subdiv, int):\n            self.subdiv = str(self.subdiv)\n    \n        if not isinstance(self, HolidaySum):\n            if self.subdiv and self.subdiv not in set(\n                self.subdivisions + self._deprecated_subdivisions\n            ):\n>               raise NotImplementedError(\n                    f\"Market {self.market} does not have subdivision {self.subdiv}\"\n                    if hasattr(self, \"market\")\n                    else f\"Country {self.country} does not have subdivision {self.subdiv}\"\n                )\nE               NotImplementedError: Country GB does not have subdivision Eng\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/holiday_base.py:308: NotImplementedError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"NotImplementedError: Country GB does not have subdivision Eng","statusTrace":"fixturefunc = <function scrape_step at 0x7fb3585a54e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb34a8ed250>, 'council': 'NorthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:63: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthTynesideCouncil.py:184: in parse_data\n    if is_holiday(item_as_date, Region.ENG):\nuk_bin_collection/uk_bin_collection/common.py:149: in is_holiday\n    uk_holidays = holidays.country_holidays(\"GB\", subdiv=subdiv)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/utils.py:187: in country_holidays\n    return getattr(holidays, country)(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/registry.py:197: in __call__\n    return cls(*args, **kwargs)  # type: ignore[misc, operator]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/countries/united_kingdom.py:53: in __init__\n    super().__init__(observed_rule=SAT_SUN_TO_NEXT_MON, *args, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/observed_holiday_base.py:100: in __init__\n    super().__init__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = holidays.country_holidays('GB', subdiv='Eng'), years = None\nexpand = True, observed = True, subdiv = 'Eng', prov = None, state = None\nlanguage = None, categories = None\n\n    def __init__(\n        self,\n        years: Optional[Union[int, Iterable[int]]] = None,\n        expand: bool = True,\n        observed: bool = True,\n        subdiv: Optional[str] = None,\n        prov: Optional[str] = None,  # Deprecated.\n        state: Optional[str] = None,  # Deprecated.\n        language: Optional[str] = None,\n        categories: Optional[Tuple[str]] = None,\n    ) -> None:\n        \"\"\"\n        :param years:\n            The year(s) to pre-calculate public holidays for at instantiation.\n    \n        :param expand:\n            Whether the entire year is calculated when one date from that year\n            is requested.\n    \n        :param observed:\n            Whether to include the dates when public holiday are observed\n            (e.g. a holiday falling on a Sunday being observed the\n            following Monday). This doesn't work for all countries.\n    \n        :param subdiv:\n            The subdivision (e.g. state or province); not implemented for all\n            countries (see documentation).\n    \n        :param prov:\n            *deprecated* use subdiv instead.\n    \n        :param state:\n            *deprecated* use subdiv instead.\n    \n        :param language:\n            The language which the returned holiday names will be translated\n            into. It must be an ISO 639-1 (2-letter) language code. If the\n            language translation is not supported the original holiday names\n            will be used.\n    \n        :param categories:\n            Requested holiday categories.\n    \n        :return:\n            A :class:`HolidayBase` object matching the **country**.\n        \"\"\"\n        super().__init__()\n    \n        self.expand = expand\n        self.language = language.lower() if language else None\n        self.observed = observed\n        self.subdiv = subdiv or prov or state\n        self.categories = set(categories) if categories else {PUBLIC}\n    \n        self.tr = gettext  # Default translation method.\n    \n        if prov or state:\n            warnings.warn(\n                f\"Arguments prov and state are deprecated, use subdiv='{prov or state}' instead.\",\n                DeprecationWarning,\n            )\n    \n        if isinstance(self.subdiv, int):\n            self.subdiv = str(self.subdiv)\n    \n        if not isinstance(self, HolidaySum):\n            if self.subdiv and self.subdiv not in set(\n                self.subdivisions + self._deprecated_subdivisions\n            ):\n>               raise NotImplementedError(\n                    f\"Market {self.market} does not have subdivision {self.subdiv}\"\n                    if hasattr(self, \"market\")\n                    else f\"Country {self.country} does not have subdivision {self.subdiv}\"\n                )\nE               NotImplementedError: Country GB does not have subdivision Eng\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/holidays/holiday_base.py:308: NotImplementedError","steps":[{"name":"Given the council: NorthTynesideCouncil","time":{"start":1698867626835,"stop":1698867626836,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from NorthTynesideCouncil","time":{"start":1698867626836,"stop":1698867628538,"duration":1702},"status":"failed","statusMessage":"Country GB does not have subdivision Eng","statusTrace":"NotImplementedError: Country GB does not have subdivision Eng\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1242-562"},{"name":"thread","value":"2218-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthTynesideCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":159,"unknown":0,"total":170},"items":[{"uid":"9bc3c7118a449c8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/9bc3c7118a449c8e","status":"failed","statusDetails":"NotImplementedError: Country GB does not have subdivision Eng","time":{"start":1698801568707,"stop":1698801570123,"duration":1416}},{"uid":"381a6d3d362e7ee4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/381a6d3d362e7ee4","status":"failed","statusDetails":"NotImplementedError: Country GB does not have subdivision Eng","time":{"start":1698788552238,"stop":1698788554485,"duration":2247}},{"uid":"d87a316b5cece77c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1077//#testresult/d87a316b5cece77c","status":"failed","statusDetails":"NotImplementedError: Country GB does not have subdivision Eng","time":{"start":1698715029480,"stop":1698715036017,"duration":6537}},{"uid":"d6449aa568084fda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1075//#testresult/d6449aa568084fda","status":"failed","statusDetails":"NotImplementedError: Country GB does not have subdivision Eng","time":{"start":1698701382933,"stop":1698701384522,"duration":1589}},{"uid":"6a28a0f416a03bfd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1073//#testresult/6a28a0f416a03bfd","status":"passed","time":{"start":1698700268059,"stop":1698700273897,"duration":5838}},{"uid":"c103f204aea5203c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1070//#testresult/c103f204aea5203c","status":"passed","time":{"start":1698693026529,"stop":1698693028953,"duration":2424}},{"uid":"8c8c58453dd3545e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1069//#testresult/8c8c58453dd3545e","status":"passed","time":{"start":1698692790581,"stop":1698692792600,"duration":2019}},{"uid":"9bbf7a130c88ebe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1066//#testresult/9bbf7a130c88ebe6","status":"passed","time":{"start":1698646380927,"stop":1698646383070,"duration":2143}},{"uid":"76fc2021c10936c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/76fc2021c10936c0","status":"passed","time":{"start":1698646382988,"stop":1698646385701,"duration":2713}},{"uid":"7baf7160de3135f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/7baf7160de3135f0","status":"passed","time":{"start":1698628594987,"stop":1698628596594,"duration":1607}},{"uid":"56f09217780d646c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/56f09217780d646c","status":"passed","time":{"start":1698615193889,"stop":1698615195669,"duration":1780}},{"uid":"6e152225653b73d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/6e152225653b73d6","status":"passed","time":{"start":1698615264437,"stop":1698615271202,"duration":6765}},{"uid":"e9343368c094e0fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1061//#testresult/e9343368c094e0fc","status":"passed","time":{"start":1698615126379,"stop":1698615128297,"duration":1918}},{"uid":"3346ee5aa832e2ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1054//#testresult/3346ee5aa832e2ce","status":"passed","time":{"start":1698542366852,"stop":1698542372841,"duration":5989}},{"uid":"77b8626138f09691","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1053//#testresult/77b8626138f09691","status":"passed","time":{"start":1698455592447,"stop":1698455598454,"duration":6007}},{"uid":"c42d733b7567ac8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1051//#testresult/c42d733b7567ac8d","status":"passed","time":{"start":1698369267172,"stop":1698369272182,"duration":5010}},{"uid":"cb7c84f6aa3dc9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1050//#testresult/cb7c84f6aa3dc9b","status":"passed","time":{"start":1698282859078,"stop":1698282861625,"duration":2547}},{"uid":"1f8ccbd33e7182bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1049//#testresult/1f8ccbd33e7182bd","status":"passed","time":{"start":1698196522059,"stop":1698196528133,"duration":6074}},{"uid":"c90ef46bd4092a2b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1048//#testresult/c90ef46bd4092a2b","status":"passed","time":{"start":1698178241889,"stop":1698178244266,"duration":2377}},{"uid":"ac0ff453bc4d0c8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1047//#testresult/ac0ff453bc4d0c8c","status":"passed","time":{"start":1698178173453,"stop":1698178175271,"duration":1818}}]},"tags":[]},"source":"27d551f5cb7b084f.json","parameterValues":["NorthTynesideCouncil"]}