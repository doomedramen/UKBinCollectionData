{"uid":"fdc504a599e554d7","name":"Validate Council Output [BromleyBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7f3dc7acf0fc90eded39e25c4ed3bb60","time":{"start":1697790295454,"stop":1697790298434,"duration":2980},"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              \n              (In progress)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc26071d260>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc252a4af10>, 'council': 'BromleyBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 20 October\\n              \\n              (In progress)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         \nE                         (In progress)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              \n              (In progress)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc26071d260>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc252a4af10>, 'council': 'BromleyBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 20 October\\n              \\n              (In progress)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         \nE                         (In progress)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BromleyBoroughCouncil","time":{"start":1697790295454,"stop":1697790295455,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from BromleyBoroughCouncil","time":{"start":1697790295455,"stop":1697790298434,"duration":2979},"status":"failed","statusMessage":"unconverted data remains: \n              \n              (In progress)","statusTrace":"ValueError: unconverted data remains: \n              \n              (In progress)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az551-219"},{"name":"thread","value":"2115-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BromleyBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":117,"unknown":0,"total":144},"items":[{"uid":"3a4c37fb5654e6b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/3a4c37fb5654e6b8","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697764446316,"stop":1697764447448,"duration":1132}},{"uid":"cd01bb86495ad2ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/cd01bb86495ad2ae","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697706462361,"stop":1697706463364,"duration":1003}},{"uid":"3387235e6b2754fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/3387235e6b2754fc","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697706420430,"stop":1697706421352,"duration":922}},{"uid":"fb8033170bd9a0fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/fb8033170bd9a0fb","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702044539,"stop":1697702044541,"duration":2}},{"uid":"339e6563caae9735","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1027//#testresult/339e6563caae9735","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697696120280,"stop":1697696121112,"duration":832}},{"uid":"f22faebfb304d990","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1025//#testresult/f22faebfb304d990","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697678047527,"stop":1697678048782,"duration":1255}},{"uid":"30473b3bd7ebff0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1023//#testresult/30473b3bd7ebff0d","status":"passed","time":{"start":1697666531602,"stop":1697666535062,"duration":3460}},{"uid":"f6c56b1395b9baf1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1020//#testresult/f6c56b1395b9baf1","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697656785153,"stop":1697656785989,"duration":836}},{"uid":"9fbdbf9ef667baaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1016//#testresult/9fbdbf9ef667baaf","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697649978451,"stop":1697649979426,"duration":975}},{"uid":"6dc221d8a128653e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1014//#testresult/6dc221d8a128653e","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697618214322,"stop":1697618215231,"duration":909}},{"uid":"e950940504beb410","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1010//#testresult/e950940504beb410","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697591671212,"stop":1697591672287,"duration":1075}},{"uid":"37b91eafb4d482fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1009//#testresult/37b91eafb4d482fe","status":"passed","time":{"start":1697542537473,"stop":1697542541503,"duration":4030}},{"uid":"e9bfa44da0ea9364","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1008//#testresult/e9bfa44da0ea9364","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697505285595,"stop":1697505286592,"duration":997}},{"uid":"328218280fe14c21","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1006//#testresult/328218280fe14c21","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697484606121,"stop":1697484607226,"duration":1105}},{"uid":"69256f76c59b50f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1005//#testresult/69256f76c59b50f0","status":"passed","time":{"start":1697484551597,"stop":1697484555437,"duration":3840}},{"uid":"e30d32b61d4244bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1004//#testresult/e30d32b61d4244bb","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697418928823,"stop":1697418929698,"duration":875}},{"uid":"d85a5b5ddfb60af8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/d85a5b5ddfb60af8","status":"passed","time":{"start":1697403124160,"stop":1697403128034,"duration":3874}},{"uid":"829b959c7d2c061b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/829b959c7d2c061b","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697399690318,"stop":1697399691568,"duration":1250}},{"uid":"2b8783ca64e4c02c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/994//#testresult/2b8783ca64e4c02c","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1697366940572,"stop":1697366941532,"duration":960}},{"uid":"56281c3d5ab98047","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/993//#testresult/56281c3d5ab98047","status":"passed","time":{"start":1697366890806,"stop":1697366894806,"duration":4000}}]},"tags":[]},"source":"fdc504a599e554d7.json","parameterValues":["BromleyBoroughCouncil"]}