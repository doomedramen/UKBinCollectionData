{"uid":"178bb574425429c3","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1698064778261,"stop":1698064780225,"duration":1964},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f70d20cd940>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f70c4cd3850>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f70d20cd940>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f70c4cd3850>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1698064778261,"stop":1698064778262,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1698064778262,"stop":1698064780225,"duration":1963},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az620-679"},{"name":"thread","value":"2301-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":127,"unknown":0,"total":148},"items":[{"uid":"13d9edd807de31a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1042//#testresult/13d9edd807de31a5","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698023681319,"stop":1698023683755,"duration":2436}},{"uid":"b8b8c4a8436232e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1040//#testresult/b8b8c4a8436232e7","status":"passed","time":{"start":1697937528841,"stop":1697937530459,"duration":1618}},{"uid":"aa6b17bbbb512d17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/aa6b17bbbb512d17","status":"passed","time":{"start":1697850713471,"stop":1697850714850,"duration":1379}},{"uid":"43bf8acfff5c0e41","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1037//#testresult/43bf8acfff5c0e41","status":"passed","time":{"start":1697790329403,"stop":1697790331171,"duration":1768}},{"uid":"4ab7c12846d1ad44","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/4ab7c12846d1ad44","status":"passed","time":{"start":1697764440265,"stop":1697764442523,"duration":2258}},{"uid":"fbf4a6f38f91143f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/fbf4a6f38f91143f","status":"passed","time":{"start":1697706461195,"stop":1697706463154,"duration":1959}},{"uid":"f2f0ffe0b66aa83d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/f2f0ffe0b66aa83d","status":"passed","time":{"start":1697706415780,"stop":1697706416976,"duration":1196}},{"uid":"995101c08ff29cd0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/995101c08ff29cd0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702044255,"stop":1697702044256,"duration":1}},{"uid":"4bc677bce9554c7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1027//#testresult/4bc677bce9554c7b","status":"passed","time":{"start":1697696113578,"stop":1697696115392,"duration":1814}},{"uid":"cf198ae3bb572d79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1025//#testresult/cf198ae3bb572d79","status":"passed","time":{"start":1697678035178,"stop":1697678037464,"duration":2286}},{"uid":"a87f34485ba004e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1023//#testresult/a87f34485ba004e","status":"passed","time":{"start":1697666522864,"stop":1697666524495,"duration":1631}},{"uid":"a573d9de06465dd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1020//#testresult/a573d9de06465dd7","status":"passed","time":{"start":1697656776293,"stop":1697656778169,"duration":1876}},{"uid":"30e9eb7161dcbf13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1016//#testresult/30e9eb7161dcbf13","status":"passed","time":{"start":1697650026600,"stop":1697650027927,"duration":1327}},{"uid":"abae1f7f19f373c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1014//#testresult/abae1f7f19f373c","status":"passed","time":{"start":1697618238297,"stop":1697618240181,"duration":1884}},{"uid":"c7a623b57f481e5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1010//#testresult/c7a623b57f481e5b","status":"passed","time":{"start":1697591661393,"stop":1697591664314,"duration":2921}},{"uid":"8cb9897a309c49e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1009//#testresult/8cb9897a309c49e1","status":"passed","time":{"start":1697542519106,"stop":1697542521877,"duration":2771}},{"uid":"a1c16b2c2b062765","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1008//#testresult/a1c16b2c2b062765","status":"passed","time":{"start":1697505275794,"stop":1697505278125,"duration":2331}},{"uid":"3636ea66aae3f001","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1006//#testresult/3636ea66aae3f001","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1697484601870,"stop":1697484604032,"duration":2162}},{"uid":"91ed72e29df29519","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1005//#testresult/91ed72e29df29519","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1697484542478,"stop":1697484544123,"duration":1645}},{"uid":"3d62b46a72f4fd95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1004//#testresult/3d62b46a72f4fd95","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1697418918125,"stop":1697418921184,"duration":3059}}]},"tags":[]},"source":"178bb574425429c3.json","parameterValues":["CharnwoodBoroughCouncil"]}