{"uid":"461e6731fd62c22","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1725569422237,"stop":1725569425755,"duration":3518},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f53c06e1f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f53c0562b90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f53c06d6110>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7f53c0361090>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'baf28a44786a340ebf360730ec6063d9bb4671d3', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f53c06e1f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f53c0562b90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f53c06d6110>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7f53c0361090>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'baf28a44786a340ebf360730ec6063d9bb4671d3', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1725569422237,"stop":1725569422237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725569422237,"stop":1725569425755,"duration":3518},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9ed5349254630828","name":"stdout","source":"9ed5349254630828.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1014-42"},{"name":"thread","value":"2747-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":177,"broken":0,"skipped":0,"passed":132,"unknown":0,"total":309},"items":[{"uid":"7274ddb749e2a351","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/7274ddb749e2a351","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1725495364657,"stop":1725495368557,"duration":3900}},{"uid":"93fddf7352529d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/93fddf7352529d1","status":"passed","time":{"start":1725430337761,"stop":1725430341222,"duration":3461}},{"uid":"c8343d63864c643b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/c8343d63864c643b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725408867295,"stop":1725408868755,"duration":1460}},{"uid":"f336bbeba5798e02","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/f336bbeba5798e02","status":"passed","time":{"start":1725403958512,"stop":1725403962143,"duration":3631}},{"uid":"bb8f8c5f3f4a6b7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/bb8f8c5f3f4a6b7c","status":"passed","time":{"start":1725384900627,"stop":1725384904166,"duration":3539}},{"uid":"1bfe3e6b4425df93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/1bfe3e6b4425df93","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725347145379,"stop":1725347146423,"duration":1044}},{"uid":"fdb11be4ed2f810c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/fdb11be4ed2f810c","status":"passed","time":{"start":1725322348504,"stop":1725322352028,"duration":3524}},{"uid":"68576993271e61c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/68576993271e61c9","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725316307642,"stop":1725316308790,"duration":1148}},{"uid":"53a00f9745debf57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/53a00f9745debf57","status":"passed","time":{"start":1725312998327,"stop":1725313001900,"duration":3573}},{"uid":"15d3df0aa87ba89f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/15d3df0aa87ba89f","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725310845145,"stop":1725310846350,"duration":1205}},{"uid":"d8df484dcaa8fd8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2060//#testresult/d8df484dcaa8fd8d","status":"passed","time":{"start":1725308087157,"stop":1725308090477,"duration":3320}},{"uid":"e793cccbf70063db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2059//#testresult/e793cccbf70063db","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725307965608,"stop":1725307966859,"duration":1251}},{"uid":"d4128e210483fe59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2054//#testresult/d4128e210483fe59","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725235984909,"stop":1725235985904,"duration":995}},{"uid":"ae2d68399b19ca1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2053//#testresult/ae2d68399b19ca1d","status":"passed","time":{"start":1725149671971,"stop":1725149675592,"duration":3621}},{"uid":"f5209cc41aec0e0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2052//#testresult/f5209cc41aec0e0b","status":"passed","time":{"start":1725063129957,"stop":1725063134026,"duration":4069}},{"uid":"336d5b39472b48ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2051//#testresult/336d5b39472b48ea","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724976762515,"stop":1724976763665,"duration":1150}},{"uid":"cc608a69093d5810","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2049//#testresult/cc608a69093d5810","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724890353727,"stop":1724890354730,"duration":1003}},{"uid":"2f9107a85aebb9a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2048//#testresult/2f9107a85aebb9a2","status":"passed","time":{"start":1724803874479,"stop":1724803877935,"duration":3456}},{"uid":"2e852425ab0f581d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2043//#testresult/2e852425ab0f581d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724717504082,"stop":1724717505464,"duration":1382}},{"uid":"37ea5a4cb1081dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2039//#testresult/37ea5a4cb1081dc","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1724631149882,"stop":1724631151443,"duration":1561}}]},"tags":[]},"source":"461e6731fd62c22.json","parameterValues":["CroydonCouncil"]}