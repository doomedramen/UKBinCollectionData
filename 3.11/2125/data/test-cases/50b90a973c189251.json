{"uid":"50b90a973c189251","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1726964131105,"stop":1726964132402,"duration":1297},"status":"failed","statusMessage":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","statusTrace":"fixturefunc = <function scrape_step at 0x7f9c19545760>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f9c193c0950>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:256: in parse_data\n    collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = <requests.sessions.Session object at 0x7f9c18959090>\nbase_url = 'https://service.croydon.gov.uk'\ncsrf_token = 'f7640a9a9853d9735f8b1e75b6bdc1411f70d080', address_id = '96383'\n\n    def get_collection_data(\n        s: requests.session, base_url: str, csrf_token: str, address_id: str\n    ) -> str:\n        \"\"\"\n        Gets the collection data\n            :rtype: str\n            :param s: requests.Session() to use\n            :param base_url: Base URL to use\n            :param csrf_token: CSRF token to use\n            :param address_id: Address id to use\n            :param retries: Retries count\n            :return: Collection data\n        \"\"\"\n        collection_data = \"\"\n        if address_id != \"0\":\n            form_data = {\n                \"form_check\": csrf_token,\n                \"submitted_page_id\": \"PAG0000898EECEC1\",\n                \"submitted_widget_group_id\": \"PWG0002644EECEC1\",\n                \"submitted_widget_group_type\": \"modify\",\n                \"submission_token\": \"63e9126bacd815.12997577\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020408EECEC1]\": address_id,\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0021449EECEC1]\": \"1\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020072EECEC1]\": \"Next\",\n                \"submit_fragment_id\": \"PCF0020072EECEC1\",\n                \"_session_storage\": json.dumps({\"_global\": get_session_storage_global()}),\n                \"_update_page_content_request\": 1,\n                \"form_check_ajax\": csrf_token,\n            }\n            response = s.post(\n                base_url\n                + \"/wasteservices/w/webpage/bin-day-enter-address?webpage_subpage_id=PAG0000898EECEC1\"\n                \"&webpage_token=faab02e1f62a58f7bad4c2ae5b8622e19846b97dde2a76f546c4bb1230cee044\",\n                headers=get_headers(base_url, \"POST\"),\n                data=form_data,\n            )\n            if response.status_code == 200 and len(response.text) > 0:\n                json_response = json.loads(response.text)\n                form_data = {\n                    \"_dummy\": 1,\n                    \"_session_storage\": json.dumps(\n                        {\"_global\": get_session_storage_global()}\n                    ),\n                    \"_update_page_content_request\": 1,\n                    \"form_check_ajax\": csrf_token,\n                }\n                response = s.post(\n                    base_url + json_response[\"redirect_url\"],\n                    headers=get_headers(base_url, \"POST\"),\n                    data=form_data,\n                )\n                if response.status_code == 200 and len(response.text) > 0:\n                    json_response = json.loads(response.text)\n                    collection_data = json_response[\"data\"]\n                else:\n                    raise ValueError(\"Code 4: Failed to get bin data.\")\n            else:\n>               raise ValueError(\n                    \"Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\"\n                )\nE               ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:229: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","statusTrace":"fixturefunc = <function scrape_step at 0x7f9c19545760>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f9c193c0950>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:256: in parse_data\n    collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = <requests.sessions.Session object at 0x7f9c18959090>\nbase_url = 'https://service.croydon.gov.uk'\ncsrf_token = 'f7640a9a9853d9735f8b1e75b6bdc1411f70d080', address_id = '96383'\n\n    def get_collection_data(\n        s: requests.session, base_url: str, csrf_token: str, address_id: str\n    ) -> str:\n        \"\"\"\n        Gets the collection data\n            :rtype: str\n            :param s: requests.Session() to use\n            :param base_url: Base URL to use\n            :param csrf_token: CSRF token to use\n            :param address_id: Address id to use\n            :param retries: Retries count\n            :return: Collection data\n        \"\"\"\n        collection_data = \"\"\n        if address_id != \"0\":\n            form_data = {\n                \"form_check\": csrf_token,\n                \"submitted_page_id\": \"PAG0000898EECEC1\",\n                \"submitted_widget_group_id\": \"PWG0002644EECEC1\",\n                \"submitted_widget_group_type\": \"modify\",\n                \"submission_token\": \"63e9126bacd815.12997577\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020408EECEC1]\": address_id,\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0021449EECEC1]\": \"1\",\n                \"payload[PAG0000898EECEC1][PWG0002644EECEC1][PCL0005629EECEC1][formtable]\"\n                \"[C_63e9126bacfb3][PCF0020072EECEC1]\": \"Next\",\n                \"submit_fragment_id\": \"PCF0020072EECEC1\",\n                \"_session_storage\": json.dumps({\"_global\": get_session_storage_global()}),\n                \"_update_page_content_request\": 1,\n                \"form_check_ajax\": csrf_token,\n            }\n            response = s.post(\n                base_url\n                + \"/wasteservices/w/webpage/bin-day-enter-address?webpage_subpage_id=PAG0000898EECEC1\"\n                \"&webpage_token=faab02e1f62a58f7bad4c2ae5b8622e19846b97dde2a76f546c4bb1230cee044\",\n                headers=get_headers(base_url, \"POST\"),\n                data=form_data,\n            )\n            if response.status_code == 200 and len(response.text) > 0:\n                json_response = json.loads(response.text)\n                form_data = {\n                    \"_dummy\": 1,\n                    \"_session_storage\": json.dumps(\n                        {\"_global\": get_session_storage_global()}\n                    ),\n                    \"_update_page_content_request\": 1,\n                    \"form_check_ajax\": csrf_token,\n                }\n                response = s.post(\n                    base_url + json_response[\"redirect_url\"],\n                    headers=get_headers(base_url, \"POST\"),\n                    data=form_data,\n                )\n                if response.status_code == 200 and len(response.text) > 0:\n                    json_response = json.loads(response.text)\n                    collection_data = json_response[\"data\"]\n                else:\n                    raise ValueError(\"Code 4: Failed to get bin data.\")\n            else:\n>               raise ValueError(\n                    \"Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\"\n                )\nE               ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:229: ValueError","steps":[{"name":"Given the council","time":{"start":1726964131105,"stop":1726964131105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726964131106,"stop":1726964132402,"duration":1296},"status":"failed","statusMessage":"Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","statusTrace":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4757a522df5e0acf","name":"stdout","source":"4757a522df5e0acf.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az773-432"},{"name":"thread","value":"2766-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":185,"broken":0,"skipped":0,"passed":142,"unknown":0,"total":327},"items":[{"uid":"f61ae23eaaedebc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2124//#testresult/f61ae23eaaedebc","status":"passed","time":{"start":1726877640769,"stop":1726877646147,"duration":5378}},{"uid":"1b4f6ae8f1afa32e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2123//#testresult/1b4f6ae8f1afa32e","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1726791199928,"stop":1726791203702,"duration":3774}},{"uid":"f6231012049eb4d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2122//#testresult/f6231012049eb4d1","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1726704871960,"stop":1726704875723,"duration":3763}},{"uid":"d8f77fff7f1586f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2121//#testresult/d8f77fff7f1586f4","status":"passed","time":{"start":1726618390864,"stop":1726618394790,"duration":3926}},{"uid":"c3a2056c708595c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2120//#testresult/c3a2056c708595c2","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1726532077121,"stop":1726532078020,"duration":899}},{"uid":"177a7e6738e01c0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2116//#testresult/177a7e6738e01c0c","status":"passed","time":{"start":1726445696368,"stop":1726445701321,"duration":4953}},{"uid":"ff27eb5fd50de1d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2115//#testresult/ff27eb5fd50de1d4","status":"passed","time":{"start":1726359163904,"stop":1726359172964,"duration":9060}},{"uid":"c2911d4c95b8d154","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2114//#testresult/c2911d4c95b8d154","status":"passed","time":{"start":1726272917367,"stop":1726272920991,"duration":3624}},{"uid":"f0b6fc2b3e139bc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/f0b6fc2b3e139bc6","status":"passed","time":{"start":1726186543188,"stop":1726186546590,"duration":3402}},{"uid":"123e33a6c3e8efd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2112//#testresult/123e33a6c3e8efd8","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1726099994352,"stop":1726099997855,"duration":3503}},{"uid":"57cd13b182ed3fed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2111//#testresult/57cd13b182ed3fed","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1726013593752,"stop":1726013594733,"duration":981}},{"uid":"a5aa1725189831dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2109//#testresult/a5aa1725189831dd","status":"passed","time":{"start":1725955409808,"stop":1725955413610,"duration":3802}},{"uid":"47211a0b08b49238","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2107//#testresult/47211a0b08b49238","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725927171538,"stop":1725927173048,"duration":1510}},{"uid":"59b05445395979d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2095//#testresult/59b05445395979d3","status":"passed","time":{"start":1725840835860,"stop":1725840840057,"duration":4197}},{"uid":"d225e1a217b66903","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/d225e1a217b66903","status":"passed","time":{"start":1725754366570,"stop":1725754371431,"duration":4861}},{"uid":"7c40d6a1063c5753","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/7c40d6a1063c5753","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1725667992070,"stop":1725667993535,"duration":1465}},{"uid":"d992a24be17c7509","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/d992a24be17c7509","status":"passed","time":{"start":1725581611541,"stop":1725581615188,"duration":3647}},{"uid":"461e6731fd62c22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/461e6731fd62c22","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1725569422237,"stop":1725569425755,"duration":3518}},{"uid":"7274ddb749e2a351","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/7274ddb749e2a351","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1725495364657,"stop":1725495368557,"duration":3900}},{"uid":"93fddf7352529d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/93fddf7352529d1","status":"passed","time":{"start":1725430337761,"stop":1725430341222,"duration":3461}}]},"tags":[]},"source":"50b90a973c189251.json","parameterValues":["CroydonCouncil"]}