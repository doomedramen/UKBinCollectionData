{"uid":"7468db1f78683bb5","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1698887626865,"stop":1698887631144,"duration":4279},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f54dcdb5260>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f54c93d8d90>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:63: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f54c93d9690>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7f54c93cbf90>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '1617c26b3de569148920ccfeffa010425c32e7f4', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f54dcdb5260>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f54c93d8d90>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:63: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f54c93d9690>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7f54c93cbf90>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '1617c26b3de569148920ccfeffa010425c32e7f4', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1698887626865,"stop":1698887626866,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CroydonCouncil","time":{"start":1698887626866,"stop":1698887631144,"duration":4278},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az887-532"},{"name":"thread","value":"2229-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":103,"broken":0,"skipped":0,"passed":70,"unknown":0,"total":173},"items":[{"uid":"e5e92517ec75d1a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/e5e92517ec75d1a5","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698878277716,"stop":1698878278937,"duration":1221}},{"uid":"e75b83c9b296b431","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/e75b83c9b296b431","status":"passed","time":{"start":1698878220749,"stop":1698878224914,"duration":4165}},{"uid":"f5bc660ed06ea80e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/f5bc660ed06ea80e","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698867408597,"stop":1698867410076,"duration":1479}},{"uid":"5c3ece3df40c3e6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/5c3ece3df40c3e6b","status":"passed","time":{"start":1698801501482,"stop":1698801505848,"duration":4366}},{"uid":"734224c54e088e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/734224c54e088e78","status":"passed","time":{"start":1698788441170,"stop":1698788446094,"duration":4924}},{"uid":"e3f9a200cdb32f69","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1077//#testresult/e3f9a200cdb32f69","status":"passed","time":{"start":1698714919633,"stop":1698714925071,"duration":5438}},{"uid":"1d9abac581ddd6ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1075//#testresult/1d9abac581ddd6ed","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698701297695,"stop":1698701299245,"duration":1550}},{"uid":"5f351a4780b6c3a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1073//#testresult/5f351a4780b6c3a2","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698700173191,"stop":1698700175003,"duration":1812}},{"uid":"2dd6bcc473f580bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1070//#testresult/2dd6bcc473f580bb","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698692732275,"stop":1698692734071,"duration":1796}},{"uid":"66b55a7d281ca591","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1069//#testresult/66b55a7d281ca591","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698692690526,"stop":1698692692777,"duration":2251}},{"uid":"f44f80e0a25e3241","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1066//#testresult/f44f80e0a25e3241","status":"passed","time":{"start":1698646243700,"stop":1698646248453,"duration":4753}},{"uid":"8dd4427fda6071bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/8dd4427fda6071bb","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698646278061,"stop":1698646280070,"duration":2009}},{"uid":"23b2bd163acddd99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/23b2bd163acddd99","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698628483292,"stop":1698628485018,"duration":1726}},{"uid":"563a49717e43f417","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/563a49717e43f417","status":"passed","time":{"start":1698615121060,"stop":1698615125673,"duration":4613}},{"uid":"4690c05d6ad34fd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/4690c05d6ad34fd2","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698615171783,"stop":1698615173410,"duration":1627}},{"uid":"acb952c7cb3816d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1061//#testresult/acb952c7cb3816d3","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698615056571,"stop":1698615058326,"duration":1755}},{"uid":"5592c096f0c29793","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1054//#testresult/5592c096f0c29793","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698542302336,"stop":1698542304352,"duration":2016}},{"uid":"212f219ce7cd5eca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1053//#testresult/212f219ce7cd5eca","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698455496696,"stop":1698455498390,"duration":1694}},{"uid":"32b3269879afadfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1051//#testresult/32b3269879afadfb","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1698369178376,"stop":1698369180623,"duration":2247}},{"uid":"d30987c1e7274c2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1050//#testresult/d30987c1e7274c2c","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1698282770528,"stop":1698282775304,"duration":4776}}]},"tags":[]},"source":"7468db1f78683bb5.json","parameterValues":["CroydonCouncil"]}