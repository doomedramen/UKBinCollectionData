{"uid":"f449564a1eca2fba","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1719795058502,"stop":1719795065591,"duration":7089},"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe12c0d2d40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe12bf43e10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe12c0d2d40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe12bf43e10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1719795058502,"stop":1719795058503,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719795058503,"stop":1719795065590,"duration":7087},"status":"failed","statusMessage":"time data 'July' does not match format '%d %B'","statusTrace":"ValueError: time data 'July' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"71803d1c3804943d","name":"stdout","source":"71803d1c3804943d.txt","type":"text/plain","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az523-327"},{"name":"thread","value":"2782-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":36,"unknown":0,"total":54},"items":[{"uid":"9ce3196992c1d0f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1964//#testresult/9ce3196992c1d0f3","status":"passed","time":{"start":1719708561471,"stop":1719708582779,"duration":21308}},{"uid":"adbd958590a24951","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1962//#testresult/adbd958590a24951","status":"passed","time":{"start":1719621794747,"stop":1719621931942,"duration":137195}},{"uid":"37b3be781f802b70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1958//#testresult/37b3be781f802b70","status":"passed","time":{"start":1719535359234,"stop":1719535371172,"duration":11938}},{"uid":"47562105ba840a0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1954//#testresult/47562105ba840a0c","status":"passed","time":{"start":1719362772054,"stop":1719362805593,"duration":33539}},{"uid":"16d6b1d0ce52e075","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/16d6b1d0ce52e075","status":"passed","time":{"start":1719276313116,"stop":1719276345957,"duration":32841}},{"uid":"a2916a8d355d6235","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/a2916a8d355d6235","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1719190032260,"stop":1719190053676,"duration":21416}},{"uid":"d0257286a0f83f27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/d0257286a0f83f27","status":"passed","time":{"start":1719103579168,"stop":1719103590155,"duration":10987}},{"uid":"f777ef187c058c9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/f777ef187c058c9f","status":"passed","time":{"start":1719017142497,"stop":1719017171276,"duration":28779}},{"uid":"6222e80d339d8808","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/6222e80d339d8808","status":"passed","time":{"start":1718930796450,"stop":1718930823818,"duration":27368}},{"uid":"27fdea08ec384906","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/27fdea08ec384906","status":"passed","time":{"start":1718844278607,"stop":1718844289628,"duration":11021}},{"uid":"d1d15947f1255408","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/d1d15947f1255408","status":"passed","time":{"start":1718758015436,"stop":1718758033617,"duration":18181}},{"uid":"bfb661f8bd01f0d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/bfb661f8bd01f0d7","status":"passed","time":{"start":1718671563183,"stop":1718671582449,"duration":19266}},{"uid":"4bb2eb937b1dc9f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1945//#testresult/4bb2eb937b1dc9f0","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1718585358035,"stop":1718585384339,"duration":26304}},{"uid":"fef6d108001efbaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/fef6d108001efbaa","status":"passed","time":{"start":1718498772895,"stop":1718498810640,"duration":37745}},{"uid":"ebbcd1e87c02f518","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/ebbcd1e87c02f518","status":"passed","time":{"start":1718412363860,"stop":1718412407776,"duration":43916}},{"uid":"f87c77ccd99c22da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/f87c77ccd99c22da","status":"passed","time":{"start":1718325856805,"stop":1718325868383,"duration":11578}},{"uid":"78eabf51fdfdd544","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1939//#testresult/78eabf51fdfdd544","status":"passed","time":{"start":1718239538700,"stop":1718239557304,"duration":18604}},{"uid":"651ad4432b137940","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1938//#testresult/651ad4432b137940","status":"passed","time":{"start":1718153161416,"stop":1718153175916,"duration":14500}},{"uid":"5f8f78ae0312acb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1937//#testresult/5f8f78ae0312acb6","status":"passed","time":{"start":1718066901406,"stop":1718066922300,"duration":20894}},{"uid":"dbd1a209a06c8e60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1936//#testresult/dbd1a209a06c8e60","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1717980344048,"stop":1717980373902,"duration":29854}}]},"tags":[]},"source":"f449564a1eca2fba.json","parameterValues":["WestBerkshireCouncil"]}