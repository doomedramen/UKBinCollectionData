{"uid":"48c40969a1f4f1ec","name":"Validate Council Output [BarnetCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc586f88bb959e318f31a1e5c380b8cb","time":{"start":1709511977397,"stop":1709511987597,"duration":10200},"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (69, 1536)\n  (Session info: chrome-headless-shell=122.0.6261.69)\nStacktrace:\n#0 0x55df9d7f5e93 <unknown>\n#1 0x55df9d4edce6 <unknown>\n#2 0x55df9d53fa73 <unknown>\n#3 0x55df9d53d98e <unknown>\n#4 0x55df9d53b367 <unknown>\n#5 0x55df9d53a732 <unknown>\n#6 0x55df9d52dd27 <unknown>\n#7 0x55df9d55aeb2 <unknown>\n#8 0x55df9d52d6b8 <unknown>\n#9 0x55df9d55b07e <unknown>\n#10 0x55df9d579899 <unknown>\n#11 0x55df9d55ac53 <unknown>\n#12 0x55df9d52bdb3 <unknown>\n#13 0x55df9d52c77e <unknown>\n#14 0x55df9d7bb7cb <unknown>\n#15 0x55df9d7bf7e5 <unknown>\n#16 0x55df9d7a90e1 <unknown>\n#17 0x55df9d7c0372 <unknown>\n#18 0x55df9d78d1bf <unknown>\n#19 0x55df9d7e4488 <unknown>\n#20 0x55df9d7e4683 <unknown>\n#21 0x55df9d7f5044 <unknown>\n#22 0x7f37b3a94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7ff5a02e4e00>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnetCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff5a00f9650>, 'council': 'BarnetCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnetCouncil.py:94: in parse_data\n    find_address_button.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff5aeea2510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55df9d7e4683 \\\\u003Cunknown>\\\\n#21 0x55df9d7f5044 \\\\u003Cunknown>\\\\n#22 0x7f37b3a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (69, 1536)\nE         (Session info: chrome-headless-shell=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x55df9d7f5e93 <unknown>\nE       #1 0x55df9d4edce6 <unknown>\nE       #2 0x55df9d53fa73 <unknown>\nE       #3 0x55df9d53d98e <unknown>\nE       #4 0x55df9d53b367 <unknown>\nE       #5 0x55df9d53a732 <unknown>\nE       #6 0x55df9d52dd27 <unknown>\nE       #7 0x55df9d55aeb2 <unknown>\nE       #8 0x55df9d52d6b8 <unknown>\nE       #9 0x55df9d55b07e <unknown>\nE       #10 0x55df9d579899 <unknown>\nE       #11 0x55df9d55ac53 <unknown>\nE       #12 0x55df9d52bdb3 <unknown>\nE       #13 0x55df9d52c77e <unknown>\nE       #14 0x55df9d7bb7cb <unknown>\nE       #15 0x55df9d7bf7e5 <unknown>\nE       #16 0x55df9d7a90e1 <unknown>\nE       #17 0x55df9d7c0372 <unknown>\nE       #18 0x55df9d78d1bf <unknown>\nE       #19 0x55df9d7e4488 <unknown>\nE       #20 0x55df9d7e4683 <unknown>\nE       #21 0x55df9d7f5044 <unknown>\nE       #22 0x7f37b3a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (69, 1536)\n  (Session info: chrome-headless-shell=122.0.6261.69)\nStacktrace:\n#0 0x55df9d7f5e93 <unknown>\n#1 0x55df9d4edce6 <unknown>\n#2 0x55df9d53fa73 <unknown>\n#3 0x55df9d53d98e <unknown>\n#4 0x55df9d53b367 <unknown>\n#5 0x55df9d53a732 <unknown>\n#6 0x55df9d52dd27 <unknown>\n#7 0x55df9d55aeb2 <unknown>\n#8 0x55df9d52d6b8 <unknown>\n#9 0x55df9d55b07e <unknown>\n#10 0x55df9d579899 <unknown>\n#11 0x55df9d55ac53 <unknown>\n#12 0x55df9d52bdb3 <unknown>\n#13 0x55df9d52c77e <unknown>\n#14 0x55df9d7bb7cb <unknown>\n#15 0x55df9d7bf7e5 <unknown>\n#16 0x55df9d7a90e1 <unknown>\n#17 0x55df9d7c0372 <unknown>\n#18 0x55df9d78d1bf <unknown>\n#19 0x55df9d7e4488 <unknown>\n#20 0x55df9d7e4683 <unknown>\n#21 0x55df9d7f5044 <unknown>\n#22 0x7f37b3a94ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7ff5a02e4e00>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnetCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff5a00f9650>, 'council': 'BarnetCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnetCouncil.py:94: in parse_data\n    find_address_button.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff5aeea2510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55df9d7e4683 \\\\u003Cunknown>\\\\n#21 0x55df9d7f5044 \\\\u003Cunknown>\\\\n#22 0x7f37b3a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (69, 1536)\nE         (Session info: chrome-headless-shell=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x55df9d7f5e93 <unknown>\nE       #1 0x55df9d4edce6 <unknown>\nE       #2 0x55df9d53fa73 <unknown>\nE       #3 0x55df9d53d98e <unknown>\nE       #4 0x55df9d53b367 <unknown>\nE       #5 0x55df9d53a732 <unknown>\nE       #6 0x55df9d52dd27 <unknown>\nE       #7 0x55df9d55aeb2 <unknown>\nE       #8 0x55df9d52d6b8 <unknown>\nE       #9 0x55df9d55b07e <unknown>\nE       #10 0x55df9d579899 <unknown>\nE       #11 0x55df9d55ac53 <unknown>\nE       #12 0x55df9d52bdb3 <unknown>\nE       #13 0x55df9d52c77e <unknown>\nE       #14 0x55df9d7bb7cb <unknown>\nE       #15 0x55df9d7bf7e5 <unknown>\nE       #16 0x55df9d7a90e1 <unknown>\nE       #17 0x55df9d7c0372 <unknown>\nE       #18 0x55df9d78d1bf <unknown>\nE       #19 0x55df9d7e4488 <unknown>\nE       #20 0x55df9d7e4683 <unknown>\nE       #21 0x55df9d7f5044 <unknown>\nE       #22 0x7f37b3a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Given the council: BarnetCouncil","time":{"start":1709511977397,"stop":1709511977397,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnetCouncil using local and the http://selenium:4444 is set","time":{"start":1709511977397,"stop":1709511987596,"duration":10199},"status":"failed","statusMessage":"Message: element click intercepted: Element is not clickable at point (69, 1536)\n  (Session info: chrome-headless-shell=122.0.6261.69)\nStacktrace:\n#0 0x55df9d7f5e93 <unknown>\n#1 0x55df9d4edce6 <unknown>\n#2 0x55df9d53fa73 <unknown>\n#3 0x55df9d53d98e <unknown>\n#4 0x55df9d53b367 <unknown>\n#5 0x55df9d53a732 <unknown>\n#6 0x55df9d52dd27 <unknown>\n#7 0x55df9d55aeb2 <unknown>\n#8 0x55df9d52d6b8 <unknown>\n#9 0x55df9d55b07e <unknown>\n#10 0x55df9d579899 <unknown>\n#11 0x55df9d55ac53 <unknown>\n#12 0x55df9d52bdb3 <unknown>\n#13 0x55df9d52c77e <unknown>\n#14 0x55df9d7bb7cb <unknown>\n#15 0x55df9d7bf7e5 <unknown>\n#16 0x55df9d7a90e1 <unknown>\n#17 0x55df9d7c0372 <unknown>\n#18 0x55df9d78d1bf <unknown>\n#19 0x55df9d7e4488 <unknown>\n#20 0x55df9d7e4683 <unknown>\n#21 0x55df9d7f5044 <unknown>\n#22 0x7f37b3a94ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (69, 1536)\n  (Session info: chrome-headless-shell=122.0.6261.69)\nStacktrace:\n#0 0x55df9d7f5e93 <unknown>\n#1 0x55df9d4edce6 <unknown>\n#2 0x55df9d53fa73 <unknown>\n#3 0x55df9d53d98e <unknown>\n#4 0x55df9d53b367 <unknown>\n#5 0x55df9d53a732 <unknown>\n#6 0x55df9d52dd27 <unknown>\n#7 0x55df9d55aeb2 <unknown>\n#8 0x55df9d52d6b8 <unknown>\n#9 0x55df9d55b07e <unknown>\n#10 0x55df9d579899 <unknown>\n#11 0x55df9d55ac53 <unknown>\n#12 0x55df9d52bdb3 <unknown>\n#13 0x55df9d52c77e <unknown>\n#14 0x55df9d7bb7cb <unknown>\n#15 0x55df9d7bf7e5 <unknown>\n#16 0x55df9d7a90e1 <unknown>\n#17 0x55df9d7c0372 <unknown>\n#18 0x55df9d78d1bf <unknown>\n#19 0x55df9d7e4488 <unknown>\n#20 0x55df9d7e4683 <unknown>\n#21 0x55df9d7f5044 <unknown>\n#22 0x7f37b3a94ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az887-104"},{"name":"thread","value":"2749-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnetCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":53,"unknown":0,"total":79},"items":[{"uid":"be888a217677ede2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/be888a217677ede2","status":"passed","time":{"start":1708561516787,"stop":1708561533881,"duration":17094}},{"uid":"b7a00c3f5ef494b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/b7a00c3f5ef494b3","status":"passed","time":{"start":1708475104544,"stop":1708475134581,"duration":30037}},{"uid":"ac3d4e9007ce2855","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/ac3d4e9007ce2855","status":"passed","time":{"start":1708388705333,"stop":1708388745169,"duration":39836}},{"uid":"8af3b1f339f67a71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1568//#testresult/8af3b1f339f67a71","status":"passed","time":{"start":1708302435904,"stop":1708302479127,"duration":43223}},{"uid":"f5d9ebc6c7435f40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1567//#testresult/f5d9ebc6c7435f40","status":"passed","time":{"start":1708216054039,"stop":1708216076235,"duration":22196}},{"uid":"5dc1a38303b518b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1566//#testresult/5dc1a38303b518b","status":"passed","time":{"start":1708129500167,"stop":1708129522363,"duration":22196}},{"uid":"6bd5bf5333966b84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1563//#testresult/6bd5bf5333966b84","status":"passed","time":{"start":1708043087230,"stop":1708043105572,"duration":18342}},{"uid":"95ee47c1c4d4599e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1562//#testresult/95ee47c1c4d4599e","status":"passed","time":{"start":1707956714030,"stop":1707956731211,"duration":17181}},{"uid":"97cb0e388ad5882a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1561//#testresult/97cb0e388ad5882a","status":"passed","time":{"start":1707870305907,"stop":1707870323459,"duration":17552}},{"uid":"e886ba600422dc22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1560//#testresult/e886ba600422dc22","status":"passed","time":{"start":1707783967773,"stop":1707783994295,"duration":26522}},{"uid":"52691f66e0492b77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1559//#testresult/52691f66e0492b77","status":"passed","time":{"start":1707697586727,"stop":1707697628140,"duration":41413}},{"uid":"df9e80e9d51401ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1556//#testresult/df9e80e9d51401ef","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55770997fd93 <unknown>\n#1 0x557709663337 <unknown>\n#2 0x5577096aed60 <unknown>\n#3 0x5577096aee51 <unknown>\n#4 0x5577096f2bc4 <unknown>\n#5 0x5577096d146d <unknown>\n#6 0x5577096f012d <unknown>\n#7 0x5577096d11e3 <unknown>\n#8 0x5577096a1135 <unknown>\n#9 0x5577096a213e <unknown>\n#10 0x557709943e4b <unknown>\n#11 0x557709947dfa <unknown>\n#12 0x5577099306d5 <unknown>\n#13 0x557709948a6f <unknown>\n#14 0x55770991469f <unknown>\n#15 0x55770996d098 <unknown>\n#16 0x55770996d262 <unknown>\n#17 0x55770997ef34 <unknown>\n#18 0x7fe727494ac3 <unknown>","time":{"start":1707611281276,"stop":1707611301451,"duration":20175}},{"uid":"75d21ae447ef5611","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1554//#testresult/75d21ae447ef5611","status":"passed","time":{"start":1707524668181,"stop":1707524685622,"duration":17441}},{"uid":"6474512dc4b90879","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1553//#testresult/6474512dc4b90879","status":"passed","time":{"start":1707438284806,"stop":1707438310058,"duration":25252}},{"uid":"be69851e95643981","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1552//#testresult/be69851e95643981","status":"passed","time":{"start":1707351934753,"stop":1707351955596,"duration":20843}},{"uid":"da3943bc87bc46a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1551//#testresult/da3943bc87bc46a4","status":"passed","time":{"start":1707265441526,"stop":1707265460172,"duration":18646}},{"uid":"5136bfae5e3e2d49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1549//#testresult/5136bfae5e3e2d49","status":"passed","time":{"start":1707179114107,"stop":1707179143676,"duration":29569}},{"uid":"50613ae8ce526c07","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/50613ae8ce526c07","status":"passed","time":{"start":1707092804225,"stop":1707092828593,"duration":24368}},{"uid":"872654a96e24cccd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/872654a96e24cccd","status":"passed","time":{"start":1707006488720,"stop":1707006543699,"duration":54979}},{"uid":"a92eb5c81a208d84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1545//#testresult/a92eb5c81a208d84","status":"passed","time":{"start":1706941849808,"stop":1706941867710,"duration":17902}}]},"tags":[]},"source":"48c40969a1f4f1ec.json","parameterValues":["BarnetCouncil","local","http://selenium:4444"]}