{"uid":"36030fb3eadd6e0c","name":"Validate Council Output [EnvironmentFirst-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c35cb97df4a88f0e33cc3384394065c9","time":{"start":1709512026975,"stop":1709512029679,"duration":2704},"status":"failed","statusMessage":"ValueError: time data '30 November -0001' does not match format '%d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fb4d9e9c7c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[EnvironmentFirst-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb4d9335110>, 'council': 'EnvironmentFirst', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/EnvironmentFirst.py:25: in parse_data\n    rubbish_day = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 November -0001', format = '%d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '30 November -0001' does not match format '%d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data '30 November -0001' does not match format '%d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fb4d9e9c7c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[EnvironmentFirst-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fb4d9335110>, 'council': 'EnvironmentFirst', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/EnvironmentFirst.py:25: in parse_data\n    rubbish_day = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 November -0001', format = '%d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '30 November -0001' does not match format '%d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: EnvironmentFirst","time":{"start":1709512026976,"stop":1709512026976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from EnvironmentFirst using None and the None is set","time":{"start":1709512026976,"stop":1709512029679,"duration":2703},"status":"failed","statusMessage":"time data '30 November -0001' does not match format '%d %B %Y'","statusTrace":"ValueError: time data '30 November -0001' does not match format '%d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az887-104"},{"name":"thread","value":"2758-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"EnvironmentFirst"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":163,"unknown":0,"total":165},"items":[{"uid":"aadbfd6abd29c706","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/aadbfd6abd29c706","status":"passed","time":{"start":1708561574204,"stop":1708561575447,"duration":1243}},{"uid":"581b220e0047004c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/581b220e0047004c","status":"passed","time":{"start":1708475164607,"stop":1708475165781,"duration":1174}},{"uid":"47585041c922baf5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/47585041c922baf5","status":"passed","time":{"start":1708388802937,"stop":1708388804445,"duration":1508}},{"uid":"da3dd4f19062abb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1568//#testresult/da3dd4f19062abb3","status":"passed","time":{"start":1708302535545,"stop":1708302537211,"duration":1666}},{"uid":"49ef916aaeebda03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1567//#testresult/49ef916aaeebda03","status":"passed","time":{"start":1708216179939,"stop":1708216181281,"duration":1342}},{"uid":"bd149a87e901af05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1566//#testresult/bd149a87e901af05","status":"passed","time":{"start":1708129589452,"stop":1708129593492,"duration":4040}},{"uid":"25063cfb657ecfa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1563//#testresult/25063cfb657ecfa","status":"passed","time":{"start":1708043224947,"stop":1708043227406,"duration":2459}},{"uid":"30adadd405231b7d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1562//#testresult/30adadd405231b7d","status":"passed","time":{"start":1707956796712,"stop":1707956798316,"duration":1604}},{"uid":"46b1fa2d42a35af2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1561//#testresult/46b1fa2d42a35af2","status":"passed","time":{"start":1707870356234,"stop":1707870358476,"duration":2242}},{"uid":"ece9dabd49966075","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1560//#testresult/ece9dabd49966075","status":"passed","time":{"start":1707784024222,"stop":1707784025800,"duration":1578}},{"uid":"9f37aa98824d3692","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1559//#testresult/9f37aa98824d3692","status":"passed","time":{"start":1707697665111,"stop":1707697667740,"duration":2629}},{"uid":"6b40477fc5ceceb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1556//#testresult/6b40477fc5ceceb3","status":"passed","time":{"start":1707611335726,"stop":1707611337043,"duration":1317}},{"uid":"ee507ab0aeb06dfd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1554//#testresult/ee507ab0aeb06dfd","status":"passed","time":{"start":1707524732455,"stop":1707524733876,"duration":1421}},{"uid":"b797277470c0545c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1553//#testresult/b797277470c0545c","status":"passed","time":{"start":1707438345776,"stop":1707438347236,"duration":1460}},{"uid":"51dd59f30d3f2a12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1552//#testresult/51dd59f30d3f2a12","status":"passed","time":{"start":1707351972734,"stop":1707351986183,"duration":13449}},{"uid":"4965e124377f8f5c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1551//#testresult/4965e124377f8f5c","status":"passed","time":{"start":1707265514701,"stop":1707265516032,"duration":1331}},{"uid":"4a5fe450df6e1673","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1549//#testresult/4a5fe450df6e1673","status":"passed","time":{"start":1707179169218,"stop":1707179170591,"duration":1373}},{"uid":"162a5f01ad9e9da6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/162a5f01ad9e9da6","status":"passed","time":{"start":1707092875369,"stop":1707092877029,"duration":1660}},{"uid":"b9276b34ef9c2d0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/b9276b34ef9c2d0d","status":"passed","time":{"start":1707006576528,"stop":1707006578194,"duration":1666}},{"uid":"419a297e5e24746d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1545//#testresult/419a297e5e24746d","status":"passed","time":{"start":1706941895930,"stop":1706941897101,"duration":1171}}]},"tags":[]},"source":"36030fb3eadd6e0c.json","parameterValues":["EnvironmentFirst","None","None"]}