{"uid":"fbff1a6058b6dda5","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1720571858002,"stop":1720572029604,"duration":171602},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f645a537ba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f645b801e50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f645a537ba0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f645b801e50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1720571858003,"stop":1720571858003,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720571858003,"stop":1720572029604,"duration":171601},"status":"failed","statusMessage":"time data 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 10 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"858df82b85c31dc3","name":"stdout","source":"858df82b85c31dc3.txt","type":"text/plain","size":205}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1383-17"},{"name":"thread","value":"2787-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":35,"broken":0,"skipped":0,"passed":207,"unknown":0,"total":242},"items":[{"uid":"5c7ed433728fa456","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1976//#testresult/5c7ed433728fa456","status":"passed","time":{"start":1720485197907,"stop":1720485223564,"duration":25657}},{"uid":"f0edee74fb461f1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1975//#testresult/f0edee74fb461f1e","status":"passed","time":{"start":1720399199037,"stop":1720399242168,"duration":43131}},{"uid":"ff36abfb022b6a3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1971//#testresult/ff36abfb022b6a3f","status":"passed","time":{"start":1720312393888,"stop":1720312404456,"duration":10568}},{"uid":"e54056344d9b4ed8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1970//#testresult/e54056344d9b4ed8","status":"passed","time":{"start":1720226020427,"stop":1720226091343,"duration":70916}},{"uid":"f565b20d0746d466","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1969//#testresult/f565b20d0746d466","status":"passed","time":{"start":1720139599674,"stop":1720139669048,"duration":69374}},{"uid":"2a978355e3012e55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/2a978355e3012e55","status":"passed","time":{"start":1720053339340,"stop":1720053386093,"duration":46753}},{"uid":"b2489364ae348489","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/b2489364ae348489","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 3 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1719966925547,"stop":1719966989166,"duration":63619}},{"uid":"210ca543774d5c3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1966//#testresult/210ca543774d5c3d","status":"passed","time":{"start":1719880408063,"stop":1719880471791,"duration":63728}},{"uid":"3b099f45cffde46e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1965//#testresult/3b099f45cffde46e","status":"passed","time":{"start":1719794463581,"stop":1719794547886,"duration":84305}},{"uid":"e76650c0908361a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1964//#testresult/e76650c0908361a0","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56318a83d69a <unknown>\n#1 0x56318a5200dc <unknown>\n#2 0x56318a56c931 <unknown>\n#3 0x56318a56ca21 <unknown>\n#4 0x56318a5b1234 <unknown>\n#5 0x56318a58f89d <unknown>\n#6 0x56318a5ae5c3 <unknown>\n#7 0x56318a58f613 <unknown>\n#8 0x56318a55f4f7 <unknown>\n#9 0x56318a55fe4e <unknown>\n#10 0x56318a80386b <unknown>\n#11 0x56318a807911 <unknown>\n#12 0x56318a7ef35e <unknown>\n#13 0x56318a808472 <unknown>\n#14 0x56318a7d3cbf <unknown>\n#15 0x56318a82d098 <unknown>\n#16 0x56318a82d270 <unknown>\n#17 0x56318a83c7cc <unknown>\n#18 0x7fe7cd3a4ac3 <unknown>","time":{"start":1719707979195,"stop":1719708071931,"duration":92736}},{"uid":"341dd9c87ca9c975","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1962//#testresult/341dd9c87ca9c975","status":"passed","time":{"start":1719621302294,"stop":1719621372095,"duration":69801}},{"uid":"1087170a54cc9d27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1958//#testresult/1087170a54cc9d27","status":"passed","time":{"start":1719534892441,"stop":1719534946079,"duration":53638}},{"uid":"dbc4c4724ddf29bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1954//#testresult/dbc4c4724ddf29bc","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1719361789914,"stop":1719361798597,"duration":8683}},{"uid":"2ea2b7c74331e221","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/2ea2b7c74331e221","status":"passed","time":{"start":1719275698229,"stop":1719275796303,"duration":98074}},{"uid":"cbf326d4d39ac004","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/cbf326d4d39ac004","status":"passed","time":{"start":1719189103108,"stop":1719189179363,"duration":76255}},{"uid":"b9aefb92d1467aab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/b9aefb92d1467aab","status":"passed","time":{"start":1719103026350,"stop":1719103048484,"duration":22134}},{"uid":"97baa9bb7d56402a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/97baa9bb7d56402a","status":"passed","time":{"start":1719016177350,"stop":1719016247625,"duration":70275}},{"uid":"bfcffa36fcc7929c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/bfcffa36fcc7929c","status":"passed","time":{"start":1718929815269,"stop":1718929881440,"duration":66171}},{"uid":"58bda1a48ba935c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/58bda1a48ba935c5","status":"passed","time":{"start":1718843355777,"stop":1718843365172,"duration":9395}},{"uid":"4409f3467a5b108","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/4409f3467a5b108","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 19 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1718757056827,"stop":1718757119828,"duration":63001}}]},"tags":[]},"source":"fbff1a6058b6dda5.json","parameterValues":["KingstonUponThamesCouncil"]}