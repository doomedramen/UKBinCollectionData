{"uid":"8f0eeba5d7dabf8b","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1703541131079,"stop":1703541132437,"duration":1358},"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa34f8842c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa34eab2c50>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa34f8842c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa34eab2c50>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1703541131079,"stop":1703541131079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1703541131080,"stop":1703541132437,"duration":1357},"status":"failed","statusMessage":"time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az847-406"},{"name":"thread","value":"2688-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":78,"broken":0,"skipped":0,"passed":17,"unknown":0,"total":95},"items":[{"uid":"17c424162421df74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/17c424162421df74","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2023' does not match format '%A, %d %B %Y'","time":{"start":1703467109543,"stop":1703467110846,"duration":1303}},{"uid":"e454c4b85ed74b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/e454c4b85ed74b3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416412614,"stop":1703416413419,"duration":805}},{"uid":"7a84856ec7f4b7ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/7a84856ec7f4b7ae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416377082,"stop":1703416378005,"duration":923}},{"uid":"274a13df56991ed9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/274a13df56991ed9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703380930788,"stop":1703380931765,"duration":977}},{"uid":"2c5d3cec52802432","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/2c5d3cec52802432","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294053676,"stop":1703294055696,"duration":2020}},{"uid":"a7c8b1e59ee0188f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/a7c8b1e59ee0188f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207788802,"stop":1703207789668,"duration":866}},{"uid":"cf48ccaf4ae280b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/cf48ccaf4ae280b9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121428748,"stop":1703121429672,"duration":924}},{"uid":"a9f2ad2bc634ca70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/a9f2ad2bc634ca70","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034253514,"stop":1703034254424,"duration":910}},{"uid":"c35d73132da001d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/c35d73132da001d8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024896135,"stop":1703024897219,"duration":1084}},{"uid":"ca4415a3c5be7abf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/ca4415a3c5be7abf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703024868174,"stop":1703024869161,"duration":987}},{"uid":"dfcec38f357e1d2f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/dfcec38f357e1d2f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948684807,"stop":1702948685655,"duration":848}},{"uid":"1b11690b72fa697","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/1b11690b72fa697","status":"passed","time":{"start":1702862348217,"stop":1702862349953,"duration":1736}},{"uid":"15c692d110866b15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/15c692d110866b15","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702859995379,"stop":1702859995945,"duration":566}},{"uid":"186c025c86771d4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/186c025c86771d4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843561058,"stop":1702843561919,"duration":861}},{"uid":"d9f95ea5a1876444","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/d9f95ea5a1876444","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809371036,"stop":1702809372473,"duration":1437}},{"uid":"bd30dfd6521705b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/bd30dfd6521705b0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657133523,"stop":1702657134630,"duration":1107}},{"uid":"97f18275c06a9933","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/97f18275c06a9933","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657153830,"stop":1702657154470,"duration":640}},{"uid":"a027caf6dd2090f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/a027caf6dd2090f6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603203603,"stop":1702603204118,"duration":515}},{"uid":"697dc9aa80abf1d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/697dc9aa80abf1d9","status":"passed","time":{"start":1702540037641,"stop":1702540039257,"duration":1616}},{"uid":"14e0a5b3ba079a8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/14e0a5b3ba079a8a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516674886,"stop":1702516675575,"duration":689}}]},"tags":[]},"source":"8f0eeba5d7dabf8b.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}