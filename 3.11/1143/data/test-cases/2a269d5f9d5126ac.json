{"uid":"2a269d5f9d5126ac","name":"Validate Council Output [GatesheadCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"06e54311f2a0be18545214e444671747","time":{"start":1700646352445,"stop":1700646657192,"duration":304747},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x55abf642a5e3 <unknown>\n#1 0x55abf60ed0b7 <unknown>\n#2 0x55abf60d323a <unknown>\n#3 0x55abf60d30a9 <unknown>\n#4 0x55abf60d1481 <unknown>\n#5 0x55abf60d1e39 <unknown>\n#6 0x55abf60e28ac <unknown>\n#7 0x55abf60fa4c1 <unknown>\n#8 0x55abf610013b <unknown>\n#9 0x55abf60d25ce <unknown>\n#10 0x55abf60fa2c4 <unknown>\n#11 0x55abf617dd42 <unknown>\n#12 0x55abf6161cc3 <unknown>\n#13 0x55abf612d0e4 <unknown>\n#14 0x55abf612e0ae <unknown>\n#15 0x55abf63f0ce1 <unknown>\n#16 0x55abf63f4b7e <unknown>\n#17 0x55abf63de4b5 <unknown>\n#18 0x55abf63f57d6 <unknown>\n#19 0x55abf63c1dbf <unknown>\n#20 0x55abf6418748 <unknown>\n#21 0x55abf6418917 <unknown>\n#22 0x55abf6429773 <unknown>\n#23 0x7f3040294ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f3a6852b240>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3a54b513d0>, 'council': 'GatesheadCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:49: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3a68f058d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55abf6418917 \\\\u003Cunknown>\\\\n#22 0x55abf6429773 \\\\u003Cunknown>\\\\n#23 0x7f3040294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x55abf642a5e3 <unknown>\nE       #1 0x55abf60ed0b7 <unknown>\nE       #2 0x55abf60d323a <unknown>\nE       #3 0x55abf60d30a9 <unknown>\nE       #4 0x55abf60d1481 <unknown>\nE       #5 0x55abf60d1e39 <unknown>\nE       #6 0x55abf60e28ac <unknown>\nE       #7 0x55abf60fa4c1 <unknown>\nE       #8 0x55abf610013b <unknown>\nE       #9 0x55abf60d25ce <unknown>\nE       #10 0x55abf60fa2c4 <unknown>\nE       #11 0x55abf617dd42 <unknown>\nE       #12 0x55abf6161cc3 <unknown>\nE       #13 0x55abf612d0e4 <unknown>\nE       #14 0x55abf612e0ae <unknown>\nE       #15 0x55abf63f0ce1 <unknown>\nE       #16 0x55abf63f4b7e <unknown>\nE       #17 0x55abf63de4b5 <unknown>\nE       #18 0x55abf63f57d6 <unknown>\nE       #19 0x55abf63c1dbf <unknown>\nE       #20 0x55abf6418748 <unknown>\nE       #21 0x55abf6418917 <unknown>\nE       #22 0x55abf6429773 <unknown>\nE       #23 0x7f3040294ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x55abf642a5e3 <unknown>\n#1 0x55abf60ed0b7 <unknown>\n#2 0x55abf60d323a <unknown>\n#3 0x55abf60d30a9 <unknown>\n#4 0x55abf60d1481 <unknown>\n#5 0x55abf60d1e39 <unknown>\n#6 0x55abf60e28ac <unknown>\n#7 0x55abf60fa4c1 <unknown>\n#8 0x55abf610013b <unknown>\n#9 0x55abf60d25ce <unknown>\n#10 0x55abf60fa2c4 <unknown>\n#11 0x55abf617dd42 <unknown>\n#12 0x55abf6161cc3 <unknown>\n#13 0x55abf612d0e4 <unknown>\n#14 0x55abf612e0ae <unknown>\n#15 0x55abf63f0ce1 <unknown>\n#16 0x55abf63f4b7e <unknown>\n#17 0x55abf63de4b5 <unknown>\n#18 0x55abf63f57d6 <unknown>\n#19 0x55abf63c1dbf <unknown>\n#20 0x55abf6418748 <unknown>\n#21 0x55abf6418917 <unknown>\n#22 0x55abf6429773 <unknown>\n#23 0x7f3040294ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f3a6852b240>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3a54b513d0>, 'council': 'GatesheadCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:49: in parse_data\n    ))).click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3a68f058d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55abf6418917 \\\\u003Cunknown>\\\\n#22 0x55abf6429773 \\\\u003Cunknown>\\\\n#23 0x7f3040294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: headless chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x55abf642a5e3 <unknown>\nE       #1 0x55abf60ed0b7 <unknown>\nE       #2 0x55abf60d323a <unknown>\nE       #3 0x55abf60d30a9 <unknown>\nE       #4 0x55abf60d1481 <unknown>\nE       #5 0x55abf60d1e39 <unknown>\nE       #6 0x55abf60e28ac <unknown>\nE       #7 0x55abf60fa4c1 <unknown>\nE       #8 0x55abf610013b <unknown>\nE       #9 0x55abf60d25ce <unknown>\nE       #10 0x55abf60fa2c4 <unknown>\nE       #11 0x55abf617dd42 <unknown>\nE       #12 0x55abf6161cc3 <unknown>\nE       #13 0x55abf612d0e4 <unknown>\nE       #14 0x55abf612e0ae <unknown>\nE       #15 0x55abf63f0ce1 <unknown>\nE       #16 0x55abf63f4b7e <unknown>\nE       #17 0x55abf63de4b5 <unknown>\nE       #18 0x55abf63f57d6 <unknown>\nE       #19 0x55abf63c1dbf <unknown>\nE       #20 0x55abf6418748 <unknown>\nE       #21 0x55abf6418917 <unknown>\nE       #22 0x55abf6429773 <unknown>\nE       #23 0x7f3040294ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Given the council: GatesheadCouncil","time":{"start":1700646352445,"stop":1700646352445,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GatesheadCouncil using local and the http://selenium:4444 is set","time":{"start":1700646352445,"stop":1700646657192,"duration":304747},"status":"failed","statusMessage":"Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x55abf642a5e3 <unknown>\n#1 0x55abf60ed0b7 <unknown>\n#2 0x55abf60d323a <unknown>\n#3 0x55abf60d30a9 <unknown>\n#4 0x55abf60d1481 <unknown>\n#5 0x55abf60d1e39 <unknown>\n#6 0x55abf60e28ac <unknown>\n#7 0x55abf60fa4c1 <unknown>\n#8 0x55abf610013b <unknown>\n#9 0x55abf60d25ce <unknown>\n#10 0x55abf60fa2c4 <unknown>\n#11 0x55abf617dd42 <unknown>\n#12 0x55abf6161cc3 <unknown>\n#13 0x55abf612d0e4 <unknown>\n#14 0x55abf612e0ae <unknown>\n#15 0x55abf63f0ce1 <unknown>\n#16 0x55abf63f4b7e <unknown>\n#17 0x55abf63de4b5 <unknown>\n#18 0x55abf63f57d6 <unknown>\n#19 0x55abf63c1dbf <unknown>\n#20 0x55abf6418748 <unknown>\n#21 0x55abf6418917 <unknown>\n#22 0x55abf6429773 <unknown>\n#23 0x7f3040294ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: headless chrome=119.0.6045.159)\nStacktrace:\n#0 0x55abf642a5e3 <unknown>\n#1 0x55abf60ed0b7 <unknown>\n#2 0x55abf60d323a <unknown>\n#3 0x55abf60d30a9 <unknown>\n#4 0x55abf60d1481 <unknown>\n#5 0x55abf60d1e39 <unknown>\n#6 0x55abf60e28ac <unknown>\n#7 0x55abf60fa4c1 <unknown>\n#8 0x55abf610013b <unknown>\n#9 0x55abf60d25ce <unknown>\n#10 0x55abf60fa2c4 <unknown>\n#11 0x55abf617dd42 <unknown>\n#12 0x55abf6161cc3 <unknown>\n#13 0x55abf612d0e4 <unknown>\n#14 0x55abf612e0ae <unknown>\n#15 0x55abf63f0ce1 <unknown>\n#16 0x55abf63f4b7e <unknown>\n#17 0x55abf63de4b5 <unknown>\n#18 0x55abf63f57d6 <unknown>\n#19 0x55abf63c1dbf <unknown>\n#20 0x55abf6418748 <unknown>\n#21 0x55abf6418917 <unknown>\n#22 0x55abf6429773 <unknown>\n#23 0x7f3040294ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1210-115"},{"name":"thread","value":"2703-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GatesheadCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":22,"unknown":0,"total":24},"items":[{"uid":"15e1399fba666d88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/15e1399fba666d88","status":"passed","time":{"start":1700646398215,"stop":1700646406285,"duration":8070}},{"uid":"a6ff886bf3ba5161","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/a6ff886bf3ba5161","status":"passed","time":{"start":1700616032905,"stop":1700616044348,"duration":11443}},{"uid":"cc2fd011dc0a3b06","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/cc2fd011dc0a3b06","status":"passed","time":{"start":1700529861128,"stop":1700529871130,"duration":10002}},{"uid":"f2fe62b08ebf2c96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/f2fe62b08ebf2c96","status":"passed","time":{"start":1700443166904,"stop":1700443175416,"duration":8512}},{"uid":"b0cde9960fc69c88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/b0cde9960fc69c88","status":"passed","time":{"start":1700356975120,"stop":1700356982349,"duration":7229}},{"uid":"4dc81cf5ddf63558","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/4dc81cf5ddf63558","status":"passed","time":{"start":1700270250182,"stop":1700270259095,"duration":8913}},{"uid":"2d0dca031d94e1c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/2d0dca031d94e1c4","status":"passed","time":{"start":1700183911365,"stop":1700183919071,"duration":7706}},{"uid":"7319720257af1b59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/7319720257af1b59","status":"passed","time":{"start":1700097542275,"stop":1700097556642,"duration":14367}},{"uid":"7a07da99e614fe1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/7a07da99e614fe1c","status":"passed","time":{"start":1700011056247,"stop":1700011066996,"duration":10749}},{"uid":"adc367cb6363b30b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/adc367cb6363b30b","status":"passed","time":{"start":1699924677851,"stop":1699924688603,"duration":10752}},{"uid":"7394c62d1b24c596","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/7394c62d1b24c596","status":"passed","time":{"start":1699838268156,"stop":1699838277256,"duration":9100}},{"uid":"15a25a5484cf79d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/15a25a5484cf79d5","status":"passed","time":{"start":1699752047789,"stop":1699752057323,"duration":9534}},{"uid":"7024b36386dec990","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/7024b36386dec990","status":"passed","time":{"start":1699668980411,"stop":1699668990577,"duration":10166}},{"uid":"fc6a7f0df93fc7b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1124//#testresult/fc6a7f0df93fc7b5","status":"passed","time":{"start":1699578941983,"stop":1699578950473,"duration":8490}},{"uid":"24e4a7f520b413cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/24e4a7f520b413cd","status":"passed","time":{"start":1699492614937,"stop":1699492625840,"duration":10903}},{"uid":"c50cf8eb9ea5a8ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/c50cf8eb9ea5a8ec","status":"passed","time":{"start":1699481330220,"stop":1699481339658,"duration":9438}},{"uid":"a28374182985bd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/a28374182985bd6","status":"passed","time":{"start":1699481345348,"stop":1699481352998,"duration":7650}},{"uid":"19d659348d99c015","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/19d659348d99c015","status":"passed","time":{"start":1699445061944,"stop":1699445071890,"duration":9946}},{"uid":"47e814d20445441","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/47e814d20445441","status":"passed","time":{"start":1699406138483,"stop":1699406153916,"duration":15433}},{"uid":"9243e7cd809838a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1114//#testresult/9243e7cd809838a9","status":"passed","time":{"start":1699319873872,"stop":1699319881285,"duration":7413}}]},"tags":[]},"source":"2a269d5f9d5126ac.json","parameterValues":["GatesheadCouncil","local","http://selenium:4444"]}