{"uid":"9397a550848f54f5","name":"Validate Council Output [BromleyBoroughCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f99c7ea76f01e7f999185ee0dfc6d3a7","time":{"start":1702843499241,"stop":1702843503797,"duration":4556},"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              (this collection has been adjusted from its usual time)","statusTrace":"fixturefunc = <function scrape_step at 0x7f84ec238680>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f84eb770b50>, 'council': 'BromleyBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tuesday 2 January\\n              (this collection has been adjusted from its usual time)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         (this collection has been adjusted from its usual time)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              (this collection has been adjusted from its usual time)","statusTrace":"fixturefunc = <function scrape_step at 0x7f84ec238680>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f84eb770b50>, 'council': 'BromleyBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tuesday 2 January\\n              (this collection has been adjusted from its usual time)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         (this collection has been adjusted from its usual time)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BromleyBoroughCouncil","time":{"start":1702843499241,"stop":1702843499242,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BromleyBoroughCouncil using None and the None is set","time":{"start":1702843499242,"stop":1702843503797,"duration":4555},"status":"failed","statusMessage":"unconverted data remains: \n              (this collection has been adjusted from its usual time)","statusTrace":"ValueError: unconverted data remains: \n              (this collection has been adjusted from its usual time)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1014-649"},{"name":"thread","value":"2760-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BromleyBoroughCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":79,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":81},"items":[{"uid":"b0df1337af04de15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/b0df1337af04de15","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702809366953,"stop":1702809367843,"duration":890}},{"uid":"a6e28a11707fe613","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/a6e28a11707fe613","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702657114910,"stop":1702657116318,"duration":1408}},{"uid":"29eb411f57e2be9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/29eb411f57e2be9a","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702657145640,"stop":1702657146594,"duration":954}},{"uid":"3c94ffc47dddcc04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/3c94ffc47dddcc04","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702603164708,"stop":1702603165702,"duration":994}},{"uid":"8207f667d02dd02a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/8207f667d02dd02a","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702540027064,"stop":1702540028075,"duration":1011}},{"uid":"cbd225c04a05f130","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/cbd225c04a05f130","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702516657775,"stop":1702516658788,"duration":1013}},{"uid":"63777302f67ae002","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/63777302f67ae002","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702447456406,"stop":1702447457275,"duration":869}},{"uid":"393e170f0336789c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/393e170f0336789c","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702430316276,"stop":1702430317171,"duration":895}},{"uid":"52e63f815da8d264","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/52e63f815da8d264","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1702366472434,"stop":1702366477077,"duration":4643}},{"uid":"18bc34e2a0900fd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/18bc34e2a0900fd6","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702343946799,"stop":1702343948699,"duration":1900}},{"uid":"2879a4ceed3b1419","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/2879a4ceed3b1419","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702257527444,"stop":1702257528964,"duration":1520}},{"uid":"c558bbabe377b960","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/c558bbabe377b960","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1702171378886,"stop":1702171383131,"duration":4245}},{"uid":"5bec9a55d2204ff9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/5bec9a55d2204ff9","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702084607186,"stop":1702084608335,"duration":1149}},{"uid":"364ab298b9b8a09b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/364ab298b9b8a09b","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702066706817,"stop":1702066707856,"duration":1039}},{"uid":"22b99b661c186d0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/22b99b661c186d0f","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702054353226,"stop":1702054354419,"duration":1193}},{"uid":"e2bc0a71848ce900","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/e2bc0a71848ce900","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1702054382118,"stop":1702054382957,"duration":839}},{"uid":"65a15f37bb7895a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/65a15f37bb7895a1","status":"failed","statusDetails":"ValueError: unconverted data remains: \n              \n              (In progress)","time":{"start":1701998349206,"stop":1701998354304,"duration":5098}},{"uid":"d4d83bc350b52eb0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/d4d83bc350b52eb0","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701990355889,"stop":1701990357240,"duration":1351}},{"uid":"bde3d186acd49e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/bde3d186acd49e78","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701990322639,"stop":1701990326285,"duration":3646}},{"uid":"9fe89e418ee1be5f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/9fe89e418ee1be5f","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701942771590,"stop":1701942772799,"duration":1209}}]},"tags":[]},"source":"9397a550848f54f5.json","parameterValues":["BromleyBoroughCouncil","None","None"]}