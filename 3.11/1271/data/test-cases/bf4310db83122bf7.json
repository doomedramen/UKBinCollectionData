{"uid":"bf4310db83122bf7","name":"Validate Council Output [TorridgeDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"da903249529007ec357275ac5f075b6c","time":{"start":1702843608115,"stop":1702843613017,"duration":4902},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8535ce0e00>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8535167e10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8535167e10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8535ce0e00>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8535167e10>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8535167e10>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: TorridgeDistrictCouncil","time":{"start":1702843608116,"stop":1702843608116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from TorridgeDistrictCouncil using None and the None is set","time":{"start":1702843608116,"stop":1702843613015,"duration":4899},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702843613015,"stop":1702843613015,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702843613016,"stop":1702843613017,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1014-649"},{"name":"thread","value":"2763-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TorridgeDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":63,"unknown":0,"total":81},"items":[{"uid":"aab3aaf562ebb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/aab3aaf562ebb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809629389,"stop":1702809632146,"duration":2757}},{"uid":"a126276e27544be3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/a126276e27544be3","status":"passed","time":{"start":1702657358131,"stop":1702657361116,"duration":2985}},{"uid":"4d7b1f8a41642119","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/4d7b1f8a41642119","status":"passed","time":{"start":1702657556728,"stop":1702657559519,"duration":2791}},{"uid":"530a92da509b18e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/530a92da509b18e","status":"passed","time":{"start":1702603288642,"stop":1702603292028,"duration":3386}},{"uid":"ae0fe665a13fd1ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/ae0fe665a13fd1ea","status":"passed","time":{"start":1702540168248,"stop":1702540171426,"duration":3178}},{"uid":"6d3924b9a968a8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/6d3924b9a968a8c","status":"passed","time":{"start":1702516898059,"stop":1702516901739,"duration":3680}},{"uid":"31b2983c31817fc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/31b2983c31817fc4","status":"passed","time":{"start":1702447684578,"stop":1702447687527,"duration":2949}},{"uid":"c570f6d3a31decf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/c570f6d3a31decf3","status":"passed","time":{"start":1702430435806,"stop":1702430438909,"duration":3103}},{"uid":"d65591846ef2cf72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/d65591846ef2cf72","status":"passed","time":{"start":1702366571908,"stop":1702366575485,"duration":3577}},{"uid":"e9440ab2563017d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/e9440ab2563017d0","status":"passed","time":{"start":1702344041209,"stop":1702344044160,"duration":2951}},{"uid":"deba4c3ad92ae590","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/deba4c3ad92ae590","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257623257,"stop":1702257626162,"duration":2905}},{"uid":"bc7ad67cac2bc9ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/bc7ad67cac2bc9ee","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171585463,"stop":1702171591485,"duration":6022}},{"uid":"cf26ff46ba515d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/cf26ff46ba515d","status":"passed","time":{"start":1702084872884,"stop":1702084875538,"duration":2654}},{"uid":"368f092f341d3127","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/368f092f341d3127","status":"passed","time":{"start":1702066814213,"stop":1702066817652,"duration":3439}},{"uid":"cc7612caee5922c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/cc7612caee5922c5","status":"passed","time":{"start":1702054474790,"stop":1702054477628,"duration":2838}},{"uid":"a50c1011c328209c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/a50c1011c328209c","status":"passed","time":{"start":1702054505599,"stop":1702054508226,"duration":2627}},{"uid":"bf22ce658d66b5dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/bf22ce658d66b5dc","status":"passed","time":{"start":1701998497810,"stop":1701998500457,"duration":2647}},{"uid":"59549ae5799b9fe3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/59549ae5799b9fe3","status":"passed","time":{"start":1701990457919,"stop":1701990460728,"duration":2809}},{"uid":"4e5e89db02200c88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/4e5e89db02200c88","status":"passed","time":{"start":1701990548947,"stop":1701990551674,"duration":2727}},{"uid":"9d7b3b762dae8665","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/9d7b3b762dae8665","status":"passed","time":{"start":1701942880432,"stop":1701942883112,"duration":2680}}]},"tags":[]},"source":"bf4310db83122bf7.json","parameterValues":["TorridgeDistrictCouncil","None","None"]}