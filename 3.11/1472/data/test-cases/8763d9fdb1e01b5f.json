{"uid":"8763d9fdb1e01b5f","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1704846444872,"stop":1704846446295,"duration":1423},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc977574860>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc9763606d0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc977574860>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc9763606d0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1704846444873,"stop":1704846444873,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1704846444873,"stop":1704846446295,"duration":1422},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az702-998"},{"name":"thread","value":"2802-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":109,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":149},"items":[{"uid":"8b0a83e42ede2372","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1456//#testresult/8b0a83e42ede2372","status":"passed","time":{"start":1704760192172,"stop":1704760194252,"duration":2080}},{"uid":"5d637d4e0a7d7d4e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1452//#testresult/5d637d4e0a7d7d4e","status":"passed","time":{"start":1704711526520,"stop":1704711527739,"duration":1219}},{"uid":"73d80427b0cb552c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1450//#testresult/73d80427b0cb552c","status":"passed","time":{"start":1704710742144,"stop":1704710743317,"duration":1173}},{"uid":"f280cb25deb900db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1448//#testresult/f280cb25deb900db","status":"passed","time":{"start":1704710149266,"stop":1704710151188,"duration":1922}},{"uid":"3999633d6c28f96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1446//#testresult/3999633d6c28f96","status":"passed","time":{"start":1704709619498,"stop":1704709620946,"duration":1448}},{"uid":"8e89fe5f6fbae502","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1443//#testresult/8e89fe5f6fbae502","status":"passed","time":{"start":1704704131448,"stop":1704704132618,"duration":1170}},{"uid":"42e622a61bd0db77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1441//#testresult/42e622a61bd0db77","status":"passed","time":{"start":1704673817513,"stop":1704673818663,"duration":1150}},{"uid":"f3160e9fc11f21be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1426//#testresult/f3160e9fc11f21be","status":"passed","time":{"start":1704615423390,"stop":1704615423959,"duration":569}},{"uid":"f04ac25c3113028b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1423//#testresult/f04ac25c3113028b","status":"passed","time":{"start":1704614835450,"stop":1704614836429,"duration":979}},{"uid":"7c45e8995ba1d0e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1420//#testresult/7c45e8995ba1d0e3","status":"passed","time":{"start":1704587490460,"stop":1704587491590,"duration":1130}},{"uid":"65b949eb9301613f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1413//#testresult/65b949eb9301613f","status":"passed","time":{"start":1704542760849,"stop":1704542763168,"duration":2319}},{"uid":"beef9115c934fe9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1408//#testresult/beef9115c934fe9e","status":"passed","time":{"start":1704496189006,"stop":1704496189590,"duration":584}},{"uid":"8c90ab9af09aa60d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1406//#testresult/8c90ab9af09aa60d","status":"passed","time":{"start":1704453441525,"stop":1704453442974,"duration":1449}},{"uid":"4911b47ebde3ea24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1405//#testresult/4911b47ebde3ea24","status":"passed","time":{"start":1704452653074,"stop":1704452653881,"duration":807}},{"uid":"fc8ba5c777d3e10d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1400//#testresult/fc8ba5c777d3e10d","status":"passed","time":{"start":1704443795960,"stop":1704443797142,"duration":1182}},{"uid":"dfe58d818b72fdc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1399//#testresult/dfe58d818b72fdc4","status":"passed","time":{"start":1704443385123,"stop":1704443386011,"duration":888}},{"uid":"7e7f920fd5189406","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1397//#testresult/7e7f920fd5189406","status":"passed","time":{"start":1704442507692,"stop":1704442508542,"duration":850}},{"uid":"e8a3309e014d5b1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1396//#testresult/e8a3309e014d5b1c","status":"passed","time":{"start":1704442488283,"stop":1704442489412,"duration":1129}},{"uid":"66aa762fb183cf3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1390//#testresult/66aa762fb183cf3e","status":"passed","time":{"start":1704417544231,"stop":1704417545465,"duration":1234}},{"uid":"3a33288c7f5e0188","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1379//#testresult/3a33288c7f5e0188","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1704406047058,"stop":1704406048268,"duration":1210}}]},"tags":[]},"source":"8763d9fdb1e01b5f.json","parameterValues":["LiverpoolCityCouncil","None","None"]}