{"uid":"97e1c03a24ee8f3e","name":"Validate Council Output [WiltshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aedb86c72e1849b4679ed1a7ee37cf59","time":{"start":1699101730375,"stop":1699101740505,"duration":10130},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fc7502ce5c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc742a6d3d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:94: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fc742a6d3d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:89: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fc7502ce5c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc742a6d3d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:94: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fc742a6d3d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:89: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1699101730376,"stop":1699101730376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from WiltshireCouncil","time":{"start":1699101730376,"stop":1699101740502,"duration":10126},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1699101740502,"stop":1699101740502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1699101740503,"stop":1699101740505,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az305-647"},{"name":"thread","value":"2754-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":164,"unknown":0,"total":178},"items":[{"uid":"e1bddc713cae7842","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/e1bddc713cae7842","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699060717714,"stop":1699060719510,"duration":1796}},{"uid":"e65b090e32dc57e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/e65b090e32dc57e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699007835012,"stop":1699007839532,"duration":4520}},{"uid":"49a06055c43afc96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1095//#testresult/49a06055c43afc96","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698988857877,"stop":1698988860730,"duration":2853}},{"uid":"e4f34e9ea2d56643","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1094//#testresult/e4f34e9ea2d56643","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698974469015,"stop":1698974481218,"duration":12203}},{"uid":"7abc83f0db0958","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1091//#testresult/7abc83f0db0958","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698887810859,"stop":1698887812585,"duration":1726}},{"uid":"f38ce39b4bb93f29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/f38ce39b4bb93f29","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878661132,"stop":1698878663497,"duration":2365}},{"uid":"aab7997199a6578d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/aab7997199a6578d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878339500,"stop":1698878343157,"duration":3657}},{"uid":"897c87a40a90bdb9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/897c87a40a90bdb9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698867807210,"stop":1698867812957,"duration":5747}},{"uid":"fe7c9c608bb15ee9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/fe7c9c608bb15ee9","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698801638982,"stop":1698801641946,"duration":2964}},{"uid":"a8984fb2c3709341","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/a8984fb2c3709341","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698788794781,"stop":1698788797502,"duration":2721}},{"uid":"9c1e9d2efc2932a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1077//#testresult/9c1e9d2efc2932a8","status":"passed","time":{"start":1698715265819,"stop":1698715274274,"duration":8455}},{"uid":"54eae80d0595adcc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1075//#testresult/54eae80d0595adcc","status":"passed","time":{"start":1698701598786,"stop":1698701601060,"duration":2274}},{"uid":"73d144428a3ada22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1073//#testresult/73d144428a3ada22","status":"passed","time":{"start":1698700502417,"stop":1698700504948,"duration":2531}},{"uid":"eea6f6ec3615de6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1070//#testresult/eea6f6ec3615de6c","status":"passed","time":{"start":1698693239465,"stop":1698693242045,"duration":2580}},{"uid":"7360424eaf5d0c68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1069//#testresult/7360424eaf5d0c68","status":"passed","time":{"start":1698693026669,"stop":1698693034811,"duration":8142}},{"uid":"ffe85b7603396d86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1066//#testresult/ffe85b7603396d86","status":"passed","time":{"start":1698646617634,"stop":1698646630029,"duration":12395}},{"uid":"7e6deb0c900fea79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/7e6deb0c900fea79","status":"passed","time":{"start":1698646594332,"stop":1698646606184,"duration":11852}},{"uid":"b773cf2774d8ae8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/b773cf2774d8ae8e","status":"passed","time":{"start":1698628842810,"stop":1698628845118,"duration":2308}},{"uid":"b6de25586ba6a149","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/b6de25586ba6a149","status":"passed","time":{"start":1698615552721,"stop":1698615554814,"duration":2093}},{"uid":"7f95d3f3434c8e91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/7f95d3f3434c8e91","status":"passed","time":{"start":1698615478388,"stop":1698615480623,"duration":2235}}]},"tags":[]},"source":"97e1c03a24ee8f3e.json","parameterValues":["WiltshireCouncil"]}