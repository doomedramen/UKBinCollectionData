{"uid":"4ac2c942be5d2f5c","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1698700157450,"stop":1698700159218,"duration":1768},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7faa0a47d8a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa9fc886810>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7faa0a47d8a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa9fc886810>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1698700157451,"stop":1698700157451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1698700157451,"stop":1698700159218,"duration":1767},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"hasContent":true,"shouldDisplayMessage":true,"stepsCount":2},"afterStages":[],"labels":[{"name":"host","value":"fv-az444-866"},{"name":"thread","value":"2180-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":138,"unknown":0,"total":165},"items":[{"uid":"fe7903d3134d1740","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1070//#testresult/fe7903d3134d1740","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698692716108,"stop":1698692717942,"duration":1834}},{"uid":"927cf8b42a34180a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1069//#testresult/927cf8b42a34180a","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698692671757,"stop":1698692673723,"duration":1966}},{"uid":"ee2b32173da7234","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1066//#testresult/ee2b32173da7234","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698646226768,"stop":1698646230296,"duration":3528}},{"uid":"8c10530047dcb7c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/8c10530047dcb7c1","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698646260782,"stop":1698646264447,"duration":3665}},{"uid":"d4c9b6b78a75ac59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/d4c9b6b78a75ac59","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698628468795,"stop":1698628470654,"duration":1859}},{"uid":"f1bb5d3466ad398e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/f1bb5d3466ad398e","status":"passed","time":{"start":1698615109191,"stop":1698615110902,"duration":1711}},{"uid":"e03e75ca5b1f6464","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/e03e75ca5b1f6464","status":"passed","time":{"start":1698615160060,"stop":1698615161824,"duration":1764}},{"uid":"a1193b7d56fc0d12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1061//#testresult/a1193b7d56fc0d12","status":"passed","time":{"start":1698615042491,"stop":1698615044038,"duration":1547}},{"uid":"8bff45b3dfe9cded","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1054//#testresult/8bff45b3dfe9cded","status":"passed","time":{"start":1698542279317,"stop":1698542281374,"duration":2057}},{"uid":"3bb5c1b84b74105e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1053//#testresult/3bb5c1b84b74105e","status":"passed","time":{"start":1698455467121,"stop":1698455468811,"duration":1690}},{"uid":"5915accf30b2f82b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1051//#testresult/5915accf30b2f82b","status":"passed","time":{"start":1698369162847,"stop":1698369165093,"duration":2246}},{"uid":"c409c1e93f26fc28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1050//#testresult/c409c1e93f26fc28","status":"passed","time":{"start":1698282742955,"stop":1698282744564,"duration":1609}},{"uid":"eeb1467f44e99565","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1049//#testresult/eeb1467f44e99565","status":"passed","time":{"start":1698196422827,"stop":1698196424905,"duration":2078}},{"uid":"41c1f5f649a273f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1048//#testresult/41c1f5f649a273f4","status":"passed","time":{"start":1698178136357,"stop":1698178138124,"duration":1767}},{"uid":"8354c30a90df81f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1047//#testresult/8354c30a90df81f3","status":"passed","time":{"start":1698178093177,"stop":1698178096845,"duration":3668}},{"uid":"51cf1614bd4f0c79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1046//#testresult/51cf1614bd4f0c79","status":"passed","time":{"start":1698110009372,"stop":1698110011393,"duration":2021}},{"uid":"178bb574425429c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1044//#testresult/178bb574425429c3","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698064778261,"stop":1698064780225,"duration":1964}},{"uid":"13d9edd807de31a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1042//#testresult/13d9edd807de31a5","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1698023681319,"stop":1698023683755,"duration":2436}},{"uid":"b8b8c4a8436232e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1040//#testresult/b8b8c4a8436232e7","status":"passed","time":{"start":1697937528841,"stop":1697937530459,"duration":1618}},{"uid":"aa6b17bbbb512d17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/aa6b17bbbb512d17","status":"passed","time":{"start":1697850713471,"stop":1697850714850,"duration":1379}}]},"tags":[]},"source":"4ac2c942be5d2f5c.json","parameterValues":["CharnwoodBoroughCouncil"]}