{"uid":"48659ab2d9593d70","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1698064893656,"stop":1698064895416,"duration":1760},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fadce0e98a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fadbfa23710>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fadce0e98a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fadbfa23710>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1698064893657,"stop":1698064893657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1698064893657,"stop":1698064895416,"duration":1759},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az365-404"},{"name":"thread","value":"2184-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":134,"unknown":0,"total":148},"items":[{"uid":"7498d1b25213d7a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1042//#testresult/7498d1b25213d7a7","status":"passed","time":{"start":1698023754967,"stop":1698023755816,"duration":849}},{"uid":"1cb8cafc32078bec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1040//#testresult/1cb8cafc32078bec","status":"passed","time":{"start":1697937616170,"stop":1697937616888,"duration":718}},{"uid":"5dba004bb465bcc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/5dba004bb465bcc9","status":"passed","time":{"start":1697850799875,"stop":1697850800776,"duration":901}},{"uid":"6b937bf89115f85c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1037//#testresult/6b937bf89115f85c","status":"passed","time":{"start":1697790422903,"stop":1697790423871,"duration":968}},{"uid":"999b52af3f4d1ab6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/999b52af3f4d1ab6","status":"passed","time":{"start":1697764529345,"stop":1697764530107,"duration":762}},{"uid":"bf42d16e22566713","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/bf42d16e22566713","status":"passed","time":{"start":1697706538671,"stop":1697706539581,"duration":910}},{"uid":"172d21f1908ade40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/172d21f1908ade40","status":"passed","time":{"start":1697706497468,"stop":1697706498036,"duration":568}},{"uid":"20739d527de11e52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/20739d527de11e52","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702044873,"stop":1697702044875,"duration":2}},{"uid":"b5e49d0315287c9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1027//#testresult/b5e49d0315287c9a","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697696181270,"stop":1697696183005,"duration":1735}},{"uid":"50f2cde3937e5341","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1025//#testresult/50f2cde3937e5341","status":"passed","time":{"start":1697678110990,"stop":1697678111867,"duration":877}},{"uid":"a9ff532c64e42163","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1023//#testresult/a9ff532c64e42163","status":"passed","time":{"start":1697666584023,"stop":1697666584854,"duration":831}},{"uid":"3a05344a08f8148","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1020//#testresult/3a05344a08f8148","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697656849251,"stop":1697656850755,"duration":1504}},{"uid":"f03b35aa9721af79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1016//#testresult/f03b35aa9721af79","status":"passed","time":{"start":1697650040975,"stop":1697650041716,"duration":741}},{"uid":"6519cf2dbb698483","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1014//#testresult/6519cf2dbb698483","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697618277339,"stop":1697618279022,"duration":1683}},{"uid":"f44859e3193be436","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1010//#testresult/f44859e3193be436","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697591729964,"stop":1697591731865,"duration":1901}},{"uid":"416da6a80c4533de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1009//#testresult/416da6a80c4533de","status":"passed","time":{"start":1697542582480,"stop":1697542583266,"duration":786}},{"uid":"a9e8b1bc188f793","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1008//#testresult/a9e8b1bc188f793","status":"passed","time":{"start":1697505340639,"stop":1697505341554,"duration":915}},{"uid":"a79a3f18620e62ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1006//#testresult/a79a3f18620e62ce","status":"passed","time":{"start":1697484650294,"stop":1697484651254,"duration":960}},{"uid":"bea2f0071fdf813a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1005//#testresult/bea2f0071fdf813a","status":"passed","time":{"start":1697484587547,"stop":1697484588468,"duration":921}},{"uid":"99d6ef02977908da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1004//#testresult/99d6ef02977908da","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697418973739,"stop":1697418975459,"duration":1720}}]},"tags":[]},"source":"48659ab2d9593d70.json","parameterValues":["KingstonUponThamesCouncil"]}