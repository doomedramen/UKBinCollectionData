{"uid":"1b5cbd0ac1d5d137","name":"Validate Council Output [SouthOxfordshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"dd90c8e7bdfef60ba64401e6c2135205","time":{"start":1697790471073,"stop":1697790474938,"duration":3865},"status":"failed","statusMessage":"requests.exceptions.ChunkedEncodingError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))","statusTrace":"self = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    def _update_chunk_length(self):\n        # First, we'll figure out length of a chunk and then\n        # we'll try to read it from socket.\n        if self.chunk_left is not None:\n            return\n        line = self._fp.fp.readline()\n        line = line.split(b\";\", 1)[0]\n        try:\n>           self.chunk_left = int(line, 16)\nE           ValueError: invalid literal for int() with base 16: b''\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:761: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    @contextmanager\n    def _error_catcher(self):\n        \"\"\"\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n    \n        On exit, release the connection back to the pool.\n        \"\"\"\n        clean_exit = False\n    \n        try:\n            try:\n>               yield\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:828: in read_chunked\n    self._update_chunk_length()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    def _update_chunk_length(self):\n        # First, we'll figure out length of a chunk and then\n        # we'll try to read it from socket.\n        if self.chunk_left is not None:\n            return\n        line = self._fp.fp.readline()\n        line = line.split(b\";\", 1)[0]\n        try:\n            self.chunk_left = int(line, 16)\n        except ValueError:\n            # Invalid chunked protocol response, abort.\n            self.close()\n>           raise InvalidChunkLength(self, line)\nE           urllib3.exceptions.InvalidChunkLength: InvalidChunkLength(got length b'', 0 bytes read)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:765: InvalidChunkLength\n\nDuring handling of the above exception, another exception occurred:\n\n    def generate():\n        # Special case for urllib3.\n        if hasattr(self.raw, \"stream\"):\n            try:\n>               yield from self.raw.stream(chunk_size, decode_content=True)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:816: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:624: in stream\n    for line in self.read_chunked(amt, decode_content=decode_content):\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:816: in read_chunked\n    with self._error_catcher():\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    @contextmanager\n    def _error_catcher(self):\n        \"\"\"\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n    \n        On exit, release the connection back to the pool.\n        \"\"\"\n        clean_exit = False\n    \n        try:\n            try:\n                yield\n    \n            except SocketTimeout:\n                # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n                # there is yet no clean way to get at it from this context.\n                raise ReadTimeoutError(self._pool, None, \"Read timed out.\")\n    \n            except BaseSSLError as e:\n                # FIXME: Is there a better way to differentiate between SSLErrors?\n                if \"read operation timed out\" not in str(e):\n                    # SSL errors related to framing/MAC get wrapped and reraised here\n                    raise SSLError(e)\n    \n                raise ReadTimeoutError(self._pool, None, \"Read timed out.\")\n    \n            except (HTTPException, SocketError) as e:\n                # This includes IncompleteRead.\n>               raise ProtocolError(\"Connection broken: %r\" % e, e)\nE               urllib3.exceptions.ProtocolError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:461: ProtocolError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7fe404e158a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthOxfordshireCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe3f40d22d0>, 'council': 'SouthOxfordshireCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:45: in parse_data\n    response = requests.get(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:725: in send\n    history = [resp for resp in gen]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:725: in <listcomp>\n    history = [resp for resp in gen]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:266: in resolve_redirects\n    resp = self.send(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:747: in send\n    r.content\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:899: in content\n    self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def generate():\n        # Special case for urllib3.\n        if hasattr(self.raw, \"stream\"):\n            try:\n                yield from self.raw.stream(chunk_size, decode_content=True)\n            except ProtocolError as e:\n>               raise ChunkedEncodingError(e)\nE               requests.exceptions.ChunkedEncodingError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:818: ChunkedEncodingError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"requests.exceptions.ChunkedEncodingError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))","statusTrace":"self = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    def _update_chunk_length(self):\n        # First, we'll figure out length of a chunk and then\n        # we'll try to read it from socket.\n        if self.chunk_left is not None:\n            return\n        line = self._fp.fp.readline()\n        line = line.split(b\";\", 1)[0]\n        try:\n>           self.chunk_left = int(line, 16)\nE           ValueError: invalid literal for int() with base 16: b''\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:761: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    @contextmanager\n    def _error_catcher(self):\n        \"\"\"\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n    \n        On exit, release the connection back to the pool.\n        \"\"\"\n        clean_exit = False\n    \n        try:\n            try:\n>               yield\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:828: in read_chunked\n    self._update_chunk_length()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    def _update_chunk_length(self):\n        # First, we'll figure out length of a chunk and then\n        # we'll try to read it from socket.\n        if self.chunk_left is not None:\n            return\n        line = self._fp.fp.readline()\n        line = line.split(b\";\", 1)[0]\n        try:\n            self.chunk_left = int(line, 16)\n        except ValueError:\n            # Invalid chunked protocol response, abort.\n            self.close()\n>           raise InvalidChunkLength(self, line)\nE           urllib3.exceptions.InvalidChunkLength: InvalidChunkLength(got length b'', 0 bytes read)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:765: InvalidChunkLength\n\nDuring handling of the above exception, another exception occurred:\n\n    def generate():\n        # Special case for urllib3.\n        if hasattr(self.raw, \"stream\"):\n            try:\n>               yield from self.raw.stream(chunk_size, decode_content=True)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:816: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:624: in stream\n    for line in self.read_chunked(amt, decode_content=decode_content):\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:816: in read_chunked\n    with self._error_catcher():\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.response.HTTPResponse object at 0x7fe3f784f670>\n\n    @contextmanager\n    def _error_catcher(self):\n        \"\"\"\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n    \n        On exit, release the connection back to the pool.\n        \"\"\"\n        clean_exit = False\n    \n        try:\n            try:\n                yield\n    \n            except SocketTimeout:\n                # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n                # there is yet no clean way to get at it from this context.\n                raise ReadTimeoutError(self._pool, None, \"Read timed out.\")\n    \n            except BaseSSLError as e:\n                # FIXME: Is there a better way to differentiate between SSLErrors?\n                if \"read operation timed out\" not in str(e):\n                    # SSL errors related to framing/MAC get wrapped and reraised here\n                    raise SSLError(e)\n    \n                raise ReadTimeoutError(self._pool, None, \"Read timed out.\")\n    \n            except (HTTPException, SocketError) as e:\n                # This includes IncompleteRead.\n>               raise ProtocolError(\"Connection broken: %r\" % e, e)\nE               urllib3.exceptions.ProtocolError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/urllib3/response.py:461: ProtocolError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7fe404e158a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthOxfordshireCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe3f40d22d0>, 'council': 'SouthOxfordshireCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:45: in parse_data\n    response = requests.get(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:725: in send\n    history = [resp for resp in gen]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:725: in <listcomp>\n    history = [resp for resp in gen]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:266: in resolve_redirects\n    resp = self.send(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/sessions.py:747: in send\n    r.content\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:899: in content\n    self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def generate():\n        # Special case for urllib3.\n        if hasattr(self.raw, \"stream\"):\n            try:\n                yield from self.raw.stream(chunk_size, decode_content=True)\n            except ProtocolError as e:\n>               raise ChunkedEncodingError(e)\nE               requests.exceptions.ChunkedEncodingError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:818: ChunkedEncodingError","steps":[{"name":"Given the council: SouthOxfordshireCouncil","time":{"start":1697790471073,"stop":1697790471074,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from SouthOxfordshireCouncil","time":{"start":1697790471074,"stop":1697790474938,"duration":3864},"status":"failed","statusMessage":"(\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))","statusTrace":"requests.exceptions.ChunkedEncodingError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1233-863"},{"name":"thread","value":"2103-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthOxfordshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":125,"unknown":0,"total":144},"items":[{"uid":"886098880cc7a1d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/886098880cc7a1d1","status":"passed","time":{"start":1697764574055,"stop":1697764577728,"duration":3673}},{"uid":"6decfec5a89421e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/6decfec5a89421e","status":"passed","time":{"start":1697706700303,"stop":1697706704584,"duration":4281}},{"uid":"370e729b7dce42e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/370e729b7dce42e5","status":"passed","time":{"start":1697706644700,"stop":1697706648248,"duration":3548}},{"uid":"cae3edacf347a04d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/cae3edacf347a04d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702045892,"stop":1697702045893,"duration":1}},{"uid":"bb206ed56c64be8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1027//#testresult/bb206ed56c64be8d","status":"passed","time":{"start":1697696373092,"stop":1697696376777,"duration":3685}},{"uid":"5945837726daf0e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1025//#testresult/5945837726daf0e2","status":"passed","time":{"start":1697678358081,"stop":1697678362176,"duration":4095}},{"uid":"dfaf5c113bd7124e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1023//#testresult/dfaf5c113bd7124e","status":"passed","time":{"start":1697666743839,"stop":1697666747033,"duration":3194}},{"uid":"68597d9ca7836515","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1020//#testresult/68597d9ca7836515","status":"passed","time":{"start":1697657034331,"stop":1697657038406,"duration":4075}},{"uid":"115b2dd1a15ac12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1016//#testresult/115b2dd1a15ac12","status":"passed","time":{"start":1697650213242,"stop":1697650217287,"duration":4045}},{"uid":"5eaed3b78f650e28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1014//#testresult/5eaed3b78f650e28","status":"passed","time":{"start":1697618474467,"stop":1697618478300,"duration":3833}},{"uid":"494a9d2e5b6310a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1010//#testresult/494a9d2e5b6310a4","status":"passed","time":{"start":1697591935019,"stop":1697591939353,"duration":4334}},{"uid":"6be014d70b3370f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1009//#testresult/6be014d70b3370f2","status":"passed","time":{"start":1697542753785,"stop":1697542757332,"duration":3547}},{"uid":"93ebb51da63020ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1008//#testresult/93ebb51da63020ef","status":"passed","time":{"start":1697505567899,"stop":1697505571934,"duration":4035}},{"uid":"fda095d48c38579e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1006//#testresult/fda095d48c38579e","status":"passed","time":{"start":1697484863670,"stop":1697484867506,"duration":3836}},{"uid":"b2cb3df70bd503ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1005//#testresult/b2cb3df70bd503ec","status":"passed","time":{"start":1697484763626,"stop":1697484766822,"duration":3196}},{"uid":"6bf1e8398dac3563","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1004//#testresult/6bf1e8398dac3563","status":"passed","time":{"start":1697419193580,"stop":1697419197177,"duration":3597}},{"uid":"182388e7735260c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/182388e7735260c6","status":"passed","time":{"start":1697403331060,"stop":1697403334521,"duration":3461}},{"uid":"8f274c43697d291f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/8f274c43697d291f","status":"passed","time":{"start":1697399943613,"stop":1697399948427,"duration":4814}},{"uid":"ff1d1736d2c24192","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/994//#testresult/ff1d1736d2c24192","status":"passed","time":{"start":1697367206096,"stop":1697367210832,"duration":4736}},{"uid":"e8770474e5a39b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/993//#testresult/e8770474e5a39b3","status":"passed","time":{"start":1697367129507,"stop":1697367133316,"duration":3809}}]},"tags":[]},"source":"1b5cbd0ac1d5d137.json","parameterValues":["SouthOxfordshireCouncil"]}