{"uid":"ff7c8fbb04bc5a4b","name":"Validate Council Output [LondonBoroughHounslow-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2d5d41f2f80a2dfc213e6858543e98d5","time":{"start":1704587491591,"stop":1704587502601,"duration":11010},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f74bd574b80>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f74bcab6fd0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f74bcab6fd0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f74bd574b80>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f74bcab6fd0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f74bcab6fd0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: LondonBoroughHounslow","time":{"start":1704587491592,"stop":1704587491592,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LondonBoroughHounslow using None and the None is set","time":{"start":1704587491592,"stop":1704587502598,"duration":11006},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704587502599,"stop":1704587502599,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704587502599,"stop":1704587502601,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1432-133"},{"name":"thread","value":"2851-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LondonBoroughHounslow"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":145,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":145},"items":[{"uid":"87c88d4310dfefb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1413//#testresult/87c88d4310dfefb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704542763170,"stop":1704542766371,"duration":3201}},{"uid":"d60761455c945d17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1408//#testresult/d60761455c945d17","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704496189592,"stop":1704496192041,"duration":2449}},{"uid":"d64838cab5c87817","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1406//#testresult/d64838cab5c87817","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704453442976,"stop":1704453446374,"duration":3398}},{"uid":"347893decb272203","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1405//#testresult/347893decb272203","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704452653883,"stop":1704452658106,"duration":4223}},{"uid":"f4dd8bc4278af0f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1400//#testresult/f4dd8bc4278af0f8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443797144,"stop":1704443800564,"duration":3420}},{"uid":"60541024f8034615","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1399//#testresult/60541024f8034615","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443386013,"stop":1704443388758,"duration":2745}},{"uid":"222a65501c7b0bbe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1397//#testresult/222a65501c7b0bbe","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442508544,"stop":1704442511849,"duration":3305}},{"uid":"c4e8bc850766434f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1396//#testresult/c4e8bc850766434f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442489415,"stop":1704442493368,"duration":3953}},{"uid":"40a6104c41d48893","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1390//#testresult/40a6104c41d48893","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704417545469,"stop":1704417548454,"duration":2985}},{"uid":"d89e6d7992dfb023","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1379//#testresult/d89e6d7992dfb023","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704406048346,"stop":1704406050840,"duration":2494}},{"uid":"82cb059c5e7a2c88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1378//#testresult/82cb059c5e7a2c88","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704405994266,"stop":1704405997113,"duration":2847}},{"uid":"cfb512105f447220","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1376//#testresult/cfb512105f447220","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398825621,"stop":1704398829712,"duration":4091}},{"uid":"311876b35293941d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1375//#testresult/311876b35293941d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398779263,"stop":1704398781965,"duration":2702}},{"uid":"339473bfd8f88643","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1373//#testresult/339473bfd8f88643","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704388338126,"stop":1704388341584,"duration":3458}},{"uid":"1938b372b56244b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1369//#testresult/1938b372b56244b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378352819,"stop":1704378356004,"duration":3185}},{"uid":"e11b2dbff7cd7da1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1367//#testresult/e11b2dbff7cd7da1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378040609,"stop":1704378043528,"duration":2919}},{"uid":"8622cd5b8c840ffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1366//#testresult/8622cd5b8c840ffc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375863860,"stop":1704375866983,"duration":3123}},{"uid":"89c42dc2a85754e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1363//#testresult/89c42dc2a85754e6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356790275,"stop":1704356793887,"duration":3612}},{"uid":"b5a1b5d3fedc4e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/b5a1b5d3fedc4e3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355968033,"stop":1704355970613,"duration":2580}},{"uid":"806cac06a7b0341e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/806cac06a7b0341e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331118882,"stop":1704331122033,"duration":3151}}]},"tags":[]},"source":"ff7c8fbb04bc5a4b.json","parameterValues":["LondonBoroughHounslow","None","None"]}