{"uid":"fb722ef3666142a","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1725408968333,"stop":1725409017861,"duration":49528},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0cb5175800>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0cb4fea490>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0cb5175800>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0cb4fea490>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1725408968333,"stop":1725408968333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725408968333,"stop":1725409017861,"duration":49528},"status":"failed","statusMessage":"time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"915ec899279449c2","name":"stdout","source":"915ec899279449c2.txt","type":"text/plain","size":209}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1493-436"},{"name":"thread","value":"2902-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":0,"skipped":0,"passed":263,"unknown":0,"total":306},"items":[{"uid":"d589c0fb348d9375","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/d589c0fb348d9375","status":"passed","time":{"start":1725403967094,"stop":1725403997541,"duration":30447}},{"uid":"cfa7203603467c22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/cfa7203603467c22","status":"passed","time":{"start":1725384651393,"stop":1725384915164,"duration":263771}},{"uid":"9bf7c5d93e6ce127","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/9bf7c5d93e6ce127","status":"passed","time":{"start":1725346862055,"stop":1725347158929,"duration":296874}},{"uid":"d7e4bc0e25059139","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/d7e4bc0e25059139","status":"passed","time":{"start":1725322463131,"stop":1725322505772,"duration":42641}},{"uid":"9483036ddd5bbd15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/9483036ddd5bbd15","status":"passed","time":{"start":1725316038703,"stop":1725316323251,"duration":284548}},{"uid":"bc194c0d04ce155c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/bc194c0d04ce155c","status":"passed","time":{"start":1725312763611,"stop":1725313007627,"duration":244016}},{"uid":"8b3fa05d7b4b208c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/8b3fa05d7b4b208c","status":"passed","time":{"start":1725310605215,"stop":1725310846534,"duration":241319}},{"uid":"9c1ba44c27719f04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2060//#testresult/9c1ba44c27719f04","status":"passed","time":{"start":1725307850046,"stop":1725308101010,"duration":250964}},{"uid":"1d63d81b693615fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2059//#testresult/1d63d81b693615fc","status":"passed","time":{"start":1725307733092,"stop":1725307975496,"duration":242404}},{"uid":"10b39df333a707cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2054//#testresult/10b39df333a707cd","status":"passed","time":{"start":1725236007787,"stop":1725236025779,"duration":17992}},{"uid":"aa73ab47987e85d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2053//#testresult/aa73ab47987e85d2","status":"passed","time":{"start":1725149715628,"stop":1725149736668,"duration":21040}},{"uid":"ae0a75d5392ad1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2052//#testresult/ae0a75d5392ad1e","status":"passed","time":{"start":1725063226827,"stop":1725063270413,"duration":43586}},{"uid":"3df5e983cd9f1ea5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2051//#testresult/3df5e983cd9f1ea5","status":"passed","time":{"start":1724976778366,"stop":1724976840795,"duration":62429}},{"uid":"3e14068572fbf857","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2049//#testresult/3e14068572fbf857","status":"passed","time":{"start":1724890655676,"stop":1724890673665,"duration":17989}},{"uid":"5235fb4dfa29a7c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2048//#testresult/5235fb4dfa29a7c6","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 28 August\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1724803902297,"stop":1724803980310,"duration":78013}},{"uid":"b9315d20556766da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2043//#testresult/b9315d20556766da","status":"passed","time":{"start":1724717272156,"stop":1724717537314,"duration":265158}},{"uid":"d7d7553c0d054d8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2039//#testresult/d7d7553c0d054d8f","status":"passed","time":{"start":1724631207156,"stop":1724631228590,"duration":21434}},{"uid":"debab6c3eeda16ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2038//#testresult/debab6c3eeda16ab","status":"passed","time":{"start":1724544884490,"stop":1724544961444,"duration":76954}},{"uid":"f15b22f9753ff41c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2037//#testresult/f15b22f9753ff41c","status":"passed","time":{"start":1724458552661,"stop":1724458635053,"duration":82392}},{"uid":"5591641895047eff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2036//#testresult/5591641895047eff","status":"passed","time":{"start":1724372167254,"stop":1724372260307,"duration":93053}}]},"tags":[]},"source":"fb722ef3666142a.json","parameterValues":["KingstonUponThamesCouncil"]}