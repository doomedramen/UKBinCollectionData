{"uid":"3025cea4f063a22","name":"Validate Council Output [CornwallCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"20fb6c486e377aee58980a6c6932d1ba","time":{"start":1726359161125,"stop":1726359162413,"duration":1288},"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f49721cd620>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4972050f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '16 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f49721cd620>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4972050f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '16 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council","time":{"start":1726359161125,"stop":1726359161125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726359161125,"stop":1726359162413,"duration":1288},"status":"failed","statusMessage":"unconverted data remains: t","statusTrace":"ValueError: unconverted data remains: t\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fed0f20ab213d44f","name":"stdout","source":"fed0f20ab213d44f.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1108-921"},{"name":"thread","value":"2838-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CornwallCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":38,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":58},"items":[{"uid":"615acd1d6359d856","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2114//#testresult/615acd1d6359d856","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726272914410,"stop":1726272915199,"duration":789}},{"uid":"a4c728eb295ca9fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/a4c728eb295ca9fc","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726186541132,"stop":1726186541900,"duration":768}},{"uid":"49344d3e9c3a1c97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2112//#testresult/49344d3e9c3a1c97","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726099991501,"stop":1726099992442,"duration":941}},{"uid":"83c2350ca037832c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2111//#testresult/83c2350ca037832c","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1726013591753,"stop":1726013592477,"duration":724}},{"uid":"58479f1a89c3fee3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2109//#testresult/58479f1a89c3fee3","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725955402993,"stop":1725955403836,"duration":843}},{"uid":"ba083b605cc82079","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2107//#testresult/ba083b605cc82079","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725927168059,"stop":1725927169371,"duration":1312}},{"uid":"898903f155dfad23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2095//#testresult/898903f155dfad23","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725840833583,"stop":1725840834364,"duration":781}},{"uid":"88a2bddecf0ba055","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/88a2bddecf0ba055","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725754363346,"stop":1725754364645,"duration":1299}},{"uid":"6955d8d9af84c56c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/6955d8d9af84c56c","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725667989723,"stop":1725667990666,"duration":943}},{"uid":"a68299db3fbbc3b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/a68299db3fbbc3b3","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725581608863,"stop":1725581609579,"duration":716}},{"uid":"ee42535b4435ed3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/ee42535b4435ed3e","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725569419661,"stop":1725569420596,"duration":935}},{"uid":"f142979d73606823","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/f142979d73606823","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725495358488,"stop":1725495359193,"duration":705}},{"uid":"98991c6e4c483e5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/98991c6e4c483e5b","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725430335410,"stop":1725430336221,"duration":811}},{"uid":"23ecbe1245ab341e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/23ecbe1245ab341e","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725408862875,"stop":1725408863847,"duration":972}},{"uid":"6f4d271b8acbf0df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/6f4d271b8acbf0df","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725403952427,"stop":1725403953078,"duration":651}},{"uid":"cbb8ad38f8a95c3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/cbb8ad38f8a95c3a","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725384898065,"stop":1725384899015,"duration":950}},{"uid":"3a67243b0eb80596","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/3a67243b0eb80596","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725347143272,"stop":1725347144015,"duration":743}},{"uid":"d992f8cbb694d081","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/d992f8cbb694d081","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725322345167,"stop":1725322346130,"duration":963}},{"uid":"4c512d671c72a96b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/4c512d671c72a96b","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725316305566,"stop":1725316306271,"duration":705}},{"uid":"e3b87164dd7c404f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/e3b87164dd7c404f","status":"failed","statusDetails":"ValueError: unconverted data remains: t","time":{"start":1725312996047,"stop":1725312996923,"duration":876}}]},"tags":[]},"source":"3025cea4f063a22.json","parameterValues":["CornwallCouncil"]}