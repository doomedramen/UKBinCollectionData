{"uid":"f246996eb53bdc62","name":"Validate Council Output [BexleyCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"3e37348090e3151d6f19f6376e979240","time":{"start":1703811998883,"stop":1703812016853,"duration":17970},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55d81b894f83 <unknown>\n#1 0x55d81b54db2b <unknown>\n#2 0x55d81b596eff <unknown>\n#3 0x55d81b5951a0 <unknown>\n#4 0x55d81b5c70b2 <unknown>\n#5 0x55d81b590b49 <unknown>\n#6 0x55d81b5c74ce <unknown>\n#7 0x55d81b5e6006 <unknown>\n#8 0x55d81b5c6e53 <unknown>\n#9 0x55d81b58edd4 <unknown>\n#10 0x55d81b5901de <unknown>\n#11 0x55d81b859531 <unknown>\n#12 0x55d81b85d455 <unknown>\n#13 0x55d81b845f55 <unknown>\n#14 0x55d81b85e0ef <unknown>\n#15 0x55d81b82999f <unknown>\n#16 0x55d81b882008 <unknown>\n#17 0x55d81b8821d7 <unknown>\n#18 0x55d81b894124 <unknown>\n#19 0x7f85d8094ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f6c02be2340>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6c029e0bd0>, 'council': 'BexleyCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:73: in parse_data\n    dropdown_input.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6c029e5f50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55d81b8821d7 \\\\u003Cunknown>\\\\n#18 0x55d81b894124 \\\\u003Cunknown>\\\\n#19 0x7f85d8094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55d81b894f83 <unknown>\nE       #1 0x55d81b54db2b <unknown>\nE       #2 0x55d81b596eff <unknown>\nE       #3 0x55d81b5951a0 <unknown>\nE       #4 0x55d81b5c70b2 <unknown>\nE       #5 0x55d81b590b49 <unknown>\nE       #6 0x55d81b5c74ce <unknown>\nE       #7 0x55d81b5e6006 <unknown>\nE       #8 0x55d81b5c6e53 <unknown>\nE       #9 0x55d81b58edd4 <unknown>\nE       #10 0x55d81b5901de <unknown>\nE       #11 0x55d81b859531 <unknown>\nE       #12 0x55d81b85d455 <unknown>\nE       #13 0x55d81b845f55 <unknown>\nE       #14 0x55d81b85e0ef <unknown>\nE       #15 0x55d81b82999f <unknown>\nE       #16 0x55d81b882008 <unknown>\nE       #17 0x55d81b8821d7 <unknown>\nE       #18 0x55d81b894124 <unknown>\nE       #19 0x7f85d8094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55d81b894f83 <unknown>\n#1 0x55d81b54db2b <unknown>\n#2 0x55d81b596eff <unknown>\n#3 0x55d81b5951a0 <unknown>\n#4 0x55d81b5c70b2 <unknown>\n#5 0x55d81b590b49 <unknown>\n#6 0x55d81b5c74ce <unknown>\n#7 0x55d81b5e6006 <unknown>\n#8 0x55d81b5c6e53 <unknown>\n#9 0x55d81b58edd4 <unknown>\n#10 0x55d81b5901de <unknown>\n#11 0x55d81b859531 <unknown>\n#12 0x55d81b85d455 <unknown>\n#13 0x55d81b845f55 <unknown>\n#14 0x55d81b85e0ef <unknown>\n#15 0x55d81b82999f <unknown>\n#16 0x55d81b882008 <unknown>\n#17 0x55d81b8821d7 <unknown>\n#18 0x55d81b894124 <unknown>\n#19 0x7f85d8094ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f6c02be2340>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6c029e0bd0>, 'council': 'BexleyCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:73: in parse_data\n    dropdown_input.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6c029e5f50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55d81b8821d7 \\\\u003Cunknown>\\\\n#18 0x55d81b894124 \\\\u003Cunknown>\\\\n#19 0x7f85d8094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55d81b894f83 <unknown>\nE       #1 0x55d81b54db2b <unknown>\nE       #2 0x55d81b596eff <unknown>\nE       #3 0x55d81b5951a0 <unknown>\nE       #4 0x55d81b5c70b2 <unknown>\nE       #5 0x55d81b590b49 <unknown>\nE       #6 0x55d81b5c74ce <unknown>\nE       #7 0x55d81b5e6006 <unknown>\nE       #8 0x55d81b5c6e53 <unknown>\nE       #9 0x55d81b58edd4 <unknown>\nE       #10 0x55d81b5901de <unknown>\nE       #11 0x55d81b859531 <unknown>\nE       #12 0x55d81b85d455 <unknown>\nE       #13 0x55d81b845f55 <unknown>\nE       #14 0x55d81b85e0ef <unknown>\nE       #15 0x55d81b82999f <unknown>\nE       #16 0x55d81b882008 <unknown>\nE       #17 0x55d81b8821d7 <unknown>\nE       #18 0x55d81b894124 <unknown>\nE       #19 0x7f85d8094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council: BexleyCouncil","time":{"start":1703811998883,"stop":1703811998883,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BexleyCouncil using local and the http://selenium:4444 is set","time":{"start":1703811998884,"stop":1703812016853,"duration":17969},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55d81b894f83 <unknown>\n#1 0x55d81b54db2b <unknown>\n#2 0x55d81b596eff <unknown>\n#3 0x55d81b5951a0 <unknown>\n#4 0x55d81b5c70b2 <unknown>\n#5 0x55d81b590b49 <unknown>\n#6 0x55d81b5c74ce <unknown>\n#7 0x55d81b5e6006 <unknown>\n#8 0x55d81b5c6e53 <unknown>\n#9 0x55d81b58edd4 <unknown>\n#10 0x55d81b5901de <unknown>\n#11 0x55d81b859531 <unknown>\n#12 0x55d81b85d455 <unknown>\n#13 0x55d81b845f55 <unknown>\n#14 0x55d81b85e0ef <unknown>\n#15 0x55d81b82999f <unknown>\n#16 0x55d81b882008 <unknown>\n#17 0x55d81b8821d7 <unknown>\n#18 0x55d81b894124 <unknown>\n#19 0x7f85d8094ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55d81b894f83 <unknown>\n#1 0x55d81b54db2b <unknown>\n#2 0x55d81b596eff <unknown>\n#3 0x55d81b5951a0 <unknown>\n#4 0x55d81b5c70b2 <unknown>\n#5 0x55d81b590b49 <unknown>\n#6 0x55d81b5c74ce <unknown>\n#7 0x55d81b5e6006 <unknown>\n#8 0x55d81b5c6e53 <unknown>\n#9 0x55d81b58edd4 <unknown>\n#10 0x55d81b5901de <unknown>\n#11 0x55d81b859531 <unknown>\n#12 0x55d81b85d455 <unknown>\n#13 0x55d81b845f55 <unknown>\n#14 0x55d81b85e0ef <unknown>\n#15 0x55d81b82999f <unknown>\n#16 0x55d81b882008 <unknown>\n#17 0x55d81b8821d7 <unknown>\n#18 0x55d81b894124 <unknown>\n#19 0x7f85d8094ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1432-133"},{"name":"thread","value":"2802-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BexleyCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":11},"items":[{"uid":"6dd6d60208fbde9c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/6dd6d60208fbde9c","status":"failed","statusDetails":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","time":{"start":1703756131738,"stop":1703756147001,"duration":15263}},{"uid":"df083e3900a56464","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/df083e3900a56464","status":"failed","statusDetails":"ValueError: time data 'Being collected today' does not match format '%A %d %B'","time":{"start":1703726112684,"stop":1703726131702,"duration":19018}},{"uid":"e00683ebc31808e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/e00683ebc31808e5","status":"passed","time":{"start":1703717292307,"stop":1703717307211,"duration":14904}},{"uid":"4a772882401a7fd0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/4a772882401a7fd0","status":"passed","time":{"start":1703717254342,"stop":1703717268995,"duration":14653}},{"uid":"7aae05f7a9e82324","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/7aae05f7a9e82324","status":"passed","time":{"start":1703639705799,"stop":1703639724466,"duration":18667}},{"uid":"8c98361c167c70f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/8c98361c167c70f5","status":"passed","time":{"start":1703553301400,"stop":1703553315903,"duration":14503}},{"uid":"6a1c0dbe8890b3a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/6a1c0dbe8890b3a0","status":"passed","time":{"start":1703541092646,"stop":1703541108621,"duration":15975}},{"uid":"d7248500b5994700","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/d7248500b5994700","status":"passed","time":{"start":1703467072802,"stop":1703467092131,"duration":19329}},{"uid":"add248f599c3a5d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/add248f599c3a5d8","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559202466f83 <unknown>\n#1 0x55920211fcf7 <unknown>\n#2 0x55920216f99e <unknown>\n#3 0x55920216faa1 <unknown>\n#4 0x5592021bad64 <unknown>\n#5 0x5592021990dd <unknown>\n#6 0x5592021b8006 <unknown>\n#7 0x559202198e53 <unknown>\n#8 0x559202160dd4 <unknown>\n#9 0x5592021621de <unknown>\n#10 0x55920242b531 <unknown>\n#11 0x55920242f455 <unknown>\n#12 0x559202417f55 <unknown>\n#13 0x5592024300ef <unknown>\n#14 0x5592023fb99f <unknown>\n#15 0x559202454008 <unknown>\n#16 0x5592024541d7 <unknown>\n#17 0x559202466124 <unknown>\n#18 0x7f332e094ac3 <unknown>","time":{"start":1703416371867,"stop":1703416439401,"duration":67534}},{"uid":"294f06b33b6eb0ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/294f06b33b6eb0ca","status":"passed","time":{"start":1703416337652,"stop":1703416354992,"duration":17340}}]},"tags":[]},"source":"f246996eb53bdc62.json","parameterValues":["BexleyCouncil","local","http://selenium:4444"]}