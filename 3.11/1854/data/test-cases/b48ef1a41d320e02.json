{"uid":"b48ef1a41d320e02","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1716338086909,"stop":1716338140300,"duration":53391},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0840f1bf60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0840d2a910>, 'council': 'KingstonUponThamesCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:68: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0840f1bf60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0840d2a910>, 'council': 'KingstonUponThamesCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:68: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1716338086909,"stop":1716338086909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1716338086909,"stop":1716338140299,"duration":53390},"status":"failed","statusMessage":"time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 22 May\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[{"uid":"2740b597c065cf78","name":"stdout","source":"2740b597c065cf78.txt","type":"text/plain","size":152}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az665-194"},{"name":"thread","value":"2820-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":161,"unknown":0,"total":188},"items":[{"uid":"8ba0fc3719de7ce1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1853//#testresult/8ba0fc3719de7ce1","status":"passed","time":{"start":1716252087501,"stop":1716252110430,"duration":22929}},{"uid":"5cb968ef9a30b8b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1852//#testresult/5cb968ef9a30b8b0","status":"passed","time":{"start":1716165595810,"stop":1716165616817,"duration":21007}},{"uid":"ae723c6967206c0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1851//#testresult/ae723c6967206c0d","status":"passed","time":{"start":1716155128508,"stop":1716155163871,"duration":35363}},{"uid":"1d821dd885a98f81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1849//#testresult/1d821dd885a98f81","status":"passed","time":{"start":1716152562242,"stop":1716152620119,"duration":57877}},{"uid":"812157d1981790c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1846//#testresult/812157d1981790c2","status":"passed","time":{"start":1716078850170,"stop":1716078877979,"duration":27809}},{"uid":"262484c0722e6a36","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1842//#testresult/262484c0722e6a36","status":"passed","time":{"start":1715992605149,"stop":1715992614879,"duration":9730}},{"uid":"752a3c04f9141102","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1839//#testresult/752a3c04f9141102","status":"passed","time":{"start":1715983552698,"stop":1715983641182,"duration":88484}},{"uid":"7b186daa72fcf9f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1834//#testresult/7b186daa72fcf9f5","status":"passed","time":{"start":1715974002371,"stop":1715974044378,"duration":42007}},{"uid":"215bbbc86d6a1752","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1110//#testresult/215bbbc86d6a1752","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699147238967,"stop":1699147239980,"duration":1013}},{"uid":"6caccbb0d6887495","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1107//#testresult/6caccbb0d6887495","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699101527236,"stop":1699101528057,"duration":821}},{"uid":"bb663d53cd017a3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/bb663d53cd017a3e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699060497297,"stop":1699060498166,"duration":869}},{"uid":"4eafae0673f518f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/4eafae0673f518f3","status":"passed","time":{"start":1699007622556,"stop":1699007624410,"duration":1854}},{"uid":"e1fe6de90209e961","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1095//#testresult/e1fe6de90209e961","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698988656437,"stop":1698988657172,"duration":735}},{"uid":"832cbd62da44bddc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1094//#testresult/832cbd62da44bddc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698974150374,"stop":1698974151236,"duration":862}},{"uid":"2aabf0af555ddac6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1091//#testresult/2aabf0af555ddac6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698887639375,"stop":1698887639933,"duration":558}},{"uid":"72225b2eb6f2ae9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/72225b2eb6f2ae9b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878316652,"stop":1698878317256,"duration":604}},{"uid":"c0b84f4154c4c4cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/c0b84f4154c4c4cd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878232770,"stop":1698878233344,"duration":574}},{"uid":"e1900d2440d33c0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/e1900d2440d33c0d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698867432356,"stop":1698867433230,"duration":874}},{"uid":"b8be2ec6b416b88b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/b8be2ec6b416b88b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698801522377,"stop":1698801523364,"duration":987}},{"uid":"c53c43aadf042790","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/c53c43aadf042790","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698788534776,"stop":1698788535447,"duration":671}}]},"tags":[]},"source":"b48ef1a41d320e02.json","parameterValues":["KingstonUponThamesCouncil"]}