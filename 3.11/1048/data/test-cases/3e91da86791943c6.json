{"uid":"3e91da86791943c6","name":"Validate Council Output [BuryCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"93061d049d5e3b3b2886e3c632b0e1f1","time":{"start":1698178170386,"stop":1698178193001,"duration":22615},"status":"failed","statusMessage":"TypeError: 'NoneType' object is not iterable","statusTrace":"fixturefunc = <function scrape_step at 0x7fde52f75260>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuryCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fde45753710>, 'council': 'BuryCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BuryCouncil.CouncilClass object at 0x7fde45bcbb50>, page = ''\nkwargs = {'paon': '3', 'postcode': 'M26 3XY', 'uprn': None, 'url': 'https://www.bury.gov.uk/waste-and-recycling/bin-collection-days-and-alerts', ...}\ncollections = [], data = {'bins': []}, postcode = 'M26 3XY'\naddr_response = <Response [200]>, address_json = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        collections = []\n        data = {\"bins\": []}\n    \n        # Get and check postcode and PAON\n        postcode = kwargs.get('postcode')\n        paon = kwargs.get('paon')\n        check_postcode(postcode)\n        check_paon(paon)\n    \n        # Make API call to get property info using postcode\n        addr_response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getProperties?postcode={postcode.replace(\" \", \"\")}')\n        if addr_response.status_code != 200:\n            raise ConnectionAbortedError(\"Issue encountered getting addresses.\")\n        address_json = json.loads(addr_response.text)['response']\n    \n        # This makes addr the next item that has the house number. Since these are ordered by house number, a single\n        # number like 3 wouldn't return 33\n>       addr = next(item for item in address_json if paon in item[\"addressLine1\"])\nE       TypeError: 'NoneType' object is not iterable\n\nuk_bin_collection/uk_bin_collection/councils/BuryCouncil.py:35: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"TypeError: 'NoneType' object is not iterable","statusTrace":"fixturefunc = <function scrape_step at 0x7fde52f75260>\nrequest = <FixtureRequest for <Function test_scenario_outline[BuryCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fde45753710>, 'council': 'BuryCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BuryCouncil.CouncilClass object at 0x7fde45bcbb50>, page = ''\nkwargs = {'paon': '3', 'postcode': 'M26 3XY', 'uprn': None, 'url': 'https://www.bury.gov.uk/waste-and-recycling/bin-collection-days-and-alerts', ...}\ncollections = [], data = {'bins': []}, postcode = 'M26 3XY'\naddr_response = <Response [200]>, address_json = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        collections = []\n        data = {\"bins\": []}\n    \n        # Get and check postcode and PAON\n        postcode = kwargs.get('postcode')\n        paon = kwargs.get('paon')\n        check_postcode(postcode)\n        check_paon(paon)\n    \n        # Make API call to get property info using postcode\n        addr_response = requests.get(\n            f'https://www.bury.gov.uk/app-services/getProperties?postcode={postcode.replace(\" \", \"\")}')\n        if addr_response.status_code != 200:\n            raise ConnectionAbortedError(\"Issue encountered getting addresses.\")\n        address_json = json.loads(addr_response.text)['response']\n    \n        # This makes addr the next item that has the house number. Since these are ordered by house number, a single\n        # number like 3 wouldn't return 33\n>       addr = next(item for item in address_json if paon in item[\"addressLine1\"])\nE       TypeError: 'NoneType' object is not iterable\n\nuk_bin_collection/uk_bin_collection/councils/BuryCouncil.py:35: TypeError","steps":[{"name":"Given the council: BuryCouncil","time":{"start":1698178170386,"stop":1698178170387,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from BuryCouncil","time":{"start":1698178170387,"stop":1698178193001,"duration":22614},"status":"failed","statusMessage":"'NoneType' object is not iterable","statusTrace":"TypeError: 'NoneType' object is not iterable\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az262-182"},{"name":"thread","value":"2128-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BuryCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":13},"items":[{"uid":"f42092bea3f9ffb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1047//#testresult/f42092bea3f9ffb7","status":"failed","statusDetails":"TypeError: 'NoneType' object is not iterable","time":{"start":1698178122178,"stop":1698178165526,"duration":43348}},{"uid":"922e906e1a4a5e44","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1046//#testresult/922e906e1a4a5e44","status":"passed","time":{"start":1698110058826,"stop":1698110061170,"duration":2344}},{"uid":"f84ed45bdee85e9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1044//#testresult/f84ed45bdee85e9a","status":"passed","time":{"start":1698064817142,"stop":1698064824878,"duration":7736}},{"uid":"106de21c0d5543f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1042//#testresult/106de21c0d5543f3","status":"passed","time":{"start":1698023654346,"stop":1698023664767,"duration":10421}},{"uid":"1a21417badcd9f47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1040//#testresult/1a21417badcd9f47","status":"passed","time":{"start":1697937513923,"stop":1697937523184,"duration":9261}},{"uid":"e29694ecc4270db1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/e29694ecc4270db1","status":"passed","time":{"start":1697850702151,"stop":1697850708669,"duration":6518}},{"uid":"d0d699ed0e520cd0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1037//#testresult/d0d699ed0e520cd0","status":"passed","time":{"start":1697790312452,"stop":1697790321303,"duration":8851}},{"uid":"ba05dfa008873d6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/ba05dfa008873d6c","status":"passed","time":{"start":1697764430044,"stop":1697764434869,"duration":4825}},{"uid":"ba05cff81181b400","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/ba05cff81181b400","status":"passed","time":{"start":1697706442388,"stop":1697706452011,"duration":9623}},{"uid":"a2ab02828b82d4dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/a2ab02828b82d4dd","status":"passed","time":{"start":1697706403087,"stop":1697706407477,"duration":4390}},{"uid":"8c17263b62600b6a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/8c17263b62600b6a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702044024,"stop":1697702044053,"duration":29}},{"uid":"ccddf21df13cc27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1027//#testresult/ccddf21df13cc27","status":"passed","time":{"start":1697696103518,"stop":1697696108581,"duration":5063}}]},"tags":[]},"source":"3e91da86791943c6.json","parameterValues":["BuryCouncil"]}