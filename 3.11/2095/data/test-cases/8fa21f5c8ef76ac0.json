{"uid":"8fa21f5c8ef76ac0","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1725841881021,"stop":1725841906423,"duration":25402},"status":"failed","statusMessage":"ValueError: time data 'September' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7feaf54b47c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7feaf5342850>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'September', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'September' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'September' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7feaf54b47c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7feaf5342850>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'September', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'September' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1725841881022,"stop":1725841881022,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725841881022,"stop":1725841906423,"duration":25401},"status":"failed","statusMessage":"time data 'September' does not match format '%d %B'","statusTrace":"ValueError: time data 'September' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"796db178ae278093","name":"stdout","source":"796db178ae278093.txt","type":"text/plain","size":118}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az984-576"},{"name":"thread","value":"2765-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":37,"broken":0,"skipped":0,"passed":97,"unknown":0,"total":134},"items":[{"uid":"d87b2166e6739860","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/d87b2166e6739860","status":"passed","time":{"start":1725755149947,"stop":1725755166649,"duration":16702}},{"uid":"1bda9ecad3743ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/1bda9ecad3743ca","status":"passed","time":{"start":1725669127962,"stop":1725669145211,"duration":17249}},{"uid":"34682eced5f750c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/34682eced5f750c","status":"passed","time":{"start":1725582386132,"stop":1725582422444,"duration":36312}},{"uid":"b7649b9a0502af28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/b7649b9a0502af28","status":"passed","time":{"start":1725570229868,"stop":1725570256567,"duration":26699}},{"uid":"ddc9dc63013e49d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/ddc9dc63013e49d5","status":"passed","time":{"start":1725496047849,"stop":1725496059098,"duration":11249}},{"uid":"dbcfe9cf38af73b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/dbcfe9cf38af73b0","status":"passed","time":{"start":1725431346804,"stop":1725431371048,"duration":24244}},{"uid":"dcf9ad623cebb88a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/dcf9ad623cebb88a","status":"passed","time":{"start":1725409718541,"stop":1725409769819,"duration":51278}},{"uid":"2413a1aa2efaef83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/2413a1aa2efaef83","status":"passed","time":{"start":1725404633671,"stop":1725404657017,"duration":23346}},{"uid":"77eb7349fe80c612","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/77eb7349fe80c612","status":"passed","time":{"start":1725385923098,"stop":1725385942507,"duration":19409}},{"uid":"5f4246cdaababa64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/5f4246cdaababa64","status":"passed","time":{"start":1725348151492,"stop":1725348178223,"duration":26731}},{"uid":"64b02b61cb89b3eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/64b02b61cb89b3eb","status":"passed","time":{"start":1725323338338,"stop":1725323376962,"duration":38624}},{"uid":"223e84fa2427a9fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/223e84fa2427a9fc","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725317275258,"stop":1725317292159,"duration":16901}},{"uid":"81bf492aad59af1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/81bf492aad59af1d","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725313726489,"stop":1725313739366,"duration":12877}},{"uid":"2a4d3344a898bde0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/2a4d3344a898bde0","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725311540030,"stop":1725311577012,"duration":36982}},{"uid":"901bbe8b91d3022e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2060//#testresult/901bbe8b91d3022e","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725309053295,"stop":1725309067334,"duration":14039}},{"uid":"24145e147f976a30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2059//#testresult/24145e147f976a30","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725308928115,"stop":1725308940196,"duration":12081}},{"uid":"5daa70220f86f443","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2054//#testresult/5daa70220f86f443","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1725236789563,"stop":1725236801420,"duration":11857}},{"uid":"ef63525a8b108f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2053//#testresult/ef63525a8b108f2","status":"passed","time":{"start":1725150762774,"stop":1725150781202,"duration":18428}},{"uid":"809ba21cc2e1ddbc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2052//#testresult/809ba21cc2e1ddbc","status":"passed","time":{"start":1725064062996,"stop":1725064090020,"duration":27024}},{"uid":"76caec4a7d9d5db5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2051//#testresult/76caec4a7d9d5db5","status":"passed","time":{"start":1724977867433,"stop":1724977891027,"duration":23594}}]},"tags":[]},"source":"8fa21f5c8ef76ac0.json","parameterValues":["WestBerkshireCouncil"]}