{"uid":"532a284e8e21f311","name":"Validate Council Output [GuildfordCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7920670628eac2b6a4c154f0eb5095c4","time":{"start":1702054397185,"stop":1702054399049,"duration":1864},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f1ff98c4b80>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1ff9427050>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f200d6b04d0>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f1ff98c4b80>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1ff9427050>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f200d6b04d0>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1702054397186,"stop":1702054397186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from GuildfordCouncil using None and the None is set","time":{"start":1702054397186,"stop":1702054399049,"duration":1863},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1206-703"},{"name":"thread","value":"2709-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":66,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":66},"items":[{"uid":"70792362aef1ad45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/70792362aef1ad45","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1702054426539,"stop":1702054427831,"duration":1292}},{"uid":"51c3428510efc88c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/51c3428510efc88c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701998411322,"stop":1701998412451,"duration":1129}},{"uid":"54263ef2f0cf4ce7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/54263ef2f0cf4ce7","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701990398287,"stop":1701990399538,"duration":1251}},{"uid":"8ca7e140ada3ed9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/8ca7e140ada3ed9e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701990362365,"stop":1701990365703,"duration":3338}},{"uid":"5a570be2fc2bd61c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/5a570be2fc2bd61c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701942792445,"stop":1701942794258,"duration":1813}},{"uid":"66b4530a2f30bdd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/66b4530a2f30bdd","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701936518042,"stop":1701936519492,"duration":1450}},{"uid":"b12b9508e79d716d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/b12b9508e79d716d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701936461390,"stop":1701936462471,"duration":1081}},{"uid":"c760df63b574222f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/c760df63b574222f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701911966859,"stop":1701911968248,"duration":1389}},{"uid":"7476efc195c17ab9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/7476efc195c17ab9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701904856865,"stop":1701904862392,"duration":5527}},{"uid":"eac1cc8c37448727","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/eac1cc8c37448727","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701882822024,"stop":1701882823858,"duration":1834}},{"uid":"786884381cd68a75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/786884381cd68a75","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701882561466,"stop":1701882563168,"duration":1702}},{"uid":"2f5bc3968b37445c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/2f5bc3968b37445c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701825551687,"stop":1701825552318,"duration":631}},{"uid":"459fc518c9c8485a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/459fc518c9c8485a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701795825080,"stop":1701795826192,"duration":1112}},{"uid":"5955e59a57e4bf38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/5955e59a57e4bf38","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701795518061,"stop":1701795518801,"duration":740}},{"uid":"846c983f69333de0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1193//#testresult/846c983f69333de0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701758525781,"stop":1701758527246,"duration":1465}},{"uid":"6e3fb1fa601d0295","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1192//#testresult/6e3fb1fa601d0295","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701758500752,"stop":1701758501933,"duration":1181}},{"uid":"99b85749a2bb07bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1191//#testresult/99b85749a2bb07bd","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701739182928,"stop":1701739184367,"duration":1439}},{"uid":"2282575e390ca4c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1187//#testresult/2282575e390ca4c0","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701714341465,"stop":1701714342562,"duration":1097}},{"uid":"e4e102fa4b43fe68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1184//#testresult/e4e102fa4b43fe68","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701652747576,"stop":1701652748755,"duration":1179}},{"uid":"858feecf857706d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1183//#testresult/858feecf857706d8","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701566740699,"stop":1701566743559,"duration":2860}}]},"tags":[]},"source":"532a284e8e21f311.json","parameterValues":["GuildfordCouncil","None","None"]}