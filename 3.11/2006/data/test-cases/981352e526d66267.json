{"uid":"981352e526d66267","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1722817846890,"stop":1722817872575,"duration":25685},"status":"failed","statusMessage":"ValueError: time data 'August' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f3091194540>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3091001c90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'August', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'August' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'August' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f3091194540>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f3091001c90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'August', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'August' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1722817846890,"stop":1722817846890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722817846890,"stop":1722817872575,"duration":25685},"status":"failed","statusMessage":"time data 'August' does not match format '%d %B'","statusTrace":"ValueError: time data 'August' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6fb6c5e9fd0d2283","name":"stdout","source":"6fb6c5e9fd0d2283.txt","type":"text/plain","size":115}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1269-709"},{"name":"thread","value":"2770-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":25,"broken":0,"skipped":0,"passed":64,"unknown":0,"total":89},"items":[{"uid":"75b9eafc2af3201b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/75b9eafc2af3201b","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5623df0246ba <unknown>\n#1 0x5623decf4730 <unknown>\n#2 0x5623ded43d9b <unknown>\n#3 0x5623ded44081 <unknown>\n#4 0x5623ded87cd4 <unknown>\n#5 0x5623ded66a7d <unknown>\n#6 0x5623ded851ca <unknown>\n#7 0x5623ded667f3 <unknown>\n#8 0x5623ded36ec9 <unknown>\n#9 0x5623ded3791e <unknown>\n#10 0x5623defea9eb <unknown>\n#11 0x5623defee972 <unknown>\n#12 0x5623defd7e15 <unknown>\n#13 0x5623defef502 <unknown>\n#14 0x5623defbcd2f <unknown>\n#15 0x5623df013578 <unknown>\n#16 0x5623df013750 <unknown>\n#17 0x5623df02348c <unknown>\n#18 0x7ff355251a94 <unknown>\n#19 0x7ff3552dea34 __clone","time":{"start":1722731169955,"stop":1722731203993,"duration":34038}},{"uid":"a68868c9de868e9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/a68868c9de868e9f","status":"passed","time":{"start":1722644869518,"stop":1722644892597,"duration":23079}},{"uid":"bd6f44f9b57c84e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/bd6f44f9b57c84e9","status":"passed","time":{"start":1722558390185,"stop":1722558404353,"duration":14168}},{"uid":"90cb275cc7f09c12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/90cb275cc7f09c12","status":"passed","time":{"start":1722471846644,"stop":1722471883099,"duration":36455}},{"uid":"6c8e50e35b714ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/6c8e50e35b714ee","status":"passed","time":{"start":1722385516523,"stop":1722385534981,"duration":18458}},{"uid":"40987fdff46aca92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/40987fdff46aca92","status":"passed","time":{"start":1722299096907,"stop":1722299109400,"duration":12493}},{"uid":"ffe442ddbf56401b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/ffe442ddbf56401b","status":"failed","statusDetails":"ValueError: time data 'July' does not match format '%d %B'","time":{"start":1722212666005,"stop":1722212688103,"duration":22098}},{"uid":"57cb5ec935f40e4e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/57cb5ec935f40e4e","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1722126188521,"stop":1722126229084,"duration":40563}},{"uid":"7a2b1a3d3fb6370d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/7a2b1a3d3fb6370d","status":"passed","time":{"start":1722039938224,"stop":1722039956846,"duration":18622}},{"uid":"5f159dbc47faeb04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/5f159dbc47faeb04","status":"passed","time":{"start":1721953591530,"stop":1721953609981,"duration":18451}},{"uid":"4c845de3d59bf7f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/4c845de3d59bf7f8","status":"passed","time":{"start":1721867137275,"stop":1721867151884,"duration":14609}},{"uid":"3d9183999a84dcda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/3d9183999a84dcda","status":"passed","time":{"start":1721780677566,"stop":1721780700745,"duration":23179}},{"uid":"be92cb64144a1d50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/be92cb64144a1d50","status":"passed","time":{"start":1721694231935,"stop":1721694251128,"duration":19193}},{"uid":"c8a278ffe84d02f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/c8a278ffe84d02f8","status":"failed","statusDetails":"ValueError: time data 'July' does not match format '%d %B'","time":{"start":1721607798457,"stop":1721607820512,"duration":22055}},{"uid":"3377d45ccb6ed62d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/3377d45ccb6ed62d","status":"passed","time":{"start":1721521407042,"stop":1721521448003,"duration":40961}},{"uid":"43d8a48e22aeb22f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/43d8a48e22aeb22f","status":"passed","time":{"start":1721435153382,"stop":1721435168808,"duration":15426}},{"uid":"79a20e6b6ba611aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/79a20e6b6ba611aa","status":"passed","time":{"start":1721373084804,"stop":1721373126450,"duration":41646}},{"uid":"bf9d5d90983b4253","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/bf9d5d90983b4253","status":"passed","time":{"start":1721264108826,"stop":1721264126079,"duration":17253}},{"uid":"7a5408e4cfea3628","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/7a5408e4cfea3628","status":"passed","time":{"start":1721177547886,"stop":1721177587514,"duration":39628}},{"uid":"8d83c2d2745a8077","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/8d83c2d2745a8077","status":"passed","time":{"start":1721091135608,"stop":1721091168568,"duration":32960}}]},"tags":[]},"source":"981352e526d66267.json","parameterValues":["WestBerkshireCouncil"]}