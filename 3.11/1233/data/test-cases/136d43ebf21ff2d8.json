{"uid":"136d43ebf21ff2d8","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1702366541925,"stop":1702366542973,"duration":1048},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fe163934680>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe162f11bd0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fe162f11bd0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fe163934680>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe162f11bd0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fe162f11bd0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1702366541925,"stop":1702366541925,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1702366541925,"stop":1702366542971,"duration":1046},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702366542971,"stop":1702366542971,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702366542971,"stop":1702366542973,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az777-825"},{"name":"thread","value":"2855-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":72,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":72},"items":[{"uid":"ce4a0c2b4d3d25d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/ce4a0c2b4d3d25d7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343975833,"stop":1702343976802,"duration":969}},{"uid":"2054ac2bc75cca40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/2054ac2bc75cca40","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257551243,"stop":1702257552380,"duration":1137}},{"uid":"c937b3d6b3980473","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/c937b3d6b3980473","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171418502,"stop":1702171419512,"duration":1010}},{"uid":"f535717cc3405c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/f535717cc3405c0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084686340,"stop":1702084687444,"duration":1104}},{"uid":"ec3ce7f705205063","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/ec3ce7f705205063","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066731787,"stop":1702066732894,"duration":1107}},{"uid":"9da6cbb1b3ef3f15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/9da6cbb1b3ef3f15","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054374555,"stop":1702054376128,"duration":1573}},{"uid":"f5d2be9a1f37c339","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/f5d2be9a1f37c339","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054401415,"stop":1702054402454,"duration":1039}},{"uid":"3d5a1e6a446102f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/3d5a1e6a446102f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998387437,"stop":1701998388668,"duration":1231}},{"uid":"c4423ec232c9a504","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/c4423ec232c9a504","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990377497,"stop":1701990379120,"duration":1623}},{"uid":"59a7717cc8bf2662","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/59a7717cc8bf2662","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990353661,"stop":1701990354766,"duration":1105}},{"uid":"114b255d5188b406","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/114b255d5188b406","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942801856,"stop":1701942803386,"duration":1530}},{"uid":"303a65690352affe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/303a65690352affe","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936489899,"stop":1701936491439,"duration":1540}},{"uid":"4fbd334584713907","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/4fbd334584713907","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936462562,"stop":1701936463788,"duration":1226}},{"uid":"a2682ca1dfd85491","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/a2682ca1dfd85491","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911944172,"stop":1701911946022,"duration":1850}},{"uid":"eb76fff1195199e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/eb76fff1195199e1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904866627,"stop":1701904867762,"duration":1135}},{"uid":"a9aa42988b54048b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/a9aa42988b54048b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882533461,"stop":1701882535099,"duration":1638}},{"uid":"97593f2edff4ba37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/97593f2edff4ba37","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882564253,"stop":1701882565896,"duration":1643}},{"uid":"32800151d91dec86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/32800151d91dec86","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825565685,"stop":1701825566857,"duration":1172}},{"uid":"ed88e4f427c7ffc8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/ed88e4f427c7ffc8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795534914,"stop":1701795535965,"duration":1051}},{"uid":"d9b88a3b8f7ab662","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/d9b88a3b8f7ab662","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795532585,"stop":1701795533616,"duration":1031}}]},"tags":[]},"source":"136d43ebf21ff2d8.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}