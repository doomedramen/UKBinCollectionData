{"uid":"9132fc7a26e610c9","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1703851229066,"stop":1703851230431,"duration":1365},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f26da7e0c20>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f26d99c84d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f26d99c84d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f26da7e0c20>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f26d99c84d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f26d99c84d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1703851229066,"stop":1703851229066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1703851229066,"stop":1703851230429,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703851230429,"stop":1703851230430,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703851230430,"stop":1703851230431,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1382-721"},{"name":"thread","value":"2770-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":36,"broken":0,"skipped":0,"passed":67,"unknown":0,"total":103},"items":[{"uid":"861feefdcc7853eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/861feefdcc7853eb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812160265,"stop":1703812163593,"duration":3328}},{"uid":"4801be7257ec739d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/4801be7257ec739d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756327263,"stop":1703756328713,"duration":1450}},{"uid":"fdc2df123e763cf9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/fdc2df123e763cf9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726288851,"stop":1703726291089,"duration":2238}},{"uid":"1b8f68e2ffc4f46a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/1b8f68e2ffc4f46a","status":"passed","time":{"start":1703717437229,"stop":1703717438884,"duration":1655}},{"uid":"6fcd56a7e85d3be9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/6fcd56a7e85d3be9","status":"passed","time":{"start":1703717406231,"stop":1703717407414,"duration":1183}},{"uid":"64a6cc0f04c7f20f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/64a6cc0f04c7f20f","status":"passed","time":{"start":1703639854838,"stop":1703639857540,"duration":2702}},{"uid":"82ba4b4fcf7ef943","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/82ba4b4fcf7ef943","status":"passed","time":{"start":1703553450722,"stop":1703553453013,"duration":2291}},{"uid":"abce49d969b7ea18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/abce49d969b7ea18","status":"passed","time":{"start":1703541232314,"stop":1703541233996,"duration":1682}},{"uid":"bde064430bcb59bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/bde064430bcb59bf","status":"passed","time":{"start":1703467240637,"stop":1703467242768,"duration":2131}},{"uid":"a48a53fee6d1ded8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/a48a53fee6d1ded8","status":"passed","time":{"start":1703416609218,"stop":1703416611078,"duration":1860}},{"uid":"7d164e0e847bf616","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/7d164e0e847bf616","status":"passed","time":{"start":1703416478764,"stop":1703416480541,"duration":1777}},{"uid":"637226a852b4e348","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/637226a852b4e348","status":"passed","time":{"start":1703381174769,"stop":1703381176094,"duration":1325}},{"uid":"b3a47208a8f1c133","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/b3a47208a8f1c133","status":"passed","time":{"start":1703294185628,"stop":1703294188796,"duration":3168}},{"uid":"974638d91d253bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/974638d91d253bb","status":"passed","time":{"start":1703207925431,"stop":1703207928228,"duration":2797}},{"uid":"b06ce4670b6a25c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/b06ce4670b6a25c2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121578408,"stop":1703121581190,"duration":2782}},{"uid":"87d5c50655af7f66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/87d5c50655af7f66","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034423123,"stop":1703034424810,"duration":1687}},{"uid":"979dad98bcfe8add","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/979dad98bcfe8add","status":"passed","time":{"start":1703025050263,"stop":1703025051883,"duration":1620}},{"uid":"81b42b2646b64145","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/81b42b2646b64145","status":"passed","time":{"start":1703025000579,"stop":1703025002156,"duration":1577}},{"uid":"a1e3ba13330cb62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/a1e3ba13330cb62","status":"passed","time":{"start":1702948830619,"stop":1702948832220,"duration":1601}},{"uid":"c5a564fe39621334","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/c5a564fe39621334","status":"passed","time":{"start":1702862449845,"stop":1702862451588,"duration":1743}}]},"tags":[]},"source":"9132fc7a26e610c9.json","parameterValues":["SouthNorfolkCouncil","None","None"]}