{"uid":"656b17bd2ad291f2","name":"Validate Council Output [GuildfordCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7920670628eac2b6a4c154f0eb5095c4","time":{"start":1701048206457,"stop":1701048208694,"duration":2237},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f203c9caf20>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2028f9d090>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f203d5b7b10>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f203c9caf20>\nrequest = <FixtureRequest for <Function test_scenario_outline[GuildfordCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2028f9d090>, 'council': 'GuildfordCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/GuildfordCouncil.py:45: in parse_data\n    results = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f203d5b7b10>\ns = '*/{\"event\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"eventDef\":{\"descriptor\":\"markup://aura:clientOutOfSync\",\"t\"...tual: MlRqRU5YT3pjWFRNenJranFOMWFjQXlMaWFpdmxPSTZWeEo0bWtiN0hsaXcyNDQuMjAuNC0yLjQxLjQ\",\"exceptionEvent\":true}/*ERROR*/'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: GuildfordCouncil","time":{"start":1701048206458,"stop":1701048206458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from GuildfordCouncil using None and the None is set","time":{"start":1701048206458,"stop":1701048208694,"duration":2236},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-861"},{"name":"thread","value":"2707-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GuildfordCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":31,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":31},"items":[{"uid":"aa61456c79d5e191","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/aa61456c79d5e191","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701036470168,"stop":1701036471424,"duration":1256}},{"uid":"650f2be9b1ebb436","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/650f2be9b1ebb436","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1701036125218,"stop":1701036127546,"duration":2328}},{"uid":"17ccafb5feb73162","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/17ccafb5feb73162","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700961916533,"stop":1700961917849,"duration":1316}},{"uid":"d97a375d51fb2343","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1147//#testresult/d97a375d51fb2343","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700874927110,"stop":1700874928138,"duration":1028}},{"uid":"e83a8ef2438634ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/e83a8ef2438634ce","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700788573419,"stop":1700788575045,"duration":1626}},{"uid":"b5b261bd0e13d4ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1145//#testresult/b5b261bd0e13d4ea","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700702294909,"stop":1700702297995,"duration":3086}},{"uid":"42dab3ae8e4d1834","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/42dab3ae8e4d1834","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700646659297,"stop":1700646660517,"duration":1220}},{"uid":"eb0d256595cee429","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/eb0d256595cee429","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700646408708,"stop":1700646411170,"duration":2462}},{"uid":"29fa5233db9e26c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/29fa5233db9e26c1","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700616046840,"stop":1700616049018,"duration":2178}},{"uid":"f853cc611ce4ad8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/f853cc611ce4ad8b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700529873571,"stop":1700529875434,"duration":1863}},{"uid":"6d3c6fc1f31ddd8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/6d3c6fc1f31ddd8e","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700443177601,"stop":1700443178767,"duration":1166}},{"uid":"f26f19721f61498b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/f26f19721f61498b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700356984654,"stop":1700356986952,"duration":2298}},{"uid":"625abb562dfad1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/625abb562dfad1","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700270261163,"stop":1700270262580,"duration":1417}},{"uid":"8e16c4ac52359b40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/8e16c4ac52359b40","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700183921282,"stop":1700183922621,"duration":1339}},{"uid":"325005d5baf5e234","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/325005d5baf5e234","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700097558908,"stop":1700097560676,"duration":1768}},{"uid":"259d86769fca9c08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/259d86769fca9c08","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1700011069094,"stop":1700011069948,"duration":854}},{"uid":"753dfae8c6332007","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/753dfae8c6332007","status":"failed","statusDetails":"requests.exceptions.ConnectionError: HTTPSConnectionPool(host='my.guildford.gov.uk', port=443): Max retries exceeded with url: /customers/s/sfsites/aura?r=15&other.BinScheduleDisplayCmp.GetBinSchedules=1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f060bc20890>: Failed to resolve 'my.guildford.gov.uk' ([Errno -3] Temporary failure in name resolution)\"))","time":{"start":1699924623930,"stop":1699924633967,"duration":10037}},{"uid":"c4775021d4ceb47c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/c4775021d4ceb47c","status":"failed","statusDetails":"requests.exceptions.ConnectionError: HTTPSConnectionPool(host='my.guildford.gov.uk', port=443): Max retries exceeded with url: /customers/s/sfsites/aura?r=15&other.BinScheduleDisplayCmp.GetBinSchedules=1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f4953b2d950>: Failed to resolve 'my.guildford.gov.uk' ([Errno -3] Temporary failure in name resolution)\"))","time":{"start":1699838279795,"stop":1699838289841,"duration":10046}},{"uid":"d03ebc608d82bc82","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/d03ebc608d82bc82","status":"failed","statusDetails":"requests.exceptions.ConnectionError: HTTPSConnectionPool(host='my.guildford.gov.uk', port=443): Max retries exceeded with url: /customers/s/sfsites/aura?r=15&other.BinScheduleDisplayCmp.GetBinSchedules=1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f44bfac02d0>: Failed to resolve 'my.guildford.gov.uk' ([Errno -3] Temporary failure in name resolution)\"))","time":{"start":1699752059813,"stop":1699752069883,"duration":10070}},{"uid":"8ff247a8b94ac6e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/8ff247a8b94ac6e6","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1699668993052,"stop":1699668996044,"duration":2992}}]},"tags":[]},"source":"656b17bd2ad291f2.json","parameterValues":["GuildfordCouncil","None","None"]}