{"uid":"fce83fb9c01fdd0f","name":"Validate Council Output [CharnwoodBoroughCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7ad090e684a1fa7fb6a8e0f9ef2ec090","time":{"start":1701047886244,"stop":1701047887817,"duration":1573},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f203c9caf20>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2028efc810>, 'council': 'CharnwoodBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f203c9caf20>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2028efc810>, 'council': 'CharnwoodBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1701047886244,"stop":1701047886244,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil using None and the None is set","time":{"start":1701047886245,"stop":1701047887817,"duration":1572},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-861"},{"name":"thread","value":"2707-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":31},"items":[{"uid":"71e6c241ad788286","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/71e6c241ad788286","status":"passed","time":{"start":1701036149231,"stop":1701036151137,"duration":1906}},{"uid":"c523de69d3bee4ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/c523de69d3bee4ab","status":"passed","time":{"start":1701036090688,"stop":1701036091807,"duration":1119}},{"uid":"6e4617588d6acb89","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/6e4617588d6acb89","status":"passed","time":{"start":1700961702894,"stop":1700961704135,"duration":1241}},{"uid":"28d7334d90da4d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1147//#testresult/28d7334d90da4d3","status":"passed","time":{"start":1700874890588,"stop":1700874892284,"duration":1696}},{"uid":"11abf497be5def0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/11abf497be5def0c","status":"passed","time":{"start":1700788551790,"stop":1700788553108,"duration":1318}},{"uid":"b089a30a5c984e27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1145//#testresult/b089a30a5c984e27","status":"passed","time":{"start":1700702255308,"stop":1700702257232,"duration":1924}},{"uid":"f36e2dfe69e07d50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/f36e2dfe69e07d50","status":"passed","time":{"start":1700646341216,"stop":1700646342805,"duration":1589}},{"uid":"9f5e999fcb142ff8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/9f5e999fcb142ff8","status":"passed","time":{"start":1700646386221,"stop":1700646388159,"duration":1938}},{"uid":"15f6aa8851c0f8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/15f6aa8851c0f8a","status":"passed","time":{"start":1700616019330,"stop":1700616022812,"duration":3482}},{"uid":"5c2debb135ba938d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/5c2debb135ba938d","status":"passed","time":{"start":1700529656926,"stop":1700529658959,"duration":2033}},{"uid":"658cbbe834c31952","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/658cbbe834c31952","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1700443141601,"stop":1700443143480,"duration":1879}},{"uid":"8ee263a0d8f52ecd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/8ee263a0d8f52ecd","status":"passed","time":{"start":1700356978753,"stop":1700356980396,"duration":1643}},{"uid":"866bee4403133c83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/866bee4403133c83","status":"passed","time":{"start":1700270280079,"stop":1700270281732,"duration":1653}},{"uid":"6a1226442e2a2eb9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/6a1226442e2a2eb9","status":"passed","time":{"start":1700183886074,"stop":1700183888004,"duration":1930}},{"uid":"5be0fb763d2b2c62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/5be0fb763d2b2c62","status":"passed","time":{"start":1700097531266,"stop":1700097532620,"duration":1354}},{"uid":"eab5b1ecd64d3658","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/eab5b1ecd64d3658","status":"passed","time":{"start":1700011044320,"stop":1700011045925,"duration":1605}},{"uid":"c1adcdb80842e2eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/c1adcdb80842e2eb","status":"passed","time":{"start":1699924593816,"stop":1699924596104,"duration":2288}},{"uid":"3dfcc298cd64da39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/3dfcc298cd64da39","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1699838302416,"stop":1699838304314,"duration":1898}},{"uid":"2920fab7da9cd9f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/2920fab7da9cd9f3","status":"passed","time":{"start":1699752073452,"stop":1699752075521,"duration":2069}},{"uid":"3385a12fd8e06ed2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/3385a12fd8e06ed2","status":"passed","time":{"start":1699668894452,"stop":1699668896350,"duration":1898}}]},"tags":[]},"source":"fce83fb9c01fdd0f.json","parameterValues":["CharnwoodBoroughCouncil","None","None"]}