{"uid":"1d52bbb1ec905f73","name":"Validate Council Output [DoncasterCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"58972b7144b16d304a52e19bd992d607","time":{"start":1708388732380,"stop":1708388754040,"duration":21660},"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fe8bc248860>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe8bb72cb50>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fe8bb89efd0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1708388732, four_weeks = 1710807932\nparams = {'End': '1710807932', 'Start': '1708388732', 'UPRN': '100050768956'}\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bins found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fe8bc248860>\nrequest = <FixtureRequest for <Function test_scenario_outline[DoncasterCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe8bb72cb50>, 'council': 'DoncasterCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DoncasterCouncil.CouncilClass object at 0x7fe8bb89efd0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100050768956', ...}\nbase_url = 'https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar'\nuser_uprn = '100050768956', today = 1708388732, four_weeks = 1710807932\nparams = {'End': '1710807932', 'Start': '1708388732', 'UPRN': '100050768956'}\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # I need to point out that this one gave me a good head scratch. Mainly because I wrote lots\n        # of code to parse the form and all that, then realised this url returns json data... oops.\n        base_url = \"https://www.doncaster.gov.uk/Compass/PremiseDetail/GetCollectionsForCalendar\"\n    \n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Working with epoch times, otherwise known as posix/unix timestamps. The number of weeks\n        # to return can actually be customised in the below timedelta\n        today = math.floor(datetime.today().timestamp())\n        four_weeks = math.floor((datetime.today() + timedelta(days=4 * 7)).timestamp())\n    \n        # For some reason, the actual web form uses a property id that's completely different\n        # from the uprn - luckily this one is easy to find!\n        params = {\n            \"UPRN\": user_uprn,\n            \"Start\": str(today),\n            \"End\": str(four_weeks),\n        }\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(base_url, params=params)\n    \n        # 200 = ok. I got a 500 in testing, so assumed no data for that address\n        if response.status_code != 200:\n>           raise ValueError(\"No bins found for provided UPRN.\")\nE           ValueError: No bins found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/DoncasterCouncil.py:44: ValueError","steps":[{"name":"Given the council: DoncasterCouncil","time":{"start":1708388732380,"stop":1708388732381,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DoncasterCouncil using None and the None is set","time":{"start":1708388732381,"stop":1708388754040,"duration":21659},"status":"failed","statusMessage":"No bins found for provided UPRN.","statusTrace":"ValueError: No bins found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1432-196"},{"name":"thread","value":"2808-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DoncasterCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":199,"unknown":0,"total":201},"items":[{"uid":"e36e75517fba76b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1568//#testresult/e36e75517fba76b7","status":"passed","time":{"start":1708302469591,"stop":1708302471227,"duration":1636}},{"uid":"e466115bffb307cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1567//#testresult/e466115bffb307cc","status":"passed","time":{"start":1708216062484,"stop":1708216063774,"duration":1290}},{"uid":"9ea3d05807454e16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1566//#testresult/9ea3d05807454e16","status":"passed","time":{"start":1708129509017,"stop":1708129510583,"duration":1566}},{"uid":"2d5c169d0f9909b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1563//#testresult/2d5c169d0f9909b7","status":"passed","time":{"start":1708043094423,"stop":1708043095957,"duration":1534}},{"uid":"e1e77d01e689737c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1562//#testresult/e1e77d01e689737c","status":"passed","time":{"start":1707956727002,"stop":1707956728765,"duration":1763}},{"uid":"ece85a0970b33870","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1561//#testresult/ece85a0970b33870","status":"passed","time":{"start":1707870311806,"stop":1707870313435,"duration":1629}},{"uid":"903d4a350ed91d94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1560//#testresult/903d4a350ed91d94","status":"passed","time":{"start":1707783981338,"stop":1707783983084,"duration":1746}},{"uid":"58e3926cc9537f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1559//#testresult/58e3926cc9537f4","status":"passed","time":{"start":1707697612989,"stop":1707697614963,"duration":1974}},{"uid":"f3c56f06a456b800","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1556//#testresult/f3c56f06a456b800","status":"passed","time":{"start":1707611288236,"stop":1707611290860,"duration":2624}},{"uid":"9ca49baf7651be91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1554//#testresult/9ca49baf7651be91","status":"passed","time":{"start":1707524669386,"stop":1707524671801,"duration":2415}},{"uid":"f716fd1c65684e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1553//#testresult/f716fd1c65684e1","status":"passed","time":{"start":1707438299064,"stop":1707438300654,"duration":1590}},{"uid":"ce662ed8d27c0ac1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1552//#testresult/ce662ed8d27c0ac1","status":"passed","time":{"start":1707351925892,"stop":1707351927844,"duration":1952}},{"uid":"b158ef13742113c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1551//#testresult/b158ef13742113c1","status":"passed","time":{"start":1707265452602,"stop":1707265454268,"duration":1666}},{"uid":"d096cf5c563c3f6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1549//#testresult/d096cf5c563c3f6e","status":"passed","time":{"start":1707179131919,"stop":1707179133573,"duration":1654}},{"uid":"a423b4bf76ccf5a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/a423b4bf76ccf5a6","status":"passed","time":{"start":1707092818126,"stop":1707092820130,"duration":2004}},{"uid":"ac5151e7624acfd0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/ac5151e7624acfd0","status":"passed","time":{"start":1707006531511,"stop":1707006533198,"duration":1687}},{"uid":"3a0dbddeb35499a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1545//#testresult/3a0dbddeb35499a4","status":"passed","time":{"start":1706941858454,"stop":1706941860369,"duration":1915}},{"uid":"e09a7a5f49b22475","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1544//#testresult/e09a7a5f49b22475","status":"passed","time":{"start":1706938944955,"stop":1706938946538,"duration":1583}},{"uid":"59a898138d47d23e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1542//#testresult/59a898138d47d23e","status":"passed","time":{"start":1706938423203,"stop":1706938424752,"duration":1549}},{"uid":"7bdef19b831c458a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1541//#testresult/7bdef19b831c458a","status":"passed","time":{"start":1706919964660,"stop":1706919966234,"duration":1574}}]},"tags":[]},"source":"1d52bbb1ec905f73.json","parameterValues":["DoncasterCouncil","None","None"]}