{"uid":"2f4d0489ba22477c","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1704112105018,"stop":1704112106596,"duration":1578},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff312c818a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff312396210>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff312396210>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7ff312c818a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff312396210>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7ff312396210>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1704112105018,"stop":1704112105018,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1704112105019,"stop":1704112106594,"duration":1575},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704112106594,"stop":1704112106594,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704112106594,"stop":1704112106596,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1567-133"},{"name":"thread","value":"2703-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":115,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":115},"items":[{"uid":"a487686aeac69808","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/a487686aeac69808","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111867129,"stop":1704111868699,"duration":1570}},{"uid":"ff8734cac8b79f3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/ff8734cac8b79f3d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111866479,"stop":1704111868199,"duration":1720}},{"uid":"1bfc3cfb73ba18f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/1bfc3cfb73ba18f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111501932,"stop":1704111503167,"duration":1235}},{"uid":"9bf010aa93fbcba4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/9bf010aa93fbcba4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111351031,"stop":1704111352624,"duration":1593}},{"uid":"b88e3fcb6b70f181","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/b88e3fcb6b70f181","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704100020107,"stop":1704100021612,"duration":1505}},{"uid":"68fd8cfa87b3d831","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/68fd8cfa87b3d831","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704072279129,"stop":1704072281086,"duration":1957}},{"uid":"71eb61f1f2010e80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/71eb61f1f2010e80","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704050415938,"stop":1704050418000,"duration":2062}},{"uid":"9b2a50af5483ab0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/9b2a50af5483ab0f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704043921492,"stop":1704043922632,"duration":1140}},{"uid":"159a13f9317d6677","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/159a13f9317d6677","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703985776255,"stop":1703985777963,"duration":1708}},{"uid":"694d2b27420054e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/694d2b27420054e8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703898956432,"stop":1703898957989,"duration":1557}},{"uid":"243b47a764a57862","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/243b47a764a57862","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853489409,"stop":1703853491064,"duration":1655}},{"uid":"19307047c35bf307","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/19307047c35bf307","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851100548,"stop":1703851101763,"duration":1215}},{"uid":"be0b0399b6fe7952","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/be0b0399b6fe7952","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812040592,"stop":1703812041659,"duration":1067}},{"uid":"e4c4ef51c2d89b28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/e4c4ef51c2d89b28","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756197400,"stop":1703756198870,"duration":1470}},{"uid":"7f2fc25a83996b3a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/7f2fc25a83996b3a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726152623,"stop":1703726153683,"duration":1060}},{"uid":"c87016b10a272faf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/c87016b10a272faf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717325862,"stop":1703717327778,"duration":1916}},{"uid":"2f72f9c65d46c74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/2f72f9c65d46c74","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717286608,"stop":1703717287703,"duration":1095}},{"uid":"c4ec7085d5fc74c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/c4ec7085d5fc74c3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639743692,"stop":1703639744759,"duration":1067}},{"uid":"e8d22435bb4e76b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/e8d22435bb4e76b2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553333450,"stop":1703553334485,"duration":1035}},{"uid":"2fea598a8046b95a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/2fea598a8046b95a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541129912,"stop":1703541131056,"duration":1144}}]},"tags":[]},"source":"2f4d0489ba22477c.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}