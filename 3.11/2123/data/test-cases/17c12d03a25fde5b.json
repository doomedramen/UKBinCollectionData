{"uid":"17c12d03a25fde5b","name":"Validate Council Output [MoleValleyDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"47d4fc200fdb123acdd0e48934223e47","time":{"start":1726791524729,"stop":1726791525463,"duration":734},"status":"failed","statusMessage":"ValueError: min() arg is an empty sequence","statusTrace":"fixturefunc = <function scrape_step at 0x7f8d5e1e2660>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f8d5e068f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7f8d5d78ce90>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 33551478, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() arg is an empty sequence\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: min() arg is an empty sequence","statusTrace":"fixturefunc = <function scrape_step at 0x7f8d5e1e2660>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f8d5e068f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7f8d5d78ce90>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 33551478, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() arg is an empty sequence\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","steps":[{"name":"Given the council","time":{"start":1726791524729,"stop":1726791524729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726791524729,"stop":1726791525463,"duration":734},"status":"failed","statusMessage":"min() arg is an empty sequence","statusTrace":"ValueError: min() arg is an empty sequence\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8efa11eed80ea0f","name":"stdout","source":"8efa11eed80ea0f.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az888-540"},{"name":"thread","value":"2757-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MoleValleyDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":136,"unknown":0,"total":146},"items":[{"uid":"7044b0118ef5b9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2122//#testresult/7044b0118ef5b9e","status":"passed","time":{"start":1726705188899,"stop":1726705189876,"duration":977}},{"uid":"5743aa415873eb22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2121//#testresult/5743aa415873eb22","status":"passed","time":{"start":1726618722576,"stop":1726618723419,"duration":843}},{"uid":"d4a0c24deadc0f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2120//#testresult/d4a0c24deadc0f8","status":"passed","time":{"start":1726532314018,"stop":1726532314979,"duration":961}},{"uid":"b36fe908e7c6b67b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2116//#testresult/b36fe908e7c6b67b","status":"passed","time":{"start":1726446059301,"stop":1726446060432,"duration":1131}},{"uid":"6805bed88ae29b7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2115//#testresult/6805bed88ae29b7e","status":"passed","time":{"start":1726359499775,"stop":1726359500480,"duration":705}},{"uid":"adc863767f7823f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2114//#testresult/adc863767f7823f6","status":"passed","time":{"start":1726273213743,"stop":1726273214602,"duration":859}},{"uid":"6bf3f4cc472e4293","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/6bf3f4cc472e4293","status":"passed","time":{"start":1726186782760,"stop":1726186783436,"duration":676}},{"uid":"abc7dcaa7e61b241","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2112//#testresult/abc7dcaa7e61b241","status":"passed","time":{"start":1726100325689,"stop":1726100326787,"duration":1098}},{"uid":"ff4ec2c3704dac0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2111//#testresult/ff4ec2c3704dac0b","status":"passed","time":{"start":1726013938201,"stop":1726013938950,"duration":749}},{"uid":"7d488d5d26f6aea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2109//#testresult/7d488d5d26f6aea","status":"passed","time":{"start":1725955680386,"stop":1725955681116,"duration":730}},{"uid":"695fa90d0576ae8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2107//#testresult/695fa90d0576ae8e","status":"passed","time":{"start":1725927446794,"stop":1725927448032,"duration":1238}},{"uid":"b64fe95c798933da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2095//#testresult/b64fe95c798933da","status":"passed","time":{"start":1725841107175,"stop":1725841107900,"duration":725}},{"uid":"3c0e4e11979c7848","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/3c0e4e11979c7848","status":"passed","time":{"start":1725754643567,"stop":1725754644426,"duration":859}},{"uid":"13bdbb0359cea700","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/13bdbb0359cea700","status":"passed","time":{"start":1725668259667,"stop":1725668260730,"duration":1063}},{"uid":"329ae434f4b26ac2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/329ae434f4b26ac2","status":"passed","time":{"start":1725581883835,"stop":1725581884450,"duration":615}},{"uid":"1f82db22ca7d5215","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/1f82db22ca7d5215","status":"passed","time":{"start":1725569665644,"stop":1725569666381,"duration":737}},{"uid":"32da154652dadee4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/32da154652dadee4","status":"passed","time":{"start":1725495566767,"stop":1725495567477,"duration":710}},{"uid":"48e198c6605dc5c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/48e198c6605dc5c6","status":"passed","time":{"start":1725430549942,"stop":1725430550828,"duration":886}},{"uid":"b212d03997093b1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/b212d03997093b1a","status":"passed","time":{"start":1725409237366,"stop":1725409238437,"duration":1071}},{"uid":"585072e8ba45ac86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/585072e8ba45ac86","status":"passed","time":{"start":1725404098698,"stop":1725404099412,"duration":714}}]},"tags":[]},"source":"17c12d03a25fde5b.json","parameterValues":["MoleValleyDistrictCouncil"]}