{"uid":"6e704435798d235b","name":"Validate Council Output [BradfordMDC-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e271beca538d48f8acffb38754068888","time":{"start":1714782387524,"stop":1714782388809,"duration":1285},"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f1daf5947c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1dae792cd0>, 'council': 'BradfordMDC', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7f1daf3e0c50>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100052235823', ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n             if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                 bin_type = \"General Waste\"\n                 bin_colour = \"Green\"\n                 bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n             elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                 bin_type = \"Recycling Waste\"\n                 bin_colour = \"Grey\"\n                 bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n             else:\n                 raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n             # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n             # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n             bin_date_info = bin_date_text[29:50].lstrip(' ')\n    \n             if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,# + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                #print(bin_date_info)\n                #print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n             else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:85: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: string index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f1daf5947c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BradfordMDC-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1dae792cd0>, 'council': 'BradfordMDC', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BradfordMDC.CouncilClass object at 0x7f1daf3e0c50>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100052235823', ...}\nuser_uprn = '100052235823', cookies = {'COLLECTIONDATES': '100052235823'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'ebd': '0', 'ebp': '30', 'ebz': '1_1713270660323'}\nresponse = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \r\n Powered by Verj.io\r\n www.verj.io\r\n -->\n<head>\n<meta content=\"text/html; char...\":null,\"end\":null},\"scrollClassIdentifiers\":null,\"scrollX\":null,\"scrollY\":null}' id=\"ebDynamic\"></div>\n</body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            \"COLLECTIONDATES\": f\"{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"ebp\": \"30\",\n            \"ebd\": \"0\",\n            \"ebz\": \"1_1713270660323\",\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://onlineforms.bradford.gov.uk/ufs/collectiondates.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # BradfordMDC site has lots of embedded tables, find the table titled 'Your next general/recycling collections are:'\n        for bin in soup.find_all(attrs={\"class\": \"CTID-FHGh1Q77-_\"}):\n             if bin.find_all(attrs={\"class\": \"CTID-62bNngCB-_\"}):\n                 bin_type = \"General Waste\"\n                 bin_colour = \"Green\"\n                 bin_date_text = bin.find(attrs={\"class\": \"CTID-62bNngCB-_\"}).get_text()\n             elif bin.find_all(attrs={\"class\": \"CTID-LHo9iO0y-_\"}):\n                 bin_type = \"Recycling Waste\"\n                 bin_colour = \"Grey\"\n                 bin_date_text = bin.find(attrs={\"class\": \"CTID-LHo9iO0y-_\"}).get_text()\n             else:\n                 raise ValueError(f\"No bin info found in {bin_type_info[0]}\")\n    \n             # Collection Date info is alongside the bin type, we got the whole line in the if/elif above\n             # below strips the text off at the beginning, to get a date, though recycling is a character shorter hence the lstrip\n             bin_date_info = bin_date_text[29:50].lstrip(' ')\n    \n             if contains_date(bin_date_info):\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n                        bin_date_info,# + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\n                #print(bin_date_info)\n                #print(bin_date)\n            # On exceptional collection schedule (e.g. around English Bank Holidays), date will be contained in the second stripped string\n             else:\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(\n>                       bin_date_info[1] + \" \" + datetime.today().strftime(\"%Y\"),\n                        \"%a %b %d %Y\",\n                    )\n                ).strftime(date_format)\nE               IndexError: string index out of range\n\nuk_bin_collection/uk_bin_collection/councils/BradfordMDC.py:85: IndexError","steps":[{"name":"Given the council: BradfordMDC","time":{"start":1714782387524,"stop":1714782387525,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BradfordMDC using None and the None is set","time":{"start":1714782387525,"stop":1714782388809,"duration":1284},"status":"failed","statusMessage":"string index out of range","statusTrace":"IndexError: string index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1019-20"},{"name":"thread","value":"2658-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BradfordMDC"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"13d4981c9ea7523","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1739//#testresult/13d4981c9ea7523","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1714696020793,"stop":1714696021838,"duration":1045}},{"uid":"c740c3467b33d308","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1738//#testresult/c740c3467b33d308","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1714609603596,"stop":1714609604566,"duration":970}},{"uid":"1f6a1247ad3168fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1735//#testresult/1f6a1247ad3168fb","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1714523321082,"stop":1714523322070,"duration":988}},{"uid":"5ade7c6548d5c5ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1734//#testresult/5ade7c6548d5c5ce","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1714436758099,"stop":1714436758967,"duration":868}},{"uid":"e34dedec82cfeecd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1732//#testresult/e34dedec82cfeecd","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1714350555100,"stop":1714350556058,"duration":958}},{"uid":"1847851c9c9f7de8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1727//#testresult/1847851c9c9f7de8","status":"failed","statusDetails":"IndexError: string index out of range","time":{"start":1714301861722,"stop":1714301862839,"duration":1117}},{"uid":"23c8a8d0b30a6b1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1724//#testresult/23c8a8d0b30a6b1e","status":"failed","statusDetails":"ModuleNotFoundError: No module named 'dumper'","time":{"start":1714264245910,"stop":1714264245912,"duration":2}},{"uid":"55f8bbdb4881837c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1722//#testresult/55f8bbdb4881837c","status":"failed","statusDetails":"ModuleNotFoundError: No module named 'dumper'","time":{"start":1714234188270,"stop":1714234188273,"duration":3}},{"uid":"6d704cd4fced9028","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1719//#testresult/6d704cd4fced9028","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 104 column 5 (char 4929)","time":{"start":1714232898345,"stop":1714232898346,"duration":1}}]},"tags":[]},"source":"6e704435798d235b.json","parameterValues":["BradfordMDC","None","None"]}