{"uid":"6686e1ce5ba6bd73","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1702430337555,"stop":1702430339011,"duration":1456},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdd135807c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdd12a79b10>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 13 December\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdd135807c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdd12a79b10>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 13 December\\n              \\n              (In progress) 2023'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1702430337555,"stop":1702430337555,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1702430337555,"stop":1702430339010,"duration":1455},"status":"failed","statusMessage":"time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 13 December\\n              \\n              (In progress) 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az659-878"},{"name":"thread","value":"2781-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":58,"broken":0,"skipped":0,"passed":15,"unknown":0,"total":73},"items":[{"uid":"abe9742b120530c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/abe9742b120530c8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366498103,"stop":1702366498847,"duration":744}},{"uid":"c238c4e2a7d6193c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/c238c4e2a7d6193c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702343976824,"stop":1702343977362,"duration":538}},{"uid":"23f925a8d74b3fac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/23f925a8d74b3fac","status":"passed","time":{"start":1702257552402,"stop":1702257554354,"duration":1952}},{"uid":"e87916db12ca16d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/e87916db12ca16d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171419535,"stop":1702171420263,"duration":728}},{"uid":"b1c054e3866a744a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/b1c054e3866a744a","status":"passed","time":{"start":1702084687467,"stop":1702084689104,"duration":1637}},{"uid":"618185d980d1653c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/618185d980d1653c","status":"passed","time":{"start":1702066732931,"stop":1702066734521,"duration":1590}},{"uid":"5f43010ad55a96ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/5f43010ad55a96ac","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054376150,"stop":1702054377039,"duration":889}},{"uid":"e831eacb0aec524e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/e831eacb0aec524e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054402481,"stop":1702054403072,"duration":591}},{"uid":"aeb27f67f2f7a6fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/aeb27f67f2f7a6fd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998388692,"stop":1701998389513,"duration":821}},{"uid":"92dcbb55388250f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/92dcbb55388250f7","status":"passed","time":{"start":1701990379185,"stop":1701990381159,"duration":1974}},{"uid":"8d34a24a93b086a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/8d34a24a93b086a9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990354823,"stop":1701990355376,"duration":553}},{"uid":"9f36d605c703584f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/9f36d605c703584f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942803409,"stop":1701942804267,"duration":858}},{"uid":"2237c9177f9ad40c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/2237c9177f9ad40c","status":"passed","time":{"start":1701936491496,"stop":1701936493170,"duration":1674}},{"uid":"41451472be4398e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/41451472be4398e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936463811,"stop":1701936464397,"duration":586}},{"uid":"8cbe87b398c06c07","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/8cbe87b398c06c07","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701911946097,"stop":1701911947203,"duration":1106}},{"uid":"f2ee933adee03a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/f2ee933adee03a0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904867786,"stop":1701904868377,"duration":591}},{"uid":"73c7bfd13ce20f87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/73c7bfd13ce20f87","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882535122,"stop":1701882535914,"duration":792}},{"uid":"6e08fb21d5cdeb30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/6e08fb21d5cdeb30","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882565919,"stop":1701882566878,"duration":959}},{"uid":"dd4a0014d8b627e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/dd4a0014d8b627e2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825566880,"stop":1701825567704,"duration":824}},{"uid":"6fb23d0962bce023","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/6fb23d0962bce023","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795535991,"stop":1701795536859,"duration":868}}]},"tags":[]},"source":"6686e1ce5ba6bd73.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}