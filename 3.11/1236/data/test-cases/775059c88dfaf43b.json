{"uid":"775059c88dfaf43b","name":"Validate Council Output [RushmoorCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9e9824bacc749482fde9fb74bc6e375c","time":{"start":1702430402955,"stop":1702430403858,"duration":903},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f6eb21f2ca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[RushmoorCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6eb16adb50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f6eb16adb50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f6eb21f2ca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[RushmoorCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6eb16adb50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f6eb16adb50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: RushmoorCouncil","time":{"start":1702430402955,"stop":1702430402956,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from RushmoorCouncil using None and the None is set","time":{"start":1702430402956,"stop":1702430403856,"duration":900},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1702430403857,"stop":1702430403857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1702430403857,"stop":1702430403858,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az659-878"},{"name":"thread","value":"2772-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"RushmoorCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":73,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":73},"items":[{"uid":"7bfb4f213840cf27","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/7bfb4f213840cf27","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702366537881,"stop":1702366538756,"duration":875}},{"uid":"cb9cbdcb266e73a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/cb9cbdcb266e73a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702344009208,"stop":1702344010069,"duration":861}},{"uid":"b42cbbca9874b589","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/b42cbbca9874b589","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702257592322,"stop":1702257593173,"duration":851}},{"uid":"20fa4330926834b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1228//#testresult/20fa4330926834b7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702171529074,"stop":1702171529966,"duration":892}},{"uid":"270976dcb3f4ff2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1227//#testresult/270976dcb3f4ff2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702084710802,"stop":1702084711695,"duration":893}},{"uid":"306a58d41ce5a03d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1225//#testresult/306a58d41ce5a03d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702066783100,"stop":1702066784015,"duration":915}},{"uid":"d23eec488ccf6c7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1222//#testresult/d23eec488ccf6c7c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054440548,"stop":1702054441913,"duration":1365}},{"uid":"7c08d993595d475f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1223//#testresult/7c08d993595d475f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702054470954,"stop":1702054471811,"duration":857}},{"uid":"fb190bc815af4ed9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1219//#testresult/fb190bc815af4ed9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701998456888,"stop":1701998457781,"duration":893}},{"uid":"3041f8fee77172b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/3041f8fee77172b5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990423468,"stop":1701990424832,"duration":1364}},{"uid":"69c9078cd879b440","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/69c9078cd879b440","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701990388730,"stop":1701990389799,"duration":1069}},{"uid":"41dc6f4e80dafe98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/41dc6f4e80dafe98","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701942848439,"stop":1701942849743,"duration":1304}},{"uid":"586d5658904a2def","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/586d5658904a2def","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936585132,"stop":1701936586282,"duration":1150}},{"uid":"c1a1ebd47e8fbab9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/c1a1ebd47e8fbab9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701936534956,"stop":1701936535837,"duration":881}},{"uid":"63bd097691763f49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/63bd097691763f49","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701912039159,"stop":1701912040614,"duration":1455}},{"uid":"26c65cf85c982028","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/26c65cf85c982028","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701904921676,"stop":1701904922694,"duration":1018}},{"uid":"cf298107eac490c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/cf298107eac490c0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882610687,"stop":1701882611967,"duration":1280}},{"uid":"f43ce9ffa0f8e48d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/f43ce9ffa0f8e48d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882611016,"stop":1701882612401,"duration":1385}},{"uid":"545af6fd1a0b9b46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/545af6fd1a0b9b46","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825605490,"stop":1701825606350,"duration":860}},{"uid":"6e0c8076471c6276","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/6e0c8076471c6276","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795586777,"stop":1701795587679,"duration":902}}]},"tags":[]},"source":"775059c88dfaf43b.json","parameterValues":["RushmoorCouncil","None","None"]}