{"uid":"a7af3678de03c1ad","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1707870444409,"stop":1707870453400,"duration":8991},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 14 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f7e83cd9f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7e82bee990>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 14 February\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 14 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 14 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f7e83cd9f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7e82bee990>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 14 February\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 14 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1707870444409,"stop":1707870444410,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1707870444410,"stop":1707870453400,"duration":8990},"status":"failed","statusMessage":"time data 'Wednesday, 14 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 14 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1016-637"},{"name":"thread","value":"2785-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":145,"broken":0,"skipped":0,"passed":53,"unknown":0,"total":198},"items":[{"uid":"a8e453829ac349a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1560//#testresult/a8e453829ac349a","status":"passed","time":{"start":1707784111263,"stop":1707784120179,"duration":8916}},{"uid":"370b478c36bc04f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1559//#testresult/370b478c36bc04f2","status":"passed","time":{"start":1707697698827,"stop":1707697708688,"duration":9861}},{"uid":"f1d897d45314d900","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1556//#testresult/f1d897d45314d900","status":"passed","time":{"start":1707611364595,"stop":1707611377535,"duration":12940}},{"uid":"15cfb49eb7620ca1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1554//#testresult/15cfb49eb7620ca1","status":"passed","time":{"start":1707524769994,"stop":1707524780391,"duration":10397}},{"uid":"7d82afab5562f998","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1553//#testresult/7d82afab5562f998","status":"passed","time":{"start":1707438374449,"stop":1707438383229,"duration":8780}},{"uid":"223c7e478d7d145a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1552//#testresult/223c7e478d7d145a","status":"passed","time":{"start":1707352028144,"stop":1707352033483,"duration":5339}},{"uid":"7de9b4db30d313a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1551//#testresult/7de9b4db30d313a7","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 7 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1707265532399,"stop":1707265541567,"duration":9168}},{"uid":"b29844502161bdd9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1549//#testresult/b29844502161bdd9","status":"passed","time":{"start":1707179223984,"stop":1707179231031,"duration":7047}},{"uid":"efac96da0349e05d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/efac96da0349e05d","status":"passed","time":{"start":1707092912149,"stop":1707092921916,"duration":9767}},{"uid":"ec4ce4f91c4fda66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/ec4ce4f91c4fda66","status":"passed","time":{"start":1707006674871,"stop":1707006684604,"duration":9733}},{"uid":"37c69b9c35b19e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1545//#testresult/37c69b9c35b19e78","status":"passed","time":{"start":1706941986450,"stop":1706941995247,"duration":8797}},{"uid":"c0b52be338a2bdbd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1544//#testresult/c0b52be338a2bdbd","status":"passed","time":{"start":1706938998134,"stop":1706939009177,"duration":11043}},{"uid":"18123878a22681e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1542//#testresult/18123878a22681e2","status":"passed","time":{"start":1706938479223,"stop":1706938489548,"duration":10325}},{"uid":"87d44634406cbffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1541//#testresult/87d44634406cbffc","status":"passed","time":{"start":1706920061019,"stop":1706920072715,"duration":11696}},{"uid":"d2cd182a4c7ec1f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1540//#testresult/d2cd182a4c7ec1f0","status":"passed","time":{"start":1706833593529,"stop":1706833606277,"duration":12748}},{"uid":"174d59840b47a740","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1538//#testresult/174d59840b47a740","status":"passed","time":{"start":1706747351305,"stop":1706747361173,"duration":9868}},{"uid":"5f6d7a8e89c3a298","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1537//#testresult/5f6d7a8e89c3a298","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1706660902831,"stop":1706660912789,"duration":9958}},{"uid":"8594bf1db2ee9872","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1535//#testresult/8594bf1db2ee9872","status":"passed","time":{"start":1706574400711,"stop":1706574408620,"duration":7909}},{"uid":"3859bfcf3a1d4c4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1534//#testresult/3859bfcf3a1d4c4f","status":"passed","time":{"start":1706488092087,"stop":1706488103229,"duration":11142}},{"uid":"9ad2f175f266c341","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1531//#testresult/9ad2f175f266c341","status":"passed","time":{"start":1706401798983,"stop":1706401807600,"duration":8617}}]},"tags":[]},"source":"a7af3678de03c1ad.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}