{"uid":"5734ecb3110de7e","name":"Validate Council Output [NottinghamCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d4f72ded7db85dcd7cecf3a5b5fd36e6","time":{"start":1727655484512,"stop":1727655486047,"duration":1535},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f951eaf7100>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f951e974f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9532303810>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f951eaf7100>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f951e974f50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9532303810>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council","time":{"start":1727655484514,"stop":1727655484515,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727655484515,"stop":1727655486047,"duration":1532},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f96e3c91950dbdc4","name":"stdout","source":"f96e3c91950dbdc4.txt","type":"text/plain","size":48}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az738-949"},{"name":"thread","value":"2762-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NottinghamCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":144,"unknown":0,"total":156},"items":[{"uid":"ca3fd58705c0a494","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2136//#testresult/ca3fd58705c0a494","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727569130717,"stop":1727569132598,"duration":1881}},{"uid":"772f1cc679d903a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2135//#testresult/772f1cc679d903a5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727482806468,"stop":1727482807930,"duration":1462}},{"uid":"8186186900862ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2131//#testresult/8186186900862ce","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727422717351,"stop":1727422719299,"duration":1948}},{"uid":"bbf6eb77e6666ad4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2130//#testresult/bbf6eb77e6666ad4","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727396450336,"stop":1727396452117,"duration":1781}},{"uid":"cf09f94688ea9acc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2129//#testresult/cf09f94688ea9acc","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727309919300,"stop":1727309920926,"duration":1626}},{"uid":"97cbf1079c6fea23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2128//#testresult/97cbf1079c6fea23","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727223523546,"stop":1727223525009,"duration":1463}},{"uid":"de8150c3f305a2a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2127//#testresult/de8150c3f305a2a7","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727137203268,"stop":1727137205071,"duration":1803}},{"uid":"51e9671a9ac03d8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2126//#testresult/51e9671a9ac03d8f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727050777697,"stop":1727050779221,"duration":1524}},{"uid":"811cc2442300067f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2125//#testresult/811cc2442300067f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1726964443535,"stop":1726964445519,"duration":1984}},{"uid":"9a24c73da5c791d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2124//#testresult/9a24c73da5c791d9","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1726878032339,"stop":1726878033816,"duration":1477}},{"uid":"73760f68947834da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2123//#testresult/73760f68947834da","status":"passed","time":{"start":1726791646774,"stop":1726791651065,"duration":4291}},{"uid":"2d97e958db6573b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2122//#testresult/2d97e958db6573b4","status":"passed","time":{"start":1726705199114,"stop":1726705222479,"duration":23365}},{"uid":"b7db91f147320fce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2121//#testresult/b7db91f147320fce","status":"passed","time":{"start":1726618807772,"stop":1726618811688,"duration":3916}},{"uid":"8c93e48260150636","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2120//#testresult/8c93e48260150636","status":"passed","time":{"start":1726532439347,"stop":1726532444278,"duration":4931}},{"uid":"60465f927884df9e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2116//#testresult/60465f927884df9e","status":"passed","time":{"start":1726446094425,"stop":1726446099299,"duration":4874}},{"uid":"26afd2671bdbdf96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2115//#testresult/26afd2671bdbdf96","status":"passed","time":{"start":1726359533353,"stop":1726359542793,"duration":9440}},{"uid":"29c84fdc1577b009","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2114//#testresult/29c84fdc1577b009","status":"passed","time":{"start":1726273252887,"stop":1726273266437,"duration":13550}},{"uid":"da61797e64c70481","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/da61797e64c70481","status":"passed","time":{"start":1726186791797,"stop":1726186802051,"duration":10254}},{"uid":"7c41e6e30889e604","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2112//#testresult/7c41e6e30889e604","status":"passed","time":{"start":1726100336844,"stop":1726100362680,"duration":25836}},{"uid":"882e237ab897393c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2111//#testresult/882e237ab897393c","status":"passed","time":{"start":1726014035105,"stop":1726014052386,"duration":17281}}]},"tags":[]},"source":"5734ecb3110de7e.json","parameterValues":["NottinghamCityCouncil"]}