{"uid":"de938f41fcde866f","name":"Validate Council Output [BexleyCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b14d94c00a7a02b15ede5862fe9627b6","time":{"start":1716743179659,"stop":1716743263530,"duration":83871},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55a0ff0f2e9a <unknown>\n#1 0x55a0feddc2a1 <unknown>\n#2 0x55a0fee223e8 <unknown>\n#3 0x55a0fee207cf <unknown>\n#4 0x55a0fee4b4b2 <unknown>\n#5 0x55a0fee1ca79 <unknown>\n#6 0x55a0fee4b67e <unknown>\n#7 0x55a0fee6a2cc <unknown>\n#8 0x55a0fee4b253 <unknown>\n#9 0x55a0fee1b1c7 <unknown>\n#10 0x55a0fee1bb3e <unknown>\n#11 0x55a0ff0b92db <unknown>\n#12 0x55a0ff0bd387 <unknown>\n#13 0x55a0ff0a5e0e <unknown>\n#14 0x55a0ff0bde52 <unknown>\n#15 0x55a0ff08a7af <unknown>\n#16 0x55a0ff0e2188 <unknown>\n#17 0x55a0ff0e235b <unknown>\n#18 0x55a0ff0f1fcc <unknown>\n#19 0x7f3a91ac6ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f16c9509300>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f16c9262410>, 'council': 'BexleyCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:81: in parse_data\n    dropdown_input.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f16c9011410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55a0ff0e235b \\\\u003Cunknown>\\\\n#18 0x55a0ff0f1fcc \\\\u003Cunknown>\\\\n#19 0x7f3a91ac6ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.76)\nE       Stacktrace:\nE       #0 0x55a0ff0f2e9a <unknown>\nE       #1 0x55a0feddc2a1 <unknown>\nE       #2 0x55a0fee223e8 <unknown>\nE       #3 0x55a0fee207cf <unknown>\nE       #4 0x55a0fee4b4b2 <unknown>\nE       #5 0x55a0fee1ca79 <unknown>\nE       #6 0x55a0fee4b67e <unknown>\nE       #7 0x55a0fee6a2cc <unknown>\nE       #8 0x55a0fee4b253 <unknown>\nE       #9 0x55a0fee1b1c7 <unknown>\nE       #10 0x55a0fee1bb3e <unknown>\nE       #11 0x55a0ff0b92db <unknown>\nE       #12 0x55a0ff0bd387 <unknown>\nE       #13 0x55a0ff0a5e0e <unknown>\nE       #14 0x55a0ff0bde52 <unknown>\nE       #15 0x55a0ff08a7af <unknown>\nE       #16 0x55a0ff0e2188 <unknown>\nE       #17 0x55a0ff0e235b <unknown>\nE       #18 0x55a0ff0f1fcc <unknown>\nE       #19 0x7f3a91ac6ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55a0ff0f2e9a <unknown>\n#1 0x55a0feddc2a1 <unknown>\n#2 0x55a0fee223e8 <unknown>\n#3 0x55a0fee207cf <unknown>\n#4 0x55a0fee4b4b2 <unknown>\n#5 0x55a0fee1ca79 <unknown>\n#6 0x55a0fee4b67e <unknown>\n#7 0x55a0fee6a2cc <unknown>\n#8 0x55a0fee4b253 <unknown>\n#9 0x55a0fee1b1c7 <unknown>\n#10 0x55a0fee1bb3e <unknown>\n#11 0x55a0ff0b92db <unknown>\n#12 0x55a0ff0bd387 <unknown>\n#13 0x55a0ff0a5e0e <unknown>\n#14 0x55a0ff0bde52 <unknown>\n#15 0x55a0ff08a7af <unknown>\n#16 0x55a0ff0e2188 <unknown>\n#17 0x55a0ff0e235b <unknown>\n#18 0x55a0ff0f1fcc <unknown>\n#19 0x7f3a91ac6ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7f16c9509300>\nrequest = <FixtureRequest for <Function test_scenario_outline[BexleyCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f16c9262410>, 'council': 'BexleyCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BexleyCouncil.py:81: in parse_data\n    dropdown_input.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f16c9011410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55a0ff0e235b \\\\u003Cunknown>\\\\n#18 0x55a0ff0f1fcc \\\\u003Cunknown>\\\\n#19 0x7f3a91ac6ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.76)\nE       Stacktrace:\nE       #0 0x55a0ff0f2e9a <unknown>\nE       #1 0x55a0feddc2a1 <unknown>\nE       #2 0x55a0fee223e8 <unknown>\nE       #3 0x55a0fee207cf <unknown>\nE       #4 0x55a0fee4b4b2 <unknown>\nE       #5 0x55a0fee1ca79 <unknown>\nE       #6 0x55a0fee4b67e <unknown>\nE       #7 0x55a0fee6a2cc <unknown>\nE       #8 0x55a0fee4b253 <unknown>\nE       #9 0x55a0fee1b1c7 <unknown>\nE       #10 0x55a0fee1bb3e <unknown>\nE       #11 0x55a0ff0b92db <unknown>\nE       #12 0x55a0ff0bd387 <unknown>\nE       #13 0x55a0ff0a5e0e <unknown>\nE       #14 0x55a0ff0bde52 <unknown>\nE       #15 0x55a0ff08a7af <unknown>\nE       #16 0x55a0ff0e2188 <unknown>\nE       #17 0x55a0ff0e235b <unknown>\nE       #18 0x55a0ff0f1fcc <unknown>\nE       #19 0x7f3a91ac6ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council: BexleyCouncil","time":{"start":1716743179659,"stop":1716743179660,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BexleyCouncil","time":{"start":1716743179660,"stop":1716743263530,"duration":83870},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55a0ff0f2e9a <unknown>\n#1 0x55a0feddc2a1 <unknown>\n#2 0x55a0fee223e8 <unknown>\n#3 0x55a0fee207cf <unknown>\n#4 0x55a0fee4b4b2 <unknown>\n#5 0x55a0fee1ca79 <unknown>\n#6 0x55a0fee4b67e <unknown>\n#7 0x55a0fee6a2cc <unknown>\n#8 0x55a0fee4b253 <unknown>\n#9 0x55a0fee1b1c7 <unknown>\n#10 0x55a0fee1bb3e <unknown>\n#11 0x55a0ff0b92db <unknown>\n#12 0x55a0ff0bd387 <unknown>\n#13 0x55a0ff0a5e0e <unknown>\n#14 0x55a0ff0bde52 <unknown>\n#15 0x55a0ff08a7af <unknown>\n#16 0x55a0ff0e2188 <unknown>\n#17 0x55a0ff0e235b <unknown>\n#18 0x55a0ff0f1fcc <unknown>\n#19 0x7f3a91ac6ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55a0ff0f2e9a <unknown>\n#1 0x55a0feddc2a1 <unknown>\n#2 0x55a0fee223e8 <unknown>\n#3 0x55a0fee207cf <unknown>\n#4 0x55a0fee4b4b2 <unknown>\n#5 0x55a0fee1ca79 <unknown>\n#6 0x55a0fee4b67e <unknown>\n#7 0x55a0fee6a2cc <unknown>\n#8 0x55a0fee4b253 <unknown>\n#9 0x55a0fee1b1c7 <unknown>\n#10 0x55a0fee1bb3e <unknown>\n#11 0x55a0ff0b92db <unknown>\n#12 0x55a0ff0bd387 <unknown>\n#13 0x55a0ff0a5e0e <unknown>\n#14 0x55a0ff0bde52 <unknown>\n#15 0x55a0ff08a7af <unknown>\n#16 0x55a0ff0e2188 <unknown>\n#17 0x55a0ff0e235b <unknown>\n#18 0x55a0ff0f1fcc <unknown>\n#19 0x7f3a91ac6ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"93638695e421b55d","name":"stdout","source":"93638695e421b55d.txt","type":"text/plain","size":690}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az570-22"},{"name":"thread","value":"2845-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BexleyCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":128,"broken":0,"skipped":0,"passed":68,"unknown":0,"total":196},"items":[{"uid":"27b5a57b087342b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1871//#testresult/27b5a57b087342b1","status":"passed","time":{"start":1716709788528,"stop":1716709837773,"duration":49245}},{"uid":"1a63d2dd4ab08006","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1866//#testresult/1a63d2dd4ab08006","status":"passed","time":{"start":1716705103025,"stop":1716705139552,"duration":36527}},{"uid":"afb73257c330b97a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1865//#testresult/afb73257c330b97a","status":"passed","time":{"start":1716683443725,"stop":1716683486604,"duration":42879}},{"uid":"d4a6d1a74daf3da2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1863//#testresult/d4a6d1a74daf3da2","status":"passed","time":{"start":1716624826030,"stop":1716624867977,"duration":41947}},{"uid":"cd91c9953019bfa4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1862//#testresult/cd91c9953019bfa4","status":"passed","time":{"start":1716596796287,"stop":1716596818983,"duration":22696}},{"uid":"2fbcde15dad7fac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1856//#testresult/2fbcde15dad7fac9","status":"passed","time":{"start":1716510471323,"stop":1716510505654,"duration":34331}},{"uid":"f5c5868dbd043038","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1855//#testresult/f5c5868dbd043038","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56433bd02e9a <unknown>\n#1 0x56433b9ec45c <unknown>\n#2 0x56433ba385b5 <unknown>\n#3 0x56433ba38671 <unknown>\n#4 0x56433ba7cf14 <unknown>\n#5 0x56433ba5b4dd <unknown>\n#6 0x56433ba7a2cc <unknown>\n#7 0x56433ba5b253 <unknown>\n#8 0x56433ba2b1c7 <unknown>\n#9 0x56433ba2bb3e <unknown>\n#10 0x56433bcc92db <unknown>\n#11 0x56433bccd387 <unknown>\n#12 0x56433bcb5e0e <unknown>\n#13 0x56433bccde52 <unknown>\n#14 0x56433bc9a7af <unknown>\n#15 0x56433bcf2188 <unknown>\n#16 0x56433bcf235b <unknown>\n#17 0x56433bd01fcc <unknown>\n#18 0x7f45ed728ac3 <unknown>","time":{"start":1716424101541,"stop":1716424199042,"duration":97501}},{"uid":"54fd4225a622bf79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1854//#testresult/54fd4225a622bf79","status":"passed","time":{"start":1716337622594,"stop":1716337638436,"duration":15842}},{"uid":"13287f31bae48b9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1853//#testresult/13287f31bae48b9f","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5567bdf94eca <unknown>\n#1 0x5567bdc7e45c <unknown>\n#2 0x5567bdcca5b5 <unknown>\n#3 0x5567bdcca671 <unknown>\n#4 0x5567bdd0ef14 <unknown>\n#5 0x5567bdced4dd <unknown>\n#6 0x5567bdd0c2cc <unknown>\n#7 0x5567bdced253 <unknown>\n#8 0x5567bdcbd1c7 <unknown>\n#9 0x5567bdcbdb3e <unknown>\n#10 0x5567bdf5b30b <unknown>\n#11 0x5567bdf5f3b7 <unknown>\n#12 0x5567bdf47e3e <unknown>\n#13 0x5567bdf5fe82 <unknown>\n#14 0x5567bdf2c7df <unknown>\n#15 0x5567bdf841b8 <unknown>\n#16 0x5567bdf8438b <unknown>\n#17 0x5567bdf93ffc <unknown>\n#18 0x7fb9e605cac3 <unknown>","time":{"start":1716251263438,"stop":1716251357917,"duration":94479}},{"uid":"643d619fefa0718f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1852//#testresult/643d619fefa0718f","status":"passed","time":{"start":1716164874108,"stop":1716164910226,"duration":36118}},{"uid":"1a6045999e26a1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1851//#testresult/1a6045999e26a1d","status":"passed","time":{"start":1716154854430,"stop":1716154886542,"duration":32112}},{"uid":"94a99f381ac33deb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1849//#testresult/94a99f381ac33deb","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5645240b7eca <unknown>\n#1 0x564523da145c <unknown>\n#2 0x564523ded5b5 <unknown>\n#3 0x564523ded671 <unknown>\n#4 0x564523e31f14 <unknown>\n#5 0x564523e104dd <unknown>\n#6 0x564523e2f2cc <unknown>\n#7 0x564523e10253 <unknown>\n#8 0x564523de01c7 <unknown>\n#9 0x564523de0b3e <unknown>\n#10 0x56452407e30b <unknown>\n#11 0x5645240823b7 <unknown>\n#12 0x56452406ae3e <unknown>\n#13 0x564524082e82 <unknown>\n#14 0x56452404f7df <unknown>\n#15 0x5645240a71b8 <unknown>\n#16 0x5645240a738b <unknown>\n#17 0x5645240b6ffc <unknown>\n#18 0x7f1cbffe5ac3 <unknown>","time":{"start":1716152331994,"stop":1716152408755,"duration":76761}},{"uid":"67cd04bfe472d5f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1846//#testresult/67cd04bfe472d5f7","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559be517deca <unknown>\n#1 0x559be4e6745c <unknown>\n#2 0x559be4eb35b5 <unknown>\n#3 0x559be4eb3671 <unknown>\n#4 0x559be4ef7f14 <unknown>\n#5 0x559be4ed64dd <unknown>\n#6 0x559be4ef52cc <unknown>\n#7 0x559be4ed6253 <unknown>\n#8 0x559be4ea61c7 <unknown>\n#9 0x559be4ea6b3e <unknown>\n#10 0x559be514430b <unknown>\n#11 0x559be51483b7 <unknown>\n#12 0x559be5130e3e <unknown>\n#13 0x559be5148e82 <unknown>\n#14 0x559be51157df <unknown>\n#15 0x559be516d1b8 <unknown>\n#16 0x559be516d38b <unknown>\n#17 0x559be517cffc <unknown>\n#18 0x7f6163d59ac3 <unknown>","time":{"start":1716078605143,"stop":1716078708176,"duration":103033}},{"uid":"84104907dfc98122","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1842//#testresult/84104907dfc98122","status":"passed","time":{"start":1715992036359,"stop":1715992058176,"duration":21817}},{"uid":"feeaa0c5284c7718","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1839//#testresult/feeaa0c5284c7718","status":"passed","time":{"start":1715983171230,"stop":1715983208526,"duration":37296}},{"uid":"d6126908b11671b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1834//#testresult/d6126908b11671b7","status":"passed","time":{"start":1715973607943,"stop":1715973637279,"duration":29336}},{"uid":"f5f05e0afd1ee1ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1110//#testresult/f5f05e0afd1ee1ba","status":"failed","statusDetails":"ValueError: Error parsing API. Please check your email is correct and registered on the @Home app.","time":{"start":1699147182647,"stop":1699147183269,"duration":622}},{"uid":"3c75bd967b44d7cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1107//#testresult/3c75bd967b44d7cc","status":"failed","statusDetails":"ValueError: Error parsing API. Please check your email is correct and registered on the @Home app.","time":{"start":1699101483265,"stop":1699101483782,"duration":517}},{"uid":"39275b89712ff6df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/39275b89712ff6df","status":"failed","statusDetails":"ValueError: Error parsing API. Please check your email is correct and registered on the @Home app.","time":{"start":1699060437919,"stop":1699060438327,"duration":408}},{"uid":"7dae10dcd78ccfe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/7dae10dcd78ccfe6","status":"failed","statusDetails":"ValueError: Error parsing API. Please check your email is correct and registered on the @Home app.","time":{"start":1699007576438,"stop":1699007576996,"duration":558}}]},"tags":[]},"source":"de938f41fcde866f.json","parameterValues":["BexleyCouncil"]}