{"uid":"9de4735a0ed487cc","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1720831781726,"stop":1720831923709,"duration":141983},"status":"failed","statusMessage":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fddd892eac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fdde4356c50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 1st August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fddd892eac0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fdde4356c50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 1st August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1720831781726,"stop":1720831781726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720831781726,"stop":1720831923709,"duration":141983},"status":"failed","statusMessage":"time data 'Thursday 1st August' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1aee5d85b6c2996","name":"log","source":"1aee5d85b6c2996.txt","type":"text/plain","size":132},{"uid":"fa76443ae2df5ce5","name":"stdout","source":"fa76443ae2df5ce5.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az573-34"},{"name":"thread","value":"2667-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":41},"items":[{"uid":"53bf6eb49082a6a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1979//#testresult/53bf6eb49082a6a5","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720745425058,"stop":1720745435468,"duration":10410}},{"uid":"46fc1a71001b7e33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1978//#testresult/46fc1a71001b7e33","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720659110264,"stop":1720659124331,"duration":14067}},{"uid":"a8b34b35ed26f07f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1977//#testresult/a8b34b35ed26f07f","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720572666425,"stop":1720572692488,"duration":26063}},{"uid":"c845dd0ab7edf463","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1976//#testresult/c845dd0ab7edf463","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720485898588,"stop":1720485905904,"duration":7316}},{"uid":"466e3591970d853d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1975//#testresult/466e3591970d853d","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720399495744,"stop":1720399636924,"duration":141180}},{"uid":"b7a598c1be9e9efd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1971//#testresult/b7a598c1be9e9efd","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720313281688,"stop":1720313297969,"duration":16281}},{"uid":"ebb9df9c419740a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1970//#testresult/ebb9df9c419740a5","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720226752238,"stop":1720226763095,"duration":10857}},{"uid":"66ecee348064b41","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1969//#testresult/66ecee348064b41","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720140131686,"stop":1720140155727,"duration":24041}},{"uid":"c7c9785c7ea86937","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/c7c9785c7ea86937","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1720053659221,"stop":1720053804278,"duration":145057}},{"uid":"2f3ad3d914398122","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/2f3ad3d914398122","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719967235714,"stop":1719967378951,"duration":143237}},{"uid":"3cbe31c3872020a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1966//#testresult/3cbe31c3872020a5","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719880983147,"stop":1719880997581,"duration":14434}},{"uid":"e11bedbc15ff68d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1965//#testresult/e11bedbc15ff68d","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719795033296,"stop":1719795046642,"duration":13346}},{"uid":"2fe326309c2ddf88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1964//#testresult/2fe326309c2ddf88","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719708542801,"stop":1719708555302,"duration":12501}},{"uid":"c8d1065fac0d2f0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1962//#testresult/c8d1065fac0d2f0c","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719621639918,"stop":1719621782003,"duration":142085}},{"uid":"70d9d1708b091910","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1958//#testresult/70d9d1708b091910","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719535199544,"stop":1719535347720,"duration":148176}},{"uid":"2d7cd1a618f95265","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1954//#testresult/2d7cd1a618f95265","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719362735689,"stop":1719362744993,"duration":9304}},{"uid":"17f955464194f60c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/17f955464194f60c","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719276268565,"stop":1719276281508,"duration":12943}},{"uid":"70e084afde4be5f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/70e084afde4be5f2","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719189989222,"stop":1719190001742,"duration":12520}},{"uid":"d0c0f6ffb6649190","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/d0c0f6ffb6649190","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719103558591,"stop":1719103576104,"duration":17513}},{"uid":"a21798fdfd7fa94f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/a21798fdfd7fa94f","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1719017127021,"stop":1719017147104,"duration":20083}}]},"tags":[]},"source":"9de4735a0ed487cc.json","parameterValues":["UttlesfordDistrictCouncil"]}