{"uid":"3d62b46a72f4fd95","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1697418918125,"stop":1697418921184,"duration":3059},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe16bd49760>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe1623538d0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe16bd49760>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fe1623538d0>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1697418918125,"stop":1697418918126,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1697418918126,"stop":1697418921184,"duration":3058},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az570-444"},{"name":"thread","value":"2121-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":112,"unknown":0,"total":128},"items":[{"uid":"59d81d06f519be38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/59d81d06f519be38","status":"passed","time":{"start":1697403113402,"stop":1697403114758,"duration":1356}},{"uid":"c56d667baed0ecfa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/c56d667baed0ecfa","status":"passed","time":{"start":1697399679701,"stop":1697399681636,"duration":1935}},{"uid":"a800f843609a5082","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/994//#testresult/a800f843609a5082","status":"passed","time":{"start":1697366931670,"stop":1697366933786,"duration":2116}},{"uid":"57b61baf1267e216","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/993//#testresult/57b61baf1267e216","status":"passed","time":{"start":1697366881068,"stop":1697366882484,"duration":1416}},{"uid":"cdff54143f9be91c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/992//#testresult/cdff54143f9be91c","status":"passed","time":{"start":1697332751410,"stop":1697332753245,"duration":1835}},{"uid":"d10aec8befdcae17","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/988//#testresult/d10aec8befdcae17","status":"passed","time":{"start":1697245912046,"stop":1697245913900,"duration":1854}},{"uid":"8304fdd8317bf3e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/986//#testresult/8304fdd8317bf3e2","status":"passed","time":{"start":1697159752622,"stop":1697159754591,"duration":1969}},{"uid":"e0b4b29b7c6e9fbc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/985//#testresult/e0b4b29b7c6e9fbc","status":"passed","time":{"start":1697073099025,"stop":1697073100931,"duration":1906}},{"uid":"2316812b8f8a1991","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/984//#testresult/2316812b8f8a1991","status":"passed","time":{"start":1697052846624,"stop":1697052848216,"duration":1592}},{"uid":"cfc0f9d519367d9d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/981//#testresult/cfc0f9d519367d9d","status":"passed","time":{"start":1697050690532,"stop":1697050692820,"duration":2288}},{"uid":"529b6884470dcdfe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/978//#testresult/529b6884470dcdfe","status":"passed","time":{"start":1696986799536,"stop":1696986800972,"duration":1436}},{"uid":"358d3124e602ec4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/977//#testresult/358d3124e602ec4b","status":"passed","time":{"start":1696900388101,"stop":1696900390244,"duration":2143}},{"uid":"4f2fa5808bc1c206","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/976//#testresult/4f2fa5808bc1c206","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1696814031369,"stop":1696814033697,"duration":2328}},{"uid":"49b07ae6ec2afa5e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/975//#testresult/49b07ae6ec2afa5e","status":"passed","time":{"start":1696727904705,"stop":1696727906735,"duration":2030}},{"uid":"42a817f1e2fb5b58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/974//#testresult/42a817f1e2fb5b58","status":"passed","time":{"start":1696641161124,"stop":1696641163022,"duration":1898}},{"uid":"38ae57a8eb69b1fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/973//#testresult/38ae57a8eb69b1fb","status":"passed","time":{"start":1696554826343,"stop":1696554827822,"duration":1479}},{"uid":"70668580cb3d0d43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/972//#testresult/70668580cb3d0d43","status":"passed","time":{"start":1696468426025,"stop":1696468427729,"duration":1704}},{"uid":"a26e89ecd0decfd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/971//#testresult/a26e89ecd0decfd7","status":"passed","time":{"start":1696382134219,"stop":1696382136092,"duration":1873}},{"uid":"41b1a07ff7c90e30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/970//#testresult/41b1a07ff7c90e30","status":"passed","time":{"start":1696366192596,"stop":1696366194691,"duration":2095}},{"uid":"f49e1144aa4634fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/969//#testresult/f49e1144aa4634fd","status":"passed","time":{"start":1696295653522,"stop":1696295654816,"duration":1294}}]},"tags":[]},"source":"3d62b46a72f4fd95.json","parameterValues":["CharnwoodBoroughCouncil"]}