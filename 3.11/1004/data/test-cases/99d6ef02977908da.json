{"uid":"99d6ef02977908da","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1697418973739,"stop":1697418975459,"duration":1720},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f284cedb740>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f283ed26d90>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f284cedb740>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f283ed26d90>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1697418973740,"stop":1697418973740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1697418973740,"stop":1697418975459,"duration":1719},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az570-444"},{"name":"thread","value":"2118-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":120,"unknown":0,"total":128},"items":[{"uid":"ad425dce5781ac8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/ad425dce5781ac8c","status":"passed","time":{"start":1697403158500,"stop":1697403159071,"duration":571}},{"uid":"efa58a94c8023b93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/efa58a94c8023b93","status":"passed","time":{"start":1697399728664,"stop":1697399729550,"duration":886}},{"uid":"4e7218228b5e5f43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/994//#testresult/4e7218228b5e5f43","status":"passed","time":{"start":1697366988947,"stop":1697366989811,"duration":864}},{"uid":"d1b1b50b639c96ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/993//#testresult/d1b1b50b639c96ad","status":"passed","time":{"start":1697366926823,"stop":1697366927756,"duration":933}},{"uid":"1e0cfcc736ae4492","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/992//#testresult/1e0cfcc736ae4492","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697332808996,"stop":1697332811090,"duration":2094}},{"uid":"335e74e89e2cddfd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/988//#testresult/335e74e89e2cddfd","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1697245968797,"stop":1697245970360,"duration":1563}},{"uid":"299ea198143f2896","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/986//#testresult/299ea198143f2896","status":"passed","time":{"start":1697159814797,"stop":1697159815661,"duration":864}},{"uid":"cc8d1224b9de7c4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/985//#testresult/cc8d1224b9de7c4a","status":"passed","time":{"start":1697073165287,"stop":1697073166183,"duration":896}},{"uid":"fc0d655aae0196da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/984//#testresult/fc0d655aae0196da","status":"passed","time":{"start":1697052889821,"stop":1697052890383,"duration":562}},{"uid":"87a640c2ae9102c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/981//#testresult/87a640c2ae9102c0","status":"passed","time":{"start":1697050744660,"stop":1697050745535,"duration":875}},{"uid":"2132a935acd14319","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/978//#testresult/2132a935acd14319","status":"passed","time":{"start":1696986843671,"stop":1696986844893,"duration":1222}},{"uid":"de439f25f7fcf2e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/977//#testresult/de439f25f7fcf2e8","status":"passed","time":{"start":1696900440767,"stop":1696900441963,"duration":1196}},{"uid":"e5a1a6d27a361a15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/976//#testresult/e5a1a6d27a361a15","status":"passed","time":{"start":1696814083754,"stop":1696814084643,"duration":889}},{"uid":"1942e7d8a148f481","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/975//#testresult/1942e7d8a148f481","status":"passed","time":{"start":1696727958262,"stop":1696727959112,"duration":850}},{"uid":"d6b446c46a54ea82","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/974//#testresult/d6b446c46a54ea82","status":"passed","time":{"start":1696641225046,"stop":1696641226202,"duration":1156}},{"uid":"54a5a11d976eb42b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/973//#testresult/54a5a11d976eb42b","status":"passed","time":{"start":1696554881429,"stop":1696554882398,"duration":969}},{"uid":"e0dac34276279542","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/972//#testresult/e0dac34276279542","status":"passed","time":{"start":1696468471480,"stop":1696468472321,"duration":841}},{"uid":"cc7708c02189c85b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/971//#testresult/cc7708c02189c85b","status":"passed","time":{"start":1696382186283,"stop":1696382187021,"duration":738}},{"uid":"b97f829a888fe01c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/970//#testresult/b97f829a888fe01c","status":"passed","time":{"start":1696366248904,"stop":1696366249941,"duration":1037}},{"uid":"fd916e0b156bb63c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/969//#testresult/fd916e0b156bb63c","status":"passed","time":{"start":1696295715563,"stop":1696295716209,"duration":646}}]},"tags":[]},"source":"99d6ef02977908da.json","parameterValues":["KingstonUponThamesCouncil"]}