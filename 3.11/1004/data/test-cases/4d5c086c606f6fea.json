{"uid":"4d5c086c606f6fea","name":"Validate Council Output [HighPeakCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f014a970b405df22a91c3a1e6926ba51","time":{"start":1697418964033,"stop":1697418971342,"duration":7309},"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f284cf01a80>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f283ecd7510>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f283ecd7510>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False is True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f284cf01a80>\nrequest = <FixtureRequest for <Function test_scenario_outline[HighPeakCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f283ecd7510>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:87: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f283ecd7510>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"{context.council}.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert schema_result is True\nE           assert False is True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:83: AssertionError","steps":[{"name":"Given the council: HighPeakCouncil","time":{"start":1697418964033,"stop":1697418964034,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from HighPeakCouncil","time":{"start":1697418964034,"stop":1697418971338,"duration":7304},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1697418971338,"stop":1697418971338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1697418971338,"stop":1697418971342,"duration":4},"status":"failed","statusMessage":"assert False is True","statusTrace":"AssertionError: assert False is True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az570-444"},{"name":"thread","value":"2118-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HighPeakCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":109,"unknown":0,"total":128},"items":[{"uid":"9338b924c72fdad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1001//#testresult/9338b924c72fdad6","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697403150569,"stop":1697403157418,"duration":6849}},{"uid":"c9bf42e54e369c28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/998//#testresult/c9bf42e54e369c28","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697399718169,"stop":1697399726972,"duration":8803}},{"uid":"27a103fc76c1df72","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/994//#testresult/27a103fc76c1df72","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697366978461,"stop":1697366987304,"duration":8843}},{"uid":"eb95165884003575","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/993//#testresult/eb95165884003575","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697366917553,"stop":1697366925416,"duration":7863}},{"uid":"af2cc90e70dcb412","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/992//#testresult/af2cc90e70dcb412","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697332797627,"stop":1697332806523,"duration":8896}},{"uid":"b2b2d911b0694260","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/988//#testresult/b2b2d911b0694260","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697245959872,"stop":1697245967532,"duration":7660}},{"uid":"4581129667494d4e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/986//#testresult/4581129667494d4e","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697159806003,"stop":1697159813333,"duration":7330}},{"uid":"f0e9ae208e9b10cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/985//#testresult/f0e9ae208e9b10cf","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697073155031,"stop":1697073163557,"duration":8526}},{"uid":"8cf244725db4bce3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/984//#testresult/8cf244725db4bce3","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697052881216,"stop":1697052888566,"duration":7350}},{"uid":"c400b3a1239aa5e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/981//#testresult/c400b3a1239aa5e3","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1697050732206,"stop":1697050743003,"duration":10797}},{"uid":"abec2da3e08b5e4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/978//#testresult/abec2da3e08b5e4b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1696986835908,"stop":1696986842356,"duration":6448}},{"uid":"50b0bfc33dcca42a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/977//#testresult/50b0bfc33dcca42a","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1696900430605,"stop":1696900439105,"duration":8500}},{"uid":"f569546877ff0d14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/976//#testresult/f569546877ff0d14","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1696814073571,"stop":1696814081948,"duration":8377}},{"uid":"8e884e5b0f3ba3cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/975//#testresult/8e884e5b0f3ba3cf","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1696727949571,"stop":1696727956945,"duration":7374}},{"uid":"b88377f15acf2fac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/974//#testresult/b88377f15acf2fac","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1696641210169,"stop":1696641223039,"duration":12870}},{"uid":"b5790e19f314819c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/973//#testresult/b5790e19f314819c","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1696554873331,"stop":1696554880251,"duration":6920}},{"uid":"4afa32030a75733f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/972//#testresult/4afa32030a75733f","status":"passed","time":{"start":1696468463674,"stop":1696468470287,"duration":6613}},{"uid":"e46fab7284f53f32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/971//#testresult/e46fab7284f53f32","status":"passed","time":{"start":1696382176597,"stop":1696382184036,"duration":7439}},{"uid":"f6165d7015efdd73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/970//#testresult/f6165d7015efdd73","status":"passed","time":{"start":1696366238695,"stop":1696366247162,"duration":8467}},{"uid":"a5c943236b4f02d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/969//#testresult/a5c943236b4f02d6","status":"passed","time":{"start":1696295707955,"stop":1696295714409,"duration":6454}}]},"tags":[]},"source":"4d5c086c606f6fea.json","parameterValues":["HighPeakCouncil"]}