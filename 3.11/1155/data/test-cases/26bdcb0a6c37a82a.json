{"uid":"26bdcb0a6c37a82a","name":"Validate Council Output [MertonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a067692419696058d026d9aab0da27d0","time":{"start":1701134377686,"stop":1701134379953,"duration":2267},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f47512449a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f473d8ead50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f473d8ead50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f47512449a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f473d8ead50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f473d8ead50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1701134377687,"stop":1701134377687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from MertonCouncil using None and the None is set","time":{"start":1701134377687,"stop":1701134379950,"duration":2263},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701134379950,"stop":1701134379950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701134379950,"stop":1701134379953,"duration":3},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1242-782"},{"name":"thread","value":"2740-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":32,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":32},"items":[{"uid":"60fb1d263c4341ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1152//#testresult/60fb1d263c4341ae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701047930345,"stop":1701047932473,"duration":2128}},{"uid":"33bd1c671be14eff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/33bd1c671be14eff","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036208696,"stop":1701036210092,"duration":1396}},{"uid":"215f8bd703fbdacc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/215f8bd703fbdacc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036175686,"stop":1701036177567,"duration":1881}},{"uid":"96dda609d151c833","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/96dda609d151c833","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961748770,"stop":1700961750207,"duration":1437}},{"uid":"c1cb000dea065cba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1147//#testresult/c1cb000dea065cba","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700874962232,"stop":1700875019981,"duration":57749}},{"uid":"3f81a37ec1b36f8b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/3f81a37ec1b36f8b","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1700788576318,"stop":1700788620544,"duration":44226}},{"uid":"d360ae7fa4318c99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1145//#testresult/d360ae7fa4318c99","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702296180,"stop":1700702301309,"duration":5129}},{"uid":"635d7cff743a2d83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/635d7cff743a2d83","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646379277,"stop":1700646385289,"duration":6012}},{"uid":"d68f7338c79fa477","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/d68f7338c79fa477","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646423907,"stop":1700646430080,"duration":6173}},{"uid":"5f2f57693008cc80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/5f2f57693008cc80","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616074789,"stop":1700616076467,"duration":1678}},{"uid":"bd82f71aaf141a0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/bd82f71aaf141a0f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529701357,"stop":1700529703168,"duration":1811}},{"uid":"e2eb749373a959fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/e2eb749373a959fa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443324865,"stop":1700443330222,"duration":5357}},{"uid":"1b74c0d01d2ca970","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/1b74c0d01d2ca970","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357004483,"stop":1700357010216,"duration":5733}},{"uid":"38b8b4e9a380985e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/38b8b4e9a380985e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270281387,"stop":1700270287485,"duration":6098}},{"uid":"41b7f2dc8fe50c0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/41b7f2dc8fe50c0b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700183914925,"stop":1700183920453,"duration":5528}},{"uid":"f16785753193bab6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/f16785753193bab6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097579640,"stop":1700097581176,"duration":1536}},{"uid":"140231ac629c1efa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/140231ac629c1efa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011139161,"stop":1700011141020,"duration":1859}},{"uid":"2dbdcfc72273fdce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/2dbdcfc72273fdce","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924901494,"stop":1699924907771,"duration":6277}},{"uid":"9ebacf9838896a4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/9ebacf9838896a4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838293070,"stop":1699838294762,"duration":1692}},{"uid":"e9425240f72309ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/e9425240f72309ab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752078238,"stop":1699752080108,"duration":1870}}]},"tags":[]},"source":"26bdcb0a6c37a82a.json","parameterValues":["MertonCouncil","None","None"]}