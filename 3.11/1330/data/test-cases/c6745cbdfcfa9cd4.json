{"uid":"c6745cbdfcfa9cd4","name":"Validate Council Output [NorthWestLeicestershire-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"636da600d3c2f6211f4c406b74efac78","time":{"start":1704100026029,"stop":1704100031354,"duration":5325},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa31d2dd300>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa31c07edd0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:75: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa31d2dd300>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa31c07edd0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:75: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: NorthWestLeicestershire","time":{"start":1704100026029,"stop":1704100026030,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NorthWestLeicestershire using local and the http://selenium:4444 is set","time":{"start":1704100026030,"stop":1704100031354,"duration":5324},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %dth %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-38"},{"name":"thread","value":"2733-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthWestLeicestershire"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":54,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":56},"items":[{"uid":"93fd57b73e6eba32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/93fd57b73e6eba32","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %dth %b'","time":{"start":1704072367458,"stop":1704072371487,"duration":4029}},{"uid":"850ed8e1271c5b81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/850ed8e1271c5b81","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1704050525017,"stop":1704050530225,"duration":5208}},{"uid":"d59a7e5beb17d621","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/d59a7e5beb17d621","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1704043952450,"stop":1704043956554,"duration":4104}},{"uid":"9f2c467007363661","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/9f2c467007363661","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703985883947,"stop":1703985888624,"duration":4677}},{"uid":"c4dc5225f9c5215c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/c4dc5225f9c5215c","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703899053292,"stop":1703899057986,"duration":4694}},{"uid":"e28cf0f552836a22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/e28cf0f552836a22","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703853552526,"stop":1703853556786,"duration":4260}},{"uid":"40b927ff24ea8aa4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/40b927ff24ea8aa4","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703851239990,"stop":1703851244387,"duration":4397}},{"uid":"bc1fb1c8cf2ed630","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/bc1fb1c8cf2ed630","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703812124205,"stop":1703812128256,"duration":4051}},{"uid":"60cb11c3ebf4c1f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/60cb11c3ebf4c1f0","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703756250051,"stop":1703756254973,"duration":4922}},{"uid":"cc815b2d8de8115d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/cc815b2d8de8115d","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703726232077,"stop":1703726235780,"duration":3703}},{"uid":"7bcfbd1abf33cd76","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/7bcfbd1abf33cd76","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703717381841,"stop":1703717385967,"duration":4126}},{"uid":"f2484e89e4cabe5d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/f2484e89e4cabe5d","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703717338503,"stop":1703717342757,"duration":4254}},{"uid":"1eec19606a10bad1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/1eec19606a10bad1","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703639883208,"stop":1703639887078,"duration":3870}},{"uid":"89717b53070570a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/89717b53070570a6","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703553420210,"stop":1703553424301,"duration":4091}},{"uid":"ea17c4f098c7729c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/ea17c4f098c7729c","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703541185828,"stop":1703541190335,"duration":4507}},{"uid":"bce440acd55d18c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/bce440acd55d18c2","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703467155917,"stop":1703467159790,"duration":3873}},{"uid":"80c27ba579ead10","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/80c27ba579ead10","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703416474776,"stop":1703416479526,"duration":4750}},{"uid":"9316a8c79e21ea3c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/9316a8c79e21ea3c","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703416441018,"stop":1703416445999,"duration":4981}},{"uid":"13aa88c466394fd5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/13aa88c466394fd5","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703381107746,"stop":1703381112081,"duration":4335}},{"uid":"6a0e9c1b7dd91366","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/6a0e9c1b7dd91366","status":"failed","statusDetails":"ValueError: time data 'Tue 2nd Jan' does not match format '%a %dth %b'","time":{"start":1703294136846,"stop":1703294141758,"duration":4912}}]},"tags":[]},"source":"c6745cbdfcfa9cd4.json","parameterValues":["NorthWestLeicestershire","local","http://selenium:4444"]}