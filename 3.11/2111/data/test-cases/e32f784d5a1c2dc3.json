{"uid":"e32f784d5a1c2dc3","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1726013750283,"stop":1726013863742,"duration":113459},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe2961451c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe295fd3650>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe2961451c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe295fd3650>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1726013750283,"stop":1726013750283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726013750284,"stop":1726013863742,"duration":113458},"status":"failed","statusMessage":"time data 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 11 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"380578396340c1f7","name":"stdout","source":"380578396340c1f7.txt","type":"text/plain","size":210}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az777-136"},{"name":"thread","value":"2748-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":45,"broken":0,"skipped":0,"passed":271,"unknown":0,"total":316},"items":[{"uid":"4e6a401c2fb61934","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2109//#testresult/4e6a401c2fb61934","status":"passed","time":{"start":1725955547571,"stop":1725955609473,"duration":61902}},{"uid":"11c10cc0041c906b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2107//#testresult/11c10cc0041c906b","status":"passed","time":{"start":1725927212830,"stop":1725927255164,"duration":42334}},{"uid":"dfa942d543ab6ddf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2095//#testresult/dfa942d543ab6ddf","status":"passed","time":{"start":1725840607832,"stop":1725840854122,"duration":246290}},{"uid":"936e631038853d4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/936e631038853d4b","status":"passed","time":{"start":1725754134874,"stop":1725754381961,"duration":247087}},{"uid":"d8f362cc0457644","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/d8f362cc0457644","status":"passed","time":{"start":1725667817535,"stop":1725668014397,"duration":196862}},{"uid":"404924f291734edb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/404924f291734edb","status":"passed","time":{"start":1725581361072,"stop":1725581625136,"duration":264064}},{"uid":"20d0e62d881aa4af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/20d0e62d881aa4af","status":"passed","time":{"start":1725569496809,"stop":1725569519216,"duration":22407}},{"uid":"284e06543354aa25","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/284e06543354aa25","status":"passed","time":{"start":1725495236902,"stop":1725495364390,"duration":127488}},{"uid":"17156100adcc887e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/17156100adcc887e","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1725430102320,"stop":1725430353411,"duration":251091}},{"uid":"fb722ef3666142a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/fb722ef3666142a","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 4 September\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1725408968333,"stop":1725409017861,"duration":49528}},{"uid":"d589c0fb348d9375","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/d589c0fb348d9375","status":"passed","time":{"start":1725403967094,"stop":1725403997541,"duration":30447}},{"uid":"cfa7203603467c22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/cfa7203603467c22","status":"passed","time":{"start":1725384651393,"stop":1725384915164,"duration":263771}},{"uid":"9bf7c5d93e6ce127","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/9bf7c5d93e6ce127","status":"passed","time":{"start":1725346862055,"stop":1725347158929,"duration":296874}},{"uid":"d7e4bc0e25059139","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/d7e4bc0e25059139","status":"passed","time":{"start":1725322463131,"stop":1725322505772,"duration":42641}},{"uid":"9483036ddd5bbd15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/9483036ddd5bbd15","status":"passed","time":{"start":1725316038703,"stop":1725316323251,"duration":284548}},{"uid":"bc194c0d04ce155c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/bc194c0d04ce155c","status":"passed","time":{"start":1725312763611,"stop":1725313007627,"duration":244016}},{"uid":"8b3fa05d7b4b208c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/8b3fa05d7b4b208c","status":"passed","time":{"start":1725310605215,"stop":1725310846534,"duration":241319}},{"uid":"9c1ba44c27719f04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2060//#testresult/9c1ba44c27719f04","status":"passed","time":{"start":1725307850046,"stop":1725308101010,"duration":250964}},{"uid":"1d63d81b693615fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2059//#testresult/1d63d81b693615fc","status":"passed","time":{"start":1725307733092,"stop":1725307975496,"duration":242404}},{"uid":"10b39df333a707cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2054//#testresult/10b39df333a707cd","status":"passed","time":{"start":1725236007787,"stop":1725236025779,"duration":17992}}]},"tags":[]},"source":"e32f784d5a1c2dc3.json","parameterValues":["KingstonUponThamesCouncil"]}