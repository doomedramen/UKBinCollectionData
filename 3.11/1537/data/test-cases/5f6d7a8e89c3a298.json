{"uid":"5f6d7a8e89c3a298","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1706660902831,"stop":1706660912789,"duration":9958},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdf15674d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdf146fdd10>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 31 January\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdf15674d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdf146fdd10>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 31 January\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1706660902831,"stop":1706660902831,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1706660902831,"stop":1706660912789,"duration":9958},"status":"failed","statusMessage":"time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 31 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az773-977"},{"name":"thread","value":"2766-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":143,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":181},"items":[{"uid":"8594bf1db2ee9872","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1535//#testresult/8594bf1db2ee9872","status":"passed","time":{"start":1706574400711,"stop":1706574408620,"duration":7909}},{"uid":"3859bfcf3a1d4c4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1534//#testresult/3859bfcf3a1d4c4f","status":"passed","time":{"start":1706488092087,"stop":1706488103229,"duration":11142}},{"uid":"9ad2f175f266c341","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1531//#testresult/9ad2f175f266c341","status":"passed","time":{"start":1706401798983,"stop":1706401807600,"duration":8617}},{"uid":"3b6cc9b468d06955","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1529//#testresult/3b6cc9b468d06955","status":"passed","time":{"start":1706315208003,"stop":1706315221074,"duration":13071}},{"uid":"c97aac4449959fe4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1528//#testresult/c97aac4449959fe4","status":"passed","time":{"start":1706228851194,"stop":1706228859386,"duration":8192}},{"uid":"8392d4a20581e5ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1523//#testresult/8392d4a20581e5ff","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55e0ef11ef83 <unknown>\n#1 0x55e0eedd7cf7 <unknown>\n#2 0x55e0eee2799e <unknown>\n#3 0x55e0eee27aa1 <unknown>\n#4 0x55e0eee72d64 <unknown>\n#5 0x55e0eee510dd <unknown>\n#6 0x55e0eee70006 <unknown>\n#7 0x55e0eee50e53 <unknown>\n#8 0x55e0eee18dd4 <unknown>\n#9 0x55e0eee1a1de <unknown>\n#10 0x55e0ef0e3531 <unknown>\n#11 0x55e0ef0e7455 <unknown>\n#12 0x55e0ef0cff55 <unknown>\n#13 0x55e0ef0e80ef <unknown>\n#14 0x55e0ef0b399f <unknown>\n#15 0x55e0ef10c008 <unknown>\n#16 0x55e0ef10c1d7 <unknown>\n#17 0x55e0ef11e124 <unknown>\n#18 0x7fbe0d894ac3 <unknown>","time":{"start":1706142589187,"stop":1706142608087,"duration":18900}},{"uid":"9d0aa23d5d944039","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1522//#testresult/9d0aa23d5d944039","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 24 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1706056156536,"stop":1706056166456,"duration":9920}},{"uid":"de223c2f6160ae80","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1521//#testresult/de223c2f6160ae80","status":"passed","time":{"start":1705969748522,"stop":1705969759176,"duration":10654}},{"uid":"355bf71abfa158dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1520//#testresult/355bf71abfa158dc","status":"passed","time":{"start":1705883406901,"stop":1705883417087,"duration":10186}},{"uid":"4f82955e3ef9c042","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1519//#testresult/4f82955e3ef9c042","status":"passed","time":{"start":1705797174759,"stop":1705797184286,"duration":9527}},{"uid":"2ce6df6e40efbf0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1515//#testresult/2ce6df6e40efbf0c","status":"passed","time":{"start":1705710488033,"stop":1705710493038,"duration":5005}},{"uid":"724e40e4d6c72a63","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1511//#testresult/724e40e4d6c72a63","status":"passed","time":{"start":1705624118205,"stop":1705624126864,"duration":8659}},{"uid":"19eb06d7aeee6ec4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1505//#testresult/19eb06d7aeee6ec4","status":"passed","time":{"start":1705537708171,"stop":1705537715359,"duration":7188}},{"uid":"9b7cc64ec6beb026","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1500//#testresult/9b7cc64ec6beb026","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 17 January\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1705451303173,"stop":1705451312063,"duration":8890}},{"uid":"f1795347a9558854","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1499//#testresult/f1795347a9558854","status":"passed","time":{"start":1705364925898,"stop":1705364934969,"duration":9071}},{"uid":"8a3a0a7951cb9e9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1492//#testresult/8a3a0a7951cb9e9b","status":"passed","time":{"start":1705295645046,"stop":1705295660099,"duration":15053}},{"uid":"768af1df43f8f671","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1491//#testresult/768af1df43f8f671","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705295134430,"stop":1705295135436,"duration":1006}},{"uid":"7aec933e7c65ac8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1490//#testresult/7aec933e7c65ac8","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705278539511,"stop":1705278540189,"duration":678}},{"uid":"1cc058007f58b7d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1485//#testresult/1cc058007f58b7d6","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705192200214,"stop":1705192200795,"duration":581}},{"uid":"37758942162e35e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1484//#testresult/37758942162e35e3","status":"failed","statusDetails":"TypeError: create_webdriver() missing 1 required positional argument: 'user_agent'","time":{"start":1705105718016,"stop":1705105719056,"duration":1040}}]},"tags":[]},"source":"5f6d7a8e89c3a298.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}