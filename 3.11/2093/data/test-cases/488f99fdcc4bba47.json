{"uid":"488f99fdcc4bba47","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1725754625755,"stop":1725754627388,"duration":1633},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f97638bb9c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f9763749110>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f9762c43e10>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f97638bb9c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f9763749110>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f9762c43e10>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1725754625755,"stop":1725754625755,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1725754625756,"stop":1725754627388,"duration":1632},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d7be7b25a71927c3","name":"stdout","source":"d7be7b25a71927c3.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az768-351"},{"name":"thread","value":"2802-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":135,"broken":0,"skipped":0,"passed":176,"unknown":0,"total":311},"items":[{"uid":"e4efc071573aa7cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/e4efc071573aa7cc","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725668252429,"stop":1725668254217,"duration":1788}},{"uid":"fa120545e692d79d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/fa120545e692d79d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725581867957,"stop":1725581869511,"duration":1554}},{"uid":"e78095e718667f52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/e78095e718667f52","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725569698988,"stop":1725569700386,"duration":1398}},{"uid":"124f61cdd48eab18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/124f61cdd48eab18","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725495516423,"stop":1725495518071,"duration":1648}},{"uid":"de5f0bed43f722b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/de5f0bed43f722b8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725430582740,"stop":1725430584252,"duration":1512}},{"uid":"ee915ec87686c5f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/ee915ec87686c5f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725409165221,"stop":1725409167043,"duration":1822}},{"uid":"c5f5a6de6ff9387e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/c5f5a6de6ff9387e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725404163700,"stop":1725404165163,"duration":1463}},{"uid":"ea5b2c3e081e0ab1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/ea5b2c3e081e0ab1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725385142017,"stop":1725385143614,"duration":1597}},{"uid":"57e218ccc6704ea1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/57e218ccc6704ea1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725347398017,"stop":1725347399907,"duration":1890}},{"uid":"277a4e06d8a918f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/277a4e06d8a918f0","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725322500071,"stop":1725322501948,"duration":1877}},{"uid":"bc0636922ed0a75d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2068//#testresult/bc0636922ed0a75d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725316496581,"stop":1725316498180,"duration":1599}},{"uid":"e41533d33616c9fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2066//#testresult/e41533d33616c9fc","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725313231255,"stop":1725313233102,"duration":1847}},{"uid":"3e077acdb545a68b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2064//#testresult/3e077acdb545a68b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725311071964,"stop":1725311073783,"duration":1819}},{"uid":"718e1844f19505e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2060//#testresult/718e1844f19505e5","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725308270950,"stop":1725308271685,"duration":735}},{"uid":"12c0b2492d3a1b55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2059//#testresult/12c0b2492d3a1b55","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725308219027,"stop":1725308219936,"duration":909}},{"uid":"54e37e499fade179","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2054//#testresult/54e37e499fade179","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725236160707,"stop":1725236161524,"duration":817}},{"uid":"5b7ba08d69a58f95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2053//#testresult/5b7ba08d69a58f95","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725149866323,"stop":1725149867124,"duration":801}},{"uid":"30fcd2abc4d290dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2052//#testresult/30fcd2abc4d290dc","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1725063267326,"stop":1725063267969,"duration":643}},{"uid":"678a82274054c30c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2051//#testresult/678a82274054c30c","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724976936913,"stop":1724976937567,"duration":654}},{"uid":"45709529492dabd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2049//#testresult/45709529492dabd8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1724890406363,"stop":1724890407717,"duration":1354}}]},"tags":[]},"source":"488f99fdcc4bba47.json","parameterValues":["GlasgowCityCouncil"]}