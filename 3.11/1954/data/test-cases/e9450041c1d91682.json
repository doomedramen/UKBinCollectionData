{"uid":"e9450041c1d91682","name":"Validate Council Output [WiltshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aedb86c72e1849b4679ed1a7ee37cf59","time":{"start":1719362795730,"stop":1719362796186,"duration":456},"status":"failed","statusMessage":"SystemError: Error retrieving data! Please try again or raise an issue on GitHub!","statusTrace":"fixturefunc = <function scrape_step at 0x7f539502a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5394eb2f10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <WiltshireCouncil.CouncilClass object at 0x7f539452af90>, page = ''\nkwargs = {'council_module_str': 'WiltshireCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nthis_month = 6, this_year = 2024, one_month = 7, two_month = 8\nmonths = [6, 7, 8], user_postcode = 'SN83TE', user_uprn = '100120982570'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        # Define some months to get from the calendar\n        this_month = datetime.now().month\n        this_year = datetime.now().year\n        one_month = this_month + 1\n        two_month = this_month + 2\n        months = [this_month, one_month, two_month]\n    \n        # Get and check the postcode and UPRN values\n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Some data for the request\n        cookies = {\n            \"ARRAffinity\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n            \"ARRAffinitySameSite\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n        }\n        headers = {\n            \"Accept\": \"*/*\",\n            \"Accept-Language\": \"en-GB,en;q=0.9\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n            # 'Cookie': 'ARRAffinity=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737; ARRAffinitySameSite=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737',\n            \"Origin\": \"https://ilambassadorformsprod.azurewebsites.net\",\n            \"Pragma\": \"no-cache\",\n            \"Referer\": \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/index\",\n            \"Sec-Fetch-Dest\": \"empty\",\n            \"Sec-Fetch-Mode\": \"cors\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 OPR/98.0.0.0\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"sec-ch-ua\": '\"Chromium\";v=\"112\", \"Not_A Brand\";v=\"24\", \"Opera GX\";v=\"98\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n        }\n    \n        collections = []\n    \n        # For each of the months we defined\n        for cal_month in months:\n            # If we're in Nov/Dec, the calculations won't work since its just adding one, so roll it\n            # to next year correctly\n            if cal_month == 13:\n                cal_month = 1\n                cal_year = this_year + 1\n            elif cal_month == 14:\n                cal_month = 2\n                cal_year = this_year + 1\n            else:\n                cal_year = this_year\n    \n            # Data for the calendar\n            data = {\n                \"Month\": cal_month,\n                \"Year\": cal_year,\n                \"Postcode\": user_postcode,\n                \"Uprn\": user_uprn,\n            }\n    \n            # Send it all as a POST\n            response = requests.post(\n                \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/collectionlist\",\n                cookies=cookies,\n                headers=headers,\n                data=data,\n            )\n    \n            # If we don't get a HTTP200, throw an error\n            if response.status_code != 200:\n>               raise SystemError(\n                    \"Error retrieving data! Please try again or raise an issue on GitHub!\"\n                )\nE               SystemError: Error retrieving data! Please try again or raise an issue on GitHub!\n\nuk_bin_collection/uk_bin_collection/councils/WiltshireCouncil.py:87: SystemError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"SystemError: Error retrieving data! Please try again or raise an issue on GitHub!","statusTrace":"fixturefunc = <function scrape_step at 0x7f539502a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5394eb2f10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <WiltshireCouncil.CouncilClass object at 0x7f539452af90>, page = ''\nkwargs = {'council_module_str': 'WiltshireCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nthis_month = 6, this_year = 2024, one_month = 7, two_month = 8\nmonths = [6, 7, 8], user_postcode = 'SN83TE', user_uprn = '100120982570'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        # Define some months to get from the calendar\n        this_month = datetime.now().month\n        this_year = datetime.now().year\n        one_month = this_month + 1\n        two_month = this_month + 2\n        months = [this_month, one_month, two_month]\n    \n        # Get and check the postcode and UPRN values\n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # Some data for the request\n        cookies = {\n            \"ARRAffinity\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n            \"ARRAffinitySameSite\": \"c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737\",\n        }\n        headers = {\n            \"Accept\": \"*/*\",\n            \"Accept-Language\": \"en-GB,en;q=0.9\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n            # 'Cookie': 'ARRAffinity=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737; ARRAffinitySameSite=c5a9db7fe43cef907f06528c3d34a997365656f757206fbdf34193e2c3b6f737',\n            \"Origin\": \"https://ilambassadorformsprod.azurewebsites.net\",\n            \"Pragma\": \"no-cache\",\n            \"Referer\": \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/index\",\n            \"Sec-Fetch-Dest\": \"empty\",\n            \"Sec-Fetch-Mode\": \"cors\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 OPR/98.0.0.0\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"sec-ch-ua\": '\"Chromium\";v=\"112\", \"Not_A Brand\";v=\"24\", \"Opera GX\";v=\"98\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n        }\n    \n        collections = []\n    \n        # For each of the months we defined\n        for cal_month in months:\n            # If we're in Nov/Dec, the calculations won't work since its just adding one, so roll it\n            # to next year correctly\n            if cal_month == 13:\n                cal_month = 1\n                cal_year = this_year + 1\n            elif cal_month == 14:\n                cal_month = 2\n                cal_year = this_year + 1\n            else:\n                cal_year = this_year\n    \n            # Data for the calendar\n            data = {\n                \"Month\": cal_month,\n                \"Year\": cal_year,\n                \"Postcode\": user_postcode,\n                \"Uprn\": user_uprn,\n            }\n    \n            # Send it all as a POST\n            response = requests.post(\n                \"https://ilambassadorformsprod.azurewebsites.net/wastecollectiondays/collectionlist\",\n                cookies=cookies,\n                headers=headers,\n                data=data,\n            )\n    \n            # If we don't get a HTTP200, throw an error\n            if response.status_code != 200:\n>               raise SystemError(\n                    \"Error retrieving data! Please try again or raise an issue on GitHub!\"\n                )\nE               SystemError: Error retrieving data! Please try again or raise an issue on GitHub!\n\nuk_bin_collection/uk_bin_collection/councils/WiltshireCouncil.py:87: SystemError","steps":[{"name":"Given the council","time":{"start":1719362795730,"stop":1719362795731,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719362795731,"stop":1719362796186,"duration":455},"status":"failed","statusMessage":"Error retrieving data! Please try again or raise an issue on GitHub!","statusTrace":"SystemError: Error retrieving data! Please try again or raise an issue on GitHub!\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"85ff356b14becc6a","name":"stdout","source":"85ff356b14becc6a.txt","type":"text/plain","size":43}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1532-796"},{"name":"thread","value":"2781-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":212,"unknown":0,"total":228},"items":[{"uid":"981263ba249801c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/981263ba249801c2","status":"passed","time":{"start":1719276353844,"stop":1719276357294,"duration":3450}},{"uid":"918c13677aabd64c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/918c13677aabd64c","status":"passed","time":{"start":1719190055126,"stop":1719190057914,"duration":2788}},{"uid":"5f29d50fe4755546","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/5f29d50fe4755546","status":"passed","time":{"start":1719103613597,"stop":1719103615967,"duration":2370}},{"uid":"42587d09a4361d48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/42587d09a4361d48","status":"passed","time":{"start":1719017172204,"stop":1719017174530,"duration":2326}},{"uid":"fd704e96e05ce15f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/fd704e96e05ce15f","status":"passed","time":{"start":1718930824775,"stop":1718930827092,"duration":2317}},{"uid":"1b26df1477ec170b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/1b26df1477ec170b","status":"passed","time":{"start":1718844298729,"stop":1718844300991,"duration":2262}},{"uid":"dcd3ed5185fa750a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/dcd3ed5185fa750a","status":"passed","time":{"start":1718758035004,"stop":1718758038205,"duration":3201}},{"uid":"879842a43da64ecb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/879842a43da64ecb","status":"passed","time":{"start":1718671590820,"stop":1718671593239,"duration":2419}},{"uid":"54fe0f6392230ead","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1945//#testresult/54fe0f6392230ead","status":"passed","time":{"start":1718585385756,"stop":1718585389099,"duration":3343}},{"uid":"315cb5b51e41d83b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/315cb5b51e41d83b","status":"passed","time":{"start":1718498812205,"stop":1718498815418,"duration":3213}},{"uid":"cfb850dee03d69d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/cfb850dee03d69d8","status":"passed","time":{"start":1718412392709,"stop":1718412395530,"duration":2821}},{"uid":"2816256a23dc75de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/2816256a23dc75de","status":"passed","time":{"start":1718325875272,"stop":1718325877719,"duration":2447}},{"uid":"1cb04dfd5051ba82","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1939//#testresult/1cb04dfd5051ba82","status":"passed","time":{"start":1718239566931,"stop":1718239569438,"duration":2507}},{"uid":"31db7c54f6bb2aaf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1938//#testresult/31db7c54f6bb2aaf","status":"passed","time":{"start":1718153169110,"stop":1718153171775,"duration":2665}},{"uid":"57f5ca3d149cbb2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1937//#testresult/57f5ca3d149cbb2c","status":"passed","time":{"start":1718066924926,"stop":1718066928221,"duration":3295}},{"uid":"e173a579e556838a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1936//#testresult/e173a579e556838a","status":"passed","time":{"start":1717980327733,"stop":1717980330184,"duration":2451}},{"uid":"74efe6e0bc2fea88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1934//#testresult/74efe6e0bc2fea88","status":"passed","time":{"start":1717893965368,"stop":1717893967654,"duration":2286}},{"uid":"2ccf206e88e0e2ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1933//#testresult/2ccf206e88e0e2ee","status":"passed","time":{"start":1717807680974,"stop":1717807683593,"duration":2619}},{"uid":"331551fadc3cc2cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1932//#testresult/331551fadc3cc2cf","status":"passed","time":{"start":1717721175525,"stop":1717721178052,"duration":2527}},{"uid":"3a2adff50c6383bf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1927//#testresult/3a2adff50c6383bf","status":"passed","time":{"start":1717634658198,"stop":1717634660508,"duration":2310}}]},"tags":[]},"source":"e9450041c1d91682.json","parameterValues":["WiltshireCouncil"]}