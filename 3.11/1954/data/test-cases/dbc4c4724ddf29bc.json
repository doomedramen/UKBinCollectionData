{"uid":"dbc4c4724ddf29bc","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1719361789914,"stop":1719361798597,"duration":8683},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f539502a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5394eb2f10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f539502a020>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5394eb2f10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1719361789914,"stop":1719361789915,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1719361789915,"stop":1719361798597,"duration":8682},"status":"failed","statusMessage":"time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 26 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"74850981426f9f26","name":"stdout","source":"74850981426f9f26.txt","type":"text/plain","size":205}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1532-796"},{"name":"thread","value":"2781-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":32,"broken":0,"skipped":0,"passed":197,"unknown":0,"total":229},"items":[{"uid":"2ea2b7c74331e221","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/2ea2b7c74331e221","status":"passed","time":{"start":1719275698229,"stop":1719275796303,"duration":98074}},{"uid":"cbf326d4d39ac004","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/cbf326d4d39ac004","status":"passed","time":{"start":1719189103108,"stop":1719189179363,"duration":76255}},{"uid":"b9aefb92d1467aab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/b9aefb92d1467aab","status":"passed","time":{"start":1719103026350,"stop":1719103048484,"duration":22134}},{"uid":"97baa9bb7d56402a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/97baa9bb7d56402a","status":"passed","time":{"start":1719016177350,"stop":1719016247625,"duration":70275}},{"uid":"bfcffa36fcc7929c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/bfcffa36fcc7929c","status":"passed","time":{"start":1718929815269,"stop":1718929881440,"duration":66171}},{"uid":"58bda1a48ba935c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/58bda1a48ba935c5","status":"passed","time":{"start":1718843355777,"stop":1718843365172,"duration":9395}},{"uid":"4409f3467a5b108","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/4409f3467a5b108","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 19 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1718757056827,"stop":1718757119828,"duration":63001}},{"uid":"a8c1127275940a74","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/a8c1127275940a74","status":"passed","time":{"start":1718670604926,"stop":1718670613365,"duration":8439}},{"uid":"15ae41424aca2638","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1945//#testresult/15ae41424aca2638","status":"passed","time":{"start":1718584386513,"stop":1718584399099,"duration":12586}},{"uid":"57cde40870a4ea62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/57cde40870a4ea62","status":"passed","time":{"start":1718498032433,"stop":1718498107991,"duration":75558}},{"uid":"a5a4240eaad22243","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/a5a4240eaad22243","status":"passed","time":{"start":1718411794419,"stop":1718411882513,"duration":88094}},{"uid":"3b9c059636a6a667","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/3b9c059636a6a667","status":"passed","time":{"start":1718325330247,"stop":1718325358862,"duration":28615}},{"uid":"c28a9e5158ceb7bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1939//#testresult/c28a9e5158ceb7bd","status":"passed","time":{"start":1718238929488,"stop":1718239029239,"duration":99751}},{"uid":"f85c5a5767e5e681","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1938//#testresult/f85c5a5767e5e681","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 12 June\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1718152568280,"stop":1718152648622,"duration":80342}},{"uid":"baa2ee771947e837","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1937//#testresult/baa2ee771947e837","status":"passed","time":{"start":1718065802587,"stop":1718065882344,"duration":79757}},{"uid":"527be48cc4624d0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1936//#testresult/527be48cc4624d0b","status":"passed","time":{"start":1717979498909,"stop":1717979506117,"duration":7208}},{"uid":"22e1f6d367e70eb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1934//#testresult/22e1f6d367e70eb7","status":"passed","time":{"start":1717893399262,"stop":1717893427009,"duration":27747}},{"uid":"1993bb544753c3d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1933//#testresult/1993bb544753c3d3","status":"passed","time":{"start":1717806709457,"stop":1717806753563,"duration":44106}},{"uid":"393db83e3fc70882","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1932//#testresult/393db83e3fc70882","status":"passed","time":{"start":1717720589417,"stop":1717720628559,"duration":39142}},{"uid":"313b7893f928c433","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1927//#testresult/313b7893f928c433","status":"passed","time":{"start":1717633825913,"stop":1717633837330,"duration":11417}}]},"tags":[]},"source":"dbc4c4724ddf29bc.json","parameterValues":["KingstonUponThamesCouncil"]}