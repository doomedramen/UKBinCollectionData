{"uid":"99c209fc775fcc50","name":"Validate Council Output [AylesburyValeCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"974fd2c15e32d40e1deeebde92c36bd9","time":{"start":1698628457463,"stop":1698628466452,"duration":8989},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f53b0105260>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f53b0161ad0>, 'council': 'AylesburyValeCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7f53b0660d10>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '766252532', 'url': 'http://avdcbins.web-labs.co.uk/RefuseApi.asmx', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            'Content-Type': 'text/xml; charset=UTF-8',\n            'SOAPAction': '\"http://tempuri.org/GetCollections\"'\n        }\n    \n        post_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope ' \\\n                    'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' \\\n                    'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' \\\n                    'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections ' \\\n                    'xmlns=\"http://tempuri.org/\"><uprn>' + uprn + '</uprn></GetCollections></soap:Body></soap:Envelope>'\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:38: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f53b0105260>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f53b0161ad0>, 'council': 'AylesburyValeCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7f53b0660d10>, page = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '766252532', 'url': 'http://avdcbins.web-labs.co.uk/RefuseApi.asmx', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            'Content-Type': 'text/xml; charset=UTF-8',\n            'SOAPAction': '\"http://tempuri.org/GetCollections\"'\n        }\n    \n        post_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope ' \\\n                    'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' \\\n                    'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' \\\n                    'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections ' \\\n                    'xmlns=\"http://tempuri.org/\"><uprn>' + uprn + '</uprn></GetCollections></soap:Body></soap:Envelope>'\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:38: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1698628457463,"stop":1698628457464,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from AylesburyValeCouncil","time":{"start":1698628457464,"stop":1698628466452,"duration":8988},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-810"},{"name":"thread","value":"2243-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":127,"unknown":0,"total":131},"items":[{"uid":"47aac21a3a715c22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/47aac21a3a715c22","status":"passed","time":{"start":1698615096748,"stop":1698615104407,"duration":7659}},{"uid":"48f5574f086bb692","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/48f5574f086bb692","status":"passed","time":{"start":1698615151044,"stop":1698615159034,"duration":7990}},{"uid":"e403e7f662467525","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1061//#testresult/e403e7f662467525","status":"passed","time":{"start":1698615032607,"stop":1698615035995,"duration":3388}},{"uid":"e5c22df0c74238db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1054//#testresult/e5c22df0c74238db","status":"passed","time":{"start":1698542266456,"stop":1698542269472,"duration":3016}},{"uid":"8d5b04b0ec3e7788","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1053//#testresult/8d5b04b0ec3e7788","status":"passed","time":{"start":1698455458331,"stop":1698455465313,"duration":6982}},{"uid":"ea379bee17fb1069","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1051//#testresult/ea379bee17fb1069","status":"passed","time":{"start":1698369148814,"stop":1698369152114,"duration":3300}},{"uid":"dd0e1e438672c520","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1050//#testresult/dd0e1e438672c520","status":"passed","time":{"start":1698282728320,"stop":1698282734175,"duration":5855}},{"uid":"836f62238ec8e8bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1049//#testresult/836f62238ec8e8bb","status":"passed","time":{"start":1698196411054,"stop":1698196414120,"duration":3066}},{"uid":"cec0b3b700b356f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1048//#testresult/cec0b3b700b356f8","status":"passed","time":{"start":1698178126661,"stop":1698178129847,"duration":3186}},{"uid":"9dbc8dc0f325b160","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1047//#testresult/9dbc8dc0f325b160","status":"passed","time":{"start":1698178081391,"stop":1698178084804,"duration":3413}},{"uid":"48b270eabeed22f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1046//#testresult/48b270eabeed22f","status":"passed","time":{"start":1698109997290,"stop":1698110002816,"duration":5526}},{"uid":"79587a402438ea5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1044//#testresult/79587a402438ea5a","status":"passed","time":{"start":1698064768955,"stop":1698064772670,"duration":3715}},{"uid":"f8a10683689da867","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1042//#testresult/f8a10683689da867","status":"passed","time":{"start":1698023654347,"stop":1698023657795,"duration":3448}},{"uid":"4791a8e397ddfb7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1040//#testresult/4791a8e397ddfb7b","status":"passed","time":{"start":1697937513923,"stop":1697937517209,"duration":3286}},{"uid":"589c8388e6512bda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1039//#testresult/589c8388e6512bda","status":"passed","time":{"start":1697850702151,"stop":1697850707907,"duration":5756}},{"uid":"d194c5da882be6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1037//#testresult/d194c5da882be6f","status":"passed","time":{"start":1697790312452,"stop":1697790316639,"duration":4187}},{"uid":"3188af3e9fcf3307","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1034//#testresult/3188af3e9fcf3307","status":"passed","time":{"start":1697764430044,"stop":1697764433268,"duration":3224}},{"uid":"99c9893d20df20a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1033//#testresult/99c9893d20df20a","status":"passed","time":{"start":1697706442389,"stop":1697706445557,"duration":3168}},{"uid":"c0a694a957e044a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1032//#testresult/c0a694a957e044a5","status":"passed","time":{"start":1697706403087,"stop":1697706406012,"duration":2925}},{"uid":"985ebd47b5fc5bed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1030//#testresult/985ebd47b5fc5bed","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 181 column 5 (char 9185)","time":{"start":1697702044024,"stop":1697702044054,"duration":30}}]},"tags":[]},"source":"99c209fc775fcc50.json","parameterValues":["AylesburyValeCouncil"]}