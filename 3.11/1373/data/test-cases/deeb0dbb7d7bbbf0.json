{"uid":"deeb0dbb7d7bbbf0","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1704388315829,"stop":1704388317563,"duration":1734},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f3b4d9d4180>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3b4d08d890>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f3b4d08d890>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f3b4d9d4180>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3b4d08d890>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f3b4d08d890>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1704388315829,"stop":1704388315830,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1704388315830,"stop":1704388317561,"duration":1731},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704388317561,"stop":1704388317562,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704388317562,"stop":1704388317563,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1426-779"},{"name":"thread","value":"2741-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":131,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":131},"items":[{"uid":"52f8dc9fceccec8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1369//#testresult/52f8dc9fceccec8f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378334740,"stop":1704378335898,"duration":1158}},{"uid":"371a3b1d4ad77e05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1367//#testresult/371a3b1d4ad77e05","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378048455,"stop":1704378049531,"duration":1076}},{"uid":"337b94e9e3cd90a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1366//#testresult/337b94e9e3cd90a4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375866994,"stop":1704375868169,"duration":1175}},{"uid":"b349b950ab40b368","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1363//#testresult/b349b950ab40b368","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356802537,"stop":1704356803617,"duration":1080}},{"uid":"cad7ef4b9c23933c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/cad7ef4b9c23933c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355951927,"stop":1704355953097,"duration":1170}},{"uid":"ed6b45f334b9a89","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/ed6b45f334b9a89","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331108572,"stop":1704331109700,"duration":1128}},{"uid":"fc95fd637c6d1480","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1355//#testresult/fc95fd637c6d1480","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303751667,"stop":1704303753311,"duration":1644}},{"uid":"661e246da6703fcf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1352//#testresult/661e246da6703fcf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704301441936,"stop":1704301443505,"duration":1569}},{"uid":"1fadb93f83958aac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/1fadb93f83958aac","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244732190,"stop":1704244733268,"duration":1078}},{"uid":"999348d716e5137b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/999348d716e5137b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704180248659,"stop":1704180250209,"duration":1550}},{"uid":"435d52f9cc247d4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1346//#testresult/435d52f9cc247d4c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704158284933,"stop":1704158286028,"duration":1095}},{"uid":"517e8b8e825edc7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1345//#testresult/517e8b8e825edc7c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704114621664,"stop":1704114623270,"duration":1606}},{"uid":"91c33687445531ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1343//#testresult/91c33687445531ab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704113734127,"stop":1704113735750,"duration":1623}},{"uid":"93e967d555cb7e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/93e967d555cb7e78","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704113671255,"stop":1704113672360,"duration":1105}},{"uid":"bde37e70caf13bc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/bde37e70caf13bc9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112248653,"stop":1704112249780,"duration":1127}},{"uid":"2f4d0489ba22477c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/2f4d0489ba22477c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112105018,"stop":1704112106596,"duration":1578}},{"uid":"a487686aeac69808","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/a487686aeac69808","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111867129,"stop":1704111868699,"duration":1570}},{"uid":"ff8734cac8b79f3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/ff8734cac8b79f3d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111866479,"stop":1704111868199,"duration":1720}},{"uid":"1bfc3cfb73ba18f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/1bfc3cfb73ba18f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111501932,"stop":1704111503167,"duration":1235}},{"uid":"9bf010aa93fbcba4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/9bf010aa93fbcba4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111351031,"stop":1704111352624,"duration":1593}}]},"tags":[]},"source":"deeb0dbb7d7bbbf0.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}