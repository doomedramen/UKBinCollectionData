{"uid":"8ea1f0f09632e594","name":"Validate Council Output [WyreCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c9a69097c6690b397ff5b0e462675a6f","time":{"start":1721607826371,"stop":1721607847066,"duration":20695},"status":"failed","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0d294df590>\ns = '<!DOCTYPE html>\\n    <!--[if IE 9]>          <html class=\"lt-ie10 no-js\" lang=\"en\"> <![endif]-->\\n    <!--[if gt IE 9... \\n            <a href=\"#\" id=\"open_preferences_center\">Update cookies preferences</a>\\n            </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f0d150cd760>\nrequest = <FixtureRequest for <Function test_scenario_outline[WyreCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0d14f47490>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WyreCouncil.py:46: in parse_data\n    json_data = addr_res.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:978: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0d294df590>\ns = '<!DOCTYPE html>\\n    <!--[if IE 9]>          <html class=\"lt-ie10 no-js\" lang=\"en\"> <![endif]-->\\n    <!--[if gt IE 9... \\n            <a href=\"#\" id=\"open_preferences_center\">Update cookies preferences</a>\\n            </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f0d150cd760>\nrequest = <FixtureRequest for <Function test_scenario_outline[WyreCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0d14f47490>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WyreCouncil.py:46: in parse_data\n    json_data = addr_res.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/requests/models.py:978: JSONDecodeError","steps":[{"name":"Given the council","time":{"start":1721607826371,"stop":1721607826372,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1721607826372,"stop":1721607847065,"duration":20693},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"c162abc1d81c24c4","name":"stdout","source":"c162abc1d81c24c4.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1391-45"},{"name":"thread","value":"2780-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WyreCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":73,"unknown":0,"total":74},"items":[{"uid":"bae42e6c3387ac0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/bae42e6c3387ac0c","status":"passed","time":{"start":1721521464626,"stop":1721521467449,"duration":2823}},{"uid":"8ffc0d1151565d81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/8ffc0d1151565d81","status":"passed","time":{"start":1721435202778,"stop":1721435204579,"duration":1801}},{"uid":"20c3c557162cb6ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/20c3c557162cb6ef","status":"passed","time":{"start":1721373135305,"stop":1721373137352,"duration":2047}},{"uid":"b768a3d6b9bf3fd2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/b768a3d6b9bf3fd2","status":"passed","time":{"start":1721264132017,"stop":1721264133925,"duration":1908}},{"uid":"e61171bdb2b308bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/e61171bdb2b308bd","status":"passed","time":{"start":1721177588276,"stop":1721177590846,"duration":2570}},{"uid":"705bc2637b4d47ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/705bc2637b4d47ca","status":"passed","time":{"start":1721091175539,"stop":1721091178263,"duration":2724}},{"uid":"f51b383ea4ba842","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1982//#testresult/f51b383ea4ba842","status":"passed","time":{"start":1721004897650,"stop":1721004900585,"duration":2935}},{"uid":"620238a9e9a34be8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/620238a9e9a34be8","status":"passed","time":{"start":1720918572005,"stop":1720918576244,"duration":4239}},{"uid":"3608105d517af5be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/3608105d517af5be","status":"passed","time":{"start":1720831936336,"stop":1720831938768,"duration":2432}},{"uid":"139cb100a230662f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1979//#testresult/139cb100a230662f","status":"passed","time":{"start":1720745478847,"stop":1720745480491,"duration":1644}},{"uid":"6a8a0bd89d3fe302","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1978//#testresult/6a8a0bd89d3fe302","status":"passed","time":{"start":1720659170276,"stop":1720659173500,"duration":3224}},{"uid":"5c534b1696eff945","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1977//#testresult/5c534b1696eff945","status":"passed","time":{"start":1720572757675,"stop":1720572759716,"duration":2041}},{"uid":"258d7209167dc081","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1976//#testresult/258d7209167dc081","status":"passed","time":{"start":1720485982366,"stop":1720485984858,"duration":2492}},{"uid":"c35d2fb16ea3796f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1975//#testresult/c35d2fb16ea3796f","status":"passed","time":{"start":1720399656644,"stop":1720399658456,"duration":1812}},{"uid":"f373a483b929c37f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1971//#testresult/f373a483b929c37f","status":"passed","time":{"start":1720313320249,"stop":1720313322491,"duration":2242}},{"uid":"a737230291085ee6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1970//#testresult/a737230291085ee6","status":"passed","time":{"start":1720226823926,"stop":1720226828541,"duration":4615}},{"uid":"cbcb1b3b2183fc4e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1969//#testresult/cbcb1b3b2183fc4e","status":"passed","time":{"start":1720140331527,"stop":1720140333671,"duration":2144}},{"uid":"e03b784ee60328c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/e03b784ee60328c7","status":"passed","time":{"start":1720053839386,"stop":1720053842056,"duration":2670}},{"uid":"7a905b0d17075929","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/7a905b0d17075929","status":"passed","time":{"start":1719967430301,"stop":1719967432247,"duration":1946}},{"uid":"6728d6b55fbb6acb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1966//#testresult/6728d6b55fbb6acb","status":"passed","time":{"start":1719881042326,"stop":1719881044319,"duration":1993}}]},"tags":[]},"source":"8ea1f0f09632e594.json","parameterValues":["WyreCouncil"]}