{"uid":"c7f213359a824f66","name":"Validate Council Output [NorthWestLeicestershire-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"636da600d3c2f6211f4c406b74efac78","time":{"start":1704452702623,"stop":1704452706303,"duration":3680},"status":"failed","statusMessage":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fea434c0cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fea422511d0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:75: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tue 23rd Jan', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7fea434c0cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthWestLeicestershire-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fea422511d0>, 'council': 'NorthWestLeicestershire', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthWestLeicestershire.py:75: in parse_data\n    parsed_date = datetime.strptime(date, \"%a %dth %b\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tue 23rd Jan', format = '%a %dth %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: NorthWestLeicestershire","time":{"start":1704452702623,"stop":1704452702623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NorthWestLeicestershire using local and the http://selenium:4444 is set","time":{"start":1704452702623,"stop":1704452706303,"duration":3680},"status":"failed","statusMessage":"time data 'Tue 23rd Jan' does not match format '%a %dth %b'","statusTrace":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az774-810"},{"name":"thread","value":"2746-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NorthWestLeicestershire"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":85,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":87},"items":[{"uid":"c27e43cc1e0c7fe3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1400//#testresult/c27e43cc1e0c7fe3","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704443874815,"stop":1704443880086,"duration":5271}},{"uid":"c3d4b947701c4dca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1399//#testresult/c3d4b947701c4dca","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704443428439,"stop":1704443432472,"duration":4033}},{"uid":"607d9561674303f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1397//#testresult/607d9561674303f9","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704442588985,"stop":1704442592845,"duration":3860}},{"uid":"e6c9fa13221d9e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1396//#testresult/e6c9fa13221d9e9","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704442561376,"stop":1704442566173,"duration":4797}},{"uid":"c641dc5ab52194a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1390//#testresult/c641dc5ab52194a2","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704417607786,"stop":1704417611953,"duration":4167}},{"uid":"9e2e110c272be338","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1379//#testresult/9e2e110c272be338","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704406076510,"stop":1704406080692,"duration":4182}},{"uid":"ef733018eabd0f28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1378//#testresult/ef733018eabd0f28","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704406045981,"stop":1704406049999,"duration":4018}},{"uid":"555ec0954c646e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1376//#testresult/555ec0954c646e78","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704398884840,"stop":1704398889249,"duration":4409}},{"uid":"3c7f078938f428fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1375//#testresult/3c7f078938f428fd","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704398828005,"stop":1704398831827,"duration":3822}},{"uid":"40fdecc803e6abfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1373//#testresult/40fdecc803e6abfb","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704388390753,"stop":1704388395194,"duration":4441}},{"uid":"16df0be97c0249e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1369//#testresult/16df0be97c0249e8","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704378433411,"stop":1704378437313,"duration":3902}},{"uid":"1acea8a45830e963","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1367//#testresult/1acea8a45830e963","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704378090303,"stop":1704378094467,"duration":4164}},{"uid":"4bdc3c5ce791ff54","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1366//#testresult/4bdc3c5ce791ff54","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704375910051,"stop":1704375914272,"duration":4221}},{"uid":"b631bf6854570345","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1363//#testresult/b631bf6854570345","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704356832346,"stop":1704356835968,"duration":3622}},{"uid":"a3bf444cbacabb29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/a3bf444cbacabb29","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704355995417,"stop":1704355999748,"duration":4331}},{"uid":"5f016c630bcdaa73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/5f016c630bcdaa73","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704331151332,"stop":1704331155197,"duration":3865}},{"uid":"932db07b299b228e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1355//#testresult/932db07b299b228e","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704303779896,"stop":1704303784544,"duration":4648}},{"uid":"68872405f17cf4c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1352//#testresult/68872405f17cf4c3","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704301468089,"stop":1704301472899,"duration":4810}},{"uid":"b5666a9e06da27d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/b5666a9e06da27d5","status":"failed","statusDetails":"ValueError: time data 'Tue 23rd Jan' does not match format '%a %dth %b'","time":{"start":1704244764359,"stop":1704244768189,"duration":3830}},{"uid":"85e5a640acc52ba9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/85e5a640acc52ba9","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%a %dth %b'","time":{"start":1704180348260,"stop":1704180352698,"duration":4438}}]},"tags":[]},"source":"c7f213359a824f66.json","parameterValues":["NorthWestLeicestershire","local","http://selenium:4444"]}