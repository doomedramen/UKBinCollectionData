{"uid":"f2f4ddf00ce344fa","name":"Validate Council Output [HuntingdonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c2822894b8c5df9c3b14f6331988dcc1","time":{"start":1704452631209,"stop":1704452632817,"duration":1608},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f644b4c51c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f644aaa0850>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f644aaa0850>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f644b4c51c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HuntingdonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f644aaa0850>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f644aaa0850>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: HuntingdonDistrictCouncil","time":{"start":1704452631209,"stop":1704452631210,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from HuntingdonDistrictCouncil using None and the None is set","time":{"start":1704452631210,"stop":1704452632815,"duration":1605},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704452632815,"stop":1704452632815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704452632815,"stop":1704452632817,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az774-810"},{"name":"thread","value":"2743-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HuntingdonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":141,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":141},"items":[{"uid":"3ab2f12f22b09b8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1400//#testresult/3ab2f12f22b09b8e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443777706,"stop":1704443779248,"duration":1542}},{"uid":"ab62f826b307a8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1399//#testresult/ab62f826b307a8f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443366948,"stop":1704443368723,"duration":1775}},{"uid":"27a56d9c1a4f4e0e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1397//#testresult/27a56d9c1a4f4e0e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442486564,"stop":1704442488915,"duration":2351}},{"uid":"4d1c5846159d9fc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1396//#testresult/4d1c5846159d9fc6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442470385,"stop":1704442471990,"duration":1605}},{"uid":"72ea347ceb42625f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1390//#testresult/72ea347ceb42625f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704417524221,"stop":1704417525336,"duration":1115}},{"uid":"c52248582c0e0b16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1379//#testresult/c52248582c0e0b16","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704406027262,"stop":1704406028477,"duration":1215}},{"uid":"d02220f43522bba7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1378//#testresult/d02220f43522bba7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704405971776,"stop":1704405973014,"duration":1238}},{"uid":"36998ee261b77c87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1376//#testresult/36998ee261b77c87","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398805044,"stop":1704398806755,"duration":1711}},{"uid":"34b7656c7c5f18a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1375//#testresult/34b7656c7c5f18a9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398757205,"stop":1704398758409,"duration":1204}},{"uid":"deeb0dbb7d7bbbf0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1373//#testresult/deeb0dbb7d7bbbf0","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704388315829,"stop":1704388317563,"duration":1734}},{"uid":"52f8dc9fceccec8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1369//#testresult/52f8dc9fceccec8f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378334740,"stop":1704378335898,"duration":1158}},{"uid":"371a3b1d4ad77e05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1367//#testresult/371a3b1d4ad77e05","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378048455,"stop":1704378049531,"duration":1076}},{"uid":"337b94e9e3cd90a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1366//#testresult/337b94e9e3cd90a4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375866994,"stop":1704375868169,"duration":1175}},{"uid":"b349b950ab40b368","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1363//#testresult/b349b950ab40b368","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356802537,"stop":1704356803617,"duration":1080}},{"uid":"cad7ef4b9c23933c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/cad7ef4b9c23933c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355951927,"stop":1704355953097,"duration":1170}},{"uid":"ed6b45f334b9a89","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/ed6b45f334b9a89","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331108572,"stop":1704331109700,"duration":1128}},{"uid":"fc95fd637c6d1480","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1355//#testresult/fc95fd637c6d1480","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303751667,"stop":1704303753311,"duration":1644}},{"uid":"661e246da6703fcf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1352//#testresult/661e246da6703fcf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704301441936,"stop":1704301443505,"duration":1569}},{"uid":"1fadb93f83958aac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/1fadb93f83958aac","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244732190,"stop":1704244733268,"duration":1078}},{"uid":"999348d716e5137b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/999348d716e5137b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704180248659,"stop":1704180250209,"duration":1550}}]},"tags":[]},"source":"f2f4ddf00ce344fa.json","parameterValues":["HuntingdonDistrictCouncil","None","None"]}