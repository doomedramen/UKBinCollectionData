{"uid":"fe0e4bb5c50f0286","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1706574323671,"stop":1706574324957,"duration":1286},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc612a84d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc612928450>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fc612a84d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc612928450>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1706574323671,"stop":1706574323672,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1706574323672,"stop":1706574324957,"duration":1285},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az525-874"},{"name":"thread","value":"2748-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":113,"unknown":0,"total":126},"items":[{"uid":"d37e4c2206860327","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1534//#testresult/d37e4c2206860327","status":"passed","time":{"start":1706488012069,"stop":1706488012986,"duration":917}},{"uid":"4f162bea32ad9a9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1531//#testresult/4f162bea32ad9a9f","status":"passed","time":{"start":1706401677091,"stop":1706401678437,"duration":1346}},{"uid":"26e4d4f5d0854962","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1529//#testresult/26e4d4f5d0854962","status":"passed","time":{"start":1706315135679,"stop":1706315136855,"duration":1176}},{"uid":"15a4e815856c84b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1528//#testresult/15a4e815856c84b4","status":"passed","time":{"start":1706228765743,"stop":1706228767464,"duration":1721}},{"uid":"345c992914b0487f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1523//#testresult/345c992914b0487f","status":"passed","time":{"start":1706142467390,"stop":1706142468489,"duration":1099}},{"uid":"e3d2a7bc4b96a91d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1522//#testresult/e3d2a7bc4b96a91d","status":"passed","time":{"start":1706056082864,"stop":1706056084167,"duration":1303}},{"uid":"1027fa3130692039","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1521//#testresult/1027fa3130692039","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1705969672475,"stop":1705969673997,"duration":1522}},{"uid":"4ab25abd77aa5c43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1520//#testresult/4ab25abd77aa5c43","status":"passed","time":{"start":1705883380703,"stop":1705883381582,"duration":879}},{"uid":"7134c51a28507846","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1519//#testresult/7134c51a28507846","status":"passed","time":{"start":1705797017095,"stop":1705797018841,"duration":1746}},{"uid":"66345514e701ec2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1515//#testresult/66345514e701ec2c","status":"passed","time":{"start":1705710386434,"stop":1705710388568,"duration":2134}},{"uid":"6944a21316ef21df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1511//#testresult/6944a21316ef21df","status":"passed","time":{"start":1705624055486,"stop":1705624056483,"duration":997}},{"uid":"25267ac787c58cd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1505//#testresult/25267ac787c58cd3","status":"passed","time":{"start":1705537629720,"stop":1705537630612,"duration":892}},{"uid":"642975a30e646f3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1500//#testresult/642975a30e646f3e","status":"passed","time":{"start":1705451239696,"stop":1705451240744,"duration":1048}},{"uid":"3f3b83494fc5a9e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1499//#testresult/3f3b83494fc5a9e2","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1705364847881,"stop":1705364849005,"duration":1124}},{"uid":"9f77d604f47a075f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1492//#testresult/9f77d604f47a075f","status":"passed","time":{"start":1705295570387,"stop":1705295571557,"duration":1170}},{"uid":"80daa045989e50ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1491//#testresult/80daa045989e50ba","status":"passed","time":{"start":1705295120838,"stop":1705295121976,"duration":1138}},{"uid":"f237016e089981fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1490//#testresult/f237016e089981fd","status":"passed","time":{"start":1705278523073,"stop":1705278524188,"duration":1115}},{"uid":"20551c46697aefd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1485//#testresult/20551c46697aefd6","status":"passed","time":{"start":1705192187735,"stop":1705192188993,"duration":1258}},{"uid":"ab1d18d9e794f3db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1484//#testresult/ab1d18d9e794f3db","status":"passed","time":{"start":1705105652418,"stop":1705105654273,"duration":1855}},{"uid":"f58ae1fe187795f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1482//#testresult/f58ae1fe187795f6","status":"passed","time":{"start":1705019226863,"stop":1705019228632,"duration":1769}}]},"tags":[]},"source":"fe0e4bb5c50f0286.json","parameterValues":["BarnsleyMBCouncil","None","None"]}