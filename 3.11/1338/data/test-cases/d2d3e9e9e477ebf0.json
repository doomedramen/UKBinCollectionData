{"uid":"d2d3e9e9e477ebf0","name":"Validate Council Output [EastLindseyDistrictCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"eb374edb17b4c377c221232fbb03cdfe","time":{"start":1704112055399,"stop":1704112062251,"duration":6852},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f43a6efa5c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[EastLindseyDistrictCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f43a646c4d0>, 'council': 'EastLindseyDistrictCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <EastLindseyDistrictCouncil.CouncilClass object at 0x7f43a65f3350>\npage = ''\nkwargs = {'paon': 'Raf Coningsby', 'postcode': 'LN4 4SY', 'uprn': None, 'url': 'https://www.e-lindsey.gov.uk/', ...}\ndata = {'bins': []}, user_paon = 'Raf Coningsby', user_postcode = 'LN4 4SY'\nweb_driver = None\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5d9f3c568ff6632a384db4921571f8f6\")>\ninputElement_postcode = <selenium.webdriver.remote.webelement.WebElement (session=\"5d9f3c568ff6632a384db4921571f8f6\", element=\"458F9D67E676D99CE77874FCD389B752_element_9\")>\nfindAddress = <selenium.webdriver.remote.webelement.WebElement (session=\"5d9f3c568ff6632a384db4921571f8f6\", element=\"458F9D67E676D99CE77874FCD389B752_element_11\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        user_paon = kwargs.get(\"paon\")\n        user_postcode = kwargs.get(\"postcode\")\n        web_driver = kwargs.get(\"web_driver\")\n        check_paon(user_paon)\n        check_postcode(user_postcode)\n    \n        # Create Selenium webdriver\n        driver = create_webdriver(web_driver)\n        driver.get(\n            \"https://www.e-lindsey.gov.uk/article/6714/Your-Waste-Collection-Days\"\n        )\n    \n        # Wait for the postcode field to appear then populate it\n        inputElement_postcode = WebDriverWait(driver, 30).until(\n            EC.presence_of_element_located(\n                (By.ID, \"WASTECOLLECTIONDAYS202324_LOOKUP_ADDRESSLOOKUPPOSTCODE\")\n            )\n        )\n        inputElement_postcode.send_keys(user_postcode)\n    \n        # Click search button\n        findAddress = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located(\n                (By.ID, \"WASTECOLLECTIONDAYS202324_LOOKUP_ADDRESSLOOKUPSEARCH\")\n            )\n        )\n        findAddress.click()\n    \n        # Wait for the 'Select address' dropdown to appear and select option matching the house name/number\n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable(\n                (\n                    By.XPATH,\n                    \"//select[@id='WASTECOLLECTIONDAYS202324_LOOKUP_ADDRESSLOOKUPADDRESS']//option[contains(., '\"\n                    + user_paon\n                    + \"')]\",\n                )\n            )\n        ).click()\n    \n        # Wait for the submit button to appear, then click it to get the collection dates\n        submit = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located(\n                (By.ID, \"WASTECOLLECTIONDAYS202324_LOOKUP_FIELD2_NEXT\")\n            )\n        )\n        submit.click()\n    \n        # Wait for the collections table to appear\n        WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \".waste-results\"))\n        )\n    \n        soup = BeautifulSoup(driver.page_source, features=\"html.parser\")\n    \n        # Quit Selenium webdriver to release session\n        driver.quit()\n    \n        # Get collections\n        for collection in soup.find_all(\"div\", {\"class\": \"waste-result\"}):\n            ptags = collection.find_all(\"p\")\n            dict_data = {\n                \"type\": collection.find(\"h3\").get_text(strip=True),\n                \"collectionDate\": datetime.strptime(\n                    remove_ordinal_indicator_from_date_string(\n>                       ptags[1]\n                        .get_text()\n                        .replace(\"The date of your next collection is\", \"\")\n                        .replace(\".\", \"\")\n                        .strip()\n                    ),\n                    \"%A %d %B %Y\",\n                ).strftime(date_format),\n            }\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/EastLindseyDistrictCouncil.py:85: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f43a6efa5c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[EastLindseyDistrictCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f43a646c4d0>, 'council': 'EastLindseyDistrictCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <EastLindseyDistrictCouncil.CouncilClass object at 0x7f43a65f3350>\npage = ''\nkwargs = {'paon': 'Raf Coningsby', 'postcode': 'LN4 4SY', 'uprn': None, 'url': 'https://www.e-lindsey.gov.uk/', ...}\ndata = {'bins': []}, user_paon = 'Raf Coningsby', user_postcode = 'LN4 4SY'\nweb_driver = None\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5d9f3c568ff6632a384db4921571f8f6\")>\ninputElement_postcode = <selenium.webdriver.remote.webelement.WebElement (session=\"5d9f3c568ff6632a384db4921571f8f6\", element=\"458F9D67E676D99CE77874FCD389B752_element_9\")>\nfindAddress = <selenium.webdriver.remote.webelement.WebElement (session=\"5d9f3c568ff6632a384db4921571f8f6\", element=\"458F9D67E676D99CE77874FCD389B752_element_11\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        user_paon = kwargs.get(\"paon\")\n        user_postcode = kwargs.get(\"postcode\")\n        web_driver = kwargs.get(\"web_driver\")\n        check_paon(user_paon)\n        check_postcode(user_postcode)\n    \n        # Create Selenium webdriver\n        driver = create_webdriver(web_driver)\n        driver.get(\n            \"https://www.e-lindsey.gov.uk/article/6714/Your-Waste-Collection-Days\"\n        )\n    \n        # Wait for the postcode field to appear then populate it\n        inputElement_postcode = WebDriverWait(driver, 30).until(\n            EC.presence_of_element_located(\n                (By.ID, \"WASTECOLLECTIONDAYS202324_LOOKUP_ADDRESSLOOKUPPOSTCODE\")\n            )\n        )\n        inputElement_postcode.send_keys(user_postcode)\n    \n        # Click search button\n        findAddress = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located(\n                (By.ID, \"WASTECOLLECTIONDAYS202324_LOOKUP_ADDRESSLOOKUPSEARCH\")\n            )\n        )\n        findAddress.click()\n    \n        # Wait for the 'Select address' dropdown to appear and select option matching the house name/number\n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable(\n                (\n                    By.XPATH,\n                    \"//select[@id='WASTECOLLECTIONDAYS202324_LOOKUP_ADDRESSLOOKUPADDRESS']//option[contains(., '\"\n                    + user_paon\n                    + \"')]\",\n                )\n            )\n        ).click()\n    \n        # Wait for the submit button to appear, then click it to get the collection dates\n        submit = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located(\n                (By.ID, \"WASTECOLLECTIONDAYS202324_LOOKUP_FIELD2_NEXT\")\n            )\n        )\n        submit.click()\n    \n        # Wait for the collections table to appear\n        WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \".waste-results\"))\n        )\n    \n        soup = BeautifulSoup(driver.page_source, features=\"html.parser\")\n    \n        # Quit Selenium webdriver to release session\n        driver.quit()\n    \n        # Get collections\n        for collection in soup.find_all(\"div\", {\"class\": \"waste-result\"}):\n            ptags = collection.find_all(\"p\")\n            dict_data = {\n                \"type\": collection.find(\"h3\").get_text(strip=True),\n                \"collectionDate\": datetime.strptime(\n                    remove_ordinal_indicator_from_date_string(\n>                       ptags[1]\n                        .get_text()\n                        .replace(\"The date of your next collection is\", \"\")\n                        .replace(\".\", \"\")\n                        .strip()\n                    ),\n                    \"%A %d %B %Y\",\n                ).strftime(date_format),\n            }\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/EastLindseyDistrictCouncil.py:85: IndexError","steps":[{"name":"Given the council: EastLindseyDistrictCouncil","time":{"start":1704112055399,"stop":1704112055400,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from EastLindseyDistrictCouncil using local and the http://selenium:4444 is set","time":{"start":1704112055400,"stop":1704112062251,"duration":6851},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az773-27"},{"name":"thread","value":"2683-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"EastLindseyDistrictCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":88,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":115},"items":[{"uid":"989515a6c81c24f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/989515a6c81c24f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704111855688,"stop":1704111861962,"duration":6274}},{"uid":"60fa8a3b193b0fe8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/60fa8a3b193b0fe8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704111863303,"stop":1704111869055,"duration":5752}},{"uid":"916d205f285b5f57","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/916d205f285b5f57","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704111507877,"stop":1704111514758,"duration":6881}},{"uid":"fd16fea899030774","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/fd16fea899030774","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704111348078,"stop":1704111355012,"duration":6934}},{"uid":"a4c31135110a2ef5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/a4c31135110a2ef5","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704099930032,"stop":1704099936263,"duration":6231}},{"uid":"81dd389d0e9c5e97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/81dd389d0e9c5e97","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704072251383,"stop":1704072257057,"duration":5674}},{"uid":"541efcd6d703e949","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/541efcd6d703e949","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704050400022,"stop":1704050406716,"duration":6694}},{"uid":"bc841555274d21c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/bc841555274d21c4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1704043927611,"stop":1704043932415,"duration":4804}},{"uid":"318ffafd4cddc48d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/318ffafd4cddc48d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703985752752,"stop":1703985758885,"duration":6133}},{"uid":"860d87efdb2ea6a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/860d87efdb2ea6a4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703898910973,"stop":1703898916550,"duration":5577}},{"uid":"8247d9e193e0ee8f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/8247d9e193e0ee8f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703853461425,"stop":1703853467921,"duration":6496}},{"uid":"4f14dedf2bfe014e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/4f14dedf2bfe014e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703851074399,"stop":1703851079368,"duration":4969}},{"uid":"7a188f890e80fb97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/7a188f890e80fb97","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703812020644,"stop":1703812026930,"duration":6286}},{"uid":"531b2ab999f899ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/531b2ab999f899ff","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703756158406,"stop":1703756165254,"duration":6848}},{"uid":"dc733c6bc871a06b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/dc733c6bc871a06b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703726135204,"stop":1703726140757,"duration":5553}},{"uid":"f1710bd6dab4f2ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/f1710bd6dab4f2ea","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703717312107,"stop":1703717317021,"duration":4914}},{"uid":"2cb6fb3ebb8d965","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/2cb6fb3ebb8d965","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703717274131,"stop":1703717279127,"duration":4996}},{"uid":"e84834612ca54e03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/e84834612ca54e03","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703639728113,"stop":1703639733525,"duration":5412}},{"uid":"5065db62bfb9a7ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/5065db62bfb9a7ca","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703553328707,"stop":1703553334159,"duration":5452}},{"uid":"daad422ced7ac7ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/daad422ced7ac7ce","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1703541111961,"stop":1703541116617,"duration":4656}}]},"tags":[]},"source":"d2d3e9e9e477ebf0.json","parameterValues":["EastLindseyDistrictCouncil","local","http://selenium:4444"]}