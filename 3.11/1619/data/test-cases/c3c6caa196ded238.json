{"uid":"c3c6caa196ded238","name":"Validate Council Output [MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b599a4dd435703dc5f9937f69cb0d25f","time":{"start":1710894434218,"stop":1710894451035,"duration":16817},"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x70204e86c860>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x70204df14c90>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:104: in parse_data\n    date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 Mar(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: (Adjusted","statusTrace":"fixturefunc = <function scrape_step at 0x70204e86c860>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x70204df14c90>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:104: in parse_data\n    date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '30 Mar(Adjusted', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: (Adjusted\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: MidAndEastAntrimBoroughCouncil","time":{"start":1710894434219,"stop":1710894434219,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from MidAndEastAntrimBoroughCouncil using local and the http://selenium:4444 is set","time":{"start":1710894434219,"stop":1710894451035,"duration":16816},"status":"failed","statusMessage":"unconverted data remains: (Adjusted","statusTrace":"ValueError: unconverted data remains: (Adjusted\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az530-920"},{"name":"thread","value":"2771-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MidAndEastAntrimBoroughCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":30,"broken":0,"skipped":0,"passed":165,"unknown":0,"total":195},"items":[{"uid":"2099eb3d9345dc9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1615//#testresult/2099eb3d9345dc9b","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1710808041818,"stop":1710808058778,"duration":16960}},{"uid":"30d6cc80491a456b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1609//#testresult/30d6cc80491a456b","status":"passed","time":{"start":1710721737639,"stop":1710721755672,"duration":18033}},{"uid":"31065190738dc053","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1608//#testresult/31065190738dc053","status":"passed","time":{"start":1710635380551,"stop":1710635397569,"duration":17018}},{"uid":"450ba12b28d4fadc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1607//#testresult/450ba12b28d4fadc","status":"passed","time":{"start":1710548770157,"stop":1710548789075,"duration":18918}},{"uid":"c9a71e2025425b92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1605//#testresult/c9a71e2025425b92","status":"passed","time":{"start":1710462473041,"stop":1710462491151,"duration":18110}},{"uid":"2343a217a1f15129","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1604//#testresult/2343a217a1f15129","status":"passed","time":{"start":1710452883247,"stop":1710452902609,"duration":19362}},{"uid":"90702a5795e3d379","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1602//#testresult/90702a5795e3d379","status":"passed","time":{"start":1710376023698,"stop":1710376045103,"duration":21405}},{"uid":"8284bb89e4669667","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1601//#testresult/8284bb89e4669667","status":"passed","time":{"start":1710289619046,"stop":1710289635974,"duration":16928}},{"uid":"2089f0b63028ad4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1600//#testresult/2089f0b63028ad4","status":"passed","time":{"start":1710203256559,"stop":1710203273830,"duration":17271}},{"uid":"d1265e892e0ab930","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1599//#testresult/d1265e892e0ab930","status":"passed","time":{"start":1710116915864,"stop":1710116933305,"duration":17441}},{"uid":"455411b873ded0b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1598//#testresult/455411b873ded0b8","status":"passed","time":{"start":1710030598730,"stop":1710030615974,"duration":17244}},{"uid":"1369051b087298ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1597//#testresult/1369051b087298ab","status":"passed","time":{"start":1709944039342,"stop":1709944057921,"duration":18579}},{"uid":"4652579a3049a2c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1596//#testresult/4652579a3049a2c3","status":"passed","time":{"start":1709857658413,"stop":1709857676669,"duration":18256}},{"uid":"2be3073412ede1a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1595//#testresult/2be3073412ede1a5","status":"passed","time":{"start":1709770933352,"stop":1709770951705,"duration":18353}},{"uid":"4bd5b36463e4a731","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1594//#testresult/4bd5b36463e4a731","status":"passed","time":{"start":1709684838136,"stop":1709684855245,"duration":17109}},{"uid":"ad5d017246d1ee5c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1593//#testresult/ad5d017246d1ee5c","status":"passed","time":{"start":1709598397961,"stop":1709598419809,"duration":21848}},{"uid":"f30433d77703f402","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1592//#testresult/f30433d77703f402","status":"passed","time":{"start":1709512069521,"stop":1709512086220,"duration":16699}},{"uid":"d80dd0cf5f952c49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/d80dd0cf5f952c49","status":"passed","time":{"start":1708561624245,"stop":1708561641324,"duration":17079}},{"uid":"f8ca4fdc89e571e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/f8ca4fdc89e571e6","status":"passed","time":{"start":1708475175618,"stop":1708475192604,"duration":16986}},{"uid":"fe469a8ff5a4c60c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/fe469a8ff5a4c60c","status":"passed","time":{"start":1708388783720,"stop":1708388800728,"duration":17008}}]},"tags":[]},"source":"c3c6caa196ded238.json","parameterValues":["MidAndEastAntrimBoroughCouncil","local","http://selenium:4444"]}