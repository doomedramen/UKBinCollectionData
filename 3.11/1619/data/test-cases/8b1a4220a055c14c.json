{"uid":"8b1a4220a055c14c","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1710894375836,"stop":1710894384861,"duration":9025},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 20 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x70204e86c860>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x70204e738f90>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 20 March\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 20 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 20 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x70204e86c860>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x70204e738f90>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:57: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 20 March\\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 20 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1710894375837,"stop":1710894375837,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1710894375837,"stop":1710894384861,"duration":9024},"status":"failed","statusMessage":"time data 'Wednesday, 20 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 20 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az530-920"},{"name":"thread","value":"2771-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":149,"broken":0,"skipped":0,"passed":75,"unknown":0,"total":224},"items":[{"uid":"697a77e31ad9a304","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1615//#testresult/697a77e31ad9a304","status":"passed","time":{"start":1710808103480,"stop":1710808112232,"duration":8752}},{"uid":"67e4e8c867b5f7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1609//#testresult/67e4e8c867b5f7f","status":"passed","time":{"start":1710721732212,"stop":1710721739836,"duration":7624}},{"uid":"d89834d9200b0f38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1608//#testresult/d89834d9200b0f38","status":"passed","time":{"start":1710635357494,"stop":1710635364221,"duration":6727}},{"uid":"16029a06a29205c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1607//#testresult/16029a06a29205c3","status":"passed","time":{"start":1710548733735,"stop":1710548743733,"duration":9998}},{"uid":"f0778b8bba781a2a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1605//#testresult/f0778b8bba781a2a","status":"passed","time":{"start":1710462408344,"stop":1710462420208,"duration":11864}},{"uid":"908209afae377de1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1604//#testresult/908209afae377de1","status":"passed","time":{"start":1710452856125,"stop":1710452868313,"duration":12188}},{"uid":"440aead6135edb4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1602//#testresult/440aead6135edb4f","status":"passed","time":{"start":1710376001807,"stop":1710376009788,"duration":7981}},{"uid":"a4ec2be68c78b583","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1601//#testresult/a4ec2be68c78b583","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 13 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1710289589124,"stop":1710289597823,"duration":8699}},{"uid":"26c903a742993ff0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1600//#testresult/26c903a742993ff0","status":"passed","time":{"start":1710203212905,"stop":1710203217266,"duration":4361}},{"uid":"1b128d33e9a6fcd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1599//#testresult/1b128d33e9a6fcd6","status":"passed","time":{"start":1710116892590,"stop":1710116901540,"duration":8950}},{"uid":"e4b5fb5115950a97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1598//#testresult/e4b5fb5115950a97","status":"passed","time":{"start":1710030590640,"stop":1710030603623,"duration":12983}},{"uid":"dd0eedd775f7b767","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1597//#testresult/dd0eedd775f7b767","status":"passed","time":{"start":1709944009794,"stop":1709944023490,"duration":13696}},{"uid":"4a6a12a36848b8e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1596//#testresult/4a6a12a36848b8e9","status":"passed","time":{"start":1709857632091,"stop":1709857642049,"duration":9958}},{"uid":"b06a072550db34e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1595//#testresult/b06a072550db34e2","status":"passed","time":{"start":1709770909727,"stop":1709770919527,"duration":9800}},{"uid":"a97f8f09ec4f6013","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1594//#testresult/a97f8f09ec4f6013","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 6 March\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1709684813987,"stop":1709684821225,"duration":7238}},{"uid":"1474189b03c763cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1593//#testresult/1474189b03c763cf","status":"passed","time":{"start":1709598422504,"stop":1709598432323,"duration":9819}},{"uid":"cc77851e3fc0adc0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1592//#testresult/cc77851e3fc0adc0","status":"passed","time":{"start":1709512059284,"stop":1709512068057,"duration":8773}},{"uid":"abda459dd816e8e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/abda459dd816e8e1","status":"passed","time":{"start":1708561599351,"stop":1708561606049,"duration":6698}},{"uid":"5888b7423885baf6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/5888b7423885baf6","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 21 February\\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1708475201465,"stop":1708475210249,"duration":8784}},{"uid":"573973a61160a8ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/573973a61160a8ea","status":"passed","time":{"start":1708388801710,"stop":1708388812645,"duration":10935}}]},"tags":[]},"source":"8b1a4220a055c14c.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}