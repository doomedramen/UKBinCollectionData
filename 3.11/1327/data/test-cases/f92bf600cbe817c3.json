{"uid":"f92bf600cbe817c3","name":"Validate Council Output [LondonBoroughHounslow-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2d5d41f2f80a2dfc213e6858543e98d5","time":{"start":1704050565616,"stop":1704050568755,"duration":3139},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f3b75c58c20>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3b752cb010>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f3b752cb010>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f3b75c58c20>\nrequest = <FixtureRequest for <Function test_scenario_outline[LondonBoroughHounslow-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3b752cb010>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f3b752cb010>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: LondonBoroughHounslow","time":{"start":1704050565616,"stop":1704050565617,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LondonBoroughHounslow using None and the None is set","time":{"start":1704050565617,"stop":1704050568753,"duration":3136},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704050568753,"stop":1704050568753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704050568753,"stop":1704050568755,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1426-779"},{"name":"thread","value":"2737-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LondonBoroughHounslow"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":108,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":108},"items":[{"uid":"bb42e7b750b1e875","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/bb42e7b750b1e875","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704044069271,"stop":1704044071784,"duration":2513}},{"uid":"9223ccb33e843dc8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/9223ccb33e843dc8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703985917353,"stop":1703985920597,"duration":3244}},{"uid":"d7d65c4ea48c4379","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/d7d65c4ea48c4379","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703899108489,"stop":1703899140722,"duration":32233}},{"uid":"e47d9cf4c06a4305","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/e47d9cf4c06a4305","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703853617560,"stop":1703853620427,"duration":2867}},{"uid":"e42cf43214823052","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/e42cf43214823052","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703851223467,"stop":1703851227474,"duration":4007}},{"uid":"8465e322ab5f2051","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/8465e322ab5f2051","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703812181616,"stop":1703812184710,"duration":3094}},{"uid":"3b4289b1fc4a0ba7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/3b4289b1fc4a0ba7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703756304522,"stop":1703756316061,"duration":11539}},{"uid":"705c3ced35b80be5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/705c3ced35b80be5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703726283214,"stop":1703726286521,"duration":3307}},{"uid":"5246febc5eff1e3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/5246febc5eff1e3f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717458926,"stop":1703717461472,"duration":2546}},{"uid":"55c5c742025db0ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/55c5c742025db0ba","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717434353,"stop":1703717436846,"duration":2493}},{"uid":"dd7b7b3e5ed2c48c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1301//#testresult/dd7b7b3e5ed2c48c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703639868855,"stop":1703639872006,"duration":3151}},{"uid":"94a50cf8c4164ccf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1300//#testresult/94a50cf8c4164ccf","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703553463331,"stop":1703553466106,"duration":2775}},{"uid":"36051d597f724d77","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1298//#testresult/36051d597f724d77","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703541253898,"stop":1703541256275,"duration":2377}},{"uid":"a66c4561e46ea52b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1295//#testresult/a66c4561e46ea52b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703467241288,"stop":1703467243809,"duration":2521}},{"uid":"1d1a91021c75e17d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/1d1a91021c75e17d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416542274,"stop":1703416545151,"duration":2877}},{"uid":"74438ada19c0de4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/74438ada19c0de4c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416506304,"stop":1703416509686,"duration":3382}},{"uid":"12631d1b6dbf69c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/12631d1b6dbf69c9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703381076194,"stop":1703381079158,"duration":2964}},{"uid":"423efbb49edfbbf6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/423efbb49edfbbf6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294075350,"stop":1703294084096,"duration":8746}},{"uid":"766aa1c37565a258","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/766aa1c37565a258","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207809857,"stop":1703207812976,"duration":3119}},{"uid":"a0d102cb76745f83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/a0d102cb76745f83","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121579277,"stop":1703121582655,"duration":3378}}]},"tags":[]},"source":"f92bf600cbe817c3.json","parameterValues":["LondonBoroughHounslow","None","None"]}