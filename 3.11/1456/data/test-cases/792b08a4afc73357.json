{"uid":"792b08a4afc73357","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1704760081416,"stop":1704760082961,"duration":1545},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fded7ce0d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fded7b48b50>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fded7ce0d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fded7b48b50>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1704760081416,"stop":1704760081417,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1704760081417,"stop":1704760082961,"duration":1544},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az973-512"},{"name":"thread","value":"2743-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":93,"unknown":0,"total":103},"items":[{"uid":"26d1e52f06f4b068","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1452//#testresult/26d1e52f06f4b068","status":"passed","time":{"start":1704711483660,"stop":1704711484653,"duration":993}},{"uid":"89cd4d4fbce8a8c6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1450//#testresult/89cd4d4fbce8a8c6","status":"passed","time":{"start":1704710693319,"stop":1704710694218,"duration":899}},{"uid":"d04f45de47cc93d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1448//#testresult/d04f45de47cc93d9","status":"passed","time":{"start":1704710079205,"stop":1704710081026,"duration":1821}},{"uid":"c62ea062bb69052","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1446//#testresult/c62ea062bb69052","status":"passed","time":{"start":1704709553334,"stop":1704709554662,"duration":1328}},{"uid":"1175810adf7ef4ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1443//#testresult/1175810adf7ef4ff","status":"passed","time":{"start":1704704062290,"stop":1704704063852,"duration":1562}},{"uid":"a561e9b0685deaa8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1441//#testresult/a561e9b0685deaa8","status":"passed","time":{"start":1704673696526,"stop":1704673697351,"duration":825}},{"uid":"27f1b4cb222839ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1426//#testresult/27f1b4cb222839ae","status":"passed","time":{"start":1704615372646,"stop":1704615373502,"duration":856}},{"uid":"2954b817a7bbfbdd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1423//#testresult/2954b817a7bbfbdd","status":"passed","time":{"start":1704614760533,"stop":1704614762121,"duration":1588}},{"uid":"4e7631550b745f33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1420//#testresult/4e7631550b745f33","status":"passed","time":{"start":1704587433161,"stop":1704587434335,"duration":1174}},{"uid":"b146c2afba6f6e8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1413//#testresult/b146c2afba6f6e8e","status":"passed","time":{"start":1704542702364,"stop":1704542704206,"duration":1842}},{"uid":"51291502553bb8d0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1408//#testresult/51291502553bb8d0","status":"passed","time":{"start":1704496145350,"stop":1704496146773,"duration":1423}},{"uid":"c7734f864c35f1bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1406//#testresult/c7734f864c35f1bc","status":"passed","time":{"start":1704453396986,"stop":1704453398241,"duration":1255}},{"uid":"536b9a09e9e2a4ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1405//#testresult/536b9a09e9e2a4ba","status":"passed","time":{"start":1704452624386,"stop":1704452625333,"duration":947}},{"uid":"6f3b492bcd8f5a8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1400//#testresult/6f3b492bcd8f5a8e","status":"passed","time":{"start":1704443731207,"stop":1704443732329,"duration":1122}},{"uid":"3f36ea4a2ca4eafe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1399//#testresult/3f36ea4a2ca4eafe","status":"passed","time":{"start":1704443274163,"stop":1704443275107,"duration":944}},{"uid":"45141d9e4ac35433","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1397//#testresult/45141d9e4ac35433","status":"passed","time":{"start":1704442452892,"stop":1704442453900,"duration":1008}},{"uid":"df620fea63c8e634","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1396//#testresult/df620fea63c8e634","status":"passed","time":{"start":1704442421607,"stop":1704442422915,"duration":1308}},{"uid":"803d799f48d64a15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1390//#testresult/803d799f48d64a15","status":"passed","time":{"start":1704417486718,"stop":1704417487888,"duration":1170}},{"uid":"4ba3b860b8dac365","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1379//#testresult/4ba3b860b8dac365","status":"passed","time":{"start":1704405994737,"stop":1704405995827,"duration":1090}},{"uid":"a1ccb38c610d57a2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1378//#testresult/a1ccb38c610d57a2","status":"passed","time":{"start":1704405959094,"stop":1704405959967,"duration":873}}]},"tags":[]},"source":"792b08a4afc73357.json","parameterValues":["BarnsleyMBCouncil","None","None"]}