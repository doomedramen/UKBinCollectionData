{"uid":"4bb2eb937b1dc9f0","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1718585358035,"stop":1718585384339,"duration":26304},"status":"failed","statusMessage":"ValueError: time data 'June' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f9626088cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f96260feb90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'June', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'June' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'June' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f9626088cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f96260feb90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'June', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'June' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1718585358035,"stop":1718585358036,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1718585358036,"stop":1718585384339,"duration":26303},"status":"failed","statusMessage":"time data 'June' does not match format '%d %B'","statusTrace":"ValueError: time data 'June' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6717f22013d206d4","name":"stdout","source":"6717f22013d206d4.txt","type":"text/plain","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1245-518"},{"name":"thread","value":"2672-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":25,"unknown":0,"total":41},"items":[{"uid":"fef6d108001efbaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1944//#testresult/fef6d108001efbaa","status":"passed","time":{"start":1718498772895,"stop":1718498810640,"duration":37745}},{"uid":"ebbcd1e87c02f518","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1943//#testresult/ebbcd1e87c02f518","status":"passed","time":{"start":1718412363860,"stop":1718412407776,"duration":43916}},{"uid":"f87c77ccd99c22da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1942//#testresult/f87c77ccd99c22da","status":"passed","time":{"start":1718325856805,"stop":1718325868383,"duration":11578}},{"uid":"78eabf51fdfdd544","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1939//#testresult/78eabf51fdfdd544","status":"passed","time":{"start":1718239538700,"stop":1718239557304,"duration":18604}},{"uid":"651ad4432b137940","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1938//#testresult/651ad4432b137940","status":"passed","time":{"start":1718153161416,"stop":1718153175916,"duration":14500}},{"uid":"5f8f78ae0312acb6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1937//#testresult/5f8f78ae0312acb6","status":"passed","time":{"start":1718066901406,"stop":1718066922300,"duration":20894}},{"uid":"dbd1a209a06c8e60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1936//#testresult/dbd1a209a06c8e60","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1717980344048,"stop":1717980373902,"duration":29854}},{"uid":"518857d339c3d2e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1934//#testresult/518857d339c3d2e","status":"passed","time":{"start":1717893923726,"stop":1717893964311,"duration":40585}},{"uid":"b5c277b77f7aa603","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1933//#testresult/b5c277b77f7aa603","status":"passed","time":{"start":1717807667679,"stop":1717807686935,"duration":19256}},{"uid":"3ac5bfcec402cfea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1932//#testresult/3ac5bfcec402cfea","status":"passed","time":{"start":1717721152184,"stop":1717721171143,"duration":18959}},{"uid":"12af8c3f911f0ede","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1927//#testresult/12af8c3f911f0ede","status":"passed","time":{"start":1717634621807,"stop":1717634637170,"duration":15363}},{"uid":"9232396a613937ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1924//#testresult/9232396a613937ce","status":"passed","time":{"start":1717548224764,"stop":1717548259138,"duration":34374}},{"uid":"c51f309047c0be13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1923//#testresult/c51f309047c0be13","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56542069fe9a <unknown>\n#1 0x56542038945c <unknown>\n#2 0x5654203d55b5 <unknown>\n#3 0x5654203d5671 <unknown>\n#4 0x565420419f14 <unknown>\n#5 0x5654203f84dd <unknown>\n#6 0x5654204172cc <unknown>\n#7 0x5654203f8253 <unknown>\n#8 0x5654203c81c7 <unknown>\n#9 0x5654203c8b3e <unknown>\n#10 0x5654206662db <unknown>\n#11 0x56542066a387 <unknown>\n#12 0x565420652e0e <unknown>\n#13 0x56542066ae52 <unknown>\n#14 0x5654206377af <unknown>\n#15 0x56542068f188 <unknown>\n#16 0x56542068f35b <unknown>\n#17 0x56542069efcc <unknown>\n#18 0x7fdd9eb8bac3 <unknown>","time":{"start":1717461873083,"stop":1717461921456,"duration":48373}},{"uid":"33f3437e5668dfe2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1921//#testresult/33f3437e5668dfe2","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1717375605823,"stop":1717375621954,"duration":16131}},{"uid":"ff1bc9e6bc5951b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1911//#testresult/ff1bc9e6bc5951b9","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1717316983607,"stop":1717317012355,"duration":28748}},{"uid":"56e0d2caee0234bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1908//#testresult/56e0d2caee0234bd","status":"passed","time":{"start":1717289073578,"stop":1717289099968,"duration":26390}},{"uid":"66ed1878d90436fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1905//#testresult/66ed1878d90436fc","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1717202874891,"stop":1717202882951,"duration":8060}},{"uid":"7d9b5915f4be280d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1904//#testresult/7d9b5915f4be280d","status":"passed","time":{"start":1717116193307,"stop":1717116214631,"duration":21324}},{"uid":"cceb52ff4257488c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1903//#testresult/cceb52ff4257488c","status":"passed","time":{"start":1717029854150,"stop":1717029877684,"duration":23534}},{"uid":"3266b9a303511eab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1898//#testresult/3266b9a303511eab","status":"passed","time":{"start":1716943595043,"stop":1716943626183,"duration":31140}}]},"tags":[]},"source":"4bb2eb937b1dc9f0.json","parameterValues":["WestBerkshireCouncil"]}