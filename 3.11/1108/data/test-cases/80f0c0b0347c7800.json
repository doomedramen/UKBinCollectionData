{"uid":"80f0c0b0347c7800","name":"Validate Council Output [ChelmsfordCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"ca53b6762a00c9270716d2dce73b5f79","time":{"start":1699101509747,"stop":1699101518501,"duration":8754},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f5d5a5de200>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5d4cee7d50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:94: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f5d4cee7d50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:89: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f5d5a5de200>\nrequest = <FixtureRequest for <Function test_scenario_outline[ChelmsfordCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5d4cee7d50>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:94: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f5d4cee7d50>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:89: AssertionError","steps":[{"name":"Given the council: ChelmsfordCityCouncil","time":{"start":1699101509747,"stop":1699101509748,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from ChelmsfordCityCouncil","time":{"start":1699101509748,"stop":1699101518499,"duration":8751},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1699101518499,"stop":1699101518499,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1699101518499,"stop":1699101518501,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az950-465"},{"name":"thread","value":"2598-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ChelmsfordCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":164,"unknown":0,"total":178},"items":[{"uid":"b4dedce90281ea1a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/b4dedce90281ea1a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699060439842,"stop":1699060460142,"duration":20300}},{"uid":"3c692ab7db96a967","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/3c692ab7db96a967","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699007582453,"stop":1699007602934,"duration":20481}},{"uid":"b04e3478be9ad188","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1095//#testresult/b04e3478be9ad188","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698988576251,"stop":1698988585189,"duration":8938}},{"uid":"3be96b3a28d568ae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1094//#testresult/3be96b3a28d568ae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698974106218,"stop":1698974126915,"duration":20697}},{"uid":"9b98248faef67447","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1091//#testresult/9b98248faef67447","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698887630684,"stop":1698887639699,"duration":9015}},{"uid":"b49fbd98b2b88760","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/b49fbd98b2b88760","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878264679,"stop":1698878273622,"duration":8943}},{"uid":"3e7bf3d2322c8005","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/3e7bf3d2322c8005","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698878222805,"stop":1698878231817,"duration":9012}},{"uid":"b07be78df0cb7a7c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/b07be78df0cb7a7c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1698867395183,"stop":1698867404453,"duration":9270}},{"uid":"d3d142394c1bbb18","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/d3d142394c1bbb18","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698801505503,"stop":1698801525605,"duration":20102}},{"uid":"118180ce646fb922","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/118180ce646fb922","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698788427482,"stop":1698788436103,"duration":8621}},{"uid":"b30926cc71de91a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1077//#testresult/b30926cc71de91a0","status":"passed","time":{"start":1698714891792,"stop":1698714913350,"duration":21558}},{"uid":"80fa018632ed8ea8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1075//#testresult/80fa018632ed8ea8","status":"passed","time":{"start":1698701281842,"stop":1698701291223,"duration":9381}},{"uid":"48a9dff5b851d2f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1073//#testresult/48a9dff5b851d2f8","status":"passed","time":{"start":1698700159322,"stop":1698700168831,"duration":9509}},{"uid":"79a583a4814ff20b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1070//#testresult/79a583a4814ff20b","status":"passed","time":{"start":1698692718073,"stop":1698692727618,"duration":9545}},{"uid":"691151cc6236a766","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1069//#testresult/691151cc6236a766","status":"passed","time":{"start":1698692673845,"stop":1698692683424,"duration":9579}},{"uid":"239a43c65e1dc5c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1066//#testresult/239a43c65e1dc5c4","status":"passed","time":{"start":1698646230427,"stop":1698646240079,"duration":9652}},{"uid":"a4ffb99e550a5501","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/a4ffb99e550a5501","status":"passed","time":{"start":1698646264549,"stop":1698646274418,"duration":9869}},{"uid":"5856f567f41eff92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/5856f567f41eff92","status":"passed","time":{"start":1698628470760,"stop":1698628477442,"duration":6682}},{"uid":"fb3b92094dba7a65","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/fb3b92094dba7a65","status":"passed","time":{"start":1698615110905,"stop":1698615117822,"duration":6917}},{"uid":"37695bf677294335","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/37695bf677294335","status":"passed","time":{"start":1698615161827,"stop":1698615168857,"duration":7030}}]},"tags":[]},"source":"80f0c0b0347c7800.json","parameterValues":["ChelmsfordCityCouncil"]}