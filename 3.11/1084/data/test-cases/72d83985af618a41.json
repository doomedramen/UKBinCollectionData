{"uid":"72d83985af618a41","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1698867389508,"stop":1698867391046,"duration":1538},"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fbb338dd580>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fbb2a0b2410>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:63: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fbb338dd580>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fbb2a0b2410>, 'council': 'KingstonUponThamesCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:63: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    \"collectionDate\": get_next_occurrence_from_day_month(datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None 2023', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1698867389509,"stop":1698867389509,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from KingstonUponThamesCouncil","time":{"start":1698867389509,"stop":1698867391046,"duration":1537},"status":"failed","statusMessage":"time data 'None 2023' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az717-782"},{"name":"thread","value":"2254-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":152,"unknown":0,"total":170},"items":[{"uid":"b8be2ec6b416b88b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/b8be2ec6b416b88b","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698801522377,"stop":1698801523364,"duration":987}},{"uid":"c53c43aadf042790","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/c53c43aadf042790","status":"failed","statusDetails":"AssertionError: assert False is True","time":{"start":1698788534776,"stop":1698788535447,"duration":671}},{"uid":"f47db822a4f6f948","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1077//#testresult/f47db822a4f6f948","status":"passed","time":{"start":1698715006566,"stop":1698715007423,"duration":857}},{"uid":"66952d02bef5893b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1075//#testresult/66952d02bef5893b","status":"passed","time":{"start":1698701362583,"stop":1698701363644,"duration":1061}},{"uid":"caec7e567fbebd4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1073//#testresult/caec7e567fbebd4a","status":"passed","time":{"start":1698700248000,"stop":1698700248796,"duration":796}},{"uid":"4fb138ab4b0f382a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1070//#testresult/4fb138ab4b0f382a","status":"passed","time":{"start":1698693132946,"stop":1698693133798,"duration":852}},{"uid":"8fe545f2d130030e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1069//#testresult/8fe545f2d130030e","status":"passed","time":{"start":1698692771147,"stop":1698692772042,"duration":895}},{"uid":"97f14f6abb680c66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1066//#testresult/97f14f6abb680c66","status":"passed","time":{"start":1698646350031,"stop":1698646350962,"duration":931}},{"uid":"52367444c94be6dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1067//#testresult/52367444c94be6dc","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1698646356058,"stop":1698646357916,"duration":1858}},{"uid":"fff7789e495dc945","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1064//#testresult/fff7789e495dc945","status":"passed","time":{"start":1698628575769,"stop":1698628576474,"duration":705}},{"uid":"b3d290f3bebacdfb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1062//#testresult/b3d290f3bebacdfb","status":"passed","time":{"start":1698615493373,"stop":1698615494207,"duration":834}},{"uid":"b879db386b004c58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1063//#testresult/b879db386b004c58","status":"passed","time":{"start":1698615257122,"stop":1698615257799,"duration":677}},{"uid":"bfa8b037c16972a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1061//#testresult/bfa8b037c16972a3","status":"passed","time":{"start":1698615136485,"stop":1698615137348,"duration":863}},{"uid":"1e09ac0b7e5f62c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1054//#testresult/1e09ac0b7e5f62c0","status":"passed","time":{"start":1698542376571,"stop":1698542377501,"duration":930}},{"uid":"703d861426b76471","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1053//#testresult/703d861426b76471","status":"failed","statusDetails":"ValueError: time data 'None 2023' does not match format '%A, %d %B %Y'","time":{"start":1698455565170,"stop":1698455566861,"duration":1691}},{"uid":"b561b049ec0e9a4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1051//#testresult/b561b049ec0e9a4f","status":"passed","time":{"start":1698369253595,"stop":1698369254433,"duration":838}},{"uid":"8c8d284f0ebc7a30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1050//#testresult/8c8d284f0ebc7a30","status":"passed","time":{"start":1698282858120,"stop":1698282859200,"duration":1080}},{"uid":"b8efd99e97f6e4ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1049//#testresult/b8efd99e97f6e4ba","status":"passed","time":{"start":1698196533145,"stop":1698196533875,"duration":730}},{"uid":"be931a4164af6e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1048//#testresult/be931a4164af6e7","status":"passed","time":{"start":1698178232189,"stop":1698178232975,"duration":786}},{"uid":"c422946d99aeca99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1047//#testresult/c422946d99aeca99","status":"passed","time":{"start":1698178219541,"stop":1698178220130,"duration":589}}]},"tags":[]},"source":"72d83985af618a41.json","parameterValues":["KingstonUponThamesCouncil"]}