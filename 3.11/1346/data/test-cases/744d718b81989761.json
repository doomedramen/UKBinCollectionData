{"uid":"744d718b81989761","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1704158213211,"stop":1704158214126,"duration":915},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f271e58e340>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f271e5f9190>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f271e58e340>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f271e5f9190>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:76: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1704158213211,"stop":1704158213212,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1704158213212,"stop":1704158214126,"duration":914},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az777-743"},{"name":"thread","value":"2670-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":61,"unknown":0,"total":69},"items":[{"uid":"ef0caa4da8644ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1345//#testresult/ef0caa4da8644ca","status":"passed","time":{"start":1704114587756,"stop":1704114589412,"duration":1656}},{"uid":"3565879ea8653aca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1343//#testresult/3565879ea8653aca","status":"passed","time":{"start":1704113684715,"stop":1704113685935,"duration":1220}},{"uid":"e67942a94fc3e9de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/e67942a94fc3e9de","status":"passed","time":{"start":1704113643513,"stop":1704113644316,"duration":803}},{"uid":"40911f6750dfee40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/40911f6750dfee40","status":"passed","time":{"start":1704112213965,"stop":1704112214872,"duration":907}},{"uid":"b50eb2c6beaadef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/b50eb2c6beaadef","status":"passed","time":{"start":1704112066916,"stop":1704112068557,"duration":1641}},{"uid":"e05237877ef5f20d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/e05237877ef5f20d","status":"passed","time":{"start":1704111810030,"stop":1704111811548,"duration":1518}},{"uid":"f68d037bcafeace3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/f68d037bcafeace3","status":"passed","time":{"start":1704111830905,"stop":1704111832315,"duration":1410}},{"uid":"fcf03efdcc0f7067","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/fcf03efdcc0f7067","status":"passed","time":{"start":1704111477179,"stop":1704111478029,"duration":850}},{"uid":"51ba0ab99a4982e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/51ba0ab99a4982e1","status":"passed","time":{"start":1704111309489,"stop":1704111310675,"duration":1186}},{"uid":"9ecb3b84bba970b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/9ecb3b84bba970b7","status":"passed","time":{"start":1704099908041,"stop":1704099909678,"duration":1637}},{"uid":"5103c0209f5efeed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/5103c0209f5efeed","status":"passed","time":{"start":1704072213909,"stop":1704072214910,"duration":1001}},{"uid":"48859af3f2d1b5b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/48859af3f2d1b5b3","status":"passed","time":{"start":1704050353821,"stop":1704050355640,"duration":1819}},{"uid":"3bfc0116911a586b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/3bfc0116911a586b","status":"passed","time":{"start":1704043839823,"stop":1704043840758,"duration":935}},{"uid":"7ab4e37bb78f4da1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/7ab4e37bb78f4da1","status":"passed","time":{"start":1703985719877,"stop":1703985721841,"duration":1964}},{"uid":"badafb6540770143","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/badafb6540770143","status":"passed","time":{"start":1703898875085,"stop":1703898876033,"duration":948}},{"uid":"a2ce0e2fa3bb2815","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/a2ce0e2fa3bb2815","status":"passed","time":{"start":1703853427665,"stop":1703853429115,"duration":1450}},{"uid":"7d3c2572976736a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/7d3c2572976736a9","status":"passed","time":{"start":1703851044709,"stop":1703851045852,"duration":1143}},{"uid":"3d956dfd7058fc6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/3d956dfd7058fc6f","status":"passed","time":{"start":1703811991120,"stop":1703811992027,"duration":907}},{"uid":"eb2450f985be4fdd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/eb2450f985be4fdd","status":"passed","time":{"start":1703756123497,"stop":1703756125144,"duration":1647}},{"uid":"1202be8d44bb1319","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/1202be8d44bb1319","status":"passed","time":{"start":1703726104839,"stop":1703726106145,"duration":1306}}]},"tags":[]},"source":"744d718b81989761.json","parameterValues":["BarnsleyMBCouncil","None","None"]}