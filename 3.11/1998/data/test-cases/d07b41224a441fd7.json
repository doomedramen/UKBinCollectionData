{"uid":"d07b41224a441fd7","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1722385525912,"stop":1722385620700,"duration":94788},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"fixturefunc = <function scrape_step at 0x7f6e4c762020>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f6e4c5d9e50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:61: in parse_data\n    dropdown_search = wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4bb217b7a7b11a9eb4db7eedb0ce1956\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f6e4bb5e8e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"fixturefunc = <function scrape_step at 0x7f6e4c762020>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f6e4c5d9e50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:61: in parse_data\n    dropdown_search = wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4bb217b7a7b11a9eb4db7eedb0ce1956\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f6e4bb5e8e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Given the council","time":{"start":1722385525912,"stop":1722385525913,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722385525913,"stop":1722385620700,"duration":94787},"status":"failed","statusMessage":"Message: \n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: \n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4a049f91472ccd6d","name":"stdout","source":"4a049f91472ccd6d.txt","type":"text/plain","size":70}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az914-349"},{"name":"thread","value":"2768-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":61,"unknown":0,"total":65},"items":[{"uid":"ece40334434eabd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/ece40334434eabd","status":"passed","time":{"start":1722299063621,"stop":1722299096905,"duration":33284}},{"uid":"b08feadf372e1680","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/b08feadf372e1680","status":"passed","time":{"start":1722212650711,"stop":1722212681677,"duration":30966}},{"uid":"291bad067cdff61d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/291bad067cdff61d","status":"passed","time":{"start":1722126168049,"stop":1722126203779,"duration":35730}},{"uid":"5d235a6652e6cddf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/5d235a6652e6cddf","status":"passed","time":{"start":1722039948579,"stop":1722040007412,"duration":58833}},{"uid":"9c88f884347e9ced","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/9c88f884347e9ced","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1721953493396,"stop":1721953591491,"duration":98095}},{"uid":"9f9d01d587c55cd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/9f9d01d587c55cd1","status":"passed","time":{"start":1721867117473,"stop":1721867137272,"duration":19799}},{"uid":"1d0addf56ade18f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/1d0addf56ade18f9","status":"passed","time":{"start":1721780680449,"stop":1721780724526,"duration":44077}},{"uid":"7f91a5ce3fc1050f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/7f91a5ce3fc1050f","status":"passed","time":{"start":1721694214068,"stop":1721694245296,"duration":31228}},{"uid":"3380566eac8a2e39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/3380566eac8a2e39","status":"passed","time":{"start":1721607814314,"stop":1721607846929,"duration":32615}},{"uid":"7cebe38f10462899","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/7cebe38f10462899","status":"passed","time":{"start":1721521394851,"stop":1721521425989,"duration":31138}},{"uid":"b4e70b73d7f900df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/b4e70b73d7f900df","status":"passed","time":{"start":1721435163097,"stop":1721435190229,"duration":27132}},{"uid":"486ba7c7ee74a9fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/486ba7c7ee74a9fd","status":"passed","time":{"start":1721373119352,"stop":1721373167122,"duration":47770}},{"uid":"662ea44a7523a1cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/662ea44a7523a1cc","status":"passed","time":{"start":1721264067843,"stop":1721264095241,"duration":27398}},{"uid":"b6a534471503750a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/b6a534471503750a","status":"passed","time":{"start":1721177544249,"stop":1721177563767,"duration":19518}},{"uid":"a4412a0312fb58aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/a4412a0312fb58aa","status":"passed","time":{"start":1721091121272,"stop":1721091159059,"duration":37787}},{"uid":"46491bc62c4dda6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1982//#testresult/46491bc62c4dda6d","status":"passed","time":{"start":1721004838197,"stop":1721004860399,"duration":22202}},{"uid":"e6bca24f1b09b4ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/e6bca24f1b09b4ca","status":"passed","time":{"start":1720918541378,"stop":1720918572001,"duration":30623}},{"uid":"579088a0d0cdb520","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/579088a0d0cdb520","status":"passed","time":{"start":1720831929882,"stop":1720831953613,"duration":23731}},{"uid":"da9867418cdf0353","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1979//#testresult/da9867418cdf0353","status":"passed","time":{"start":1720745442411,"stop":1720745458908,"duration":16497}},{"uid":"3ad5853bdcef773a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1978//#testresult/3ad5853bdcef773a","status":"passed","time":{"start":1720659115547,"stop":1720659144776,"duration":29229}}]},"tags":[]},"source":"d07b41224a441fd7.json","parameterValues":["WalthamForest"]}