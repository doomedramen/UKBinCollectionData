{"uid":"37fe27caaa558a73","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1722384933817,"stop":1722385018472,"duration":84655},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fefd96ad8a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fefd9529610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fefd96ad8a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fefd9529610>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1722384933817,"stop":1722384933817,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722384933818,"stop":1722385018472,"duration":84654},"status":"failed","statusMessage":"time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 31 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"38c2113e22e25ac7","name":"stdout","source":"38c2113e22e25ac7.txt","type":"text/plain","size":205}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az914-349"},{"name":"thread","value":"2765-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":38,"broken":0,"skipped":0,"passed":225,"unknown":0,"total":263},"items":[{"uid":"8a5f800236c20b9d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/8a5f800236c20b9d","status":"passed","time":{"start":1722298368163,"stop":1722298398343,"duration":30180}},{"uid":"62f77bed670ea048","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/62f77bed670ea048","status":"passed","time":{"start":1722212199969,"stop":1722212249699,"duration":49730}},{"uid":"f59213662442912d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/f59213662442912d","status":"passed","time":{"start":1722125553185,"stop":1722125568925,"duration":15740}},{"uid":"167bc53e66cc673f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/167bc53e66cc673f","status":"passed","time":{"start":1722039182636,"stop":1722039200890,"duration":18254}},{"uid":"3a82706387ea30a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/3a82706387ea30a5","status":"passed","time":{"start":1721952750160,"stop":1721952770283,"duration":20123}},{"uid":"9c152b414c0c89d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/9c152b414c0c89d5","status":"passed","time":{"start":1721866555099,"stop":1721866654163,"duration":99064}},{"uid":"aa1cc019d79c837d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/aa1cc019d79c837d","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 24 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1721780012467,"stop":1721780030450,"duration":17983}},{"uid":"9f1f4adecbd2c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/9f1f4adecbd2c1","status":"passed","time":{"start":1721693755304,"stop":1721693798261,"duration":42957}},{"uid":"94435dc409acc3d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/94435dc409acc3d8","status":"passed","time":{"start":1721607253163,"stop":1721607283271,"duration":30108}},{"uid":"67c05c72c6734f13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/67c05c72c6734f13","status":"passed","time":{"start":1721520762795,"stop":1721520821210,"duration":58415}},{"uid":"37be6552d06bdcda","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/37be6552d06bdcda","status":"passed","time":{"start":1721434468799,"stop":1721434486703,"duration":17904}},{"uid":"7e37e0632ba84861","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/7e37e0632ba84861","status":"passed","time":{"start":1721372157634,"stop":1721372421753,"duration":264119}},{"uid":"c4fca074cd643c35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/c4fca074cd643c35","status":"passed","time":{"start":1721263438053,"stop":1721263486499,"duration":48446}},{"uid":"3c80274a8966ac41","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1984//#testresult/3c80274a8966ac41","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 17 July\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1721176819080,"stop":1721176911842,"duration":92762}},{"uid":"3ee198e839ae66dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1983//#testresult/3ee198e839ae66dc","status":"passed","time":{"start":1721090450556,"stop":1721090481017,"duration":30461}},{"uid":"b18e53ad91a05505","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1982//#testresult/b18e53ad91a05505","status":"passed","time":{"start":1721004180004,"stop":1721004211507,"duration":31503}},{"uid":"1dff024e9fdafbcf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/1dff024e9fdafbcf","status":"passed","time":{"start":1720918065041,"stop":1720918107808,"duration":42767}},{"uid":"7e1268f6fa871fe9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/7e1268f6fa871fe9","status":"passed","time":{"start":1720831425832,"stop":1720831483006,"duration":57174}},{"uid":"ee898913d9823d1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1979//#testresult/ee898913d9823d1c","status":"passed","time":{"start":1720744904507,"stop":1720744985546,"duration":81039}},{"uid":"b808f3bfb229b8ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1978//#testresult/b808f3bfb229b8ce","status":"passed","time":{"start":1720658489802,"stop":1720658547420,"duration":57618}}]},"tags":[]},"source":"37fe27caaa558a73.json","parameterValues":["KingstonUponThamesCouncil"]}