{"uid":"781e4b0de9868266","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1701904925193,"stop":1701904926691,"duration":1498},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f6e0e0b8cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6e0d6088d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f6e0d6088d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f6e0e0b8cc0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f6e0d6088d0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f6e0d6088d0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1701904925193,"stop":1701904925193,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1701904925193,"stop":1701904926689,"duration":1496},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1701904926689,"stop":1701904926690,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1701904926690,"stop":1701904926691,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1538-646"},{"name":"thread","value":"2727-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":0,"skipped":0,"passed":37,"unknown":0,"total":57},"items":[{"uid":"134e1be7adb2e33b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/134e1be7adb2e33b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882638719,"stop":1701882640215,"duration":1496}},{"uid":"f74467d295ed4e16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/f74467d295ed4e16","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882615689,"stop":1701882617491,"duration":1802}},{"uid":"f575e872bc9a82dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/f575e872bc9a82dd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825608852,"stop":1701825613689,"duration":4837}},{"uid":"df572939556dc28a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/df572939556dc28a","status":"passed","time":{"start":1701795618534,"stop":1701795619729,"duration":1195}},{"uid":"b80c9afd882da41c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/b80c9afd882da41c","status":"passed","time":{"start":1701795574290,"stop":1701795575417,"duration":1127}},{"uid":"23e50d9de7105edf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1193//#testresult/23e50d9de7105edf","status":"passed","time":{"start":1701758584066,"stop":1701758586048,"duration":1982}},{"uid":"cea4b621a279e718","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1192//#testresult/cea4b621a279e718","status":"passed","time":{"start":1701758559755,"stop":1701758560776,"duration":1021}},{"uid":"c5296da9faf606c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1191//#testresult/c5296da9faf606c9","status":"passed","time":{"start":1701739232209,"stop":1701739234675,"duration":2466}},{"uid":"72ed0883afd6cd87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1187//#testresult/72ed0883afd6cd87","status":"passed","time":{"start":1701714392516,"stop":1701714393560,"duration":1044}},{"uid":"71b506a3a8e7f9f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1184//#testresult/71b506a3a8e7f9f6","status":"passed","time":{"start":1701652787983,"stop":1701652789533,"duration":1550}},{"uid":"5af6d3b06167607","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1183//#testresult/5af6d3b06167607","status":"passed","time":{"start":1701566645342,"stop":1701566647132,"duration":1790}},{"uid":"f02d525e9c963fec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1182//#testresult/f02d525e9c963fec","status":"passed","time":{"start":1701479796837,"stop":1701479800518,"duration":3681}},{"uid":"b0b77f9f0ce25832","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1179//#testresult/b0b77f9f0ce25832","status":"passed","time":{"start":1701419033070,"stop":1701419034356,"duration":1286}},{"uid":"38c09cb74da50e55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1181//#testresult/38c09cb74da50e55","status":"passed","time":{"start":1701419135696,"stop":1701419137749,"duration":2053}},{"uid":"b86c09ed35b39b9d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1180//#testresult/b86c09ed35b39b9d","status":"passed","time":{"start":1701419095719,"stop":1701419096814,"duration":1095}},{"uid":"d328476d2a292bba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1176//#testresult/d328476d2a292bba","status":"passed","time":{"start":1701418954436,"stop":1701418955641,"duration":1205}},{"uid":"c8ec4da9ea62b4bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1177//#testresult/c8ec4da9ea62b4bb","status":"passed","time":{"start":1701418983077,"stop":1701418984597,"duration":1520}},{"uid":"ace531f255f89b61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1175//#testresult/ace531f255f89b61","status":"passed","time":{"start":1701414393847,"stop":1701414396236,"duration":2389}},{"uid":"3484253ace2d5d05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/3484253ace2d5d05","status":"passed","time":{"start":1701394017255,"stop":1701394018675,"duration":1420}},{"uid":"41ab183dc3fa3bea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/41ab183dc3fa3bea","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353393629,"stop":1701353394896,"duration":1267}}]},"tags":[]},"source":"781e4b0de9868266.json","parameterValues":["SouthNorfolkCouncil","None","None"]}