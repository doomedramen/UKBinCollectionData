{"uid":"4f24639e0a9cf14f","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1703467286136,"stop":1703467288332,"duration":2196},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8e4cf34c20>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8e4c255910>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8e4c255910>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f8e4cf34c20>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f8e4c255910>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f8e4c255910>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1703467286136,"stop":1703467286136,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1703467286137,"stop":1703467288330,"duration":2193},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1703467288330,"stop":1703467288330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1703467288330,"stop":1703467288332,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1024-593"},{"name":"thread","value":"2795-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":94,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":94},"items":[{"uid":"11c5240e55cab402","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1292//#testresult/11c5240e55cab402","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416611080,"stop":1703416618265,"duration":7185}},{"uid":"bdc1bd88d56aade6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1291//#testresult/bdc1bd88d56aade6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703416525646,"stop":1703416533275,"duration":7629}},{"uid":"4cfd90e3d55dfdcc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1289//#testresult/4cfd90e3d55dfdcc","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703381259114,"stop":1703381261661,"duration":2547}},{"uid":"d4614a78fdeadd8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1287//#testresult/d4614a78fdeadd8d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703294252686,"stop":1703294255088,"duration":2402}},{"uid":"41b6e8c09c2d39af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/41b6e8c09c2d39af","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703207965641,"stop":1703207967989,"duration":2348}},{"uid":"20ccb58feab40219","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/20ccb58feab40219","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703121646319,"stop":1703121647819,"duration":1500}},{"uid":"b8d14e265e7590d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/b8d14e265e7590d2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703034484693,"stop":1703034487215,"duration":2522}},{"uid":"ba0efc672ed0ae4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/ba0efc672ed0ae4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703025105447,"stop":1703025110017,"duration":4570}},{"uid":"6bcec1a1682a21ac","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/6bcec1a1682a21ac","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703025032383,"stop":1703025035713,"duration":3330}},{"uid":"c14ee9c97bc015b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/c14ee9c97bc015b7","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702948879637,"stop":1702948888869,"duration":9232}},{"uid":"b6d48346094734e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/b6d48346094734e5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702862506908,"stop":1702862508989,"duration":2081}},{"uid":"e2e0b093c51d5791","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/e2e0b093c51d5791","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702860190467,"stop":1702860193236,"duration":2769}},{"uid":"43d4a8d67669a22e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/43d4a8d67669a22e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702843694667,"stop":1702843697864,"duration":3197}},{"uid":"8533d93c7adb0cc1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/8533d93c7adb0cc1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702809656951,"stop":1702809659849,"duration":2898}},{"uid":"6b8dfe74d27d861b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/6b8dfe74d27d861b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657401099,"stop":1702657403415,"duration":2316}},{"uid":"c598bb3245005cca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/c598bb3245005cca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702657525507,"stop":1702657528210,"duration":2703}},{"uid":"35584f0f0c8abc24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/35584f0f0c8abc24","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702603329984,"stop":1702603331544,"duration":1560}},{"uid":"a988a8b899fe7316","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/a988a8b899fe7316","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702540209469,"stop":1702540211928,"duration":2459}},{"uid":"e2d0c85f31f33f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/e2d0c85f31f33f5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702516952302,"stop":1702516954407,"duration":2105}},{"uid":"e35009d444e990ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/e35009d444e990ca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1702447688449,"stop":1702447690292,"duration":1843}}]},"tags":[]},"source":"4f24639e0a9cf14f.json","parameterValues":["WiltshireCouncil","None","None"]}