{"uid":"a773a2d6b9bad3fb","name":"Validate Council Output [SouthNorfolkCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"e5d83111f1a9552c04e48720eaedba42","time":{"start":1704406096780,"stop":1704406098511,"duration":1731},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f5353456020>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f535233c810>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f535233c810>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f5353456020>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthNorfolkCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f535233c810>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f535233c810>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: SouthNorfolkCouncil","time":{"start":1704406096780,"stop":1704406096781,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from SouthNorfolkCouncil using None and the None is set","time":{"start":1704406096781,"stop":1704406098509,"duration":1728},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704406098509,"stop":1704406098509,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704406098509,"stop":1704406098511,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az573-296"},{"name":"thread","value":"2664-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthNorfolkCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":50,"broken":0,"skipped":0,"passed":84,"unknown":0,"total":134},"items":[{"uid":"9cf459772731cc9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1376//#testresult/9cf459772731cc9b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398926556,"stop":1704398928505,"duration":1949}},{"uid":"20ebc4219da07abb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1375//#testresult/20ebc4219da07abb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398876070,"stop":1704398877814,"duration":1744}},{"uid":"5cad5fc0fc7d70e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1373//#testresult/5cad5fc0fc7d70e8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704388433504,"stop":1704388435271,"duration":1767}},{"uid":"f30fb520c6b8f89","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1369//#testresult/f30fb520c6b8f89","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378458358,"stop":1704378459740,"duration":1382}},{"uid":"93bbebdc4f05ff8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1367//#testresult/93bbebdc4f05ff8d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378132742,"stop":1704378134331,"duration":1589}},{"uid":"c619f4c5dd0f4700","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1366//#testresult/c619f4c5dd0f4700","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375956176,"stop":1704375957737,"duration":1561}},{"uid":"f8d4c668e5953759","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1363//#testresult/f8d4c668e5953759","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356882759,"stop":1704356884734,"duration":1975}},{"uid":"fccc7edda656ac05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/fccc7edda656ac05","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356038345,"stop":1704356039745,"duration":1400}},{"uid":"f9892e6519503bf2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/f9892e6519503bf2","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331231430,"stop":1704331232811,"duration":1381}},{"uid":"638a89ec0c00905c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1355//#testresult/638a89ec0c00905c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303836251,"stop":1704303838064,"duration":1813}},{"uid":"5386bf7946e78ce4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1352//#testresult/5386bf7946e78ce4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704301523296,"stop":1704301524924,"duration":1628}},{"uid":"3fb4452d8dd7c237","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1349//#testresult/3fb4452d8dd7c237","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704244789020,"stop":1704244790936,"duration":1916}},{"uid":"ef5bbd2182176172","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1348//#testresult/ef5bbd2182176172","status":"passed","time":{"start":1704180416557,"stop":1704180418676,"duration":2119}},{"uid":"ad11f9cc5379476a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1346//#testresult/ad11f9cc5379476a","status":"passed","time":{"start":1704158442873,"stop":1704158445380,"duration":2507}},{"uid":"6423d8239ae670b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1345//#testresult/6423d8239ae670b3","status":"passed","time":{"start":1704114757283,"stop":1704114758987,"duration":1704}},{"uid":"e874f9d0fa76b14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1343//#testresult/e874f9d0fa76b14","status":"passed","time":{"start":1704113905856,"stop":1704113907553,"duration":1697}},{"uid":"abd837d4a4106a59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/abd837d4a4106a59","status":"passed","time":{"start":1704113787052,"stop":1704113788614,"duration":1562}},{"uid":"27b30cb7cd782b47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/27b30cb7cd782b47","status":"passed","time":{"start":1704112385676,"stop":1704112387250,"duration":1574}},{"uid":"74cd02e03b1eaa23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/74cd02e03b1eaa23","status":"passed","time":{"start":1704112281705,"stop":1704112283635,"duration":1930}},{"uid":"49f4f9689ae2a8de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/49f4f9689ae2a8de","status":"passed","time":{"start":1704112051805,"stop":1704112053548,"duration":1743}}]},"tags":[]},"source":"a773a2d6b9bad3fb.json","parameterValues":["SouthNorfolkCouncil","None","None"]}