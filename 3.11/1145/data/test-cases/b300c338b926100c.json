{"uid":"b300c338b926100c","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1700702252002,"stop":1700702257311,"duration":5309},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdb56c4af20>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdb43237e10>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fdb4485b4d0>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7fdb43237910>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'a61160aefb593fea8ba0ba0dba00690a1f801f6d', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fdb56c4af20>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdb43237e10>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:78: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:65: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:71: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fdb4485b4d0>, page = ''\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, 'url': 'https://service.croydon.gov.uk/wasteservices/w/webpage/bin-day-enter-address', ...}\ns = <requests.sessions.Session object at 0x7fdb43237910>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'a61160aefb593fea8ba0ba0dba00690a1f801f6d', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1700702252002,"stop":1700702252002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1700702252002,"stop":1700702257311,"duration":5309},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az714-44"},{"name":"thread","value":"2833-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":12,"unknown":0,"total":25},"items":[{"uid":"9aa94c6eee7bf701","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/9aa94c6eee7bf701","status":"passed","time":{"start":1700646339697,"stop":1700646345506,"duration":5809}},{"uid":"56bf78fbeb5ad34d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/56bf78fbeb5ad34d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1700646383365,"stop":1700646385068,"duration":1703}},{"uid":"a15333871e5bdd62","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/a15333871e5bdd62","status":"passed","time":{"start":1700616016640,"stop":1700616021802,"duration":5162}},{"uid":"738a36915713951b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/738a36915713951b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1700529650825,"stop":1700529652886,"duration":2061}},{"uid":"9844dfcebc5f95cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/9844dfcebc5f95cd","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1700443138131,"stop":1700443139598,"duration":1467}},{"uid":"1c5fb1fdc979f45d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/1c5fb1fdc979f45d","status":"passed","time":{"start":1700356963275,"stop":1700356968103,"duration":4828}},{"uid":"292c8081cf1504f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/292c8081cf1504f7","status":"passed","time":{"start":1700270226864,"stop":1700270231695,"duration":4831}},{"uid":"ee29061e1ea7b73b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/ee29061e1ea7b73b","status":"passed","time":{"start":1700183879629,"stop":1700183884607,"duration":4978}},{"uid":"5942be1f1197c553","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/5942be1f1197c553","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1700097522367,"stop":1700097523792,"duration":1425}},{"uid":"fb06efc44ba9d338","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/fb06efc44ba9d338","status":"passed","time":{"start":1700011037766,"stop":1700011042820,"duration":5054}},{"uid":"618b7a39ef1dfb8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/618b7a39ef1dfb8c","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699924626338,"stop":1699924628269,"duration":1931}},{"uid":"fe22acd649687ce6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/fe22acd649687ce6","status":"passed","time":{"start":1699838248601,"stop":1699838254161,"duration":5560}},{"uid":"44f068ecdf557b49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/44f068ecdf557b49","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699752021066,"stop":1699752022803,"duration":1737}},{"uid":"7b50d804a1f851e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/7b50d804a1f851e","status":"passed","time":{"start":1699668926956,"stop":1699668933219,"duration":6263}},{"uid":"f134d41c0322e2fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1124//#testresult/f134d41c0322e2fc","status":"passed","time":{"start":1699578919017,"stop":1699578923928,"duration":4911}},{"uid":"e22478d6118e3a1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/e22478d6118e3a1d","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699492594808,"stop":1699492597119,"duration":2311}},{"uid":"ca632c039c08c738","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/ca632c039c08c738","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1699481280765,"stop":1699481282481,"duration":1716}},{"uid":"aa5aebb8e5747fae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/aa5aebb8e5747fae","status":"passed","time":{"start":1699481302863,"stop":1699481307466,"duration":4603}},{"uid":"d90dc5b80c1909b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/d90dc5b80c1909b","status":"passed","time":{"start":1699445057233,"stop":1699445062939,"duration":5706}},{"uid":"7680fa475cc6e25d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/7680fa475cc6e25d","status":"passed","time":{"start":1699406125069,"stop":1699406130431,"duration":5362}}]},"tags":[]},"source":"b300c338b926100c.json","parameterValues":["CroydonCouncil","None","None"]}