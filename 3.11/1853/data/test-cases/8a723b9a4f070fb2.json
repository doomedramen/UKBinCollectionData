{"uid":"8a723b9a4f070fb2","name":"Validate Council Output [EastCambridgeshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"94109bff7ef580f8a70ff49447a40d87","time":{"start":1716251404868,"stop":1716251436403,"duration":31535},"status":"failed","statusMessage":"ValueError: not enough values to unpack (expected 3, got 1)","statusTrace":"fixturefunc = <function scrape_step at 0x7f2c1bb32340>\nrequest = <FixtureRequest for <Function test_scenario_outline[EastCambridgeshireCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2c1b5e0550>, 'council': 'EastCambridgeshireCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <EastCambridgeshireCouncil.CouncilClass object at 0x7f2c1b841410>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '10002597178', ...}\nuprn = '10002597178'\nurl = 'https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn=10002597178'\ns = <requests.sessions.Session object at 0x7f2c1b66d8d0>\nsoup = <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n\n<html>\n<he...\n\r\n    $('#collectionaddress').attr('src', '/fillform/?iframe_id=collectionaddress');\r\n\r\n})();</script></body>\n</html>\n\ndata = {'bins': []}\nbins = <div class=\"row collectionsrow\"><div class=\"col-xs-12 title collectionscell\">\n          \t\t\t\t            Please select an address to view the upcoming collections.\n          \t\t\t\t          </div></div>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        # Check the UPRN is valid\n        check_uprn(uprn)\n    \n        # Request URL\n        url = f\"https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn={uprn}\"\n    \n        # Make Request\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        page = s.get(url)\n    \n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Form a JSON wrapper\n        data = {\"bins\": []}\n    \n        for bins in soup.find_all(\"div\", {\"class\": \"row collectionsrow\"}):\n            # Find the collection dates\n>           _, bin_type, date = bins.find_all(\"div\")\nE           ValueError: not enough values to unpack (expected 3, got 1)\n\nuk_bin_collection/uk_bin_collection/councils/EastCambridgeshireCouncil.py:36: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: not enough values to unpack (expected 3, got 1)","statusTrace":"fixturefunc = <function scrape_step at 0x7f2c1bb32340>\nrequest = <FixtureRequest for <Function test_scenario_outline[EastCambridgeshireCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2c1b5e0550>, 'council': 'EastCambridgeshireCouncil', 'headless_mode': 'True', 'local_browser': 'False', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:76: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <EastCambridgeshireCouncil.CouncilClass object at 0x7f2c1b841410>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '10002597178', ...}\nuprn = '10002597178'\nurl = 'https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn=10002597178'\ns = <requests.sessions.Session object at 0x7f2c1b66d8d0>\nsoup = <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n\n<html>\n<he...\n\r\n    $('#collectionaddress').attr('src', '/fillform/?iframe_id=collectionaddress');\r\n\r\n})();</script></body>\n</html>\n\ndata = {'bins': []}\nbins = <div class=\"row collectionsrow\"><div class=\"col-xs-12 title collectionscell\">\n          \t\t\t\t            Please select an address to view the upcoming collections.\n          \t\t\t\t          </div></div>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        # Check the UPRN is valid\n        check_uprn(uprn)\n    \n        # Request URL\n        url = f\"https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn={uprn}\"\n    \n        # Make Request\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        page = s.get(url)\n    \n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Form a JSON wrapper\n        data = {\"bins\": []}\n    \n        for bins in soup.find_all(\"div\", {\"class\": \"row collectionsrow\"}):\n            # Find the collection dates\n>           _, bin_type, date = bins.find_all(\"div\")\nE           ValueError: not enough values to unpack (expected 3, got 1)\n\nuk_bin_collection/uk_bin_collection/councils/EastCambridgeshireCouncil.py:36: ValueError","steps":[{"name":"Given the council: EastCambridgeshireCouncil","time":{"start":1716251404868,"stop":1716251404869,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from EastCambridgeshireCouncil","time":{"start":1716251404869,"stop":1716251436403,"duration":31534},"status":"failed","statusMessage":"not enough values to unpack (expected 3, got 1)","statusTrace":"ValueError: not enough values to unpack (expected 3, got 1)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az914-828"},{"name":"thread","value":"2774-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"EastCambridgeshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":180,"unknown":0,"total":186},"items":[{"uid":"b465bdacd048348c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1852//#testresult/b465bdacd048348c","status":"passed","time":{"start":1716164949774,"stop":1716164954460,"duration":4686}},{"uid":"c5e6d5fba2d65ab2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1851//#testresult/c5e6d5fba2d65ab2","status":"passed","time":{"start":1716155022393,"stop":1716155023730,"duration":1337}},{"uid":"39f2b56ed24885fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1846//#testresult/39f2b56ed24885fc","status":"passed","time":{"start":1716078762531,"stop":1716078763751,"duration":1220}},{"uid":"c9b5c74469332e63","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1842//#testresult/c9b5c74469332e63","status":"passed","time":{"start":1715992111236,"stop":1715992114809,"duration":3573}},{"uid":"aef9f0b893fcdfbd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1839//#testresult/aef9f0b893fcdfbd","status":"passed","time":{"start":1715983261719,"stop":1715983263000,"duration":1281}},{"uid":"6bf3f6554583418e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1834//#testresult/6bf3f6554583418e","status":"passed","time":{"start":1715973676746,"stop":1715973678160,"duration":1414}},{"uid":"e6814a97944dc6b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1110//#testresult/e6814a97944dc6b3","status":"passed","time":{"start":1699147214814,"stop":1699147216299,"duration":1485}},{"uid":"7669ad304b2bd133","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1107//#testresult/7669ad304b2bd133","status":"passed","time":{"start":1699101510748,"stop":1699101512212,"duration":1464}},{"uid":"110807a024620f5c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1106//#testresult/110807a024620f5c","status":"passed","time":{"start":1699060476555,"stop":1699060477908,"duration":1353}},{"uid":"2aa470dac239a49d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1100//#testresult/2aa470dac239a49d","status":"passed","time":{"start":1699007600620,"stop":1699007602510,"duration":1890}},{"uid":"36775857cff9dbbe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1095//#testresult/36775857cff9dbbe","status":"passed","time":{"start":1698988599663,"stop":1698988601228,"duration":1565}},{"uid":"64356078c8e0b2fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1094//#testresult/64356078c8e0b2fa","status":"passed","time":{"start":1698974145223,"stop":1698974146712,"duration":1489}},{"uid":"f9aae210cf2fe739","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1091//#testresult/f9aae210cf2fe739","status":"passed","time":{"start":1698887631336,"stop":1698887633297,"duration":1961}},{"uid":"5e0b274797027f93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1090//#testresult/5e0b274797027f93","status":"passed","time":{"start":1698878289161,"stop":1698878292564,"duration":3403}},{"uid":"97b910d7d1eb77b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1089//#testresult/97b910d7d1eb77b4","status":"passed","time":{"start":1698878235435,"stop":1698878236776,"duration":1341}},{"uid":"c0a4902472e36f1d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1086//#testresult/c0a4902472e36f1d","status":"passed","time":{"start":1698867420702,"stop":1698867421974,"duration":1272}},{"uid":"3a63552c1408f27c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1081//#testresult/3a63552c1408f27c","status":"passed","time":{"start":1698801502220,"stop":1698801503379,"duration":1159}},{"uid":"9825e56579ab9ac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1079//#testresult/9825e56579ab9ac9","status":"passed","time":{"start":1698788471905,"stop":1698788473707,"duration":1802}},{"uid":"d2b237aa0953aec0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1077//#testresult/d2b237aa0953aec0","status":"passed","time":{"start":1698714937513,"stop":1698714940290,"duration":2777}},{"uid":"234e0e1078ee39c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1075//#testresult/234e0e1078ee39c8","status":"passed","time":{"start":1698701308801,"stop":1698701310225,"duration":1424}}]},"tags":[]},"source":"8a723b9a4f070fb2.json","parameterValues":["EastCambridgeshireCouncil"]}