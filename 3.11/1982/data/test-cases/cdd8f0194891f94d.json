{"uid":"cdd8f0194891f94d","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1721004864314,"stop":1721004886917,"duration":22603},"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fbee9102660>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fbee8f7be90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'July' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fbee9102660>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fbee8f7be90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'July', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'July' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1721004864314,"stop":1721004864314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1721004864314,"stop":1721004886917,"duration":22603},"status":"failed","statusMessage":"time data 'July' does not match format '%d %B'","statusTrace":"ValueError: time data 'July' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b91c014a78da741","name":"stdout","source":"b91c014a78da741.txt","type":"text/plain","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-42"},{"name":"thread","value":"2641-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":0,"skipped":0,"passed":48,"unknown":0,"total":68},"items":[{"uid":"97a5621cd34810c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1981//#testresult/97a5621cd34810c7","status":"passed","time":{"start":1720918527152,"stop":1720918549094,"duration":21942}},{"uid":"a8036a73c61f16c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1980//#testresult/a8036a73c61f16c5","status":"passed","time":{"start":1720831921698,"stop":1720831936278,"duration":14580}},{"uid":"a60025a7af1476e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1979//#testresult/a60025a7af1476e1","status":"passed","time":{"start":1720745444072,"stop":1720745477474,"duration":33402}},{"uid":"6ac9e0bc0825cbb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1978//#testresult/6ac9e0bc0825cbb2","status":"passed","time":{"start":1720659130360,"stop":1720659166677,"duration":36317}},{"uid":"ec75c25399853c48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1977//#testresult/ec75c25399853c48","status":"passed","time":{"start":1720572718957,"stop":1720572736373,"duration":17416}},{"uid":"1109b4a07933c93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1976//#testresult/1109b4a07933c93","status":"passed","time":{"start":1720485959226,"stop":1720485975792,"duration":16566}},{"uid":"d3944cac0e31287e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1975//#testresult/d3944cac0e31287e","status":"failed","statusDetails":"ValueError: time data 'July' does not match format '%d %B'","time":{"start":1720399645486,"stop":1720399662623,"duration":17137}},{"uid":"366b4f932b53f026","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1971//#testresult/366b4f932b53f026","status":"passed","time":{"start":1720313298807,"stop":1720313315737,"duration":16930}},{"uid":"bdca01cc99048b4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1970//#testresult/bdca01cc99048b4c","status":"passed","time":{"start":1720226774905,"stop":1720226812593,"duration":37688}},{"uid":"f1eb31ca6bb3084d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1969//#testresult/f1eb31ca6bb3084d","status":"passed","time":{"start":1720140151767,"stop":1720140171930,"duration":20163}},{"uid":"4ca296edf08c6ad6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/4ca296edf08c6ad6","status":"passed","time":{"start":1720053823101,"stop":1720053840658,"duration":17557}},{"uid":"9a0fcdedcb81d211","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/9a0fcdedcb81d211","status":"passed","time":{"start":1719967381690,"stop":1719967401003,"duration":19313}},{"uid":"93734b1ea15dcd7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1966//#testresult/93734b1ea15dcd7e","status":"passed","time":{"start":1719881001037,"stop":1719881039839,"duration":38802}},{"uid":"f449564a1eca2fba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1965//#testresult/f449564a1eca2fba","status":"failed","statusDetails":"ValueError: time data 'July' does not match format '%d %B'","time":{"start":1719795058502,"stop":1719795065591,"duration":7089}},{"uid":"9ce3196992c1d0f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1964//#testresult/9ce3196992c1d0f3","status":"passed","time":{"start":1719708561471,"stop":1719708582779,"duration":21308}},{"uid":"adbd958590a24951","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1962//#testresult/adbd958590a24951","status":"passed","time":{"start":1719621794747,"stop":1719621931942,"duration":137195}},{"uid":"37b3be781f802b70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1958//#testresult/37b3be781f802b70","status":"passed","time":{"start":1719535359234,"stop":1719535371172,"duration":11938}},{"uid":"47562105ba840a0c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1954//#testresult/47562105ba840a0c","status":"passed","time":{"start":1719362772054,"stop":1719362805593,"duration":33539}},{"uid":"16d6b1d0ce52e075","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/16d6b1d0ce52e075","status":"passed","time":{"start":1719276313116,"stop":1719276345957,"duration":32841}},{"uid":"a2916a8d355d6235","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/a2916a8d355d6235","status":"failed","statusDetails":"ValueError: time data 'June' does not match format '%d %B'","time":{"start":1719190032260,"stop":1719190053676,"duration":21416}}]},"tags":[]},"source":"cdd8f0194891f94d.json","parameterValues":["WestBerkshireCouncil"]}