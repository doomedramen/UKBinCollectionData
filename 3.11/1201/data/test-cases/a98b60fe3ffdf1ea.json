{"uid":"a98b60fe3ffdf1ea","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1701882737694,"stop":1701882740070,"duration":2376},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fceecfcc2c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fced75d3ed0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fced75d3ed0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7fceecfcc2c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fced75d3ed0>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7fced75d3ed0>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1701882737694,"stop":1701882737694,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1701882737694,"stop":1701882740067,"duration":2373},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"Then the result is valid json","time":{"start":1701882740068,"stop":1701882740068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"And the output should validate against the schema","time":{"start":1701882740068,"stop":1701882740070,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az801-632"},{"name":"thread","value":"2721-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":56,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":56},"items":[{"uid":"54d6e83bf0a7050f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/54d6e83bf0a7050f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701882713892,"stop":1701882716385,"duration":2493}},{"uid":"e423f6923cdf4d46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/e423f6923cdf4d46","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701825672235,"stop":1701825680459,"duration":8224}},{"uid":"b64ef2b29875b745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/b64ef2b29875b745","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795706147,"stop":1701795711262,"duration":5115}},{"uid":"bbe35b24671b424e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/bbe35b24671b424e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701795641117,"stop":1701795642631,"duration":1514}},{"uid":"b54ecbea19f834ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1193//#testresult/b54ecbea19f834ef","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758657239,"stop":1701758660234,"duration":2995}},{"uid":"781b5a8d207873be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1192//#testresult/781b5a8d207873be","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701758655379,"stop":1701758657571,"duration":2192}},{"uid":"2f6ce63647c83878","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1191//#testresult/2f6ce63647c83878","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701739333642,"stop":1701739335745,"duration":2103}},{"uid":"5071a2355d0203db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1187//#testresult/5071a2355d0203db","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701714498238,"stop":1701714499892,"duration":1654}},{"uid":"f4fea49d473eaee8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1184//#testresult/f4fea49d473eaee8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701652872859,"stop":1701652874344,"duration":1485}},{"uid":"de3be7b605889cae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1183//#testresult/de3be7b605889cae","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701566772666,"stop":1701566775000,"duration":2334}},{"uid":"c3ce183246637bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1182//#testresult/c3ce183246637bd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701479869999,"stop":1701479871930,"duration":1931}},{"uid":"516447d1fdecccc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1179//#testresult/516447d1fdecccc5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419177452,"stop":1701419179373,"duration":1921}},{"uid":"7a6564b256007a6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1181//#testresult/7a6564b256007a6d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419206107,"stop":1701419211415,"duration":5308}},{"uid":"a433065eed89d81a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1180//#testresult/a433065eed89d81a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419151410,"stop":1701419155885,"duration":4475}},{"uid":"80188d59d08a1eca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1176//#testresult/80188d59d08a1eca","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419050152,"stop":1701419051677,"duration":1525}},{"uid":"dbe6e49a36c1f9aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1177//#testresult/dbe6e49a36c1f9aa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701419059710,"stop":1701419062250,"duration":2540}},{"uid":"dfcc932bdfc6343","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1175//#testresult/dfcc932bdfc6343","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701414514776,"stop":1701414517807,"duration":3031}},{"uid":"18c99744f9e1b64a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/18c99744f9e1b64a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701394113981,"stop":1701394118336,"duration":4355}},{"uid":"8ac3f0c4bacc3ad5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/8ac3f0c4bacc3ad5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353509282,"stop":1701353513904,"duration":4622}},{"uid":"6bf5be2521f7d79c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1170//#testresult/6bf5be2521f7d79c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353529694,"stop":1701353533672,"duration":3978}}]},"tags":[]},"source":"a98b60fe3ffdf1ea.json","parameterValues":["WiltshireCouncil","None","None"]}