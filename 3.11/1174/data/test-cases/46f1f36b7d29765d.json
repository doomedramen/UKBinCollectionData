{"uid":"46f1f36b7d29765d","name":"Validate Council Output [WiltshireCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d94f5fbc4ec697d73f28910799052df9","time":{"start":1701414426784,"stop":1701414428992,"duration":2208},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f403fe5c0e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f402fd26850>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f402fd26850>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f403fe5c0e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WiltshireCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f402fd26850>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f402fd26850>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: WiltshireCouncil","time":{"start":1701414426784,"stop":1701414426785,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from WiltshireCouncil using None and the None is set","time":{"start":1701414426785,"stop":1701414428990,"duration":2205},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1701414428990,"stop":1701414428991,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1701414428991,"stop":1701414428992,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1391-586"},{"name":"thread","value":"2881-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WiltshireCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":39,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":39},"items":[{"uid":"18c99744f9e1b64a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/18c99744f9e1b64a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701394113981,"stop":1701394118336,"duration":4355}},{"uid":"8ac3f0c4bacc3ad5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/8ac3f0c4bacc3ad5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353509282,"stop":1701353513904,"duration":4622}},{"uid":"6bf5be2521f7d79c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1170//#testresult/6bf5be2521f7d79c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701353529694,"stop":1701353533672,"duration":3978}},{"uid":"d2d7669b69d64275","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1163//#testresult/d2d7669b69d64275","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701307260518,"stop":1701307265112,"duration":4594}},{"uid":"f1a2320335c95d7e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1161//#testresult/f1a2320335c95d7e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701279458132,"stop":1701279461438,"duration":3306}},{"uid":"e91fb0bce73f0503","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1156//#testresult/e91fb0bce73f0503","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701221040415,"stop":1701221042700,"duration":2285}},{"uid":"7c06ab9d5f7b6bfd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1155//#testresult/7c06ab9d5f7b6bfd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701134533234,"stop":1701134535386,"duration":2152}},{"uid":"8c5cbb6d9db7d687","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1152//#testresult/8c5cbb6d9db7d687","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701048140250,"stop":1701048142542,"duration":2292}},{"uid":"ee84e5d3164b149a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1151//#testresult/ee84e5d3164b149a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036388538,"stop":1701036393605,"duration":5067}},{"uid":"93caf09b35dd92db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1150//#testresult/93caf09b35dd92db","status":"failed","statusDetails":"AssertionError: True","time":{"start":1701036268681,"stop":1701036273151,"duration":4470}},{"uid":"487d689f82fcb745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1148//#testresult/487d689f82fcb745","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700961931820,"stop":1700961947529,"duration":15709}},{"uid":"552dca50acc00695","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1147//#testresult/552dca50acc00695","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700875069376,"stop":1700875071196,"duration":1820}},{"uid":"501b7afff772c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1146//#testresult/501b7afff772c4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700788676740,"stop":1700788678592,"duration":1852}},{"uid":"ce34d8c89529124b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1145//#testresult/ce34d8c89529124b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700702403652,"stop":1700702408463,"duration":4811}},{"uid":"82a8b86da96e2ffb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1143//#testresult/82a8b86da96e2ffb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646514714,"stop":1700646518095,"duration":3381}},{"uid":"6813e0e5db52aa68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1144//#testresult/6813e0e5db52aa68","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700646573740,"stop":1700646580447,"duration":6707}},{"uid":"784814bfb359adc3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1141//#testresult/784814bfb359adc3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700616152492,"stop":1700616157854,"duration":5362}},{"uid":"a3837125e2ac675f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1136//#testresult/a3837125e2ac675f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700529894684,"stop":1700529897337,"duration":2653}},{"uid":"4d16cc1df9cfa817","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/4d16cc1df9cfa817","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443330297,"stop":1700443331885,"duration":1588}},{"uid":"231ad58ac92d6fe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/231ad58ac92d6fe6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357089303,"stop":1700357099595,"duration":10292}}]},"tags":[]},"source":"46f1f36b7d29765d.json","parameterValues":["WiltshireCouncil","None","None"]}