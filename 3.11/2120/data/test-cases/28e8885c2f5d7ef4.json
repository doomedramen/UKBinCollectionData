{"uid":"28e8885c2f5d7ef4","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1726533158390,"stop":1726533177862,"duration":19472},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x559472ff186a <unknown>\n#1 0x559472cbfc91 <unknown>\n#2 0x559472d09618 <unknown>\n#3 0x559472d07a8d <unknown>\n#4 0x559472d34492 <unknown>\n#5 0x559472d03e89 <unknown>\n#6 0x559472d3465e <unknown>\n#7 0x559472d529c6 <unknown>\n#8 0x559472d34233 <unknown>\n#9 0x559472d02093 <unknown>\n#10 0x559472d0309e <unknown>\n#11 0x559472fb8acb <unknown>\n#12 0x559472fbca81 <unknown>\n#13 0x559472fa4695 <unknown>\n#14 0x559472fbd5f2 <unknown>\n#15 0x559472f8986f <unknown>\n#16 0x559472fe0668 <unknown>\n#17 0x559472fe0832 <unknown>\n#18 0x559472ff065c <unknown>\n#19 0x7f2e83915a94 <unknown>\n#20 0x7f2e839a2a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f0d28a06020>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0d28881990>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:67: in parse_data\n    dropdown_search.send_keys(Keys.RETURN)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0d27ba95d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x559472ff065c \\\\u003Cunknown>\\\\n#19 0x7f2e83915a94 \\\\u003Cunknown>\\\\n#20 0x7f2e839a2a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       #0 0x559472ff186a <unknown>\nE       #1 0x559472cbfc91 <unknown>\nE       #2 0x559472d09618 <unknown>\nE       #3 0x559472d07a8d <unknown>\nE       #4 0x559472d34492 <unknown>\nE       #5 0x559472d03e89 <unknown>\nE       #6 0x559472d3465e <unknown>\nE       #7 0x559472d529c6 <unknown>\nE       #8 0x559472d34233 <unknown>\nE       #9 0x559472d02093 <unknown>\nE       #10 0x559472d0309e <unknown>\nE       #11 0x559472fb8acb <unknown>\nE       #12 0x559472fbca81 <unknown>\nE       #13 0x559472fa4695 <unknown>\nE       #14 0x559472fbd5f2 <unknown>\nE       #15 0x559472f8986f <unknown>\nE       #16 0x559472fe0668 <unknown>\nE       #17 0x559472fe0832 <unknown>\nE       #18 0x559472ff065c <unknown>\nE       #19 0x7f2e83915a94 <unknown>\nE       #20 0x7f2e839a2a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x559472ff186a <unknown>\n#1 0x559472cbfc91 <unknown>\n#2 0x559472d09618 <unknown>\n#3 0x559472d07a8d <unknown>\n#4 0x559472d34492 <unknown>\n#5 0x559472d03e89 <unknown>\n#6 0x559472d3465e <unknown>\n#7 0x559472d529c6 <unknown>\n#8 0x559472d34233 <unknown>\n#9 0x559472d02093 <unknown>\n#10 0x559472d0309e <unknown>\n#11 0x559472fb8acb <unknown>\n#12 0x559472fbca81 <unknown>\n#13 0x559472fa4695 <unknown>\n#14 0x559472fbd5f2 <unknown>\n#15 0x559472f8986f <unknown>\n#16 0x559472fe0668 <unknown>\n#17 0x559472fe0832 <unknown>\n#18 0x559472ff065c <unknown>\n#19 0x7f2e83915a94 <unknown>\n#20 0x7f2e839a2a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f0d28a06020>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f0d28881990>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:67: in parse_data\n    dropdown_search.send_keys(Keys.RETURN)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0d27ba95d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x559472ff065c \\\\u003Cunknown>\\\\n#19 0x7f2e83915a94 \\\\u003Cunknown>\\\\n#20 0x7f2e839a2a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       #0 0x559472ff186a <unknown>\nE       #1 0x559472cbfc91 <unknown>\nE       #2 0x559472d09618 <unknown>\nE       #3 0x559472d07a8d <unknown>\nE       #4 0x559472d34492 <unknown>\nE       #5 0x559472d03e89 <unknown>\nE       #6 0x559472d3465e <unknown>\nE       #7 0x559472d529c6 <unknown>\nE       #8 0x559472d34233 <unknown>\nE       #9 0x559472d02093 <unknown>\nE       #10 0x559472d0309e <unknown>\nE       #11 0x559472fb8acb <unknown>\nE       #12 0x559472fbca81 <unknown>\nE       #13 0x559472fa4695 <unknown>\nE       #14 0x559472fbd5f2 <unknown>\nE       #15 0x559472f8986f <unknown>\nE       #16 0x559472fe0668 <unknown>\nE       #17 0x559472fe0832 <unknown>\nE       #18 0x559472ff065c <unknown>\nE       #19 0x7f2e83915a94 <unknown>\nE       #20 0x7f2e839a2a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council","time":{"start":1726533158390,"stop":1726533158391,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1726533158391,"stop":1726533177862,"duration":19471},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x559472ff186a <unknown>\n#1 0x559472cbfc91 <unknown>\n#2 0x559472d09618 <unknown>\n#3 0x559472d07a8d <unknown>\n#4 0x559472d34492 <unknown>\n#5 0x559472d03e89 <unknown>\n#6 0x559472d3465e <unknown>\n#7 0x559472d529c6 <unknown>\n#8 0x559472d34233 <unknown>\n#9 0x559472d02093 <unknown>\n#10 0x559472d0309e <unknown>\n#11 0x559472fb8acb <unknown>\n#12 0x559472fbca81 <unknown>\n#13 0x559472fa4695 <unknown>\n#14 0x559472fbd5f2 <unknown>\n#15 0x559472f8986f <unknown>\n#16 0x559472fe0668 <unknown>\n#17 0x559472fe0832 <unknown>\n#18 0x559472ff065c <unknown>\n#19 0x7f2e83915a94 <unknown>\n#20 0x7f2e839a2a34 __clone\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x559472ff186a <unknown>\n#1 0x559472cbfc91 <unknown>\n#2 0x559472d09618 <unknown>\n#3 0x559472d07a8d <unknown>\n#4 0x559472d34492 <unknown>\n#5 0x559472d03e89 <unknown>\n#6 0x559472d3465e <unknown>\n#7 0x559472d529c6 <unknown>\n#8 0x559472d34233 <unknown>\n#9 0x559472d02093 <unknown>\n#10 0x559472d0309e <unknown>\n#11 0x559472fb8acb <unknown>\n#12 0x559472fbca81 <unknown>\n#13 0x559472fa4695 <unknown>\n#14 0x559472fbd5f2 <unknown>\n#15 0x559472f8986f <unknown>\n#16 0x559472fe0668 <unknown>\n#17 0x559472fe0832 <unknown>\n#18 0x559472ff065c <unknown>\n#19 0x7f2e83915a94 <unknown>\n#20 0x7f2e839a2a34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"31005e1dcfb42fa9","name":"stdout","source":"31005e1dcfb42fa9.txt","type":"text/plain","size":743}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1501-87"},{"name":"thread","value":"2752-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":117,"unknown":0,"total":124},"items":[{"uid":"e88f7a6529dfad91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2116//#testresult/e88f7a6529dfad91","status":"passed","time":{"start":1726446787642,"stop":1726446818533,"duration":30891}},{"uid":"db899a3f6688d1ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2115//#testresult/db899a3f6688d1ad","status":"passed","time":{"start":1726360079856,"stop":1726360097433,"duration":17577}},{"uid":"9520f898a7c2264","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2114//#testresult/9520f898a7c2264","status":"passed","time":{"start":1726274121895,"stop":1726274143301,"duration":21406}},{"uid":"fe12d828ad56e622","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/fe12d828ad56e622","status":"passed","time":{"start":1726187519711,"stop":1726187552412,"duration":32701}},{"uid":"83aa01cf47d5f068","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2112//#testresult/83aa01cf47d5f068","status":"passed","time":{"start":1726100761037,"stop":1726100794045,"duration":33008}},{"uid":"312306ddc7b742b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2111//#testresult/312306ddc7b742b","status":"passed","time":{"start":1726014461402,"stop":1726014500213,"duration":38811}},{"uid":"bd7b44d2153b292f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2109//#testresult/bd7b44d2153b292f","status":"passed","time":{"start":1725956501127,"stop":1725956530590,"duration":29463}},{"uid":"3b2dc68a829f5d7d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2107//#testresult/3b2dc68a829f5d7d","status":"passed","time":{"start":1725928317925,"stop":1725928344287,"duration":26362}},{"uid":"6d45c15b7cdd5e49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2095//#testresult/6d45c15b7cdd5e49","status":"passed","time":{"start":1725841876728,"stop":1725841900402,"duration":23674}},{"uid":"6b662be2f8905bd3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2093//#testresult/6b662be2f8905bd3","status":"passed","time":{"start":1725755139215,"stop":1725755160619,"duration":21404}},{"uid":"7acf28b59311bffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2092//#testresult/7acf28b59311bffc","status":"passed","time":{"start":1725669138314,"stop":1725669165520,"duration":27206}},{"uid":"f518d4a50a5acb0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2088//#testresult/f518d4a50a5acb0d","status":"passed","time":{"start":1725582377618,"stop":1725582416290,"duration":38672}},{"uid":"f5d2c145777371d2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2086//#testresult/f5d2c145777371d2","status":"passed","time":{"start":1725570196328,"stop":1725570223968,"duration":27640}},{"uid":"426db4e9fd80283d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2083//#testresult/426db4e9fd80283d","status":"passed","time":{"start":1725496162551,"stop":1725496182643,"duration":20092}},{"uid":"a229eb15aaff86aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/a229eb15aaff86aa","status":"passed","time":{"start":1725431322065,"stop":1725431346801,"duration":24736}},{"uid":"1758355c85a6a5d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2082//#testresult/1758355c85a6a5d5","status":"passed","time":{"start":1725409717558,"stop":1725409762468,"duration":44910}},{"uid":"2bc7641d141e2f88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2080//#testresult/2bc7641d141e2f88","status":"passed","time":{"start":1725404617809,"stop":1725404651521,"duration":33712}},{"uid":"653d9912b41d151c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2073//#testresult/653d9912b41d151c","status":"passed","time":{"start":1725385900298,"stop":1725385936316,"duration":36018}},{"uid":"4f8d493e6b2d3451","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2070//#testresult/4f8d493e6b2d3451","status":"passed","time":{"start":1725348135191,"stop":1725348171972,"duration":36781}},{"uid":"784f76c24d235351","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2069//#testresult/784f76c24d235351","status":"passed","time":{"start":1725323323418,"stop":1725323369058,"duration":45640}}]},"tags":[]},"source":"28e8885c2f5d7ef4.json","parameterValues":["WalthamForest"]}