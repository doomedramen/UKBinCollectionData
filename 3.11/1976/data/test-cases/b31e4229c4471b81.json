{"uid":"b31e4229c4471b81","name":"Validate Council Output [RenfrewshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"21c77c05ec171f4a60a68c21bf3d0b55","time":{"start":1720485737610,"stop":1720485885736,"duration":148126},"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 601)\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x5565875d669a <unknown>\n#1 0x5565872b90dc <unknown>\n#2 0x55658730c6c6 <unknown>\n#3 0x55658730a516 <unknown>\n#4 0x556587307ef7 <unknown>\n#5 0x556587306d2c <unknown>\n#6 0x5565872fa40f <unknown>\n#7 0x556587328872 <unknown>\n#8 0x5565872f9d89 <unknown>\n#9 0x556587328a3e <unknown>\n#10 0x5565873475c3 <unknown>\n#11 0x556587328613 <unknown>\n#12 0x5565872f84f7 <unknown>\n#13 0x5565872f8e4e <unknown>\n#14 0x55658759c86b <unknown>\n#15 0x5565875a0911 <unknown>\n#16 0x55658758835e <unknown>\n#17 0x5565875a1472 <unknown>\n#18 0x55658756ccbf <unknown>\n#19 0x5565875c6098 <unknown>\n#20 0x5565875c6270 <unknown>\n#21 0x5565875d57cc <unknown>\n#22 0x7f7f50b88ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fa76945fe20>\nrequest = <FixtureRequest for <Function test_scenario_outline[RenfrewshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa769110a10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/RenfrewshireCouncil.py:38: in parse_data\n    accept_button.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa76873dc10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5565875c6270 \\\\u003Cunknown>\\\\n#21 0x5565875d57cc \\\\u003Cunknown>\\\\n#22 0x7f7f50b88ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 601)\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x5565875d669a <unknown>\nE       #1 0x5565872b90dc <unknown>\nE       #2 0x55658730c6c6 <unknown>\nE       #3 0x55658730a516 <unknown>\nE       #4 0x556587307ef7 <unknown>\nE       #5 0x556587306d2c <unknown>\nE       #6 0x5565872fa40f <unknown>\nE       #7 0x556587328872 <unknown>\nE       #8 0x5565872f9d89 <unknown>\nE       #9 0x556587328a3e <unknown>\nE       #10 0x5565873475c3 <unknown>\nE       #11 0x556587328613 <unknown>\nE       #12 0x5565872f84f7 <unknown>\nE       #13 0x5565872f8e4e <unknown>\nE       #14 0x55658759c86b <unknown>\nE       #15 0x5565875a0911 <unknown>\nE       #16 0x55658758835e <unknown>\nE       #17 0x5565875a1472 <unknown>\nE       #18 0x55658756ccbf <unknown>\nE       #19 0x5565875c6098 <unknown>\nE       #20 0x5565875c6270 <unknown>\nE       #21 0x5565875d57cc <unknown>\nE       #22 0x7f7f50b88ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 601)\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x5565875d669a <unknown>\n#1 0x5565872b90dc <unknown>\n#2 0x55658730c6c6 <unknown>\n#3 0x55658730a516 <unknown>\n#4 0x556587307ef7 <unknown>\n#5 0x556587306d2c <unknown>\n#6 0x5565872fa40f <unknown>\n#7 0x556587328872 <unknown>\n#8 0x5565872f9d89 <unknown>\n#9 0x556587328a3e <unknown>\n#10 0x5565873475c3 <unknown>\n#11 0x556587328613 <unknown>\n#12 0x5565872f84f7 <unknown>\n#13 0x5565872f8e4e <unknown>\n#14 0x55658759c86b <unknown>\n#15 0x5565875a0911 <unknown>\n#16 0x55658758835e <unknown>\n#17 0x5565875a1472 <unknown>\n#18 0x55658756ccbf <unknown>\n#19 0x5565875c6098 <unknown>\n#20 0x5565875c6270 <unknown>\n#21 0x5565875d57cc <unknown>\n#22 0x7f7f50b88ac3 <unknown>","statusTrace":"fixturefunc = <function scrape_step at 0x7fa76945fe20>\nrequest = <FixtureRequest for <Function test_scenario_outline[RenfrewshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa769110a10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/RenfrewshireCouncil.py:38: in parse_data\n    accept_button.click()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa76873dc10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5565875c6270 \\\\u003Cunknown>\\\\n#21 0x5565875d57cc \\\\u003Cunknown>\\\\n#22 0x7f7f50b88ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 601)\nE         (Session info: chrome-headless-shell=126.0.6478.114)\nE       Stacktrace:\nE       #0 0x5565875d669a <unknown>\nE       #1 0x5565872b90dc <unknown>\nE       #2 0x55658730c6c6 <unknown>\nE       #3 0x55658730a516 <unknown>\nE       #4 0x556587307ef7 <unknown>\nE       #5 0x556587306d2c <unknown>\nE       #6 0x5565872fa40f <unknown>\nE       #7 0x556587328872 <unknown>\nE       #8 0x5565872f9d89 <unknown>\nE       #9 0x556587328a3e <unknown>\nE       #10 0x5565873475c3 <unknown>\nE       #11 0x556587328613 <unknown>\nE       #12 0x5565872f84f7 <unknown>\nE       #13 0x5565872f8e4e <unknown>\nE       #14 0x55658759c86b <unknown>\nE       #15 0x5565875a0911 <unknown>\nE       #16 0x55658758835e <unknown>\nE       #17 0x5565875a1472 <unknown>\nE       #18 0x55658756ccbf <unknown>\nE       #19 0x5565875c6098 <unknown>\nE       #20 0x5565875c6270 <unknown>\nE       #21 0x5565875d57cc <unknown>\nE       #22 0x7f7f50b88ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Given the council","time":{"start":1720485737610,"stop":1720485737611,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1720485737611,"stop":1720485885736,"duration":148125},"status":"failed","statusMessage":"Message: element click intercepted: Element is not clickable at point (141, 601)\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x5565875d669a <unknown>\n#1 0x5565872b90dc <unknown>\n#2 0x55658730c6c6 <unknown>\n#3 0x55658730a516 <unknown>\n#4 0x556587307ef7 <unknown>\n#5 0x556587306d2c <unknown>\n#6 0x5565872fa40f <unknown>\n#7 0x556587328872 <unknown>\n#8 0x5565872f9d89 <unknown>\n#9 0x556587328a3e <unknown>\n#10 0x5565873475c3 <unknown>\n#11 0x556587328613 <unknown>\n#12 0x5565872f84f7 <unknown>\n#13 0x5565872f8e4e <unknown>\n#14 0x55658759c86b <unknown>\n#15 0x5565875a0911 <unknown>\n#16 0x55658758835e <unknown>\n#17 0x5565875a1472 <unknown>\n#18 0x55658756ccbf <unknown>\n#19 0x5565875c6098 <unknown>\n#20 0x5565875c6270 <unknown>\n#21 0x5565875d57cc <unknown>\n#22 0x7f7f50b88ac3 <unknown>\n","statusTrace":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 601)\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x5565875d669a <unknown>\n#1 0x5565872b90dc <unknown>\n#2 0x55658730c6c6 <unknown>\n#3 0x55658730a516 <unknown>\n#4 0x556587307ef7 <unknown>\n#5 0x556587306d2c <unknown>\n#6 0x5565872fa40f <unknown>\n#7 0x556587328872 <unknown>\n#8 0x5565872f9d89 <unknown>\n#9 0x556587328a3e <unknown>\n#10 0x5565873475c3 <unknown>\n#11 0x556587328613 <unknown>\n#12 0x5565872f84f7 <unknown>\n#13 0x5565872f8e4e <unknown>\n#14 0x55658759c86b <unknown>\n#15 0x5565875a0911 <unknown>\n#16 0x55658758835e <unknown>\n#17 0x5565875a1472 <unknown>\n#18 0x55658756ccbf <unknown>\n#19 0x5565875c6098 <unknown>\n#20 0x5565875c6270 <unknown>\n#21 0x5565875d57cc <unknown>\n#22 0x7f7f50b88ac3 <unknown>\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2192a12d0aa8c655","name":"stdout","source":"2192a12d0aa8c655.txt","type":"text/plain","size":871}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1272-139"},{"name":"thread","value":"2685-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"RenfrewshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":50,"unknown":0,"total":62},"items":[{"uid":"2fe017136b87a61a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1975//#testresult/2fe017136b87a61a","status":"passed","time":{"start":1720399283774,"stop":1720399339167,"duration":55393}},{"uid":"b8a3ce021fa2356b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1971//#testresult/b8a3ce021fa2356b","status":"passed","time":{"start":1720313099149,"stop":1720313136461,"duration":37312}},{"uid":"f1938fcc19bc818b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1970//#testresult/f1938fcc19bc818b","status":"passed","time":{"start":1720226570254,"stop":1720226587480,"duration":17226}},{"uid":"367a1e40380b432","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1969//#testresult/367a1e40380b432","status":"passed","time":{"start":1720139784385,"stop":1720139801239,"duration":16854}},{"uid":"6bf6cb25bff70744","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1968//#testresult/6bf6cb25bff70744","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 601)\n  (Session info: chrome-headless-shell=126.0.6478.114)\nStacktrace:\n#0 0x56132d4b169a <unknown>\n#1 0x56132d1940dc <unknown>\n#2 0x56132d1e76c6 <unknown>\n#3 0x56132d1e5516 <unknown>\n#4 0x56132d1e2ef7 <unknown>\n#5 0x56132d1e1d2c <unknown>\n#6 0x56132d1d540f <unknown>\n#7 0x56132d203872 <unknown>\n#8 0x56132d1d4d89 <unknown>\n#9 0x56132d203a3e <unknown>\n#10 0x56132d2225c3 <unknown>\n#11 0x56132d203613 <unknown>\n#12 0x56132d1d34f7 <unknown>\n#13 0x56132d1d3e4e <unknown>\n#14 0x56132d47786b <unknown>\n#15 0x56132d47b911 <unknown>\n#16 0x56132d46335e <unknown>\n#17 0x56132d47c472 <unknown>\n#18 0x56132d447cbf <unknown>\n#19 0x56132d4a1098 <unknown>\n#20 0x56132d4a1270 <unknown>\n#21 0x56132d4b07cc <unknown>\n#22 0x7fd20fd37ac3 <unknown>","time":{"start":1720053406747,"stop":1720053438709,"duration":31962}},{"uid":"16461986acea273b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1967//#testresult/16461986acea273b","status":"passed","time":{"start":1719967027871,"stop":1719967080769,"duration":52898}},{"uid":"48330a6a87711889","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1966//#testresult/48330a6a87711889","status":"passed","time":{"start":1719880804907,"stop":1719880832470,"duration":27563}},{"uid":"8ad5f8234af27d93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1965//#testresult/8ad5f8234af27d93","status":"passed","time":{"start":1719794684688,"stop":1719794708177,"duration":23489}},{"uid":"8d455e8d57a8aeef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1964//#testresult/8d455e8d57a8aeef","status":"passed","time":{"start":1719708197961,"stop":1719708225916,"duration":27955}},{"uid":"bf6f6102a454c3c9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1962//#testresult/bf6f6102a454c3c9","status":"passed","time":{"start":1719621415471,"stop":1719621476648,"duration":61177}},{"uid":"e79a7f05c5c5dc83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1958//#testresult/e79a7f05c5c5dc83","status":"passed","time":{"start":1719534987917,"stop":1719535044447,"duration":56530}},{"uid":"8c71a28a5a520444","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1954//#testresult/8c71a28a5a520444","status":"passed","time":{"start":1719362557167,"stop":1719362719991,"duration":162824}},{"uid":"e15415a9482d97fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1953//#testresult/e15415a9482d97fc","status":"passed","time":{"start":1719276237410,"stop":1719276256476,"duration":19066}},{"uid":"13c56d12031d64c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1952//#testresult/13c56d12031d64c3","status":"passed","time":{"start":1719189813581,"stop":1719189841356,"duration":27775}},{"uid":"aada197acdfcec45","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1951//#testresult/aada197acdfcec45","status":"passed","time":{"start":1719103377507,"stop":1719103403321,"duration":25814}},{"uid":"388700b943a76ef7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1950//#testresult/388700b943a76ef7","status":"passed","time":{"start":1719016950290,"stop":1719016975850,"duration":25560}},{"uid":"dd4b52f8450b7234","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1949//#testresult/dd4b52f8450b7234","status":"passed","time":{"start":1718930727447,"stop":1718930763713,"duration":36266}},{"uid":"f1613705cde264f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1948//#testresult/f1613705cde264f5","status":"passed","time":{"start":1718844059785,"stop":1718844072968,"duration":13183}},{"uid":"a0fc5505a6811e6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1947//#testresult/a0fc5505a6811e6c","status":"failed","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (141, 654)\n  (Session info: chrome-headless-shell=125.0.6422.76)\nStacktrace:\n#0 0x55babdf86e9a <unknown>\n#1 0x55babdc7045c <unknown>\n#2 0x55babdcc3336 <unknown>\n#3 0x55babdcc1176 <unknown>\n#4 0x55babdcbeb57 <unknown>\n#5 0x55babdcbd97c <unknown>\n#6 0x55babdcb10ff <unknown>\n#7 0x55babdcdf4b2 <unknown>\n#8 0x55babdcb0a79 <unknown>\n#9 0x55babdcdf67e <unknown>\n#10 0x55babdcfe2cc <unknown>\n#11 0x55babdcdf253 <unknown>\n#12 0x55babdcaf1c7 <unknown>\n#13 0x55babdcafb3e <unknown>\n#14 0x55babdf4d2db <unknown>\n#15 0x55babdf51387 <unknown>\n#16 0x55babdf39e0e <unknown>\n#17 0x55babdf51e52 <unknown>\n#18 0x55babdf1e7af <unknown>\n#19 0x55babdf76188 <unknown>\n#20 0x55babdf7635b <unknown>\n#21 0x55babdf85fcc <unknown>\n#22 0x7fb5b3513ac3 <unknown>","time":{"start":1718757821055,"stop":1718757849021,"duration":27966}},{"uid":"470e63a965390547","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1946//#testresult/470e63a965390547","status":"passed","time":{"start":1718671468951,"stop":1718671501273,"duration":32322}}]},"tags":[]},"source":"b31e4229c4471b81.json","parameterValues":["RenfrewshireCouncil"]}