{"uid":"9117c0b547436dbd","name":"Validate Council Output [BasingstokeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"0d6549c1d81ad728472392d1bde7fbc5","time":{"start":1701904806558,"stop":1701904808220,"duration":1662},"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7f1049da2480>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1049b82d10>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7f1049da2480>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1049b82d10>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BasingstokeCouncil","time":{"start":1701904806558,"stop":1701904806558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BasingstokeCouncil using None and the None is set","time":{"start":1701904806558,"stop":1701904808220,"duration":1662},"status":"failed","statusMessage":"unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1024-288"},{"name":"thread","value":"2749-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BasingstokeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":47,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":57},"items":[{"uid":"ec6297efd26e1238","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/ec6297efd26e1238","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701882502116,"stop":1701882503535,"duration":1419}},{"uid":"24b433b96eb8767a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/24b433b96eb8767a","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701882532815,"stop":1701882534233,"duration":1418}},{"uid":"8308d8c717696501","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/8308d8c717696501","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701825522906,"stop":1701825524663,"duration":1757}},{"uid":"e31fbf32a6c32761","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/e31fbf32a6c32761","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701795507595,"stop":1701795508719,"duration":1124}},{"uid":"ddbff9532e8f9a4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/ddbff9532e8f9a4d","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701795483631,"stop":1701795484453,"duration":822}},{"uid":"9d9e61bd4f950dec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1193//#testresult/9d9e61bd4f950dec","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701758490677,"stop":1701758492303,"duration":1626}},{"uid":"95941b6624fff2fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1192//#testresult/95941b6624fff2fc","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701758471597,"stop":1701758473046,"duration":1449}},{"uid":"dcc14a371e9468a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1191//#testresult/dcc14a371e9468a4","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701739132026,"stop":1701739133316,"duration":1290}},{"uid":"547fd4e165b37984","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1187//#testresult/547fd4e165b37984","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701714310442,"stop":1701714311740,"duration":1298}},{"uid":"aac8cc223d6ed3b6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1184//#testresult/aac8cc223d6ed3b6","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701652710017,"stop":1701652711400,"duration":1383}},{"uid":"d2f62a3add612988","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1183//#testresult/d2f62a3add612988","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701566505171,"stop":1701566506618,"duration":1447}},{"uid":"14281806ebd12389","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1182//#testresult/14281806ebd12389","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701479696638,"stop":1701479699820,"duration":3182}},{"uid":"377b1f1320ed6f2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1179//#testresult/377b1f1320ed6f2c","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701418935060,"stop":1701418936081,"duration":1021}},{"uid":"5b4859bf1e5c39e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1181//#testresult/5b4859bf1e5c39e6","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701419051854,"stop":1701419053432,"duration":1578}},{"uid":"c5eeea80d4811dc7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1180//#testresult/c5eeea80d4811dc7","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701419012511,"stop":1701419017398,"duration":4887}},{"uid":"bcfa60d1c9faa75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1176//#testresult/bcfa60d1c9faa75","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701418852697,"stop":1701418854051,"duration":1354}},{"uid":"1d68173fe7af3539","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1177//#testresult/1d68173fe7af3539","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701418891388,"stop":1701418897628,"duration":6240}},{"uid":"c10fcc37b93df88a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1175//#testresult/c10fcc37b93df88a","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701414315497,"stop":1701414316665,"duration":1168}},{"uid":"eaba4b50ac5f15a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1173//#testresult/eaba4b50ac5f15a4","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701393869682,"stop":1701393871236,"duration":1554}},{"uid":"aadbbf11a730f1a5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1169//#testresult/aadbbf11a730f1a5","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1701353308831,"stop":1701353310337,"duration":1506}}]},"tags":[]},"source":"9117c0b547436dbd.json","parameterValues":["BasingstokeCouncil","None","None"]}