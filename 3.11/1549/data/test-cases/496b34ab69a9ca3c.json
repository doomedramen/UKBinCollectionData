{"uid":"496b34ab69a9ca3c","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1707179199093,"stop":1707179200346,"duration":1253},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fcb6e9bcd60>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcb6df68f10>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fcb6e9bcd60>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fcb6df68f10>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1707179199093,"stop":1707179199093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1707179199094,"stop":1707179200345,"duration":1251},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1393-919"},{"name":"thread","value":"2790-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":114,"broken":0,"skipped":0,"passed":67,"unknown":0,"total":181},"items":[{"uid":"4cd470668cb44834","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/4cd470668cb44834","status":"passed","time":{"start":1707092885473,"stop":1707092887059,"duration":1586}},{"uid":"d38f0081606dedf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/d38f0081606dedf8","status":"passed","time":{"start":1707006571910,"stop":1707006573410,"duration":1500}},{"uid":"cb3be71a7f09c6a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1545//#testresult/cb3be71a7f09c6a8","status":"passed","time":{"start":1706941899322,"stop":1706941900763,"duration":1441}},{"uid":"ff765bec9e3f3861","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1544//#testresult/ff765bec9e3f3861","status":"passed","time":{"start":1706938991857,"stop":1706938992617,"duration":760}},{"uid":"bc145eda8ec13dc2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1542//#testresult/bc145eda8ec13dc2","status":"passed","time":{"start":1706938490396,"stop":1706938491719,"duration":1323}},{"uid":"1bcdc04b61d61e3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1541//#testresult/1bcdc04b61d61e3e","status":"passed","time":{"start":1706920038402,"stop":1706920039800,"duration":1398}},{"uid":"11895f8e38ed51f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1540//#testresult/11895f8e38ed51f0","status":"passed","time":{"start":1706833584904,"stop":1706833585664,"duration":760}},{"uid":"3cf91518fe02350b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1538//#testresult/3cf91518fe02350b","status":"passed","time":{"start":1706747273535,"stop":1706747274532,"duration":997}},{"uid":"ebd09a5944b45117","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1537//#testresult/ebd09a5944b45117","status":"passed","time":{"start":1706660839653,"stop":1706660841148,"duration":1495}},{"uid":"1b9cb57f87ee2050","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1535//#testresult/1b9cb57f87ee2050","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1706574371956,"stop":1706574373279,"duration":1323}},{"uid":"6a04425de7f2a236","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1534//#testresult/6a04425de7f2a236","status":"passed","time":{"start":1706488069438,"stop":1706488070149,"duration":711}},{"uid":"ef214ec35b81a2f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1531//#testresult/ef214ec35b81a2f0","status":"passed","time":{"start":1706401728862,"stop":1706401730176,"duration":1314}},{"uid":"57ef1383f416e03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1529//#testresult/57ef1383f416e03","status":"passed","time":{"start":1706315190175,"stop":1706315193204,"duration":3029}},{"uid":"dfaedc9688a554e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1528//#testresult/dfaedc9688a554e8","status":"passed","time":{"start":1706228826157,"stop":1706228827704,"duration":1547}},{"uid":"ca1be8acf50521a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1523//#testresult/ca1be8acf50521a6","status":"passed","time":{"start":1706142517260,"stop":1706142518480,"duration":1220}},{"uid":"8cba264fe83d8ef6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1522//#testresult/8cba264fe83d8ef6","status":"passed","time":{"start":1706056134526,"stop":1706056135590,"duration":1064}},{"uid":"a5395d3415e3f969","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1521//#testresult/a5395d3415e3f969","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1705969726148,"stop":1705969727291,"duration":1143}},{"uid":"101734781855dc01","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1520//#testresult/101734781855dc01","status":"failed","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='liverpool.gov.uk', port=443): Max retries exceeded with url: /Bins/BinDatesTable?UPRN=38164600&User-Agent=Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F108.0.0.0+Safari%2F537.36 (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff7ef964690>, 'Connection to liverpool.gov.uk timed out. (connect timeout=None)'))","time":{"start":1705883384914,"stop":1705883515013,"duration":130099}},{"uid":"db5b420a49b44728","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1519//#testresult/db5b420a49b44728","status":"passed","time":{"start":1705797050949,"stop":1705797052233,"duration":1284}},{"uid":"a6f0ee3073581d49","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1515//#testresult/a6f0ee3073581d49","status":"passed","time":{"start":1705710459428,"stop":1705710461101,"duration":1673}}]},"tags":[]},"source":"496b34ab69a9ca3c.json","parameterValues":["LiverpoolCityCouncil","None","None"]}