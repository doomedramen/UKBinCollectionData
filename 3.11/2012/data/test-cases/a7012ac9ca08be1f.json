{"uid":"a7012ac9ca08be1f","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1722990297970,"stop":1722990346531,"duration":48561},"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55bb860df6ba <unknown>\n#1 0x55bb85daf730 <unknown>\n#2 0x55bb85dfed9b <unknown>\n#3 0x55bb85dff081 <unknown>\n#4 0x55bb85e42cd4 <unknown>\n#5 0x55bb85e21a7d <unknown>\n#6 0x55bb85e401ca <unknown>\n#7 0x55bb85e217f3 <unknown>\n#8 0x55bb85df1ec9 <unknown>\n#9 0x55bb85df291e <unknown>\n#10 0x55bb860a59eb <unknown>\n#11 0x55bb860a9972 <unknown>\n#12 0x55bb86092e15 <unknown>\n#13 0x55bb860aa502 <unknown>\n#14 0x55bb86077d2f <unknown>\n#15 0x55bb860ce578 <unknown>\n#16 0x55bb860ce750 <unknown>\n#17 0x55bb860de48c <unknown>\n#18 0x7f90d3f79a94 <unknown>\n#19 0x7f90d4006a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fd069039080>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd068eae550>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:37: in parse_data\n    iframe_presense = WebDriverWait(driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5e103039a462fd3847c14e2b39d363ba\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7fd0683fef20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55bb860df6ba <unknown>\nE       #1 0x55bb85daf730 <unknown>\nE       #2 0x55bb85dfed9b <unknown>\nE       #3 0x55bb85dff081 <unknown>\nE       #4 0x55bb85e42cd4 <unknown>\nE       #5 0x55bb85e21a7d <unknown>\nE       #6 0x55bb85e401ca <unknown>\nE       #7 0x55bb85e217f3 <unknown>\nE       #8 0x55bb85df1ec9 <unknown>\nE       #9 0x55bb85df291e <unknown>\nE       #10 0x55bb860a59eb <unknown>\nE       #11 0x55bb860a9972 <unknown>\nE       #12 0x55bb86092e15 <unknown>\nE       #13 0x55bb860aa502 <unknown>\nE       #14 0x55bb86077d2f <unknown>\nE       #15 0x55bb860ce578 <unknown>\nE       #16 0x55bb860ce750 <unknown>\nE       #17 0x55bb860de48c <unknown>\nE       #18 0x7f90d3f79a94 <unknown>\nE       #19 0x7f90d4006a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55bb860df6ba <unknown>\n#1 0x55bb85daf730 <unknown>\n#2 0x55bb85dfed9b <unknown>\n#3 0x55bb85dff081 <unknown>\n#4 0x55bb85e42cd4 <unknown>\n#5 0x55bb85e21a7d <unknown>\n#6 0x55bb85e401ca <unknown>\n#7 0x55bb85e217f3 <unknown>\n#8 0x55bb85df1ec9 <unknown>\n#9 0x55bb85df291e <unknown>\n#10 0x55bb860a59eb <unknown>\n#11 0x55bb860a9972 <unknown>\n#12 0x55bb86092e15 <unknown>\n#13 0x55bb860aa502 <unknown>\n#14 0x55bb86077d2f <unknown>\n#15 0x55bb860ce578 <unknown>\n#16 0x55bb860ce750 <unknown>\n#17 0x55bb860de48c <unknown>\n#18 0x7f90d3f79a94 <unknown>\n#19 0x7f90d4006a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7fd069039080>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd068eae550>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:37: in parse_data\n    iframe_presense = WebDriverWait(driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5e103039a462fd3847c14e2b39d363ba\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7fd0683fef20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55bb860df6ba <unknown>\nE       #1 0x55bb85daf730 <unknown>\nE       #2 0x55bb85dfed9b <unknown>\nE       #3 0x55bb85dff081 <unknown>\nE       #4 0x55bb85e42cd4 <unknown>\nE       #5 0x55bb85e21a7d <unknown>\nE       #6 0x55bb85e401ca <unknown>\nE       #7 0x55bb85e217f3 <unknown>\nE       #8 0x55bb85df1ec9 <unknown>\nE       #9 0x55bb85df291e <unknown>\nE       #10 0x55bb860a59eb <unknown>\nE       #11 0x55bb860a9972 <unknown>\nE       #12 0x55bb86092e15 <unknown>\nE       #13 0x55bb860aa502 <unknown>\nE       #14 0x55bb86077d2f <unknown>\nE       #15 0x55bb860ce578 <unknown>\nE       #16 0x55bb860ce750 <unknown>\nE       #17 0x55bb860de48c <unknown>\nE       #18 0x7f90d3f79a94 <unknown>\nE       #19 0x7f90d4006a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Given the council","time":{"start":1722990297970,"stop":1722990297970,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from the council","time":{"start":1722990297970,"stop":1722990346531,"duration":48561},"status":"failed","statusMessage":"Message: \nStacktrace:\n#0 0x55bb860df6ba <unknown>\n#1 0x55bb85daf730 <unknown>\n#2 0x55bb85dfed9b <unknown>\n#3 0x55bb85dff081 <unknown>\n#4 0x55bb85e42cd4 <unknown>\n#5 0x55bb85e21a7d <unknown>\n#6 0x55bb85e401ca <unknown>\n#7 0x55bb85e217f3 <unknown>\n#8 0x55bb85df1ec9 <unknown>\n#9 0x55bb85df291e <unknown>\n#10 0x55bb860a59eb <unknown>\n#11 0x55bb860a9972 <unknown>\n#12 0x55bb86092e15 <unknown>\n#13 0x55bb860aa502 <unknown>\n#14 0x55bb86077d2f <unknown>\n#15 0x55bb860ce578 <unknown>\n#16 0x55bb860ce750 <unknown>\n#17 0x55bb860de48c <unknown>\n#18 0x7f90d3f79a94 <unknown>\n#19 0x7f90d4006a34 __clone\n","statusTrace":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55bb860df6ba <unknown>\n#1 0x55bb85daf730 <unknown>\n#2 0x55bb85dfed9b <unknown>\n#3 0x55bb85dff081 <unknown>\n#4 0x55bb85e42cd4 <unknown>\n#5 0x55bb85e21a7d <unknown>\n#6 0x55bb85e401ca <unknown>\n#7 0x55bb85e217f3 <unknown>\n#8 0x55bb85df1ec9 <unknown>\n#9 0x55bb85df291e <unknown>\n#10 0x55bb860a59eb <unknown>\n#11 0x55bb860a9972 <unknown>\n#12 0x55bb86092e15 <unknown>\n#13 0x55bb860aa502 <unknown>\n#14 0x55bb86077d2f <unknown>\n#15 0x55bb860ce578 <unknown>\n#16 0x55bb860ce750 <unknown>\n#17 0x55bb860de48c <unknown>\n#18 0x7f90d3f79a94 <unknown>\n#19 0x7f90d4006a34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[{"uid":"55f6392ce369cbfa","name":"stdout","source":"55f6392ce369cbfa.txt","type":"text/plain","size":650}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1393-108"},{"name":"thread","value":"2749-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":67,"unknown":0,"total":72},"items":[{"uid":"ab03c7bd9a75305f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/ab03c7bd9a75305f","status":"passed","time":{"start":1722903945954,"stop":1722903987932,"duration":41978}},{"uid":"a948bb3c50c5b8c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/a948bb3c50c5b8c5","status":"passed","time":{"start":1722817804685,"stop":1722817829792,"duration":25107}},{"uid":"1202e1df0aecb9f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/1202e1df0aecb9f7","status":"passed","time":{"start":1722731150929,"stop":1722731190782,"duration":39853}},{"uid":"bbea897eedeb63a6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/bbea897eedeb63a6","status":"passed","time":{"start":1722644833442,"stop":1722644880151,"duration":46709}},{"uid":"de1bbb0a6bffc381","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/de1bbb0a6bffc381","status":"passed","time":{"start":1722558512242,"stop":1722558530210,"duration":17968}},{"uid":"73b3cd389f49bdf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/73b3cd389f49bdf8","status":"passed","time":{"start":1722471841807,"stop":1722471876986,"duration":35179}},{"uid":"d07b41224a441fd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/d07b41224a441fd7","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1722385525912,"stop":1722385620700,"duration":94788}},{"uid":"ece40334434eabd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/ece40334434eabd","status":"passed","time":{"start":1722299063621,"stop":1722299096905,"duration":33284}},{"uid":"b08feadf372e1680","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/b08feadf372e1680","status":"passed","time":{"start":1722212650711,"stop":1722212681677,"duration":30966}},{"uid":"291bad067cdff61d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/291bad067cdff61d","status":"passed","time":{"start":1722126168049,"stop":1722126203779,"duration":35730}},{"uid":"5d235a6652e6cddf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/5d235a6652e6cddf","status":"passed","time":{"start":1722039948579,"stop":1722040007412,"duration":58833}},{"uid":"9c88f884347e9ced","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/9c88f884347e9ced","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1721953493396,"stop":1721953591491,"duration":98095}},{"uid":"9f9d01d587c55cd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/9f9d01d587c55cd1","status":"passed","time":{"start":1721867117473,"stop":1721867137272,"duration":19799}},{"uid":"1d0addf56ade18f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/1d0addf56ade18f9","status":"passed","time":{"start":1721780680449,"stop":1721780724526,"duration":44077}},{"uid":"7f91a5ce3fc1050f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/7f91a5ce3fc1050f","status":"passed","time":{"start":1721694214068,"stop":1721694245296,"duration":31228}},{"uid":"3380566eac8a2e39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/3380566eac8a2e39","status":"passed","time":{"start":1721607814314,"stop":1721607846929,"duration":32615}},{"uid":"7cebe38f10462899","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/7cebe38f10462899","status":"passed","time":{"start":1721521394851,"stop":1721521425989,"duration":31138}},{"uid":"b4e70b73d7f900df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/b4e70b73d7f900df","status":"passed","time":{"start":1721435163097,"stop":1721435190229,"duration":27132}},{"uid":"486ba7c7ee74a9fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/486ba7c7ee74a9fd","status":"passed","time":{"start":1721373119352,"stop":1721373167122,"duration":47770}},{"uid":"662ea44a7523a1cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1985//#testresult/662ea44a7523a1cc","status":"passed","time":{"start":1721264067843,"stop":1721264095241,"duration":27398}}]},"tags":[]},"source":"a7012ac9ca08be1f.json","parameterValues":["WalthamForest"]}