{"uid":"c066b245b6487166","name":"Validate Council Output [KingstonUponThamesCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c71a5e41515c8e4d6c2924d94d56bebb","time":{"start":1704542742297,"stop":1704542744063,"duration":1766},"status":"failed","statusMessage":"ValueError: time data 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f03c46007c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f03c3d13c10>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f03c46007c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f03c3d13c10>, 'council': 'KingstonUponThamesCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:89: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:31: in parse_data\n    datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: KingstonUponThamesCouncil","time":{"start":1704542742298,"stop":1704542742298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from KingstonUponThamesCouncil using None and the None is set","time":{"start":1704542742298,"stop":1704542744063,"duration":1765},"status":"failed","statusMessage":"time data 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Thursday, 11 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az695-453"},{"name":"thread","value":"2710-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":127,"broken":0,"skipped":0,"passed":17,"unknown":0,"total":144},"items":[{"uid":"3f6d2cddd9a4f319","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1408//#testresult/3f6d2cddd9a4f319","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704496172174,"stop":1704496172991,"duration":817}},{"uid":"681e342f3ae9dcb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1406//#testresult/681e342f3ae9dcb8","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704453423044,"stop":1704453423965,"duration":921}},{"uid":"9ece16cce3d7d93d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1405//#testresult/9ece16cce3d7d93d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704452632839,"stop":1704452633450,"duration":611}},{"uid":"ebd5b008d50a671f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1400//#testresult/ebd5b008d50a671f","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443779328,"stop":1704443780227,"duration":899}},{"uid":"1d559d9e8548a289","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1399//#testresult/1d559d9e8548a289","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704443368747,"stop":1704443369431,"duration":684}},{"uid":"7ceae9c8c40e13f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1397//#testresult/7ceae9c8c40e13f6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442488996,"stop":1704442489854,"duration":858}},{"uid":"8bf6ede4327878a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1396//#testresult/8bf6ede4327878a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704442472072,"stop":1704442473109,"duration":1037}},{"uid":"3cd608a9d6af105e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1390//#testresult/3cd608a9d6af105e","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time)\\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704417525440,"stop":1704417526999,"duration":1559}},{"uid":"f8d34db2873734e3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1379//#testresult/f8d34db2873734e3","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704406028559,"stop":1704406029385,"duration":826}},{"uid":"9dbf738f80792b12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1378//#testresult/9dbf738f80792b12","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704405973099,"stop":1704405973740,"duration":641}},{"uid":"417c97cdb720bfc4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1376//#testresult/417c97cdb720bfc4","status":"failed","statusDetails":"ValueError: time data 'Friday, 5 January\\n              (this collection has been adjusted from its usual time) 2024' does not match format '%A, %d %B %Y'","time":{"start":1704398806896,"stop":1704398808744,"duration":1848}},{"uid":"7826eab619003d4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1375//#testresult/7826eab619003d4c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704398758495,"stop":1704398759131,"duration":636}},{"uid":"2104d028f26a7fcd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1373//#testresult/2104d028f26a7fcd","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704388317653,"stop":1704388318803,"duration":1150}},{"uid":"c760280707cdd3cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1369//#testresult/c760280707cdd3cb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378335980,"stop":1704378336768,"duration":788}},{"uid":"c0b04ffb58c1b20","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1367//#testresult/c0b04ffb58c1b20","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704378049613,"stop":1704378050727,"duration":1114}},{"uid":"5c01ae81d17ed976","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1366//#testresult/5c01ae81d17ed976","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704375868193,"stop":1704375868973,"duration":780}},{"uid":"b5fb5c71c3012440","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1363//#testresult/b5fb5c71c3012440","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704356768780,"stop":1704356769793,"duration":1013}},{"uid":"9ab7f7c826d538e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1361//#testresult/9ab7f7c826d538e9","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704355949822,"stop":1704355950463,"duration":641}},{"uid":"b27050c8c04e6091","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1359//#testresult/b27050c8c04e6091","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704331101427,"stop":1704331102250,"duration":823}},{"uid":"347b74ac43191ba4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1355//#testresult/347b74ac43191ba4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704303728771,"stop":1704303729701,"duration":930}}]},"tags":[]},"source":"c066b245b6487166.json","parameterValues":["KingstonUponThamesCouncil","None","None"]}