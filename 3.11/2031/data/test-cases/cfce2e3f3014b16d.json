{"uid":"cfce2e3f3014b16d","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1724027036098,"stop":1724027065990,"duration":29892},"status":"failed","statusMessage":"ValueError: time data 'August' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe2ae460ea0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe2ae2e4e90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'August', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'August' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'August' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe2ae460ea0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe2ae2e4e90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'August', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'August' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1724027036098,"stop":1724027036099,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724027036099,"stop":1724027065990,"duration":29891},"status":"failed","statusMessage":"time data 'August' does not match format '%d %B'","statusTrace":"ValueError: time data 'August' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8d91f96304cbeb7","name":"stdout","source":"8d91f96304cbeb7.txt","type":"text/plain","size":115}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-542"},{"name":"thread","value":"2775-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":29,"broken":0,"skipped":0,"passed":74,"unknown":0,"total":103},"items":[{"uid":"f2edb0b1797d1fb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2030//#testresult/f2edb0b1797d1fb5","status":"passed","time":{"start":1723940703568,"stop":1723940716153,"duration":12585}},{"uid":"1d9dacb5c91f1d29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2029//#testresult/1d9dacb5c91f1d29","status":"passed","time":{"start":1723854338964,"stop":1723854348372,"duration":9408}},{"uid":"a5645bc51e583dd6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2028//#testresult/a5645bc51e583dd6","status":"passed","time":{"start":1723767901490,"stop":1723767919189,"duration":17699}},{"uid":"7b8125d05b485cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/7b8125d05b485cb","status":"passed","time":{"start":1723680983611,"stop":1723681053498,"duration":69887}},{"uid":"323a8364414e1fe9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/323a8364414e1fe9","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55603db306aa <unknown>\n#1 0x55603d801600 <unknown>\n#2 0x55603d850bcb <unknown>\n#3 0x55603d850eb1 <unknown>\n#4 0x55603d894b24 <unknown>\n#5 0x55603d8738cd <unknown>\n#6 0x55603d89204a <unknown>\n#7 0x55603d873643 <unknown>\n#8 0x55603d843d31 <unknown>\n#9 0x55603d84479e <unknown>\n#10 0x55603daf823b <unknown>\n#11 0x55603dafc1d2 <unknown>\n#12 0x55603dae55f5 <unknown>\n#13 0x55603dafcd62 <unknown>\n#14 0x55603daca23f <unknown>\n#15 0x55603db1fe48 <unknown>\n#16 0x55603db20020 <unknown>\n#17 0x55603db2f47c <unknown>\n#18 0x7fe191f92a94 <unknown>\n#19 0x7fe19201fa34 __clone","time":{"start":1723595080653,"stop":1723595102415,"duration":21762}},{"uid":"ccd76e0f188134bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/ccd76e0f188134bb","status":"passed","time":{"start":1723508842073,"stop":1723508861723,"duration":19650}},{"uid":"ebfe5b6e1bee8206","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/ebfe5b6e1bee8206","status":"failed","statusDetails":"ValueError: time data 'August' does not match format '%d %B'","time":{"start":1723422484469,"stop":1723422500096,"duration":15627}},{"uid":"52e4b36f5d073908","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2022//#testresult/52e4b36f5d073908","status":"passed","time":{"start":1723335990451,"stop":1723336012163,"duration":21712}},{"uid":"547dde39d7c216e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2020//#testresult/547dde39d7c216e9","status":"passed","time":{"start":1723249633600,"stop":1723249666635,"duration":33035}},{"uid":"d943996b5350c4e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2019//#testresult/d943996b5350c4e1","status":"passed","time":{"start":1723163255021,"stop":1723163269451,"duration":14430}},{"uid":"29c5ad4b6af2e6b8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2014//#testresult/29c5ad4b6af2e6b8","status":"passed","time":{"start":1723076766517,"stop":1723076780395,"duration":13878}},{"uid":"36403276423c90fe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/36403276423c90fe","status":"passed","time":{"start":1722990305372,"stop":1722990351947,"duration":46575}},{"uid":"abbce7e5323c8b0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/abbce7e5323c8b0f","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1722903949920,"stop":1722903994039,"duration":44119}},{"uid":"981352e526d66267","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/981352e526d66267","status":"failed","statusDetails":"ValueError: time data 'August' does not match format '%d %B'","time":{"start":1722817846890,"stop":1722817872575,"duration":25685}},{"uid":"75b9eafc2af3201b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/75b9eafc2af3201b","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5623df0246ba <unknown>\n#1 0x5623decf4730 <unknown>\n#2 0x5623ded43d9b <unknown>\n#3 0x5623ded44081 <unknown>\n#4 0x5623ded87cd4 <unknown>\n#5 0x5623ded66a7d <unknown>\n#6 0x5623ded851ca <unknown>\n#7 0x5623ded667f3 <unknown>\n#8 0x5623ded36ec9 <unknown>\n#9 0x5623ded3791e <unknown>\n#10 0x5623defea9eb <unknown>\n#11 0x5623defee972 <unknown>\n#12 0x5623defd7e15 <unknown>\n#13 0x5623defef502 <unknown>\n#14 0x5623defbcd2f <unknown>\n#15 0x5623df013578 <unknown>\n#16 0x5623df013750 <unknown>\n#17 0x5623df02348c <unknown>\n#18 0x7ff355251a94 <unknown>\n#19 0x7ff3552dea34 __clone","time":{"start":1722731169955,"stop":1722731203993,"duration":34038}},{"uid":"a68868c9de868e9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/a68868c9de868e9f","status":"passed","time":{"start":1722644869518,"stop":1722644892597,"duration":23079}},{"uid":"bd6f44f9b57c84e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/bd6f44f9b57c84e9","status":"passed","time":{"start":1722558390185,"stop":1722558404353,"duration":14168}},{"uid":"90cb275cc7f09c12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/90cb275cc7f09c12","status":"passed","time":{"start":1722471846644,"stop":1722471883099,"duration":36455}},{"uid":"6c8e50e35b714ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/6c8e50e35b714ee","status":"passed","time":{"start":1722385516523,"stop":1722385534981,"duration":18458}},{"uid":"40987fdff46aca92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/40987fdff46aca92","status":"passed","time":{"start":1722299096907,"stop":1722299109400,"duration":12493}}]},"tags":[]},"source":"cfce2e3f3014b16d.json","parameterValues":["WestBerkshireCouncil"]}