{"uid":"7a95e8b550f4e393","name":"Validate Council Output [UttlesfordDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"85e4c6b99adcc222d67fb70016996414","time":{"start":1724027023139,"stop":1724027033112,"duration":9973},"status":"failed","statusMessage":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe2ae460ea0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe2ae2e4e90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 22nd August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7fe2ae460ea0>\nrequest = <FixtureRequest for <Function test_scenario_outline[UttlesfordDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fe2ae2e4e90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/UttlesfordDistrictCouncil.py:94: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Thursday 22nd August', format = '%A %dth %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1724027023139,"stop":1724027023140,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724027023140,"stop":1724027033112,"duration":9972},"status":"failed","statusMessage":"time data 'Thursday 22nd August' does not match format '%A %dth %B'","statusTrace":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ac13f00630272aa3","name":"log","source":"ac13f00630272aa3.txt","type":"text/plain","size":133},{"uid":"be07eb1109efe410","name":"stdout","source":"be07eb1109efe410.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1113-542"},{"name":"thread","value":"2775-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"UttlesfordDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":59,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":78},"items":[{"uid":"c872837cb5582399","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2030//#testresult/c872837cb5582399","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723940660732,"stop":1723940673953,"duration":13221}},{"uid":"3347b5e8778b7d32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2029//#testresult/3347b5e8778b7d32","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723854310028,"stop":1723854312170,"duration":2142}},{"uid":"5bcfcb9bd1b5c31a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2028//#testresult/5bcfcb9bd1b5c31a","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723767822892,"stop":1723767891397,"duration":68505}},{"uid":"472a291040f8c77d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/472a291040f8c77d","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723680948550,"stop":1723680961212,"duration":12662}},{"uid":"25122edeb633141b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/25122edeb633141b","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723595080200,"stop":1723595089213,"duration":9013}},{"uid":"f489bc5f1cb744f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/f489bc5f1cb744f3","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723508809225,"stop":1723508811688,"duration":2463}},{"uid":"cebaf6c468c63405","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/cebaf6c468c63405","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723422429818,"stop":1723422439722,"duration":9904}},{"uid":"59dc2528d81613a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2022//#testresult/59dc2528d81613a3","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723335980730,"stop":1723335993331,"duration":12601}},{"uid":"dabeb6b864806513","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2020//#testresult/dabeb6b864806513","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723249599593,"stop":1723249612625,"duration":13032}},{"uid":"98f5b54c8942f195","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2019//#testresult/98f5b54c8942f195","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723163196760,"stop":1723163208039,"duration":11279}},{"uid":"dfefc7c3f3f2835d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2014//#testresult/dfefc7c3f3f2835d","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1723076725488,"stop":1723076754898,"duration":29410}},{"uid":"e909db3e1482aebe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/e909db3e1482aebe","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722990281576,"stop":1722990294838,"duration":13262}},{"uid":"e3592922d8dd8d3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/e3592922d8dd8d3d","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722903928064,"stop":1722903935230,"duration":7166}},{"uid":"52f1ed4245d11a4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/52f1ed4245d11a4d","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722817780275,"stop":1722817797845,"duration":17570}},{"uid":"d2fb5a42a21859cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/d2fb5a42a21859cf","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722731145753,"stop":1722731149254,"duration":3501}},{"uid":"d71980c5efa50094","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/d71980c5efa50094","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722644829959,"stop":1722644832068,"duration":2109}},{"uid":"115762f0e4e23a46","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/115762f0e4e23a46","status":"failed","statusDetails":"ValueError: time data 'Thursday 22nd August' does not match format '%A %dth %B'","time":{"start":1722558372316,"stop":1722558377511,"duration":5195}},{"uid":"6c056a50f2b17cb1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/6c056a50f2b17cb1","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722471833211,"stop":1722471835365,"duration":2154}},{"uid":"ad94e3adca3f998b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/ad94e3adca3f998b","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722385503542,"stop":1722385512995,"duration":9453}},{"uid":"87000a600976e4b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/87000a600976e4b3","status":"failed","statusDetails":"ValueError: time data 'Thursday 1st August' does not match format '%A %dth %B'","time":{"start":1722299045451,"stop":1722299056292,"duration":10841}}]},"tags":[]},"source":"7a95e8b550f4e393.json","parameterValues":["UttlesfordDistrictCouncil"]}