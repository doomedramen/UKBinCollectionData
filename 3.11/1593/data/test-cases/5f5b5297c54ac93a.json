{"uid":"5f5b5297c54ac93a","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1709598303689,"stop":1709598304946,"duration":1257},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f47f8bfce00>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f47f8001890>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f47f8bfce00>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f47f8001890>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1709598303689,"stop":1709598303690,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1709598303690,"stop":1709598304946,"duration":1256},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1148-702"},{"name":"thread","value":"2702-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":17,"broken":0,"skipped":0,"passed":137,"unknown":0,"total":154},"items":[{"uid":"d76c045dbaa27e3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1592//#testresult/d76c045dbaa27e3d","status":"passed","time":{"start":1709511987706,"stop":1709511988827,"duration":1121}},{"uid":"1e10f0d7496d646c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/1e10f0d7496d646c","status":"passed","time":{"start":1708561533883,"stop":1708561535177,"duration":1294}},{"uid":"8d7fa3344e69e300","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/8d7fa3344e69e300","status":"passed","time":{"start":1708475134583,"stop":1708475135515,"duration":932}},{"uid":"49d13d3505016b75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/49d13d3505016b75","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1708388745171,"stop":1708388746098,"duration":927}},{"uid":"9be57e4f361b5235","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1568//#testresult/9be57e4f361b5235","status":"passed","time":{"start":1708302479129,"stop":1708302480434,"duration":1305}},{"uid":"add9f70a7c478e1e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1567//#testresult/add9f70a7c478e1e","status":"passed","time":{"start":1708216076237,"stop":1708216078108,"duration":1871}},{"uid":"1db0bd35a0f2a7f7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1566//#testresult/1db0bd35a0f2a7f7","status":"passed","time":{"start":1708129522366,"stop":1708129523601,"duration":1235}},{"uid":"dfd2ca592dced49b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1563//#testresult/dfd2ca592dced49b","status":"passed","time":{"start":1708043105574,"stop":1708043106633,"duration":1059}},{"uid":"f8206c3bcac33189","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1562//#testresult/f8206c3bcac33189","status":"passed","time":{"start":1707956731213,"stop":1707956732787,"duration":1574}},{"uid":"fd482a7feb28a749","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1561//#testresult/fd482a7feb28a749","status":"passed","time":{"start":1707870323461,"stop":1707870324720,"duration":1259}},{"uid":"d57baba43983569f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1560//#testresult/d57baba43983569f","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1707783994297,"stop":1707783996103,"duration":1806}},{"uid":"80c7525a7a0c9536","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1559//#testresult/80c7525a7a0c9536","status":"passed","time":{"start":1707697628142,"stop":1707697629931,"duration":1789}},{"uid":"8f438485567823d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1556//#testresult/8f438485567823d7","status":"passed","time":{"start":1707611301544,"stop":1707611302648,"duration":1104}},{"uid":"67c73714c2458430","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1554//#testresult/67c73714c2458430","status":"passed","time":{"start":1707524685624,"stop":1707524686767,"duration":1143}},{"uid":"6fcfe85d4f4a03f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1553//#testresult/6fcfe85d4f4a03f9","status":"passed","time":{"start":1707438310060,"stop":1707438311120,"duration":1060}},{"uid":"fa1898a12c44f889","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1552//#testresult/fa1898a12c44f889","status":"passed","time":{"start":1707351955598,"stop":1707351956903,"duration":1305}},{"uid":"7bcc1fe1fc46c7ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1551//#testresult/7bcc1fe1fc46c7ed","status":"passed","time":{"start":1707265460174,"stop":1707265464275,"duration":4101}},{"uid":"34734121f2f42d35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1549//#testresult/34734121f2f42d35","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1707179143678,"stop":1707179144550,"duration":872}},{"uid":"9771058e8fe512b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1548//#testresult/9771058e8fe512b1","status":"passed","time":{"start":1707092828595,"stop":1707092830240,"duration":1645}},{"uid":"9c4756e708d87b4c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1547//#testresult/9c4756e708d87b4c","status":"passed","time":{"start":1707006543702,"stop":1707006545404,"duration":1702}}]},"tags":[]},"source":"5f5b5297c54ac93a.json","parameterValues":["BarnsleyMBCouncil","None","None"]}