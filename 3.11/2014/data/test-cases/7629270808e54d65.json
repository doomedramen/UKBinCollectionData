{"uid":"7629270808e54d65","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1723076023520,"stop":1723076026943,"duration":3423},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fd010307ec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd01018de50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fd010001590>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fd00ff89410>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '0695e3baffbae89d9d4eaf5e2c7ee187985e2dda', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7fd010307ec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fd01018de50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7fd010001590>, page = ''\nkwargs = {'council_module_str': 'CroydonCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ns = <requests.sessions.Session object at 0x7fd00ff89410>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '0695e3baffbae89d9d4eaf5e2c7ee187985e2dda', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n>                   .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:275: AttributeError","steps":[{"name":"Given the council","time":{"start":1723076023520,"stop":1723076023521,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723076023521,"stop":1723076026943,"duration":3422},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6f0f9fe7ce6867d8","name":"stdout","source":"6f0f9fe7ce6867d8.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1121-580"},{"name":"thread","value":"2751-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":153,"broken":0,"skipped":0,"passed":118,"unknown":0,"total":271},"items":[{"uid":"c5242c93466bc475","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/c5242c93466bc475","status":"passed","time":{"start":1722989607306,"stop":1722989610719,"duration":3413}},{"uid":"4efc2366266a1d31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/4efc2366266a1d31","status":"passed","time":{"start":1722903216856,"stop":1722903220396,"duration":3540}},{"uid":"790435f66cf3ba19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/790435f66cf3ba19","status":"passed","time":{"start":1722816957328,"stop":1722816961119,"duration":3791}},{"uid":"c9e53a494d746f8a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/c9e53a494d746f8a","status":"passed","time":{"start":1722730427287,"stop":1722730431215,"duration":3928}},{"uid":"ad314d1a839c2443","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/ad314d1a839c2443","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722644049351,"stop":1722644050244,"duration":893}},{"uid":"46d9e41a8b1bfc6c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/46d9e41a8b1bfc6c","status":"passed","time":{"start":1722557661009,"stop":1722557664824,"duration":3815}},{"uid":"271b4f0042e1dba4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/271b4f0042e1dba4","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722471095309,"stop":1722471096333,"duration":1024}},{"uid":"1a2a47e7c71cdb01","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/1a2a47e7c71cdb01","status":"passed","time":{"start":1722384731729,"stop":1722384736167,"duration":4438}},{"uid":"c90457860d148c5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/c90457860d148c5b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722298314355,"stop":1722298315291,"duration":936}},{"uid":"5d88d04646786511","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/5d88d04646786511","status":"passed","time":{"start":1722211925759,"stop":1722211931279,"duration":5520}},{"uid":"a2b4462cbbc2abe6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/a2b4462cbbc2abe6","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1722125485023,"stop":1722125485971,"duration":948}},{"uid":"2081a907462588d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/2081a907462588d8","status":"passed","time":{"start":1722039103080,"stop":1722039107273,"duration":4193}},{"uid":"6a2e04b06571efab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1993//#testresult/6a2e04b06571efab","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721952695491,"stop":1721952696352,"duration":861}},{"uid":"ba0865423c709218","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1992//#testresult/ba0865423c709218","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721866369017,"stop":1721866370086,"duration":1069}},{"uid":"99442951499680e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1991//#testresult/99442951499680e","status":"passed","time":{"start":1721779952876,"stop":1721779958094,"duration":5218}},{"uid":"75cd08edd9ae5214","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1990//#testresult/75cd08edd9ae5214","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1721693513816,"stop":1721693514923,"duration":1107}},{"uid":"2c9f2740b6e1073d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1989//#testresult/2c9f2740b6e1073d","status":"passed","time":{"start":1721607083649,"stop":1721607088905,"duration":5256}},{"uid":"5fd9319b10de7022","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1988//#testresult/5fd9319b10de7022","status":"passed","time":{"start":1721520693786,"stop":1721520699054,"duration":5268}},{"uid":"688bb410173d2c99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1987//#testresult/688bb410173d2c99","status":"passed","time":{"start":1721434288074,"stop":1721434292505,"duration":4431}},{"uid":"d1314b67e4241c9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1986//#testresult/d1314b67e4241c9f","status":"passed","time":{"start":1721372399658,"stop":1721372404683,"duration":5025}}]},"tags":[]},"source":"7629270808e54d65.json","parameterValues":["CroydonCouncil"]}