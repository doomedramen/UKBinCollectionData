{"uid":"26afc69141065e50","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1710807962492,"stop":1710807963410,"duration":918},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x70e9209d8e00>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x70e920010f90>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x70e9209d8e00>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x70e920010f90>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1710807962493,"stop":1710807962493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1710807962493,"stop":1710807963410,"duration":917},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az532-440"},{"name":"thread","value":"2726-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":150,"unknown":0,"total":169},"items":[{"uid":"c70e383956ba8773","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1609//#testresult/c70e383956ba8773","status":"passed","time":{"start":1710721665021,"stop":1710721666171,"duration":1150}},{"uid":"e71263ad9e114d9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1608//#testresult/e71263ad9e114d9f","status":"passed","time":{"start":1710635297554,"stop":1710635298625,"duration":1071}},{"uid":"31cb929106e12116","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1607//#testresult/31cb929106e12116","status":"passed","time":{"start":1710548655099,"stop":1710548656347,"duration":1248}},{"uid":"144b4e116495a446","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1605//#testresult/144b4e116495a446","status":"passed","time":{"start":1710462321869,"stop":1710462323481,"duration":1612}},{"uid":"9669bab575193fb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1604//#testresult/9669bab575193fb2","status":"passed","time":{"start":1710452799044,"stop":1710452800407,"duration":1363}},{"uid":"2469d8d54fc30a75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1602//#testresult/2469d8d54fc30a75","status":"passed","time":{"start":1710375912558,"stop":1710375914344,"duration":1786}},{"uid":"f9ac40541b553a40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1601//#testresult/f9ac40541b553a40","status":"passed","time":{"start":1710289506965,"stop":1710289508072,"duration":1107}},{"uid":"189b216186545dbc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1600//#testresult/189b216186545dbc","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1710203135042,"stop":1710203136157,"duration":1115}},{"uid":"f5a5615d10cf2527","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1599//#testresult/f5a5615d10cf2527","status":"passed","time":{"start":1710116833158,"stop":1710116834119,"duration":961}},{"uid":"51bf2c70bf07e254","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1598//#testresult/51bf2c70bf07e254","status":"passed","time":{"start":1710030499337,"stop":1710030500492,"duration":1155}},{"uid":"89b366c9af9b9c05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1597//#testresult/89b366c9af9b9c05","status":"passed","time":{"start":1709943898163,"stop":1709943899432,"duration":1269}},{"uid":"de03d6e9327f918a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1596//#testresult/de03d6e9327f918a","status":"passed","time":{"start":1709857562409,"stop":1709857563698,"duration":1289}},{"uid":"daf4601132d9ccc8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1595//#testresult/daf4601132d9ccc8","status":"passed","time":{"start":1709770841614,"stop":1709770843106,"duration":1492}},{"uid":"89e562ac0e70cfcd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1594//#testresult/89e562ac0e70cfcd","status":"passed","time":{"start":1709684754096,"stop":1709684755042,"duration":946}},{"uid":"5f5b5297c54ac93a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1593//#testresult/5f5b5297c54ac93a","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1709598303689,"stop":1709598304946,"duration":1257}},{"uid":"d76c045dbaa27e3d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1592//#testresult/d76c045dbaa27e3d","status":"passed","time":{"start":1709511987706,"stop":1709511988827,"duration":1121}},{"uid":"1e10f0d7496d646c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1572//#testresult/1e10f0d7496d646c","status":"passed","time":{"start":1708561533883,"stop":1708561535177,"duration":1294}},{"uid":"8d7fa3344e69e300","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1570//#testresult/8d7fa3344e69e300","status":"passed","time":{"start":1708475134583,"stop":1708475135515,"duration":932}},{"uid":"49d13d3505016b75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1569//#testresult/49d13d3505016b75","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1708388745171,"stop":1708388746098,"duration":927}},{"uid":"9be57e4f361b5235","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1568//#testresult/9be57e4f361b5235","status":"passed","time":{"start":1708302479129,"stop":1708302480434,"duration":1305}}]},"tags":[]},"source":"26afc69141065e50.json","parameterValues":["BarnsleyMBCouncil","None","None"]}