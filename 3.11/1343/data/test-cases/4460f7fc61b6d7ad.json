{"uid":"4460f7fc61b6d7ad","name":"Validate Council Output [TorridgeDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"da903249529007ec357275ac5f075b6c","time":{"start":1704113926269,"stop":1704113928967,"duration":2698},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f1b0f6f14e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1b0eaa1590>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f1b0eaa1590>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f1b0f6f14e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[TorridgeDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1b0eaa1590>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f1b0eaa1590>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: TorridgeDistrictCouncil","time":{"start":1704113926269,"stop":1704113926269,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from TorridgeDistrictCouncil using None and the None is set","time":{"start":1704113926269,"stop":1704113928965,"duration":2696},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the result is valid json","time":{"start":1704113928965,"stop":1704113928966,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"And the output should validate against the schema","time":{"start":1704113928966,"stop":1704113928967,"duration":1},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1426-779"},{"name":"thread","value":"2749-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TorridgeDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":34,"broken":0,"skipped":0,"passed":84,"unknown":0,"total":118},"items":[{"uid":"8a77d493812dedc1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1342//#testresult/8a77d493812dedc1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704113806562,"stop":1704113809079,"duration":2517}},{"uid":"a1f9c9a60cea4ff5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1341//#testresult/a1f9c9a60cea4ff5","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112411244,"stop":1704112413857,"duration":2613}},{"uid":"ee9db1eb65a5817c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1339//#testresult/ee9db1eb65a5817c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112303584,"stop":1704112306284,"duration":2700}},{"uid":"672f72ef75cffaf1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1336//#testresult/672f72ef75cffaf1","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112088839,"stop":1704112091625,"duration":2786}},{"uid":"3760a9afd5e0148","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1337//#testresult/3760a9afd5e0148","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704112039424,"stop":1704112043113,"duration":3689}},{"uid":"29fb0dfceaeb298d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1335//#testresult/29fb0dfceaeb298d","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111667205,"stop":1704111671473,"duration":4268}},{"uid":"facefaa4ab9719b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1332//#testresult/facefaa4ab9719b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704111523690,"stop":1704111526424,"duration":2734}},{"uid":"c41590c8ea038f88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1330//#testresult/c41590c8ea038f88","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704100184297,"stop":1704100188014,"duration":3717}},{"uid":"e4031fdb5b516f83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1329//#testresult/e4031fdb5b516f83","status":"failed","statusDetails":"AssertionError: True","time":{"start":1704072547589,"stop":1704072550393,"duration":2804}},{"uid":"4297f6d29b52bd40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1327//#testresult/4297f6d29b52bd40","status":"passed","time":{"start":1704050649340,"stop":1704050652100,"duration":2760}},{"uid":"f9ba9499d0d8ccd5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1325//#testresult/f9ba9499d0d8ccd5","status":"passed","time":{"start":1704044080424,"stop":1704044083381,"duration":2957}},{"uid":"4cfe7a1ad2b5f3f1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1320//#testresult/4cfe7a1ad2b5f3f1","status":"passed","time":{"start":1703985994380,"stop":1703985997380,"duration":3000}},{"uid":"c94d56c255b113c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1316//#testresult/c94d56c255b113c0","status":"passed","time":{"start":1703899260065,"stop":1703899262827,"duration":2762}},{"uid":"7edab2d25839fb19","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1314//#testresult/7edab2d25839fb19","status":"passed","time":{"start":1703853624568,"stop":1703853627400,"duration":2832}},{"uid":"331aabdfec810f7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1311//#testresult/331aabdfec810f7b","status":"passed","time":{"start":1703851239944,"stop":1703851244235,"duration":4291}},{"uid":"f4dab5691fca9f6a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1309//#testresult/f4dab5691fca9f6a","status":"passed","time":{"start":1703812191034,"stop":1703812193555,"duration":2521}},{"uid":"b1212b64639548e6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1306//#testresult/b1212b64639548e6","status":"passed","time":{"start":1703756347022,"stop":1703756349916,"duration":2894}},{"uid":"af34ba530702bb71","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1305//#testresult/af34ba530702bb71","status":"passed","time":{"start":1703726309959,"stop":1703726312789,"duration":2830}},{"uid":"e43abea40b193886","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1304//#testresult/e43abea40b193886","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717487037,"stop":1703717489770,"duration":2733}},{"uid":"9712e05fd04bc7ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1303//#testresult/9712e05fd04bc7ea","status":"failed","statusDetails":"AssertionError: True","time":{"start":1703717446022,"stop":1703717448428,"duration":2406}}]},"tags":[]},"source":"4460f7fc61b6d7ad.json","parameterValues":["TorridgeDistrictCouncil","None","None"]}