{"uid":"b39d9eb374e74968","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1723767142594,"stop":1723767143340,"duration":746},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f8aeae23920>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f8aeaca93d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f8aeaadbad0>\npage = <Response [404]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head> <script>\r\n\t\t\t\twindow[\"ga-disable-G-1M8G5BKKHG\"] = true;\r\n\t\t\t</script>\n<scrip...f-service and web content management provided by GOSS\">Powered by GOSS</a>\n</div>\n</div>\n</div>\n</footer></body></html>\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f8aeae23920>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f8aeaca93d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f8aeaadbad0>\npage = <Response [404]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head> <script>\r\n\t\t\t\twindow[\"ga-disable-G-1M8G5BKKHG\"] = true;\r\n\t\t\t</script>\n<scrip...f-service and web content management provided by GOSS\">Powered by GOSS</a>\n</div>\n</div>\n</div>\n</footer></body></html>\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1723767142594,"stop":1723767142595,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1723767142595,"stop":1723767143340,"duration":745},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fc009bba976883d8","name":"stdout","source":"fc009bba976883d8.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az700-999"},{"name":"thread","value":"2761-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":102,"broken":0,"skipped":0,"passed":176,"unknown":0,"total":278},"items":[{"uid":"7f12068e7a5bd41f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/7f12068e7a5bd41f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723680363956,"stop":1723680364621,"duration":665}},{"uid":"f7c859b288c4e060","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/f7c859b288c4e060","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723594389520,"stop":1723594390261,"duration":741}},{"uid":"5832ab4e430eaf7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/5832ab4e430eaf7","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723508219896,"stop":1723508220741,"duration":845}},{"uid":"4eaafaff08e12aea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/4eaafaff08e12aea","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723421718406,"stop":1723421719100,"duration":694}},{"uid":"659c990f4cd6716e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2022//#testresult/659c990f4cd6716e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723335303518,"stop":1723335304540,"duration":1022}},{"uid":"d27ca5015b2050a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2020//#testresult/d27ca5015b2050a8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723248904802,"stop":1723248905534,"duration":732}},{"uid":"4f6a1fc8546496b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2019//#testresult/4f6a1fc8546496b9","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723162623117,"stop":1723162624206,"duration":1089}},{"uid":"533716c551449e9b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2014//#testresult/533716c551449e9b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723076080844,"stop":1723076081686,"duration":842}},{"uid":"942e5bf0063d76cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/942e5bf0063d76cf","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722989371389,"stop":1722989372039,"duration":650}},{"uid":"961e1157a0ba4943","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/961e1157a0ba4943","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722902996514,"stop":1722902996805,"duration":291}},{"uid":"f163a87e45f0a379","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/f163a87e45f0a379","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722817005065,"stop":1722817005615,"duration":550}},{"uid":"a1b2e404a55549e0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/a1b2e404a55549e0","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722730634211,"stop":1722730634493,"duration":282}},{"uid":"25ef8884d19a7d86","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/25ef8884d19a7d86","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722643842353,"stop":1722643843065,"duration":712}},{"uid":"efb591406be65c43","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/efb591406be65c43","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722557709881,"stop":1722557710684,"duration":803}},{"uid":"14042765417dbab4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/14042765417dbab4","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722470877039,"stop":1722470877394,"duration":355}},{"uid":"261c31f397fa14f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/261c31f397fa14f8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1722384757841,"stop":1722384758867,"duration":1026}},{"uid":"512cef53e5218576","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1997//#testresult/512cef53e5218576","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722298436157,"stop":1722298436579,"duration":422}},{"uid":"30735c2d33a9d064","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1996//#testresult/30735c2d33a9d064","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722211978440,"stop":1722211978839,"duration":399}},{"uid":"614b150d4c382c14","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1995//#testresult/614b150d4c382c14","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722125602343,"stop":1722125602720,"duration":377}},{"uid":"60ca87e5cf4409fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1994//#testresult/60ca87e5cf4409fb","status":"failed","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1722039211664,"stop":1722039212122,"duration":458}}]},"tags":[]},"source":"b39d9eb374e74968.json","parameterValues":["GlasgowCityCouncil"]}