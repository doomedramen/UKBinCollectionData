{"uid":"bd82f71aaf141a0f","name":"Validate Council Output [MertonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a067692419696058d026d9aab0da27d0","time":{"start":1700529701357,"stop":1700529703168,"duration":1811},"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f1119ae45e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1106205910>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f1106205910>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: True","statusTrace":"fixturefunc = <function validate_output_step at 0x7f1119ae45e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MertonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f1106205910>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:102: in validate_output_step\n    raise (err)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <test_validate_council.context.<locals>.Context object at 0x7f1106205910>\n\n    @then(\"the output should validate against the schema\")\n    def validate_output_step(context):\n        try:\n            council_schema = file_handler.load_schema_file(f\"output.schema\")\n            schema_result = file_handler.validate_json_schema(\n                context.parse_result, council_schema\n            )\n>           assert_that(schema_result, True)\nE           AssertionError: True\n\nuk_bin_collection/tests/step_defs/test_validate_council.py:97: AssertionError","steps":[{"name":"Given the council: MertonCouncil","time":{"start":1700529701357,"stop":1700529701357,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from MertonCouncil using None and the None is set","time":{"start":1700529701357,"stop":1700529703165,"duration":1808},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1700529703166,"stop":1700529703166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And the output should validate against the schema","time":{"start":1700529703166,"stop":1700529703168,"duration":2},"status":"failed","statusMessage":"True","statusTrace":"AssertionError: True\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az773-728"},{"name":"thread","value":"2718-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MertonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":21},"items":[{"uid":"e2eb749373a959fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1135//#testresult/e2eb749373a959fa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700443324865,"stop":1700443330222,"duration":5357}},{"uid":"1b74c0d01d2ca970","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1134//#testresult/1b74c0d01d2ca970","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700357004483,"stop":1700357010216,"duration":5733}},{"uid":"38b8b4e9a380985e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1133//#testresult/38b8b4e9a380985e","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700270281387,"stop":1700270287485,"duration":6098}},{"uid":"41b7f2dc8fe50c0b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1132//#testresult/41b7f2dc8fe50c0b","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700183914925,"stop":1700183920453,"duration":5528}},{"uid":"f16785753193bab6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1131//#testresult/f16785753193bab6","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700097579640,"stop":1700097581176,"duration":1536}},{"uid":"140231ac629c1efa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1129//#testresult/140231ac629c1efa","status":"failed","statusDetails":"AssertionError: True","time":{"start":1700011139161,"stop":1700011141020,"duration":1859}},{"uid":"2dbdcfc72273fdce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1128//#testresult/2dbdcfc72273fdce","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699924901494,"stop":1699924907771,"duration":6277}},{"uid":"9ebacf9838896a4a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1127//#testresult/9ebacf9838896a4a","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699838293070,"stop":1699838294762,"duration":1692}},{"uid":"e9425240f72309ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1126//#testresult/e9425240f72309ab","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699752078238,"stop":1699752080108,"duration":1870}},{"uid":"f6225c5de98197da","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1125//#testresult/f6225c5de98197da","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699669145201,"stop":1699669147062,"duration":1861}},{"uid":"e46957495c753a22","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1124//#testresult/e46957495c753a22","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1699578959107,"stop":1699578960648,"duration":1541}},{"uid":"525f17559c18bf75","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1123//#testresult/525f17559c18bf75","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699492651272,"stop":1699492657235,"duration":5963}},{"uid":"46909eecc007f956","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1121//#testresult/46909eecc007f956","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481534195,"stop":1699481536339,"duration":2144}},{"uid":"d82710eb7183be64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1122//#testresult/d82710eb7183be64","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699481453253,"stop":1699481454799,"duration":1546}},{"uid":"271344ae9034b60c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1117//#testresult/271344ae9034b60c","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699445093280,"stop":1699445094775,"duration":1495}},{"uid":"b6e8f008064f6c56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1115//#testresult/b6e8f008064f6c56","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1699406174928,"stop":1699406221375,"duration":46447}},{"uid":"4f4364f2056eb7fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1114//#testresult/4f4364f2056eb7fb","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699319981087,"stop":1699319982566,"duration":1479}},{"uid":"9a901393030b0649","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1113//#testresult/9a901393030b0649","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699233686021,"stop":1699233687532,"duration":1511}},{"uid":"47ed915a14f21fd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1111//#testresult/47ed915a14f21fd4","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699171026089,"stop":1699171027701,"duration":1612}},{"uid":"94f477073fd93d38","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1112//#testresult/94f477073fd93d38","status":"failed","statusDetails":"AssertionError: True","time":{"start":1699170885399,"stop":1699170886695,"duration":1296}}]},"tags":[]},"source":"bd82f71aaf141a0f.json","parameterValues":["MertonCouncil","None","None"]}