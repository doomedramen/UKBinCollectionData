{"uid":"66ed1878d90436fc","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1717202874891,"stop":1717202882951,"duration":8060},"status":"failed","statusMessage":"ValueError: time data '' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2acc021c60>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2acbe9d310>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data '' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2acc021c60>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2acbe9d310>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:102: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:80: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1717202874892,"stop":1717202874892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1717202874892,"stop":1717202882951,"duration":8059},"status":"failed","statusMessage":"time data '' does not match format '%d %B'","statusTrace":"ValueError: time data '' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6714ab71fba0b0c6","name":"stdout","source":"6714ab71fba0b0c6.txt","type":"text/plain","size":109}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1501-651"},{"name":"thread","value":"2675-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":24},"items":[{"uid":"7d9b5915f4be280d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1904//#testresult/7d9b5915f4be280d","status":"passed","time":{"start":1717116193307,"stop":1717116214631,"duration":21324}},{"uid":"cceb52ff4257488c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1903//#testresult/cceb52ff4257488c","status":"passed","time":{"start":1717029854150,"stop":1717029877684,"duration":23534}},{"uid":"3266b9a303511eab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1898//#testresult/3266b9a303511eab","status":"passed","time":{"start":1716943595043,"stop":1716943626183,"duration":31140}},{"uid":"5ca443067e96e8ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1893//#testresult/5ca443067e96e8ed","status":"passed","time":{"start":1716856882683,"stop":1716856892353,"duration":9670}},{"uid":"1f2278664d70a1d7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1883//#testresult/1f2278664d70a1d7","status":"failed","statusDetails":"ValueError: time data 'May' does not match format '%d %B'","time":{"start":1716770558447,"stop":1716770583867,"duration":25420}},{"uid":"20aae71c899ce6ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1881//#testresult/20aae71c899ce6ff","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55e305968e9a <unknown>\n#1 0x55e30565245c <unknown>\n#2 0x55e30569e5b5 <unknown>\n#3 0x55e30569e671 <unknown>\n#4 0x55e3056e2f14 <unknown>\n#5 0x55e3056c14dd <unknown>\n#6 0x55e3056e02cc <unknown>\n#7 0x55e3056c1253 <unknown>\n#8 0x55e3056911c7 <unknown>\n#9 0x55e305691b3e <unknown>\n#10 0x55e30592f2db <unknown>\n#11 0x55e305933387 <unknown>\n#12 0x55e30591be0e <unknown>\n#13 0x55e305933e52 <unknown>\n#14 0x55e3059007af <unknown>\n#15 0x55e305958188 <unknown>\n#16 0x55e30595835b <unknown>\n#17 0x55e305967fcc <unknown>\n#18 0x7ff4593b0ac3 <unknown>","time":{"start":1716753592539,"stop":1716753611650,"duration":19111}},{"uid":"2ea55daaad4a1108","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1877//#testresult/2ea55daaad4a1108","status":"passed","time":{"start":1716743710229,"stop":1716743728611,"duration":18382}},{"uid":"881651f4f31d413b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1871//#testresult/881651f4f31d413b","status":"passed","time":{"start":1716710341910,"stop":1716710360948,"duration":19038}},{"uid":"753ecbb201de83dc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1866//#testresult/753ecbb201de83dc","status":"passed","time":{"start":1716705624797,"stop":1716705649886,"duration":25089}},{"uid":"b47a5a71adcac38b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1865//#testresult/b47a5a71adcac38b","status":"passed","time":{"start":1716684215556,"stop":1716684222314,"duration":6758}},{"uid":"3e8ad7be38c2ea36","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1863//#testresult/3e8ad7be38c2ea36","status":"passed","time":{"start":1716625364466,"stop":1716625383216,"duration":18750}},{"uid":"ea0c0921a82957f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1862//#testresult/ea0c0921a82957f6","status":"passed","time":{"start":1716597494460,"stop":1716597501217,"duration":6757}},{"uid":"6222367189576faa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1856//#testresult/6222367189576faa","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1716511415395,"stop":1716511422916,"duration":7521}},{"uid":"8054eb1637d14f32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1855//#testresult/8054eb1637d14f32","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1716424955932,"stop":1716424962088,"duration":6156}},{"uid":"7f0e55d522c9d476","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1854//#testresult/7f0e55d522c9d476","status":"passed","time":{"start":1716338352229,"stop":1716338364832,"duration":12603}},{"uid":"ed4d5da897815a29","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1853//#testresult/ed4d5da897815a29","status":"passed","time":{"start":1716252139789,"stop":1716252153366,"duration":13577}},{"uid":"8c844d3e8516ab64","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1852//#testresult/8c844d3e8516ab64","status":"failed","statusDetails":"ValueError: time data 'May' does not match format '%d %B'","time":{"start":1716165644685,"stop":1716165657829,"duration":13144}},{"uid":"d7e2a80558e0690e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1851//#testresult/d7e2a80558e0690e","status":"failed","statusDetails":"ValueError: time data '' does not match format '%d %B'","time":{"start":1716155356447,"stop":1716155493192,"duration":136745}},{"uid":"d30991cef6c66767","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1849//#testresult/d30991cef6c66767","status":"passed","time":{"start":1716152888552,"stop":1716152912753,"duration":24201}},{"uid":"4c3ddf55e92fa576","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1846//#testresult/4c3ddf55e92fa576","status":"failed","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x557f83d7aeca <unknown>\n#1 0x557f83a6445c <unknown>\n#2 0x557f83a996f8 <unknown>\n#3 0x557f83a9563b <unknown>\n#4 0x557f83adfb19 <unknown>\n#5 0x557f83ad3253 <unknown>\n#6 0x557f83aa31c7 <unknown>\n#7 0x557f83aa3b3e <unknown>\n#8 0x557f83d4130b <unknown>\n#9 0x557f83d453b7 <unknown>\n#10 0x557f83d2de3e <unknown>\n#11 0x557f83d45e82 <unknown>\n#12 0x557f83d127df <unknown>\n#13 0x557f83d6a1b8 <unknown>\n#14 0x557f83d6a38b <unknown>\n#15 0x557f83d79ffc <unknown>\n#16 0x7f89fb094ac3 <unknown>","time":{"start":1716079391181,"stop":1716079405369,"duration":14188}}]},"tags":[]},"source":"66ed1878d90436fc.json","parameterValues":["WestBerkshireCouncil"]}