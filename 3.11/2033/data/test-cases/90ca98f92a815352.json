{"uid":"90ca98f92a815352","name":"Validate Council Output [CornwallCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"20fb6c486e377aee58980a6c6932d1ba","time":{"start":1724199136045,"stop":1724199136607,"duration":562},"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f349c728ae0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f349ced3550>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '2 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: t","statusTrace":"fixturefunc = <function scrape_step at 0x7f349c728ae0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CornwallCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f349ced3550>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/CornwallCouncil.py:56: in parse_data\n    collection_date = datetime.strptime(item.contents[5].text, \"%d %b\").replace(year=curr_date.year)\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '2 Sept', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: t\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council","time":{"start":1724199136045,"stop":1724199136045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724199136045,"stop":1724199136607,"duration":562},"status":"failed","statusMessage":"unconverted data remains: t","statusTrace":"ValueError: unconverted data remains: t\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ee9cb38cc2b2b1f3","name":"stdout","source":"ee9cb38cc2b2b1f3.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1759-612"},{"name":"thread","value":"2783-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CornwallCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":22},"items":[{"uid":"343023a2cac2828c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2032//#testresult/343023a2cac2828c","status":"passed","time":{"start":1724112741229,"stop":1724112741875,"duration":646}},{"uid":"59d110316c563239","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2031//#testresult/59d110316c563239","status":"passed","time":{"start":1724026318908,"stop":1724026319562,"duration":654}},{"uid":"2eb99555e6aae6ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2030//#testresult/2eb99555e6aae6ad","status":"passed","time":{"start":1723939939622,"stop":1723939940389,"duration":767}},{"uid":"3b749ba3ba65decd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2029//#testresult/3b749ba3ba65decd","status":"passed","time":{"start":1723853467470,"stop":1723853468278,"duration":808}},{"uid":"ac7b5fa4b0e9ebb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2028//#testresult/ac7b5fa4b0e9ebb4","status":"passed","time":{"start":1723767087754,"stop":1723767089004,"duration":1250}},{"uid":"20c2b5045ef86a16","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/20c2b5045ef86a16","status":"passed","time":{"start":1723680132473,"stop":1723680133544,"duration":1071}},{"uid":"816c33b513b07d91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/816c33b513b07d91","status":"passed","time":{"start":1723594339617,"stop":1723594340379,"duration":762}},{"uid":"c11a16c745a930af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/c11a16c745a930af","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1723508107488,"stop":1723508108232,"duration":744}},{"uid":"8db5ea8f2bedf4e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/8db5ea8f2bedf4e9","status":"passed","time":{"start":1723421658897,"stop":1723421660628,"duration":1731}},{"uid":"4fafc66bb2fe0f28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2022//#testresult/4fafc66bb2fe0f28","status":"passed","time":{"start":1723335231736,"stop":1723335233019,"duration":1283}},{"uid":"a2f2591ba0863475","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2020//#testresult/a2f2591ba0863475","status":"passed","time":{"start":1723248824747,"stop":1723248825842,"duration":1095}},{"uid":"99ab2e4a1d5164b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2019//#testresult/99ab2e4a1d5164b0","status":"passed","time":{"start":1723162474104,"stop":1723162475088,"duration":984}},{"uid":"c4841f9550baefc6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2014//#testresult/c4841f9550baefc6","status":"passed","time":{"start":1723076020813,"stop":1723076021707,"duration":894}},{"uid":"e492a8523dea166e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/e492a8523dea166e","status":"passed","time":{"start":1722989605239,"stop":1722989605768,"duration":529}},{"uid":"b9f11264c5552e61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/b9f11264c5552e61","status":"passed","time":{"start":1722903214391,"stop":1722903215329,"duration":938}},{"uid":"52175fe9dbe184fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/52175fe9dbe184fa","status":"passed","time":{"start":1722816953941,"stop":1722816955619,"duration":1678}},{"uid":"7cfdda73ec4ba0b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/7cfdda73ec4ba0b2","status":"passed","time":{"start":1722730424762,"stop":1722730425952,"duration":1190}},{"uid":"5693f89dbf228185","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/5693f89dbf228185","status":"passed","time":{"start":1722644047263,"stop":1722644048006,"duration":743}},{"uid":"32c017e5143a1ed0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/32c017e5143a1ed0","status":"passed","time":{"start":1722557654952,"stop":1722557655723,"duration":771}},{"uid":"e19083c30e64745","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/e19083c30e64745","status":"passed","time":{"start":1722471093231,"stop":1722471093930,"duration":699}}]},"tags":[]},"source":"90ca98f92a815352.json","parameterValues":["CornwallCouncil"]}