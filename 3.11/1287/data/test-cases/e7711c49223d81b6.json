{"uid":"e7711c49223d81b6","name":"Validate Council Output [BasingstokeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"0d6549c1d81ad728472392d1bde7fbc5","time":{"start":1703294039113,"stop":1703294040387,"duration":1274},"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7feafa2ed6c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7feafa0b7310>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"fixturefunc = <function scrape_step at 0x7feafa2ed6c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BasingstokeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7feafa0b7310>, 'council': 'BasingstokeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BasingstokeCouncil.py:58: in parse_data\n    \"collectionDate\": datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday, 29 December 2023 (Christmas and New Year rescheduling)'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BasingstokeCouncil","time":{"start":1703294039113,"stop":1703294039114,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BasingstokeCouncil using None and the None is set","time":{"start":1703294039114,"stop":1703294040387,"duration":1273},"status":"failed","statusMessage":"unconverted data remains:  (Christmas and New Year rescheduling)","statusTrace":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az914-521"},{"name":"thread","value":"2664-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BasingstokeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":80,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":90},"items":[{"uid":"6dc6ec1795d3c6a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/6dc6ec1795d3c6a","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1703207773638,"stop":1703207775722,"duration":2084}},{"uid":"8736cc3cabd92db3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/8736cc3cabd92db3","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1703121412502,"stop":1703121413950,"duration":1448}},{"uid":"ffc1ce93c72a46cd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/ffc1ce93c72a46cd","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1703034234109,"stop":1703034236186,"duration":2077}},{"uid":"ff1f7448f41f5e97","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/ff1f7448f41f5e97","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1703024882682,"stop":1703024883791,"duration":1109}},{"uid":"26cbdf746e9526eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/26cbdf746e9526eb","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1703024850122,"stop":1703024851370,"duration":1248}},{"uid":"234fcb83e84606eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/234fcb83e84606eb","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702948668114,"stop":1702948669530,"duration":1416}},{"uid":"5107edf5504722f3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/5107edf5504722f3","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702862330257,"stop":1702862331951,"duration":1694}},{"uid":"d4ad394f3aa65cf9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/d4ad394f3aa65cf9","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702859980342,"stop":1702859982594,"duration":2252}},{"uid":"655fd62a3c7ab073","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/655fd62a3c7ab073","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702843541288,"stop":1702843543155,"duration":1867}},{"uid":"b6ac81a775647009","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/b6ac81a775647009","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702809354034,"stop":1702809355757,"duration":1723}},{"uid":"57b46de5e8713cd9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/57b46de5e8713cd9","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702657111225,"stop":1702657113220,"duration":1995}},{"uid":"29658d452eeb6952","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/29658d452eeb6952","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702657142481,"stop":1702657143779,"duration":1298}},{"uid":"4f0572f6494783a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/4f0572f6494783a7","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702603161571,"stop":1702603162922,"duration":1351}},{"uid":"480e8757c237fd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/480e8757c237fd4","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702540022529,"stop":1702540023812,"duration":1283}},{"uid":"90e601dc9277d2b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/90e601dc9277d2b3","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702516654618,"stop":1702516656757,"duration":2139}},{"uid":"50b3bba43bdefc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/50b3bba43bdefc9","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702447453006,"stop":1702447453868,"duration":862}},{"uid":"313442bd6050a653","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/313442bd6050a653","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702430312696,"stop":1702430315502,"duration":2806}},{"uid":"69d29a424fbd7ad8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/69d29a424fbd7ad8","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702366468442,"stop":1702366469928,"duration":1486}},{"uid":"b40544a75571fedb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/b40544a75571fedb","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702343934150,"stop":1702343934991,"duration":841}},{"uid":"78fe6a8cac2211a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/78fe6a8cac2211a","status":"failed","statusDetails":"ValueError: unconverted data remains:  (Christmas and New Year rescheduling)","time":{"start":1702257523234,"stop":1702257525207,"duration":1973}}]},"tags":[]},"source":"e7711c49223d81b6.json","parameterValues":["BasingstokeCouncil","None","None"]}