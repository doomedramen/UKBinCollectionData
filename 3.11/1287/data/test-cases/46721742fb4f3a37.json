{"uid":"46721742fb4f3a37","name":"Validate Council Output [MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b599a4dd435703dc5f9937f69cb0d25f","time":{"start":1703294085373,"stop":1703294107511,"duration":22138},"status":"failed","statusMessage":"ValueError: time data 'for Festive' does not match format '%d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2fb4ba4d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2fb4186dd0>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:102: in parse_data\n    date = datetime.strptime(' '.join(binDict[bin][1:]), \"%d %b\").replace(year=datetime.today().year)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'for Festive', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'for Festive' does not match format '%d %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'for Festive' does not match format '%d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2fb4ba4d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[MidAndEastAntrimBoroughCouncil-http://selenium:4444-local]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f2fb4186dd0>, 'council': 'MidAndEastAntrimBoroughCouncil', 'selenium_mode': 'local', 'selenium_url': 'http://selenium:4444'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:69: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/MidAndEastAntrimBoroughCouncil.py:102: in parse_data\n    date = datetime.strptime(' '.join(binDict[bin][1:]), \"%d %b\").replace(year=datetime.today().year)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'for Festive', format = '%d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'for Festive' does not match format '%d %b'\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: MidAndEastAntrimBoroughCouncil","time":{"start":1703294085373,"stop":1703294085374,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from MidAndEastAntrimBoroughCouncil using local and the http://selenium:4444 is set","time":{"start":1703294085374,"stop":1703294107511,"duration":22137},"status":"failed","statusMessage":"time data 'for Festive' does not match format '%d %b'","statusTrace":"ValueError: time data 'for Festive' does not match format '%d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az914-521"},{"name":"thread","value":"2667-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MidAndEastAntrimBoroughCouncil"},{"name":"selenium_mode","value":"local"},{"name":"selenium_url","value":"http://selenium:4444"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":62},"items":[{"uid":"f72e29064319ca24","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1282//#testresult/f72e29064319ca24","status":"failed","statusDetails":"ValueError: time data 'for Festive' does not match format '%d %b'","time":{"start":1703207815457,"stop":1703207836700,"duration":21243}},{"uid":"f9a89f2966183695","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1281//#testresult/f9a89f2966183695","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1703121458952,"stop":1703121475632,"duration":16680}},{"uid":"f26416b9d9da8e1c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1280//#testresult/f26416b9d9da8e1c","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1703034273664,"stop":1703034294980,"duration":21316}},{"uid":"ea0903858e21ba70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1279//#testresult/ea0903858e21ba70","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1703024920064,"stop":1703024936739,"duration":16675}},{"uid":"ba35e0e37add90a7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1278//#testresult/ba35e0e37add90a7","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1703024887973,"stop":1703024905373,"duration":17400}},{"uid":"a08ab7b84aaa466b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1276//#testresult/a08ab7b84aaa466b","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702948705096,"stop":1702948723391,"duration":18295}},{"uid":"cd2d73adc68cde59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1275//#testresult/cd2d73adc68cde59","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702862369995,"stop":1702862387025,"duration":17030}},{"uid":"4b8f899f51f6d34d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1274//#testresult/4b8f899f51f6d34d","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702860034038,"stop":1702860050686,"duration":16648}},{"uid":"5920535115f49304","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1272//#testresult/5920535115f49304","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702843590077,"stop":1702843608623,"duration":18546}},{"uid":"961336c7b2464f31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1270//#testresult/961336c7b2464f31","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702809396956,"stop":1702809413902,"duration":16946}},{"uid":"88abe14b1b9f32fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1247//#testresult/88abe14b1b9f32fd","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702657153935,"stop":1702657171959,"duration":18024}},{"uid":"33ffef57b662e32d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1248//#testresult/33ffef57b662e32d","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702657176088,"stop":1702657192942,"duration":16854}},{"uid":"20b6ed18730d9e9d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1244//#testresult/20b6ed18730d9e9d","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702603218414,"stop":1702603235044,"duration":16630}},{"uid":"ad44c6eaae5cfdef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1243//#testresult/ad44c6eaae5cfdef","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702540057359,"stop":1702540074437,"duration":17078}},{"uid":"3785f0d0900fc86e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1241//#testresult/3785f0d0900fc86e","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702516695598,"stop":1702516712573,"duration":16975}},{"uid":"b11fae0ef57cc9af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1238//#testresult/b11fae0ef57cc9af","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702447487181,"stop":1702447503780,"duration":16599}},{"uid":"cb4b750b8c607874","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1236//#testresult/cb4b750b8c607874","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702430351351,"stop":1702430368540,"duration":17189}},{"uid":"bb652de47185345","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1232//#testresult/bb652de47185345","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702366503291,"stop":1702366520323,"duration":17032}},{"uid":"274ebd66630e7bb4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1231//#testresult/274ebd66630e7bb4","status":"failed","statusDetails":"ValueError: unconverted data remains: (Adjusted","time":{"start":1702343978158,"stop":1702343995825,"duration":17667}},{"uid":"ca040e4ebdc05802","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1229//#testresult/ca040e4ebdc05802","status":"passed","time":{"start":1702257554988,"stop":1702257571851,"duration":16863}}]},"tags":[]},"source":"46721742fb4f3a37.json","parameterValues":["MidAndEastAntrimBoroughCouncil","local","http://selenium:4444"]}