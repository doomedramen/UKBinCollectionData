{"uid":"65a15f37bb7895a1","name":"Validate Council Output [BromleyBoroughCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f99c7ea76f01e7f999185ee0dfc6d3a7","time":{"start":1701998349206,"stop":1701998354304,"duration":5098},"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              \n              (In progress)","statusTrace":"fixturefunc = <function scrape_step at 0x7efffb3351c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7efffb1d5f90>, 'council': 'BromleyBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 8 December\\n              \\n              (In progress)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         \nE                         (In progress)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains: \n              \n              (In progress)","statusTrace":"fixturefunc = <function scrape_step at 0x7efffb3351c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7efffb1d5f90>, 'council': 'BromleyBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:75: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:71: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:82: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:69: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:64: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:39: in parse_data\n    next_collection = datetime.strptime(remove_ordinal_indicator_from_date_string(collection_date.replace(',', '')), \"%A %d %B\")\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 8 December\\n              \\n              (In progress)'\nformat = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains: \nE                         \nE                         (In progress)\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council: BromleyBoroughCouncil","time":{"start":1701998349206,"stop":1701998349206,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BromleyBoroughCouncil using None and the None is set","time":{"start":1701998349206,"stop":1701998354304,"duration":5098},"status":"failed","statusMessage":"unconverted data remains: \n              \n              (In progress)","statusTrace":"ValueError: unconverted data remains: \n              \n              (In progress)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1251-432"},{"name":"thread","value":"2757-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BromleyBoroughCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":62,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":64},"items":[{"uid":"d4d83bc350b52eb0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1218//#testresult/d4d83bc350b52eb0","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701990355889,"stop":1701990357240,"duration":1351}},{"uid":"bde3d186acd49e78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1217//#testresult/bde3d186acd49e78","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701990322639,"stop":1701990326285,"duration":3646}},{"uid":"9fe89e418ee1be5f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1215//#testresult/9fe89e418ee1be5f","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701942771590,"stop":1701942772799,"duration":1209}},{"uid":"7c8e775fb98b1794","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1214//#testresult/7c8e775fb98b1794","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701936474724,"stop":1701936476032,"duration":1308}},{"uid":"515020f647d431fc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1213//#testresult/515020f647d431fc","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701936430077,"stop":1701936434867,"duration":4790}},{"uid":"b6ff34532623229c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1211//#testresult/b6ff34532623229c","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701911910538,"stop":1701911915109,"duration":4571}},{"uid":"8ec215b81b707ba3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1209//#testresult/8ec215b81b707ba3","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701904840206,"stop":1701904844712,"duration":4506}},{"uid":"3cf9c2f44fe83435","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1201//#testresult/3cf9c2f44fe83435","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701882505998,"stop":1701882506909,"duration":911}},{"uid":"67673406ca3b00d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1202//#testresult/67673406ca3b00d5","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701882537176,"stop":1701882538418,"duration":1242}},{"uid":"c9c6d655ccd4dcca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1199//#testresult/c9c6d655ccd4dcca","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701825527318,"stop":1701825531692,"duration":4374}},{"uid":"99bd75b272d5005","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1198//#testresult/99bd75b272d5005","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701795511953,"stop":1701795513069,"duration":1116}},{"uid":"15c128bcd5a631dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1197//#testresult/15c128bcd5a631dd","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701795487429,"stop":1701795488444,"duration":1015}},{"uid":"2e1ba02d48161ca3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1193//#testresult/2e1ba02d48161ca3","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701758496107,"stop":1701758497381,"duration":1274}},{"uid":"79d08a54bb1754cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1192//#testresult/79d08a54bb1754cc","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701758476077,"stop":1701758477359,"duration":1282}},{"uid":"609d0a6746e22196","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1191//#testresult/609d0a6746e22196","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701739136464,"stop":1701739139966,"duration":3502}},{"uid":"99e97890978ceef1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1187//#testresult/99e97890978ceef1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701714315606,"stop":1701714320533,"duration":4927}},{"uid":"374639ff1c2e1d0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1184//#testresult/374639ff1c2e1d0f","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701652714783,"stop":1701652716178,"duration":1395}},{"uid":"1e3dc670c44f66ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1183//#testresult/1e3dc670c44f66ce","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1701566510094,"stop":1701566514032,"duration":3938}},{"uid":"6b66ca80690c30d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1182//#testresult/6b66ca80690c30d5","status":"failed","statusDetails":"ConnectionError: Error fetching council data: data absent when page was scraped.","time":{"start":1701479686072,"stop":1701479687185,"duration":1113}},{"uid":"ab9f2290f8a74ad9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1179//#testresult/ab9f2290f8a74ad9","status":"failed","statusDetails":"ValueError: unconverted data remains: \n              \n              (In progress)","time":{"start":1701418940906,"stop":1701418945565,"duration":4659}}]},"tags":[]},"source":"65a15f37bb7895a1.json","parameterValues":["BromleyBoroughCouncil","None","None"]}