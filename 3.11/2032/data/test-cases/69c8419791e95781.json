{"uid":"69c8419791e95781","name":"Validate Council Output [StaffordshireMoorlandsDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"43ce41b46876976a27337fcdb402fec8","time":{"start":1724113306279,"stop":1724113576110,"duration":269831},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55a2d5d1f6aa <unknown>\n#1 0x55a2d59f0600 <unknown>\n#2 0x55a2d59e8631 <unknown>\n#3 0x55a2d59d8839 <unknown>\n#4 0x55a2d59da5c4 <unknown>\n#5 0x55a2d59d8b05 <unknown>\n#6 0x55a2d59d835f <unknown>\n#7 0x55a2d59d8252 <unknown>\n#8 0x55a2d59d656c <unknown>\n#9 0x55a2d59d68ea <unknown>\n#10 0x55a2d59f2f21 <unknown>\n#11 0x55a2d5a81b45 <unknown>\n#12 0x55a2d5a628a2 <unknown>\n#13 0x55a2d5a8104a <unknown>\n#14 0x55a2d5a62643 <unknown>\n#15 0x55a2d5a32d31 <unknown>\n#16 0x55a2d5a3379e <unknown>\n#17 0x55a2d5ce723b <unknown>\n#18 0x55a2d5ceb1d2 <unknown>\n#19 0x55a2d5cd45f5 <unknown>\n#20 0x55a2d5cebd62 <unknown>\n#21 0x55a2d5cb923f <unknown>\n#22 0x55a2d5d0ee48 <unknown>\n#23 0x55a2d5d0f020 <unknown>\n#24 0x55a2d5d1e47c <unknown>\n#25 0x7f6dfbf84a94 <unknown>\n#26 0x7f6dfc011a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f06c8c68400>\nrequest = <FixtureRequest for <Function test_scenario_outline[StaffordshireMoorlandsDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f06c8ae09d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/StaffordshireMoorlandsDistrictCouncil.py:30: in parse_data\n    driver.get(\"https://www.staffsmoorlands.gov.uk/findyourbinday\")\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f06c89262d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55a2d5d1e47c \\\\u003Cunknown>\\\\n#25 0x7f6dfbf84a94 \\\\u003Cunknown>\\\\n#26 0x7f6dfc011a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.99)\nE       Stacktrace:\nE       #0 0x55a2d5d1f6aa <unknown>\nE       #1 0x55a2d59f0600 <unknown>\nE       #2 0x55a2d59e8631 <unknown>\nE       #3 0x55a2d59d8839 <unknown>\nE       #4 0x55a2d59da5c4 <unknown>\nE       #5 0x55a2d59d8b05 <unknown>\nE       #6 0x55a2d59d835f <unknown>\nE       #7 0x55a2d59d8252 <unknown>\nE       #8 0x55a2d59d656c <unknown>\nE       #9 0x55a2d59d68ea <unknown>\nE       #10 0x55a2d59f2f21 <unknown>\nE       #11 0x55a2d5a81b45 <unknown>\nE       #12 0x55a2d5a628a2 <unknown>\nE       #13 0x55a2d5a8104a <unknown>\nE       #14 0x55a2d5a62643 <unknown>\nE       #15 0x55a2d5a32d31 <unknown>\nE       #16 0x55a2d5a3379e <unknown>\nE       #17 0x55a2d5ce723b <unknown>\nE       #18 0x55a2d5ceb1d2 <unknown>\nE       #19 0x55a2d5cd45f5 <unknown>\nE       #20 0x55a2d5cebd62 <unknown>\nE       #21 0x55a2d5cb923f <unknown>\nE       #22 0x55a2d5d0ee48 <unknown>\nE       #23 0x55a2d5d0f020 <unknown>\nE       #24 0x55a2d5d1e47c <unknown>\nE       #25 0x7f6dfbf84a94 <unknown>\nE       #26 0x7f6dfc011a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55a2d5d1f6aa <unknown>\n#1 0x55a2d59f0600 <unknown>\n#2 0x55a2d59e8631 <unknown>\n#3 0x55a2d59d8839 <unknown>\n#4 0x55a2d59da5c4 <unknown>\n#5 0x55a2d59d8b05 <unknown>\n#6 0x55a2d59d835f <unknown>\n#7 0x55a2d59d8252 <unknown>\n#8 0x55a2d59d656c <unknown>\n#9 0x55a2d59d68ea <unknown>\n#10 0x55a2d59f2f21 <unknown>\n#11 0x55a2d5a81b45 <unknown>\n#12 0x55a2d5a628a2 <unknown>\n#13 0x55a2d5a8104a <unknown>\n#14 0x55a2d5a62643 <unknown>\n#15 0x55a2d5a32d31 <unknown>\n#16 0x55a2d5a3379e <unknown>\n#17 0x55a2d5ce723b <unknown>\n#18 0x55a2d5ceb1d2 <unknown>\n#19 0x55a2d5cd45f5 <unknown>\n#20 0x55a2d5cebd62 <unknown>\n#21 0x55a2d5cb923f <unknown>\n#22 0x55a2d5d0ee48 <unknown>\n#23 0x55a2d5d0f020 <unknown>\n#24 0x55a2d5d1e47c <unknown>\n#25 0x7f6dfbf84a94 <unknown>\n#26 0x7f6dfc011a34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f06c8c68400>\nrequest = <FixtureRequest for <Function test_scenario_outline[StaffordshireMoorlandsDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f06c8ae09d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/StaffordshireMoorlandsDistrictCouncil.py:30: in parse_data\n    driver.get(\"https://www.staffsmoorlands.gov.uk/findyourbinday\")\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f06c89262d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55a2d5d1e47c \\\\u003Cunknown>\\\\n#25 0x7f6dfbf84a94 \\\\u003Cunknown>\\\\n#26 0x7f6dfc011a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.99)\nE       Stacktrace:\nE       #0 0x55a2d5d1f6aa <unknown>\nE       #1 0x55a2d59f0600 <unknown>\nE       #2 0x55a2d59e8631 <unknown>\nE       #3 0x55a2d59d8839 <unknown>\nE       #4 0x55a2d59da5c4 <unknown>\nE       #5 0x55a2d59d8b05 <unknown>\nE       #6 0x55a2d59d835f <unknown>\nE       #7 0x55a2d59d8252 <unknown>\nE       #8 0x55a2d59d656c <unknown>\nE       #9 0x55a2d59d68ea <unknown>\nE       #10 0x55a2d59f2f21 <unknown>\nE       #11 0x55a2d5a81b45 <unknown>\nE       #12 0x55a2d5a628a2 <unknown>\nE       #13 0x55a2d5a8104a <unknown>\nE       #14 0x55a2d5a62643 <unknown>\nE       #15 0x55a2d5a32d31 <unknown>\nE       #16 0x55a2d5a3379e <unknown>\nE       #17 0x55a2d5ce723b <unknown>\nE       #18 0x55a2d5ceb1d2 <unknown>\nE       #19 0x55a2d5cd45f5 <unknown>\nE       #20 0x55a2d5cebd62 <unknown>\nE       #21 0x55a2d5cb923f <unknown>\nE       #22 0x55a2d5d0ee48 <unknown>\nE       #23 0x55a2d5d0f020 <unknown>\nE       #24 0x55a2d5d1e47c <unknown>\nE       #25 0x7f6dfbf84a94 <unknown>\nE       #26 0x7f6dfc011a34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1724113306279,"stop":1724113306279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1724113306279,"stop":1724113576110,"duration":269831},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55a2d5d1f6aa <unknown>\n#1 0x55a2d59f0600 <unknown>\n#2 0x55a2d59e8631 <unknown>\n#3 0x55a2d59d8839 <unknown>\n#4 0x55a2d59da5c4 <unknown>\n#5 0x55a2d59d8b05 <unknown>\n#6 0x55a2d59d835f <unknown>\n#7 0x55a2d59d8252 <unknown>\n#8 0x55a2d59d656c <unknown>\n#9 0x55a2d59d68ea <unknown>\n#10 0x55a2d59f2f21 <unknown>\n#11 0x55a2d5a81b45 <unknown>\n#12 0x55a2d5a628a2 <unknown>\n#13 0x55a2d5a8104a <unknown>\n#14 0x55a2d5a62643 <unknown>\n#15 0x55a2d5a32d31 <unknown>\n#16 0x55a2d5a3379e <unknown>\n#17 0x55a2d5ce723b <unknown>\n#18 0x55a2d5ceb1d2 <unknown>\n#19 0x55a2d5cd45f5 <unknown>\n#20 0x55a2d5cebd62 <unknown>\n#21 0x55a2d5cb923f <unknown>\n#22 0x55a2d5d0ee48 <unknown>\n#23 0x55a2d5d0f020 <unknown>\n#24 0x55a2d5d1e47c <unknown>\n#25 0x7f6dfbf84a94 <unknown>\n#26 0x7f6dfc011a34 __clone\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.99)\nStacktrace:\n#0 0x55a2d5d1f6aa <unknown>\n#1 0x55a2d59f0600 <unknown>\n#2 0x55a2d59e8631 <unknown>\n#3 0x55a2d59d8839 <unknown>\n#4 0x55a2d59da5c4 <unknown>\n#5 0x55a2d59d8b05 <unknown>\n#6 0x55a2d59d835f <unknown>\n#7 0x55a2d59d8252 <unknown>\n#8 0x55a2d59d656c <unknown>\n#9 0x55a2d59d68ea <unknown>\n#10 0x55a2d59f2f21 <unknown>\n#11 0x55a2d5a81b45 <unknown>\n#12 0x55a2d5a628a2 <unknown>\n#13 0x55a2d5a8104a <unknown>\n#14 0x55a2d5a62643 <unknown>\n#15 0x55a2d5a32d31 <unknown>\n#16 0x55a2d5a3379e <unknown>\n#17 0x55a2d5ce723b <unknown>\n#18 0x55a2d5ceb1d2 <unknown>\n#19 0x55a2d5cd45f5 <unknown>\n#20 0x55a2d5cebd62 <unknown>\n#21 0x55a2d5cb923f <unknown>\n#22 0x55a2d5d0ee48 <unknown>\n#23 0x55a2d5d0f020 <unknown>\n#24 0x55a2d5d1e47c <unknown>\n#25 0x7f6dfbf84a94 <unknown>\n#26 0x7f6dfc011a34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"abf2ffb8df327902","name":"stdout","source":"abf2ffb8df327902.txt","type":"text/plain","size":64}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1208-111"},{"name":"thread","value":"2836-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StaffordshireMoorlandsDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":128,"unknown":0,"total":136},"items":[{"uid":"c0ebb6449417e29c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2031//#testresult/c0ebb6449417e29c","status":"passed","time":{"start":1724026852559,"stop":1724027003327,"duration":150768}},{"uid":"dd806e5f32f489f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2030//#testresult/dd806e5f32f489f2","status":"passed","time":{"start":1723940513154,"stop":1723940652295,"duration":139141}},{"uid":"a427b839a7c5ad26","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2029//#testresult/a427b839a7c5ad26","status":"passed","time":{"start":1723853992551,"stop":1723854258247,"duration":265696}},{"uid":"b9eb1a7c857b41e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2028//#testresult/b9eb1a7c857b41e5","status":"passed","time":{"start":1723767667533,"stop":1723767812339,"duration":144806}},{"uid":"14112a3bebe3c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2027//#testresult/14112a3bebe3c3","status":"passed","time":{"start":1723680793663,"stop":1723680941704,"duration":148041}},{"uid":"84ea4120fa22cffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2026//#testresult/84ea4120fa22cffc","status":"passed","time":{"start":1723594913619,"stop":1723595051635,"duration":138016}},{"uid":"4d91f4259ccc1be5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2025//#testresult/4d91f4259ccc1be5","status":"passed","time":{"start":1723508636391,"stop":1723508788063,"duration":151672}},{"uid":"f9fd4db677163a93","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2024//#testresult/f9fd4db677163a93","status":"passed","time":{"start":1723422261512,"stop":1723422414878,"duration":153366}},{"uid":"f09c88801a64652c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2022//#testresult/f09c88801a64652c","status":"passed","time":{"start":1723335832062,"stop":1723335975194,"duration":143132}},{"uid":"1032f3d2f025bf52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2020//#testresult/1032f3d2f025bf52","status":"passed","time":{"start":1723249441039,"stop":1723249584683,"duration":143644}},{"uid":"fcc5d4565c814355","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2019//#testresult/fcc5d4565c814355","status":"passed","time":{"start":1723163034873,"stop":1723163187335,"duration":152462}},{"uid":"e3f5ad92ac8c635d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2014//#testresult/e3f5ad92ac8c635d","status":"passed","time":{"start":1723076567509,"stop":1723076709918,"duration":142409}},{"uid":"63f2f56432ffc7e4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2012//#testresult/63f2f56432ffc7e4","status":"passed","time":{"start":1722990001169,"stop":1722990263439,"duration":262270}},{"uid":"b294061b48865941","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2007//#testresult/b294061b48865941","status":"passed","time":{"start":1722903754428,"stop":1722903915524,"duration":161096}},{"uid":"38ed719815336725","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2006//#testresult/38ed719815336725","status":"passed","time":{"start":1722817510219,"stop":1722817771984,"duration":261765}},{"uid":"cda8bb9fdf27054b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2005//#testresult/cda8bb9fdf27054b","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1722730843588,"stop":1722731113262,"duration":269674}},{"uid":"a9780ed9d9fd8d88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2004//#testresult/a9780ed9d9fd8d88","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'type': 'array', 'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1}\n\nOn instance['bins']:\n    []","time":{"start":1722644479130,"stop":1722644791541,"duration":312411}},{"uid":"5cf18c076b37fffe","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2003//#testresult/5cf18c076b37fffe","status":"passed","time":{"start":1722558068783,"stop":1722558341565,"duration":272782}},{"uid":"e3820916b05efa47","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2002//#testresult/e3820916b05efa47","status":"passed","time":{"start":1722471516452,"stop":1722471795845,"duration":279393}},{"uid":"9f9c2cafe7eceb5a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/1998//#testresult/9f9c2cafe7eceb5a","status":"passed","time":{"start":1722385198347,"stop":1722385324265,"duration":125918}}]},"tags":[]},"source":"69c8419791e95781.json","parameterValues":["StaffordshireMoorlandsDistrictCouncil"]}