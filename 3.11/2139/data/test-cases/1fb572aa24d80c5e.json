{"uid":"1fb572aa24d80c5e","name":"Validate Council Output [BarnetCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cae1315fb7beebce62becdf5abb57d74","time":{"start":1727827315615,"stop":1727827381788,"duration":66173},"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'addr_option' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7ff630163380>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnetCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ff62ffe1810>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BarnetCouncil.CouncilClass object at 0x7ff62fe86c90>\npage = 'https://account.barnet.gov.uk/Forms/Home/Redirector/Index/?id=6a2ac067-3322-46e5-96e4-16c0c214454a&mod=OA&casetype=BAR&formname=BNTCOLDATE'\nkwargs = {'council_module_str': 'BarnetCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"dc04ddac86104933c9ca91bd90a7eb70\")>\nuser_postcode = 'HA8 7NA'\nuser_paon = 'HA8 7NA, 2, MANOR PARK GARDENS, EDGWARE, BARNET', headless = True\nweb_driver = 'http://localhost:4444'\naccept_cookies = <selenium.webdriver.remote.webelement.WebElement (session=\"dc04ddac86104933c9ca91bd90a7eb70\", element=\"f.B0E40DD1EBC5F80DC492001112929B14.d.2E00D3BDE025D19847B1B3BB0CFBB0E5.e.15\")>\naccept_cookies_submit = <selenium.webdriver.remote.webelement.WebElement (session=\"dc04ddac86104933c9ca91bd90a7eb70\", element=\"f.B0E40DD1EBC5F80DC492001112929B14.d.2E00D3BDE025D19847B1B3BB0CFBB0E5.e.22\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        driver = None\n        try:\n            user_postcode = kwargs.get(\"postcode\")\n            if not user_postcode:\n                raise ValueError(\"No postcode provided.\")\n            check_postcode(user_postcode)\n    \n            user_paon = kwargs.get(\"paon\")\n            check_paon(user_paon)\n            headless = kwargs.get(\"headless\")\n            web_driver = kwargs.get(\"web_driver\")\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            page = \"https://account.barnet.gov.uk/Forms/Home/Redirector/Index/?id=6a2ac067-3322-46e5-96e4-16c0c214454a&mod=OA&casetype=BAR&formname=BNTCOLDATE\"\n            driver.get(page)\n    \n            time.sleep(5)\n    \n            try:\n                accept_cookies = WebDriverWait(driver, timeout=10).until(\n                    EC.presence_of_element_located((By.ID, \"epdagree\"))\n                )\n                accept_cookies.click()\n                accept_cookies_submit = WebDriverWait(driver, timeout=10).until(\n                    EC.presence_of_element_located((By.ID, \"epdsubmit\"))\n                )\n                accept_cookies_submit.click()\n            except:\n                print(\n                    \"Accept cookies banner not found or clickable within the specified time.\"\n                )\n                pass\n    \n            postcode_input = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.CSS_SELECTOR, '[aria-label=\"Postcode\"]')\n                )\n            )\n    \n            postcode_input.send_keys(user_postcode)\n    \n            find_address_button = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.CSS_SELECTOR, '[value=\"Find address\"]')\n                )\n            )\n            find_address_button.click()\n    \n            time.sleep(15)\n            # Wait for address box to be visible\n            select_address_input = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (\n                        By.ID,\n                        \"MainContent_CUSTOM_FIELD_808562d4b07f437ea751317cabd19d9eeaf8742f49cb4f7fa9bef99405b859f2\",\n                    )\n                )\n            )\n    \n            # Select address based\n            select = Select(select_address_input)\n            addr_label = f\"{user_postcode}, {user_paon},\"\n            for addr_option in select.options:\n                option_name = addr_option.accessible_name[0 : len(addr_label)]\n                if option_name == addr_label:\n                    break\n>           select.select_by_value(addr_option.text)\nE           UnboundLocalError: cannot access local variable 'addr_option' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/BarnetCouncil.py:126: UnboundLocalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'addr_option' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7ff630163380>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnetCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ff62ffe1810>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BarnetCouncil.CouncilClass object at 0x7ff62fe86c90>\npage = 'https://account.barnet.gov.uk/Forms/Home/Redirector/Index/?id=6a2ac067-3322-46e5-96e4-16c0c214454a&mod=OA&casetype=BAR&formname=BNTCOLDATE'\nkwargs = {'council_module_str': 'BarnetCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"dc04ddac86104933c9ca91bd90a7eb70\")>\nuser_postcode = 'HA8 7NA'\nuser_paon = 'HA8 7NA, 2, MANOR PARK GARDENS, EDGWARE, BARNET', headless = True\nweb_driver = 'http://localhost:4444'\naccept_cookies = <selenium.webdriver.remote.webelement.WebElement (session=\"dc04ddac86104933c9ca91bd90a7eb70\", element=\"f.B0E40DD1EBC5F80DC492001112929B14.d.2E00D3BDE025D19847B1B3BB0CFBB0E5.e.15\")>\naccept_cookies_submit = <selenium.webdriver.remote.webelement.WebElement (session=\"dc04ddac86104933c9ca91bd90a7eb70\", element=\"f.B0E40DD1EBC5F80DC492001112929B14.d.2E00D3BDE025D19847B1B3BB0CFBB0E5.e.22\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        driver = None\n        try:\n            user_postcode = kwargs.get(\"postcode\")\n            if not user_postcode:\n                raise ValueError(\"No postcode provided.\")\n            check_postcode(user_postcode)\n    \n            user_paon = kwargs.get(\"paon\")\n            check_paon(user_paon)\n            headless = kwargs.get(\"headless\")\n            web_driver = kwargs.get(\"web_driver\")\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            page = \"https://account.barnet.gov.uk/Forms/Home/Redirector/Index/?id=6a2ac067-3322-46e5-96e4-16c0c214454a&mod=OA&casetype=BAR&formname=BNTCOLDATE\"\n            driver.get(page)\n    \n            time.sleep(5)\n    \n            try:\n                accept_cookies = WebDriverWait(driver, timeout=10).until(\n                    EC.presence_of_element_located((By.ID, \"epdagree\"))\n                )\n                accept_cookies.click()\n                accept_cookies_submit = WebDriverWait(driver, timeout=10).until(\n                    EC.presence_of_element_located((By.ID, \"epdsubmit\"))\n                )\n                accept_cookies_submit.click()\n            except:\n                print(\n                    \"Accept cookies banner not found or clickable within the specified time.\"\n                )\n                pass\n    \n            postcode_input = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.CSS_SELECTOR, '[aria-label=\"Postcode\"]')\n                )\n            )\n    \n            postcode_input.send_keys(user_postcode)\n    \n            find_address_button = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.CSS_SELECTOR, '[value=\"Find address\"]')\n                )\n            )\n            find_address_button.click()\n    \n            time.sleep(15)\n            # Wait for address box to be visible\n            select_address_input = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (\n                        By.ID,\n                        \"MainContent_CUSTOM_FIELD_808562d4b07f437ea751317cabd19d9eeaf8742f49cb4f7fa9bef99405b859f2\",\n                    )\n                )\n            )\n    \n            # Select address based\n            select = Select(select_address_input)\n            addr_label = f\"{user_postcode}, {user_paon},\"\n            for addr_option in select.options:\n                option_name = addr_option.accessible_name[0 : len(addr_label)]\n                if option_name == addr_label:\n                    break\n>           select.select_by_value(addr_option.text)\nE           UnboundLocalError: cannot access local variable 'addr_option' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/BarnetCouncil.py:126: UnboundLocalError","steps":[{"name":"Given the council","time":{"start":1727827315615,"stop":1727827315616,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1727827315616,"stop":1727827381788,"duration":66172},"status":"failed","statusMessage":"cannot access local variable 'addr_option' where it is not associated with a value","statusTrace":"UnboundLocalError: cannot access local variable 'addr_option' where it is not associated with a value\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"5f64788157996b5e","name":"stdout","source":"5f64788157996b5e.txt","type":"text/plain","size":142}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az881-57"},{"name":"thread","value":"2752-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnetCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":121,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":160},"items":[{"uid":"9d1d604c17a70463","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/9d1d604c17a70463","status":"failed","statusDetails":"UnboundLocalError: cannot access local variable 'addr_option' where it is not associated with a value","time":{"start":1727740922398,"stop":1727740993333,"duration":70935}},{"uid":"d7dd019242688911","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2137//#testresult/d7dd019242688911","status":"passed","time":{"start":1727654502191,"stop":1727654604347,"duration":102156}},{"uid":"23e570afecb35ca2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2136//#testresult/23e570afecb35ca2","status":"passed","time":{"start":1727568114997,"stop":1727568198853,"duration":83856}},{"uid":"eff0efe2cfa017d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2135//#testresult/eff0efe2cfa017d9","status":"passed","time":{"start":1727481738632,"stop":1727481857878,"duration":119246}},{"uid":"311e3cc031704528","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2131//#testresult/311e3cc031704528","status":"passed","time":{"start":1727421666082,"stop":1727421750821,"duration":84739}},{"uid":"19ac21c2e1236c6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2130//#testresult/19ac21c2e1236c6d","status":"passed","time":{"start":1727395340767,"stop":1727395422712,"duration":81945}},{"uid":"c4ee3f373ca3f33","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2129//#testresult/c4ee3f373ca3f33","status":"passed","time":{"start":1727308921430,"stop":1727309009281,"duration":87851}},{"uid":"ec17bdd33b090816","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2128//#testresult/ec17bdd33b090816","status":"passed","time":{"start":1727222521984,"stop":1727222604894,"duration":82910}},{"uid":"ec67c4113fd35fca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2127//#testresult/ec67c4113fd35fca","status":"passed","time":{"start":1727136137143,"stop":1727136238289,"duration":101146}},{"uid":"8c72a1ea0a34125f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2126//#testresult/8c72a1ea0a34125f","status":"passed","time":{"start":1727049713565,"stop":1727049806193,"duration":92628}},{"uid":"f03ebca60f227834","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2125//#testresult/f03ebca60f227834","status":"passed","time":{"start":1726963345905,"stop":1726963432295,"duration":86390}},{"uid":"1b6474fc283df788","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2124//#testresult/1b6474fc283df788","status":"passed","time":{"start":1726876968564,"stop":1726877050256,"duration":81692}},{"uid":"38f98ad8aa552048","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2123//#testresult/38f98ad8aa552048","status":"passed","time":{"start":1726790568723,"stop":1726790650393,"duration":81670}},{"uid":"8e14b8e62882e92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2122//#testresult/8e14b8e62882e92","status":"passed","time":{"start":1726704220722,"stop":1726704301129,"duration":80407}},{"uid":"2ee5c6a16eae2027","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2121//#testresult/2ee5c6a16eae2027","status":"passed","time":{"start":1726617765846,"stop":1726617843990,"duration":78144}},{"uid":"16fab84d0141eb4f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2120//#testresult/16fab84d0141eb4f","status":"passed","time":{"start":1726531358751,"stop":1726531483422,"duration":124671}},{"uid":"c74b8a348acdcde","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2116//#testresult/c74b8a348acdcde","status":"passed","time":{"start":1726444946271,"stop":1726445031587,"duration":85316}},{"uid":"b2c547836534151","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2115//#testresult/b2c547836534151","status":"passed","time":{"start":1726358514901,"stop":1726358598382,"duration":83481}},{"uid":"f477ad004362dc66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2114//#testresult/f477ad004362dc66","status":"passed","time":{"start":1726272135451,"stop":1726272217425,"duration":81974}},{"uid":"6af09f4d7cdd441d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2113//#testresult/6af09f4d7cdd441d","status":"passed","time":{"start":1726185722172,"stop":1726185864254,"duration":142082}}]},"tags":[]},"source":"1fb572aa24d80c5e.json","parameterValues":["BarnetCouncil"]}